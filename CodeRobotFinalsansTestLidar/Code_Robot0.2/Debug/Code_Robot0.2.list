
Code_Robot0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d960  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800db40  0800db40  0000eb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e658  0800e658  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e658  0800e658  0000f658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e660  0800e660  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e660  0800e660  0000f660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e664  0800e664  0000f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e668  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005474  200001d8  0800e840  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000564c  0800e840  0001064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236a2  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005088  00000000  00000000  000338aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e6  00000000  00000000  0003a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002414b  00000000  00000000  0003bffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268e0  00000000  00000000  00060149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7750  00000000  00000000  00086a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000910c  00000000  00000000  0015e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001672c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800db28 	.word	0x0800db28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800db28 	.word	0x0800db28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <ADXL343_initialization>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param dev: Pointeur vers la structure ADXL343 contenant les informations du périphérique.
 * @return 0 si l'initialisation est réussie, 255 sinon.
 */
uint8_t ADXL343_initialization(SPI_HandleTypeDef *hspi, ADXL343 *dev)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    dev->hspiHandle = hspi;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
    uint8_t regAddr = ADXL343_REG_DEVICE_ID | 0x80; // Lecture du registre DEVICE_ID
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	737b      	strb	r3, [r7, #13]
    uint8_t regData = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status;

    printf("Starting ADXL343 initialization...\r\n");
 8000f46:	482a      	ldr	r0, [pc, #168]	@ (8000ff0 <ADXL343_initialization+0xc8>)
 8000f48:	f00a fe7e 	bl	800bc48 <puts>

    // Lecture du DEVICE_ID
    ADXL_CS_LOW();
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4828      	ldr	r0, [pc, #160]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f52:	f003 f8f3 	bl	800413c <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 8000f56:	f107 010d 	add.w	r1, r7, #13
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	2201      	movs	r2, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f004 ffea 	bl	8005f3a <HAL_SPI_Transmit>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <ADXL343_initialization+0x5c>
        printf("Erreur SPI lors de l'envoi de l'adresse.\r\n");
 8000f70:	4821      	ldr	r0, [pc, #132]	@ (8000ff8 <ADXL343_initialization+0xd0>)
 8000f72:	f00a fe69 	bl	800bc48 <puts>
        ADXL_CS_HIGH();
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	481e      	ldr	r0, [pc, #120]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f7c:	f003 f8de 	bl	800413c <HAL_GPIO_WritePin>
        return 255; // Erreur
 8000f80:	23ff      	movs	r3, #255	@ 0xff
 8000f82:	e030      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }
    status = HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 8000f84:	f107 010c 	add.w	r1, r7, #12
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f005 f949 	bl	8006226 <HAL_SPI_Receive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
    ADXL_CS_HIGH();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4815      	ldr	r0, [pc, #84]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f9e:	f003 f8cd 	bl	800413c <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <ADXL343_initialization+0x8a>
        printf("Erreur SPI lors de la réception des données.\r\n");
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <ADXL343_initialization+0xd4>)
 8000faa:	f00a fe4d 	bl	800bc48 <puts>
        return 255; // Erreur
 8000fae:	23ff      	movs	r3, #255	@ 0xff
 8000fb0:	e019      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }

    // Vérification du DEVICE_ID
    if (regData != ADXL343_DEVICE_ID) {
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	22e5      	movs	r2, #229	@ 0xe5
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d006      	beq.n	8000fc8 <ADXL343_initialization+0xa0>
        printf("Erreur SPI : Device ID attendu 0xE5, reçu 0x%02X\r\n", regData);
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	@ (8001000 <ADXL343_initialization+0xd8>)
 8000fc0:	f00a fdda 	bl	800bb78 <iprintf>
        return 255; // Erreur
 8000fc4:	23ff      	movs	r3, #255	@ 0xff
 8000fc6:	e00e      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }

    printf("ADXL343 détecté avec succès : Device ID = 0x%02X\r\n", regData);
 8000fc8:	7b3b      	ldrb	r3, [r7, #12]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <ADXL343_initialization+0xdc>)
 8000fce:	f00a fdd3 	bl	800bb78 <iprintf>

    // Configurer le mode mesure
    uint8_t powerCtl = 0x08; // Activer le mode mesure
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(hspi, ADXL343_REG_POWER_CTL, powerCtl);
 8000fd6:	232d      	movs	r3, #45	@ 0x2d
 8000fd8:	4619      	mov	r1, r3
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f812 	bl	8001008 <ADXL343_write_register>

    return 0; // Initialisation réussie
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800db40 	.word	0x0800db40
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	0800db64 	.word	0x0800db64
 8000ffc:	0800db90 	.word	0x0800db90
 8001000:	0800dbc0 	.word	0x0800dbc0
 8001004:	0800dbf4 	.word	0x0800dbf4

08001008 <ADXL343_write_register>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param regAddr: Adresse du registre où écrire.
 * @param regData: Valeur à écrire dans le registre.
 */
void ADXL343_write_register(SPI_HandleTypeDef *hspi, uint8_t regAddr, uint8_t regData)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = regAddr & 0x7F; // Assurez-vous que le bit MSB est 0 pour l'écriture
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800101e:	b2db      	uxtb	r3, r3
 8001020:	73bb      	strb	r3, [r7, #14]
    ADXL_CS_LOW();
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4819      	ldr	r0, [pc, #100]	@ (800108c <ADXL343_write_register+0x84>)
 8001028:	f003 f888 	bl	800413c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 800102c:	f107 010e 	add.w	r1, r7, #14
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2201      	movs	r2, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f004 ff7f 	bl	8005f3a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &regData, 1, HAL_MAX_DELAY);
 800103c:	1cb9      	adds	r1, r7, #2
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2201      	movs	r2, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f004 ff78 	bl	8005f3a <HAL_SPI_Transmit>
    ADXL_CS_HIGH();
 800104a:	2201      	movs	r2, #1
 800104c:	2110      	movs	r1, #16
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <ADXL343_write_register+0x84>)
 8001050:	f003 f874 	bl	800413c <HAL_GPIO_WritePin>

    // Vérification de l'écriture
    uint8_t verify = ADXL343_read_register(hspi, regAddr);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	4619      	mov	r1, r3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f81d 	bl	8001098 <ADXL343_read_register>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
    if (verify != regData) {
 8001062:	78bb      	ldrb	r3, [r7, #2]
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	429a      	cmp	r2, r3
 8001068:	d006      	beq.n	8001078 <ADXL343_write_register+0x70>
        printf("Erreur : le registre 0x%02X contient 0x%02X (attendu 0x%02X)\r\n", regAddr, verify, regData);
 800106a:	78f9      	ldrb	r1, [r7, #3]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <ADXL343_write_register+0x88>)
 8001072:	f00a fd81 	bl	800bb78 <iprintf>
    } else {
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
    }
}
 8001076:	e005      	b.n	8001084 <ADXL343_write_register+0x7c>
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	78ba      	ldrb	r2, [r7, #2]
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <ADXL343_write_register+0x8c>)
 8001080:	f00a fd7a 	bl	800bb78 <iprintf>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000800 	.word	0x48000800
 8001090:	0800dc2c 	.word	0x0800dc2c
 8001094:	0800dc6c 	.word	0x0800dc6c

08001098 <ADXL343_read_register>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param regAddr: Adresse du registre à lire.
 * @return La valeur lue depuis le registre.
 */
uint8_t ADXL343_read_register(SPI_HandleTypeDef *hspi, uint8_t regAddr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);  // Mettre NSS à 0 pour commencer la communication SPI
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <ADXL343_read_register+0x54>)
 80010aa:	f003 f847 	bl	800413c <HAL_GPIO_WritePin>
	regAddr |= 0x80;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 80010b8:	1cf9      	adds	r1, r7, #3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	2201      	movs	r2, #1
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f004 ff3a 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 80010c6:	f107 010f 	add.w	r1, r7, #15
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2201      	movs	r2, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f005 f8a8 	bl	8006226 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);    // Mettre NSS à 1 pour terminer la communication SPI
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <ADXL343_read_register+0x54>)
 80010dc:	f003 f82e 	bl	800413c <HAL_GPIO_WritePin>
	return regData;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000800 	.word	0x48000800

080010f0 <ADXL343_set_tap_parameters>:
 * @param threshold: Seuil de détection du tapotement.
 * @param duration: Durée minimale pour considérer un tapotement valide.
 * @param latency: Délai pour un double tapotement.
 * @param window: Fenêtre de temps pour le double tapotement.
 */
void ADXL343_set_tap_parameters(ADXL343 *dev, uint8_t threshold, uint8_t duration, uint8_t latency, uint8_t window) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	70fb      	strb	r3, [r7, #3]
 8001102:	460b      	mov	r3, r1
 8001104:	70bb      	strb	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2110      	movs	r1, #16
 800110e:	4835      	ldr	r0, [pc, #212]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001110:	f003 f814 	bl	800413c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_THRESH_TAP, 1, HAL_MAX_DELAY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	2201      	movs	r2, #1
 800111e:	4932      	ldr	r1, [pc, #200]	@ (80011e8 <ADXL343_set_tap_parameters+0xf8>)
 8001120:	f004 ff0b 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &threshold, 1, HAL_MAX_DELAY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	1cf9      	adds	r1, r7, #3
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	f004 ff03 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2110      	movs	r1, #16
 8001138:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 800113a:	f002 ffff 	bl	800413c <HAL_GPIO_WritePin>

	// Configurer la durée du tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	4828      	ldr	r0, [pc, #160]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001144:	f002 fffa 	bl	800413c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_DUR, 1, HAL_MAX_DELAY);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2201      	movs	r2, #1
 8001152:	4926      	ldr	r1, [pc, #152]	@ (80011ec <ADXL343_set_tap_parameters+0xfc>)
 8001154:	f004 fef1 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &duration, 1, HAL_MAX_DELAY);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	1cb9      	adds	r1, r7, #2
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	f004 fee9 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	481d      	ldr	r0, [pc, #116]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 800116e:	f002 ffe5 	bl	800413c <HAL_GPIO_WritePin>

	// Configurer la latence pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001178:	f002 ffe0 	bl	800413c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_LATENT, 1, HAL_MAX_DELAY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2201      	movs	r2, #1
 8001186:	491a      	ldr	r1, [pc, #104]	@ (80011f0 <ADXL343_set_tap_parameters+0x100>)
 8001188:	f004 fed7 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &latency, 1, HAL_MAX_DELAY);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	1c79      	adds	r1, r7, #1
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	2201      	movs	r2, #1
 8001198:	f004 fecf 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011a2:	f002 ffcb 	bl	800413c <HAL_GPIO_WritePin>

	// Configurer la fenêtre pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011ac:	f002 ffc6 	bl	800413c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_WINDOW, 1, HAL_MAX_DELAY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	2201      	movs	r2, #1
 80011ba:	490e      	ldr	r1, [pc, #56]	@ (80011f4 <ADXL343_set_tap_parameters+0x104>)
 80011bc:	f004 febd 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &window, 1, HAL_MAX_DELAY);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	f107 0110 	add.w	r1, r7, #16
 80011ce:	f004 feb4 	bl	8005f3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011d8:	f002 ffb0 	bl	800413c <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000800 	.word	0x48000800
 80011e8:	0800e241 	.word	0x0800e241
 80011ec:	0800e242 	.word	0x0800e242
 80011f0:	0800e243 	.word	0x0800e243
 80011f4:	0800e244 	.word	0x0800e244

080011f8 <ADXL343_EnableTapInterrupts>:

	printf("Valeur du registre INT_MAP après écriture: 0x%02X\n", int_map_read);
}*/

void ADXL343_EnableTapInterrupts(ADXL343 *dev)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    // Activer les interruptions SINGLE_TAP
    uint8_t intEnable = 0x40;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE, intEnable);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	212e      	movs	r1, #46	@ 0x2e
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fefb 	bl	8001008 <ADXL343_write_register>

    // Configurer les axes pour les tapotements
    uint8_t tapAxes = 0x07;
 8001212:	2307      	movs	r3, #7
 8001214:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_TAP_AXES, tapAxes);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	212a      	movs	r1, #42	@ 0x2a
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fef2 	bl	8001008 <ADXL343_write_register>

    // Vérification
    uint8_t intEnableRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	222e      	movs	r2, #46	@ 0x2e
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff33 	bl	8001098 <ADXL343_read_register>
 8001232:	4603      	mov	r3, r0
 8001234:	737b      	strb	r3, [r7, #13]
    uint8_t tapAxesRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_TAP_AXES);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	222a      	movs	r2, #42	@ 0x2a
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff2a 	bl	8001098 <ADXL343_read_register>
 8001244:	4603      	mov	r3, r0
 8001246:	733b      	strb	r3, [r7, #12]

    printf("INT_ENABLE configuré : 0x%02X\r\n", intEnableRead);
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <ADXL343_EnableTapInterrupts+0x6c>)
 800124e:	f00a fc93 	bl	800bb78 <iprintf>
    printf("TAP_AXES configuré : 0x%02X\r\n", tapAxesRead);
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <ADXL343_EnableTapInterrupts+0x70>)
 8001258:	f00a fc8e 	bl	800bb78 <iprintf>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800dd0c 	.word	0x0800dd0c
 8001268:	0800dd30 	.word	0x0800dd30

0800126c <ADXL343_check_tap>:
/**
 * @brief Vérifie si un "Single Tap" a été détecté.
 * @param dev: Pointeur vers la structure ADXL343 contenant les informations du périphérique.
 * @return 1 si un tapotement est détecté, 0 sinon.
 */
int ADXL343_check_tap(ADXL343 *dev) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint8_t intSource = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2230      	movs	r2, #48	@ 0x30
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff0b 	bl	8001098 <ADXL343_read_register>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]

    // Si un "Single Tap" est détecté
    if (intSource & 0x40) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <ADXL343_check_tap+0x3c>
        printf("Single Tap detected!\n");
 8001290:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <ADXL343_check_tap+0x48>)
 8001292:	f00a fcd9 	bl	800bc48 <puts>

        // Réinitialiser le registre d'interruption pour éviter des lectures multiples
        ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2230      	movs	r2, #48	@ 0x30
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fefa 	bl	8001098 <ADXL343_read_register>

        return 1; // "Tap" détecté
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <ADXL343_check_tap+0x3e>
    }

    // Aucun "Tap" détecté
    return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800dd50 	.word	0x0800dd50

080012b8 <ADXL343_SetDataFormat>:
 * @brief Configure le format des données de l'ADXL343.
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param range: Plage de mesure (par exemple, ±2g, ±4g, etc.).
 */
void ADXL343_SetDataFormat(SPI_HandleTypeDef *hspi, uint8_t range)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
    uint8_t dataFormat = 0x08 | (range & 0x03); // Activer FULL_RES et définir la plage
 80012c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(hspi, ADXL343_REG_DATA_FORMAT, dataFormat);
 80012d6:	2131      	movs	r1, #49	@ 0x31
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	461a      	mov	r2, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fe93 	bl	8001008 <ADXL343_write_register>

    printf("DATA_FORMAT configuré : 0x%02X\r\n", ADXL343_read_register(hspi, ADXL343_REG_DATA_FORMAT));
 80012e2:	2331      	movs	r3, #49	@ 0x31
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fed6 	bl	8001098 <ADXL343_read_register>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <ADXL343_SetDataFormat+0x48>)
 80012f2:	f00a fc41 	bl	800bb78 <iprintf>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	0800dd68 	.word	0x0800dd68

08001304 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8001316:	232d      	movs	r3, #45	@ 0x2d
 8001318:	73bb      	strb	r3, [r7, #14]
 800131a:	e011      	b.n	8001340 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	b299      	uxth	r1, r3
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	3b2d      	subs	r3, #45	@ 0x2d
 8001324:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <VL53L1X_SensorInit+0xd4>)
 8001326:	5cd2      	ldrb	r2, [r2, r3]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 f84a 	bl	80033c4 <VL53L1_WrByte>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4313      	orrs	r3, r2
 8001338:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	3301      	adds	r3, #1
 800133e:	73bb      	strb	r3, [r7, #14]
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2b87      	cmp	r3, #135	@ 0x87
 8001344:	d9ea      	bls.n	800131c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f8c1 	bl	80014d0 <VL53L1X_StartRanging>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4313      	orrs	r3, r2
 8001356:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800135c:	e00b      	b.n	8001376 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800135e:	f107 020d 	add.w	r2, r7, #13
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f8e2 	bl	8001530 <VL53L1X_CheckForDataReady>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4313      	orrs	r3, r2
 8001374:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82c 	bl	80013dc <VL53L1X_ClearInterrupt>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	4313      	orrs	r3, r2
 800138c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f8b5 	bl	8001500 <VL53L1X_StopRanging>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	4313      	orrs	r3, r2
 800139e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2209      	movs	r2, #9
 80013a4:	2108      	movs	r1, #8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 f80c 	bl	80033c4 <VL53L1_WrByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	2200      	movs	r2, #0
 80013ba:	210b      	movs	r1, #11
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f801 	bl	80033c4 <VL53L1_WrByte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	73fb      	strb	r3, [r7, #15]
	return status;
 80013cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800e248 	.word	0x0800e248

080013dc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2201      	movs	r2, #1
 80013ee:	2186      	movs	r1, #134	@ 0x86
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 ffe7 	bl	80033c4 <VL53L1_WrByte>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	73fb      	strb	r3, [r7, #15]
	return status;
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <VL53L1X_SetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_SetInterruptPolarity(uint16_t dev, uint8_t NewPolarity)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	717b      	strb	r3, [r7, #5]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8001420:	f107 020e 	add.w	r2, r7, #14
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	2130      	movs	r1, #48	@ 0x30
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff59 	bl	80032e0 <VL53L1_RdByte>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4313      	orrs	r3, r2
 8001436:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0xEF;
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	f023 0310 	bic.w	r3, r3, #16
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73bb      	strb	r3, [r7, #14]
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <VL53L1X_SetInterruptPolarity+0x44>
 800144c:	2210      	movs	r2, #16
 800144e:	e000      	b.n	8001452 <VL53L1X_SetInterruptPolarity+0x46>
 8001450:	2200      	movs	r2, #0
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b25b      	sxtb	r3, r3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2130      	movs	r1, #48	@ 0x30
 8001460:	4618      	mov	r0, r3
 8001462:	f001 ffaf 	bl	80033c4 <VL53L1_WrByte>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4313      	orrs	r3, r2
 800146e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <VL53L1X_GetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800148c:	f107 020e 	add.w	r2, r7, #14
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2130      	movs	r1, #48	@ 0x30
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff23 	bl	80032e0 <VL53L1_RdByte>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
	return status;
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	2187      	movs	r1, #135	@ 0x87
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 ff6d 	bl	80033c4 <VL53L1_WrByte>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2200      	movs	r2, #0
 8001512:	2187      	movs	r1, #135	@ 0x87
 8001514:	4618      	mov	r0, r3
 8001516:	f001 ff55 	bl	80033c4 <VL53L1_WrByte>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	4313      	orrs	r3, r2
 8001522:	73fb      	strb	r3, [r7, #15]
	return status;
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8001540:	f107 020d 	add.w	r2, r7, #13
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff97 	bl	800147c <VL53L1X_GetInterruptPolarity>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8001558:	f107 020e 	add.w	r2, r7, #14
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	2131      	movs	r1, #49	@ 0x31
 8001560:	4618      	mov	r0, r3
 8001562:	f001 febd 	bl	80032e0 <VL53L1_RdByte>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4313      	orrs	r3, r2
 800156e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10c      	bne.n	8001592 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	7b7a      	ldrb	r2, [r7, #13]
 8001580:	4293      	cmp	r3, r2
 8001582:	d103      	bne.n	800158c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e002      	b.n	8001592 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	460a      	mov	r2, r1
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fa2a 	bl	8001a14 <VL53L1X_GetDistanceMode>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 80015ca:	89bb      	ldrh	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0f6      	b.n	80017c2 <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 80015d4:	89bb      	ldrh	r3, [r7, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f040 8082 	bne.w	80016e0 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e2:	d06b      	beq.n	80016bc <VL53L1X_SetTimingBudgetInMs+0x11e>
 80015e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e8:	dc77      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80015ec:	d057      	beq.n	800169e <VL53L1X_SetTimingBudgetInMs+0x100>
 80015ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80015f0:	dc73      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d044      	beq.n	8001680 <VL53L1X_SetTimingBudgetInMs+0xe2>
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	dc6f      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015fa:	2b32      	cmp	r3, #50	@ 0x32
 80015fc:	d031      	beq.n	8001662 <VL53L1X_SetTimingBudgetInMs+0xc4>
 80015fe:	2b32      	cmp	r3, #50	@ 0x32
 8001600:	dc6b      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 8001602:	2b21      	cmp	r3, #33	@ 0x21
 8001604:	d020      	beq.n	8001648 <VL53L1X_SetTimingBudgetInMs+0xaa>
 8001606:	2b21      	cmp	r3, #33	@ 0x21
 8001608:	dc67      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 800160a:	2b0f      	cmp	r3, #15
 800160c:	d002      	beq.n	8001614 <VL53L1X_SetTimingBudgetInMs+0x76>
 800160e:	2b14      	cmp	r3, #20
 8001610:	d00d      	beq.n	800162e <VL53L1X_SetTimingBudgetInMs+0x90>
 8001612:	e062      	b.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	221d      	movs	r2, #29
 8001618:	215e      	movs	r1, #94	@ 0x5e
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fef4 	bl	8003408 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	2227      	movs	r2, #39	@ 0x27
 8001624:	2161      	movs	r1, #97	@ 0x61
 8001626:	4618      	mov	r0, r3
 8001628:	f001 feee 	bl	8003408 <VL53L1_WrWord>
					0x0027);
			break;
 800162c:	e0c7      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2251      	movs	r2, #81	@ 0x51
 8001632:	215e      	movs	r1, #94	@ 0x5e
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fee7 	bl	8003408 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	226e      	movs	r2, #110	@ 0x6e
 800163e:	2161      	movs	r1, #97	@ 0x61
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fee1 	bl	8003408 <VL53L1_WrWord>
					0x006E);
			break;
 8001646:	e0ba      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	22d6      	movs	r2, #214	@ 0xd6
 800164c:	215e      	movs	r1, #94	@ 0x5e
 800164e:	4618      	mov	r0, r3
 8001650:	f001 feda 	bl	8003408 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	226e      	movs	r2, #110	@ 0x6e
 8001658:	2161      	movs	r1, #97	@ 0x61
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fed4 	bl	8003408 <VL53L1_WrWord>
					0x006E);
			break;
 8001660:	e0ad      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001668:	215e      	movs	r1, #94	@ 0x5e
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fecc 	bl	8003408 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001676:	2161      	movs	r1, #97	@ 0x61
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fec5 	bl	8003408 <VL53L1_WrWord>
					0x01E8);
			break;
 800167e:	e09e      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001686:	215e      	movs	r1, #94	@ 0x5e
 8001688:	4618      	mov	r0, r3
 800168a:	f001 febd 	bl	8003408 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8001694:	2161      	movs	r1, #97	@ 0x61
 8001696:	4618      	mov	r0, r3
 8001698:	f001 feb6 	bl	8003408 <VL53L1_WrWord>
					0x0388);
			break;
 800169c:	e08f      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80016a4:	215e      	movs	r1, #94	@ 0x5e
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 feae 	bl	8003408 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f240 4296 	movw	r2, #1174	@ 0x496
 80016b2:	2161      	movs	r1, #97	@ 0x61
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fea7 	bl	8003408 <VL53L1_WrWord>
					0x0496);
			break;
 80016ba:	e080      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f240 5291 	movw	r2, #1425	@ 0x591
 80016c2:	215e      	movs	r1, #94	@ 0x5e
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 fe9f 	bl	8003408 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 80016d0:	2161      	movs	r1, #97	@ 0x61
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fe98 	bl	8003408 <VL53L1_WrWord>
					0x05C1);
			break;
 80016d8:	e071      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
			break;
 80016de:	e06e      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e6:	d058      	beq.n	800179a <VL53L1X_SetTimingBudgetInMs+0x1fc>
 80016e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016ec:	dc64      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80016f0:	d044      	beq.n	800177c <VL53L1X_SetTimingBudgetInMs+0x1de>
 80016f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80016f4:	dc60      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d031      	beq.n	800175e <VL53L1X_SetTimingBudgetInMs+0x1c0>
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	dc5c      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016fe:	2b32      	cmp	r3, #50	@ 0x32
 8001700:	d020      	beq.n	8001744 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8001702:	2b32      	cmp	r3, #50	@ 0x32
 8001704:	dc58      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8001706:	2b14      	cmp	r3, #20
 8001708:	d002      	beq.n	8001710 <VL53L1X_SetTimingBudgetInMs+0x172>
 800170a:	2b21      	cmp	r3, #33	@ 0x21
 800170c:	d00d      	beq.n	800172a <VL53L1X_SetTimingBudgetInMs+0x18c>
 800170e:	e053      	b.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	221e      	movs	r2, #30
 8001714:	215e      	movs	r1, #94	@ 0x5e
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fe76 	bl	8003408 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2222      	movs	r2, #34	@ 0x22
 8001720:	2161      	movs	r1, #97	@ 0x61
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fe70 	bl	8003408 <VL53L1_WrWord>
					0x0022);
			break;
 8001728:	e049      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2260      	movs	r2, #96	@ 0x60
 800172e:	215e      	movs	r1, #94	@ 0x5e
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fe69 	bl	8003408 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	226e      	movs	r2, #110	@ 0x6e
 800173a:	2161      	movs	r1, #97	@ 0x61
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fe63 	bl	8003408 <VL53L1_WrWord>
					0x006E);
			break;
 8001742:	e03c      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	22ad      	movs	r2, #173	@ 0xad
 8001748:	215e      	movs	r1, #94	@ 0x5e
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fe5c 	bl	8003408 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	22c6      	movs	r2, #198	@ 0xc6
 8001754:	2161      	movs	r1, #97	@ 0x61
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fe56 	bl	8003408 <VL53L1_WrWord>
					0x00C6);
			break;
 800175c:	e02f      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001764:	215e      	movs	r1, #94	@ 0x5e
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fe4e 	bl	8003408 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001772:	2161      	movs	r1, #97	@ 0x61
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fe47 	bl	8003408 <VL53L1_WrWord>
					0x01EA);
			break;
 800177a:	e020      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001782:	215e      	movs	r1, #94	@ 0x5e
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fe3f 	bl	8003408 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001790:	2161      	movs	r1, #97	@ 0x61
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fe38 	bl	8003408 <VL53L1_WrWord>
					0x02F8);
			break;
 8001798:	e011      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	f240 428f 	movw	r2, #1167	@ 0x48f
 80017a0:	215e      	movs	r1, #94	@ 0x5e
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fe30 	bl	8003408 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 80017ae:	2161      	movs	r1, #97	@ 0x61
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fe29 	bl	8003408 <VL53L1_WrWord>
					0x04A4);
			break;
 80017b6:	e002      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
			break;
 80017bc:	bf00      	nop
		}
	}
	return status;
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	215e      	movs	r1, #94	@ 0x5e
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fd9e 	bl	8003324 <VL53L1_RdWord>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	f240 5291 	movw	r2, #1425	@ 0x591
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05b      	beq.n	80018b4 <VL53L1X_GetTimingBudgetInMs+0xea>
 80017fc:	f240 5291 	movw	r2, #1425	@ 0x591
 8001800:	4293      	cmp	r3, r2
 8001802:	dc5c      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001804:	f240 428f 	movw	r2, #1167	@ 0x48f
 8001808:	4293      	cmp	r3, r2
 800180a:	d053      	beq.n	80018b4 <VL53L1X_GetTimingBudgetInMs+0xea>
 800180c:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8001810:	da55      	bge.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001812:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8001816:	4293      	cmp	r3, r2
 8001818:	d048      	beq.n	80018ac <VL53L1X_GetTimingBudgetInMs+0xe2>
 800181a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800181e:	4293      	cmp	r3, r2
 8001820:	dc4d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001822:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001826:	4293      	cmp	r3, r2
 8001828:	d03c      	beq.n	80018a4 <VL53L1X_GetTimingBudgetInMs+0xda>
 800182a:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800182e:	4293      	cmp	r3, r2
 8001830:	dc45      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001832:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001836:	4293      	cmp	r3, r2
 8001838:	d038      	beq.n	80018ac <VL53L1X_GetTimingBudgetInMs+0xe2>
 800183a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800183e:	4293      	cmp	r3, r2
 8001840:	dc3d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001842:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001846:	d02d      	beq.n	80018a4 <VL53L1X_GetTimingBudgetInMs+0xda>
 8001848:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 800184c:	dc37      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800184e:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8001852:	d023      	beq.n	800189c <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001854:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8001858:	dc31      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800185a:	2bd6      	cmp	r3, #214	@ 0xd6
 800185c:	d01a      	beq.n	8001894 <VL53L1X_GetTimingBudgetInMs+0xca>
 800185e:	2bd6      	cmp	r3, #214	@ 0xd6
 8001860:	dc2d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001862:	2bad      	cmp	r3, #173	@ 0xad
 8001864:	d01a      	beq.n	800189c <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001866:	2bad      	cmp	r3, #173	@ 0xad
 8001868:	dc29      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800186a:	2b60      	cmp	r3, #96	@ 0x60
 800186c:	d012      	beq.n	8001894 <VL53L1X_GetTimingBudgetInMs+0xca>
 800186e:	2b60      	cmp	r3, #96	@ 0x60
 8001870:	dc25      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001872:	2b51      	cmp	r3, #81	@ 0x51
 8001874:	d00a      	beq.n	800188c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001876:	2b51      	cmp	r3, #81	@ 0x51
 8001878:	dc21      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800187a:	2b1d      	cmp	r3, #29
 800187c:	d002      	beq.n	8001884 <VL53L1X_GetTimingBudgetInMs+0xba>
 800187e:	2b1e      	cmp	r3, #30
 8001880:	d004      	beq.n	800188c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001882:	e01c      	b.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	220f      	movs	r2, #15
 8001888:	801a      	strh	r2, [r3, #0]
			break;
 800188a:	e01d      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2214      	movs	r2, #20
 8001890:	801a      	strh	r2, [r3, #0]
			break;
 8001892:	e019      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2221      	movs	r2, #33	@ 0x21
 8001898:	801a      	strh	r2, [r3, #0]
			break;
 800189a:	e015      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2232      	movs	r2, #50	@ 0x32
 80018a0:	801a      	strh	r2, [r3, #0]
			break;
 80018a2:	e011      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2264      	movs	r2, #100	@ 0x64
 80018a8:	801a      	strh	r2, [r3, #0]
			break;
 80018aa:	e00d      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	22c8      	movs	r2, #200	@ 0xc8
 80018b0:	801a      	strh	r2, [r3, #0]
			break;
 80018b2:	e009      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018ba:	801a      	strh	r2, [r3, #0]
			break;
 80018bc:	e004      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	80fb      	strh	r3, [r7, #6]
 80018e0:	4613      	mov	r3, r2
 80018e2:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff6a 	bl	80017ca <VL53L1X_GetTimingBudgetInMs>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <VL53L1X_SetDistanceMode+0x38>
		return 1;
 8001908:	2301      	movs	r3, #1
 800190a:	e07f      	b.n	8001a0c <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d002      	beq.n	8001918 <VL53L1X_SetDistanceMode+0x44>
 8001912:	2b02      	cmp	r3, #2
 8001914:	d033      	beq.n	800197e <VL53L1X_SetDistanceMode+0xaa>
 8001916:	e065      	b.n	80019e4 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	2214      	movs	r2, #20
 800191c:	214b      	movs	r1, #75	@ 0x4b
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fd50 	bl	80033c4 <VL53L1_WrByte>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2207      	movs	r2, #7
 800192c:	2160      	movs	r1, #96	@ 0x60
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fd48 	bl	80033c4 <VL53L1_WrByte>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2205      	movs	r2, #5
 800193c:	2163      	movs	r1, #99	@ 0x63
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fd40 	bl	80033c4 <VL53L1_WrByte>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	2238      	movs	r2, #56	@ 0x38
 800194c:	2169      	movs	r1, #105	@ 0x69
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fd38 	bl	80033c4 <VL53L1_WrByte>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	f240 7205 	movw	r2, #1797	@ 0x705
 800195e:	2178      	movs	r1, #120	@ 0x78
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fd51 	bl	8003408 <VL53L1_WrWord>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f240 6206 	movw	r2, #1542	@ 0x606
 8001970:	217a      	movs	r1, #122	@ 0x7a
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fd48 	bl	8003408 <VL53L1_WrWord>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
		break;
 800197c:	e035      	b.n	80019ea <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	220a      	movs	r2, #10
 8001982:	214b      	movs	r1, #75	@ 0x4b
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fd1d 	bl	80033c4 <VL53L1_WrByte>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	220f      	movs	r2, #15
 8001992:	2160      	movs	r1, #96	@ 0x60
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fd15 	bl	80033c4 <VL53L1_WrByte>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	220d      	movs	r2, #13
 80019a2:	2163      	movs	r1, #99	@ 0x63
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fd0d 	bl	80033c4 <VL53L1_WrByte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	22b8      	movs	r2, #184	@ 0xb8
 80019b2:	2169      	movs	r1, #105	@ 0x69
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fd05 	bl	80033c4 <VL53L1_WrByte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f640 720d 	movw	r2, #3853	@ 0xf0d
 80019c4:	2178      	movs	r1, #120	@ 0x78
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fd1e 	bl	8003408 <VL53L1_WrWord>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f640 620e 	movw	r2, #3598	@ 0xe0e
 80019d6:	217a      	movs	r1, #122	@ 0x7a
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fd15 	bl	8003408 <VL53L1_WrWord>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
		break;
 80019e2:	e002      	b.n	80019ea <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
		break;
 80019e8:	bf00      	nop
	}

	if (status == 0)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80019f2:	89ba      	ldrh	r2, [r7, #12]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fdd0 	bl	800159e <VL53L1X_SetTimingBudgetInMs>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	73fb      	strb	r3, [r7, #15]
	return status;
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001a24:	f107 020e 	add.w	r2, r7, #14
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	214b      	movs	r1, #75	@ 0x4b
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fc57 	bl	80032e0 <VL53L1_RdByte>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b14      	cmp	r3, #20
 8001a44:	d102      	bne.n	8001a4c <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b0a      	cmp	r3, #10
 8001a50:	d102      	bne.n	8001a58 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	801a      	strh	r2, [r3, #0]
	return status;
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0000      	movs	r0, r0
	...

08001a68 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	21de      	movs	r1, #222	@ 0xde
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 fc4f 	bl	8003324 <VL53L1_RdWord>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001a90:	89bb      	ldrh	r3, [r7, #12]
 8001a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd55 	bl	8000554 <__aeabi_ui2d>
 8001aaa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001ad8 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fdca 	bl	8000648 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f89c 	bl	8000bf8 <__aeabi_d2uiz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	216c      	movs	r1, #108	@ 0x6c
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fcca 	bl	8003460 <VL53L1_WrDWord>
	return status;
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	33333333 	.word	0x33333333
 8001adc:	3ff13333 	.word	0x3ff13333

08001ae0 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	2196      	movs	r1, #150	@ 0x96
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fc13 	bl	8003324 <VL53L1_RdWord>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001b08:	89ba      	ldrh	r2, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	801a      	strh	r2, [r3, #0]
	return status;
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	460a      	mov	r2, r1
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8001b36:	89ba      	ldrh	r2, [r7, #12]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	211e      	movs	r1, #30
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fc63 	bl	8003408 <VL53L1_WrWord>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2120      	movs	r1, #32
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fc58 	bl	8003408 <VL53L1_WrWord>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2122      	movs	r1, #34	@ 0x22
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fc4d 	bl	8003408 <VL53L1_WrWord>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	73fb      	strb	r3, [r7, #15]
	return status;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	4613      	mov	r3, r2
 8001b92:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2118      	movs	r1, #24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fc32 	bl	8003408 <VL53L1_WrWord>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	211a      	movs	r1, #26
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fc27 	bl	8003408 <VL53L1_WrWord>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	025b      	lsls	r3, r3, #9
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <VL53L1X_SetXtalk+0x74>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1192      	asrs	r2, r2, #6
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2116      	movs	r1, #22
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fc14 	bl	8003408 <VL53L1_WrWord>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	73fb      	strb	r3, [r7, #15]
	return status;
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 8001c22:	f107 020e 	add.w	r2, r7, #14
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2146      	movs	r1, #70	@ 0x46
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fb58 	bl	80032e0 <VL53L1_RdByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & (~0x6F);
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	f023 036f 	bic.w	r3, r3, #111	@ 0x6f
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73bb      	strb	r3, [r7, #14]
	Temp = Temp|Window;
 8001c44:	7bba      	ldrb	r2, [r7, #14]
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 8001c4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <VL53L1X_SetDistanceThreshold+0x6c>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,Temp);
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2146      	movs	r1, #70	@ 0x46
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fbb1 	bl	80033c4 <VL53L1_WrByte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e00a      	b.n	8001c7e <VL53L1X_SetDistanceThreshold+0x82>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,(Temp | 0x40));
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2146      	movs	r1, #70	@ 0x46
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fba5 	bl	80033c4 <VL53L1_WrByte>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2172      	movs	r1, #114	@ 0x72
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fbbf 	bl	8003408 <VL53L1_WrWord>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2174      	movs	r1, #116	@ 0x74
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fbb4 	bl	8003408 <VL53L1_WrWord>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	73fb      	strb	r3, [r7, #15]
	return status;
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
	...

08001cb8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_FREERTOS_Init+0x2c>)
 8001cc0:	1d3c      	adds	r4, r7, #4
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 f8b8 	bl	8009e46 <osThreadCreate>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a03      	ldr	r2, [pc, #12]	@ (8001ce8 <MX_FREERTOS_Init+0x30>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	0800dd98 	.word	0x0800dd98
 8001ce8:	200001f4 	.word	0x200001f4

08001cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f008 f8cd 	bl	8009e94 <osDelay>
 8001cfa:	e7fb      	b.n	8001cf4 <StartDefaultTask+0x8>

08001cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	200b      	movs	r0, #11
 8001d38:	f001 fddc 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d3c:	200b      	movs	r0, #11
 8001d3e:	f001 fdf3 	bl	8003928 <HAL_NVIC_EnableIRQ>

}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a46      	ldr	r2, [pc, #280]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a40      	ldr	r2, [pc, #256]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f248 0112 	movw	r1, #32786	@ 0x8012
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f002 f9b4 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4837      	ldr	r0, [pc, #220]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001dda:	f002 f9af 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin|Status_Red_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001de4:	4835      	ldr	r0, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001de6:	f002 f9a9 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_TOF2_Pin;
 8001dea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_TOF2_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482d      	ldr	r0, [pc, #180]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001e02:	f002 f819 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin;
 8001e06:	f248 0312 	movw	r3, #32786	@ 0x8012
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f002 f809 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001e26:	2310      	movs	r3, #16
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481e      	ldr	r0, [pc, #120]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001e3e:	f001 fffb 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB15 */
  GPIO_InitStruct.Pin = INT1_ADX_Pin|INT2_ADX_Pin|GPIO_PIN_15;
 8001e42:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4818      	ldr	r0, [pc, #96]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001e5a:	f001 ffed 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Status_Blue_Pin|Status_Red_Pin;
 8001e5e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001e78:	f001 ffde 	bl	8003e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2105      	movs	r1, #5
 8001e80:	2007      	movs	r0, #7
 8001e82:	f001 fd37 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e86:	2007      	movs	r0, #7
 8001e88:	f001 fd4e 	bl	8003928 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2105      	movs	r1, #5
 8001e90:	2008      	movs	r0, #8
 8001e92:	f001 fd2f 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e96:	2008      	movs	r0, #8
 8001e98:	f001 fd46 	bl	8003928 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	2028      	movs	r0, #40	@ 0x28
 8001ea2:	f001 fd27 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ea6:	2028      	movs	r0, #40	@ 0x28
 8001ea8:	f001 fd3e 	bl	8003928 <HAL_NVIC_EnableIRQ>

}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	@ 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <MX_I2C1_Init+0x78>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <MX_I2C1_Init+0x7c>)
 8001ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed6:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001efa:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001efc:	f002 f94e 	bl	800419c <HAL_I2C_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f06:	f000 f9ed 	bl	80022e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4809      	ldr	r0, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001f0e:	f002 fed1 	bl	8004cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f18:	f000 f9e4 	bl	80022e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001f20:	f002 ff13 	bl	8004d4a <HAL_I2CEx_ConfigDigitalFilter>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f2a:	f000 f9db 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200001f8 	.word	0x200001f8
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40b285c2 	.word	0x40b285c2

08001f40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09a      	sub	sp, #104	@ 0x68
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	2244      	movs	r2, #68	@ 0x44
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f009 ff51 	bl	800be08 <memset>
  if(i2cHandle->Instance==I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <HAL_I2C_MspInit+0xa8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d136      	bne.n	8001fde <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f70:	2340      	movs	r3, #64	@ 0x40
 8001f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fd41 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f88:	f000 f9ac 	bl	80022e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_TOF_Pin|SDA_TOF_Pin;
 8001fa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fa8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001faa:	2312      	movs	r3, #18
 8001fac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480b      	ldr	r0, [pc, #44]	@ (8001ff0 <HAL_I2C_MspInit+0xb0>)
 8001fc2:	f001 ff39 	bl	8003e38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3768      	adds	r7, #104	@ 0x68
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <_write>:
 * @param file: Unused parameter for file descriptor.
 * @param ptr: Pointer to the buffer containing the data to send.
 * @param len: Length of the data to send.
 * @return The number of characters sent.
 */
int _write(int file, char *ptr, int len) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <_write+0x28>)
 800200c:	f006 fcc1 	bl	8008992 <HAL_UART_Transmit>
	return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000494 	.word	0x20000494

08002020 <vTaskADX>:
/**
 * @brief Task to manage the ADXL343 accelerometer.
 * @param argument: Pointer to the task arguments (if any).
 */
void vTaskADX(void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
	// Initialisation de l'accéléromètre
	ADXL343_initialization(&hspi1, &accelerometer);
 8002028:	492f      	ldr	r1, [pc, #188]	@ (80020e8 <vTaskADX+0xc8>)
 800202a:	4830      	ldr	r0, [pc, #192]	@ (80020ec <vTaskADX+0xcc>)
 800202c:	f7fe ff7c 	bl	8000f28 <ADXL343_initialization>
	ADXL343_EnableTapInterrupts(&accelerometer);
 8002030:	482d      	ldr	r0, [pc, #180]	@ (80020e8 <vTaskADX+0xc8>)
 8002032:	f7ff f8e1 	bl	80011f8 <ADXL343_EnableTapInterrupts>
	ADXL343_set_tap_parameters(&accelerometer, 20, 1, 80, 200);
 8002036:	23c8      	movs	r3, #200	@ 0xc8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2350      	movs	r3, #80	@ 0x50
 800203c:	2201      	movs	r2, #1
 800203e:	2114      	movs	r1, #20
 8002040:	4829      	ldr	r0, [pc, #164]	@ (80020e8 <vTaskADX+0xc8>)
 8002042:	f7ff f855 	bl	80010f0 <ADXL343_set_tap_parameters>
	ADXL343_SetDataFormat(&hspi1, 0x03); // Configurer en ±16g
 8002046:	2103      	movs	r1, #3
 8002048:	4828      	ldr	r0, [pc, #160]	@ (80020ec <vTaskADX+0xcc>)
 800204a:	f7ff f935 	bl	80012b8 <ADXL343_SetDataFormat>

	// Variables pour suivre l'état des LEDs et le mode moteur
	uint8_t led_state = 0;    // 0 = rouge, 1 = bleu
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
	uint8_t motor_mode = 0;  // 0 = souris, 1 = prédateur
 8002052:	2300      	movs	r3, #0
 8002054:	73bb      	strb	r3, [r7, #14]

	printf("Tâche ADXL343 démarrée. Attente des tapotements...\n");
 8002056:	4826      	ldr	r0, [pc, #152]	@ (80020f0 <vTaskADX+0xd0>)
 8002058:	f009 fdf6 	bl	800bc48 <puts>

	while (1)
	{
		// Attente de détection de tap
		vTaskDelay(pdMS_TO_TICKS(500));
 800205c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002060:	f008 f914 	bl	800a28c <vTaskDelay>

		// Si un tap est détecté
		        if (ADXL343_check_tap(&accelerometer)) {
 8002064:	4820      	ldr	r0, [pc, #128]	@ (80020e8 <vTaskADX+0xc8>)
 8002066:	f7ff f901 	bl	800126c <ADXL343_check_tap>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f5      	beq.n	800205c <vTaskADX+0x3c>
		            // Alterner les LEDs
		            if (led_state == 0) {
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <vTaskADX+0x74>
		                HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_SET);    // LED rouge ON
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800207c:	481d      	ldr	r0, [pc, #116]	@ (80020f4 <vTaskADX+0xd4>)
 800207e:	f002 f85d 	bl	800413c <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_RESET); // LED bleue OFF
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002088:	481a      	ldr	r0, [pc, #104]	@ (80020f4 <vTaskADX+0xd4>)
 800208a:	f002 f857 	bl	800413c <HAL_GPIO_WritePin>
		                led_state = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	e00d      	b.n	80020b0 <vTaskADX+0x90>
		            } else {
		                HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_RESET); // LED rouge OFF
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800209a:	4816      	ldr	r0, [pc, #88]	@ (80020f4 <vTaskADX+0xd4>)
 800209c:	f002 f84e 	bl	800413c <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_SET);  // LED bleue ON
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020a6:	4813      	ldr	r0, [pc, #76]	@ (80020f4 <vTaskADX+0xd4>)
 80020a8:	f002 f848 	bl	800413c <HAL_GPIO_WritePin>
		                led_state = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
		            }

			// Alterner le mode moteur
			if (motor_mode == 0)
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <vTaskADX+0xae>
			{
				vTaskDelay(pdMS_TO_TICKS(1000));
 80020b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ba:	f008 f8e7 	bl	800a28c <vTaskDelay>
				printf("Mode Prédateur activé.\n");
 80020be:	480e      	ldr	r0, [pc, #56]	@ (80020f8 <vTaskADX+0xd8>)
 80020c0:	f009 fdc2 	bl	800bc48 <puts>
				motorcontrol_predateur(); // Activer le mode prédateur
 80020c4:	f000 fa8a 	bl	80025dc <motorcontrol_predateur>
				motor_mode = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73bb      	strb	r3, [r7, #14]
 80020cc:	e7c6      	b.n	800205c <vTaskADX+0x3c>
			}
			else
			{
				vTaskDelay(pdMS_TO_TICKS(1000));
 80020ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d2:	f008 f8db 	bl	800a28c <vTaskDelay>
				printf("Mode Souris activé.\n");
 80020d6:	4809      	ldr	r0, [pc, #36]	@ (80020fc <vTaskADX+0xdc>)
 80020d8:	f009 fdb6 	bl	800bc48 <puts>
				motorcontrol_souris(); // Activer le mode souris
 80020dc:	f000 fa12 	bl	8002504 <motorcontrol_souris>
				motor_mode = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73bb      	strb	r3, [r7, #14]
		vTaskDelay(pdMS_TO_TICKS(500));
 80020e4:	e7ba      	b.n	800205c <vTaskADX+0x3c>
 80020e6:	bf00      	nop
 80020e8:	2000024c 	.word	0x2000024c
 80020ec:	20000268 	.word	0x20000268
 80020f0:	0800ddac 	.word	0x0800ddac
 80020f4:	48000400 	.word	0x48000400
 80020f8:	0800dde4 	.word	0x0800dde4
 80020fc:	0800de00 	.word	0x0800de00

08002100 <vTaskToF>:
/**
 * @brief Task for the VL53L1X ToF sensor.
 * @param argument: Pointer to the task arguments (if any).
 */

void vTaskToF(void *argument) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	uint16_t distance;
	uint8_t range_status;

	while (1) {
		// Vérifier la disponibilité des données
		VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 8002108:	f107 030d 	add.w	r3, r7, #13
 800210c:	4619      	mov	r1, r3
 800210e:	2052      	movs	r0, #82	@ 0x52
 8002110:	f7ff fa0e 	bl	8001530 <VL53L1X_CheckForDataReady>
		if (range_status == 0) {
 8002114:	7b7b      	ldrb	r3, [r7, #13]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <vTaskToF+0x3a>
			VL53L1X_GetDistance(TOF_ADDR, &distance);
 800211a:	f107 030e 	add.w	r3, r7, #14
 800211e:	4619      	mov	r1, r3
 8002120:	2052      	movs	r0, #82	@ 0x52
 8002122:	f7ff fcdd 	bl	8001ae0 <VL53L1X_GetDistance>
			printf("Distance mesurée : %d mm\n", distance);
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	@ (8002144 <vTaskToF+0x44>)
 800212c:	f009 fd24 	bl	800bb78 <iprintf>

			if (distance > 250) {
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	2bfa      	cmp	r3, #250	@ 0xfa
 8002134:	d901      	bls.n	800213a <vTaskToF+0x3a>
				pivot(); // Effectuer un pivot
 8002136:	f000 fabd 	bl	80026b4 <pivot>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500)); // Vérification rapide
 800213a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800213e:	f008 f8a5 	bl	800a28c <vTaskDelay>
		VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 8002142:	e7e1      	b.n	8002108 <vTaskToF+0x8>
 8002144:	0800de18 	.word	0x0800de18

08002148 <main>:
	/**
	 * @brief  The application entry point.
	 * @retval int
	 */
	int main(void)
	{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af02      	add	r7, sp, #8
		/* USER CODE END 1 */

		/* MCU Configuration--------------------------------------------------------*/

		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 800214e:	f001 fac0 	bl	80036d2 <HAL_Init>
		/* USER CODE BEGIN Init */

		/* USER CODE END Init */

		/* Configure the system clock */
		SystemClock_Config();
 8002152:	f000 f855 	bl	8002200 <SystemClock_Config>
		/* USER CODE BEGIN SysInit */

		/* USER CODE END SysInit */

		/* Initialize all configured peripherals */
		MX_GPIO_Init();
 8002156:	f7ff fdfb 	bl	8001d50 <MX_GPIO_Init>
		MX_DMA_Init();
 800215a:	f7ff fdcf 	bl	8001cfc <MX_DMA_Init>
		MX_I2C1_Init();
 800215e:	f7ff feaf 	bl	8001ec0 <MX_I2C1_Init>
		MX_SPI1_Init();
 8002162:	f000 fae1 	bl	8002728 <MX_SPI1_Init>
		MX_USART2_UART_Init();
 8002166:	f000 ff9f 	bl	80030a8 <MX_USART2_UART_Init>
		MX_TIM1_Init();
 800216a:	f000 fd0d 	bl	8002b88 <MX_TIM1_Init>
		MX_TIM3_Init();
 800216e:	f000 fdd7 	bl	8002d20 <MX_TIM3_Init>
		MX_TIM4_Init();
 8002172:	f000 fe2b 	bl	8002dcc <MX_TIM4_Init>
		MX_UART4_Init();
 8002176:	f000 ff4b 	bl	8003010 <MX_UART4_Init>
//
//		//xPrintMutex = xSemaphoreCreateMutex();



		init_motors();
 800217a:	f000 f8b9 	bl	80022f0 <init_motors>

		//I2C_Scan();


		VL53L1__Init();
 800217e:	f001 f995 	bl	80034ac <VL53L1__Init>
		printf("Initialisation du système STM32 terminée.\n");
 8002182:	481a      	ldr	r0, [pc, #104]	@ (80021ec <main+0xa4>)
 8002184:	f009 fd60 	bl	800bc48 <puts>

		VL53L1X_StartRanging(TOF_ADDR); // Démarrer le capteur
 8002188:	2052      	movs	r0, #82	@ 0x52
 800218a:	f7ff f9a1 	bl	80014d0 <VL53L1X_StartRanging>
		VL53L1X_SetDistanceThreshold(TOF_ADDR, 10, 250, 1, 0); // Définir le seuil de distance
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	22fa      	movs	r2, #250	@ 0xfa
 8002196:	210a      	movs	r1, #10
 8002198:	2052      	movs	r0, #82	@ 0x52
 800219a:	f7ff fd2f 	bl	8001bfc <VL53L1X_SetDistanceThreshold>
		VL53L1X_SetInterruptPolarity(TOF_ADDR, 1); // Configurer la polarité de l'interruption
 800219e:	2101      	movs	r1, #1
 80021a0:	2052      	movs	r0, #82	@ 0x52
 80021a2:	f7ff f933 	bl	800140c <VL53L1X_SetInterruptPolarity>
		VL53L1X_ClearInterrupt(TOF_ADDR); // Effacer les interruptions en attente
 80021a6:	2052      	movs	r0, #82	@ 0x52
 80021a8:	f7ff f918 	bl	80013dc <VL53L1X_ClearInterrupt>


		// Créer les tâches FreeRTOS
		xTaskCreate(vTaskADX, "TaskADX", 256, NULL, 2, NULL);
 80021ac:	2300      	movs	r3, #0
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2302      	movs	r3, #2
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2300      	movs	r3, #0
 80021b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <main+0xa8>)
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <main+0xac>)
 80021be:	f007 ff31 	bl	800a024 <xTaskCreate>
		xTaskCreate(vTaskToF, "TaskToF", 256, NULL, 5, NULL);
 80021c2:	2300      	movs	r3, #0
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2305      	movs	r3, #5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d0:	4909      	ldr	r1, [pc, #36]	@ (80021f8 <main+0xb0>)
 80021d2:	480a      	ldr	r0, [pc, #40]	@ (80021fc <main+0xb4>)
 80021d4:	f007 ff26 	bl	800a024 <xTaskCreate>


		/* USER CODE END 2 */

		/* Call init function for freertos objects (in cmsis_os2.c) */
		MX_FREERTOS_Init();
 80021d8:	f7ff fd6e 	bl	8001cb8 <MX_FREERTOS_Init>

		/* Start scheduler */
		osKernelStart();
 80021dc:	f007 fe2c 	bl	8009e38 <osKernelStart>
		   printf("Erreur lors de la mesure.\n");
		   }*/

			//VL53L1__test();

			HAL_Delay(500);
 80021e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021e4:	f001 faac 	bl	8003740 <HAL_Delay>
 80021e8:	e7fa      	b.n	80021e0 <main+0x98>
 80021ea:	bf00      	nop
 80021ec:	0800de34 	.word	0x0800de34
 80021f0:	0800de60 	.word	0x0800de60
 80021f4:	08002021 	.word	0x08002021
 80021f8:	0800de68 	.word	0x0800de68
 80021fc:	08002101 	.word	0x08002101

08002200 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	@ 0x50
 8002204:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	2238      	movs	r2, #56	@ 0x38
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f009 fdfa 	bl	800be08 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002222:	2000      	movs	r0, #0
 8002224:	f002 fdde 	bl	8004de4 <HAL_PWREx_ControlVoltageScaling>

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800222c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002230:	61fb      	str	r3, [r7, #28]
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002232:	2302      	movs	r3, #2
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002236:	2303      	movs	r3, #3
 8002238:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800223a:	2304      	movs	r3, #4
 800223c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLN = 85;
 800223e:	2355      	movs	r3, #85	@ 0x55
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002246:	2302      	movs	r3, #2
 8002248:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800224a:	2302      	movs	r3, #2
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fe7a 	bl	8004f4c <HAL_RCC_OscConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0x62>
		{
			Error_Handler();
 800225e:	f000 f841 	bl	80022e4 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002262:	230f      	movs	r3, #15
 8002264:	607b      	str	r3, [r7, #4]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002266:	2303      	movs	r3, #3
 8002268:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2104      	movs	r1, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f978 	bl	8005570 <HAL_RCC_ClockConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SystemClock_Config+0x8a>
		{
			Error_Handler();
 8002286:	f000 f82d 	bl	80022e4 <Error_Handler>
		}
	}
 800228a:	bf00      	nop
 800228c:	3750      	adds	r7, #80	@ 0x50
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_EXTI_Callback>:
		xSemaphoreGiveFromISR(SemClpCallBack, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == INT_TOF2_Pin) {
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022a4:	d105      	bne.n	80022b2 <HAL_GPIO_EXTI_Callback+0x1e>
			printf("Interruption détectée sur le capteur TOF.\n");
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <HAL_GPIO_EXTI_Callback+0x28>)
 80022a8:	f009 fcce 	bl	800bc48 <puts>

			// Effacer l'interruption immédiatement
			VL53L1X_ClearInterrupt(TOF_ADDR);
 80022ac:	2052      	movs	r0, #82	@ 0x52
 80022ae:	f7ff f895 	bl	80013dc <VL53L1X_ClearInterrupt>
		}
	}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	0800de70 	.word	0x0800de70

080022c0 <HAL_TIM_PeriodElapsedCallback>:
	 * a global variable "uwTick" used as application time base.
	 * @param  htim : TIM handle
	 * @retval None
	 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN Callback 0 */

		/* USER CODE END Callback 0 */
		if (htim->Instance == TIM6) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x16>
			HAL_IncTick();
 80022d2:	f001 fa17 	bl	8003704 <HAL_IncTick>
		}
		/* USER CODE BEGIN Callback 1 */

		/* USER CODE END Callback 1 */
	}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40001000 	.word	0x40001000

080022e4 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <Error_Handler+0x8>

080022f0 <init_motors>:


/**
 * @brief Initialisation des moteurs (PWM et encodeurs).
 */
void init_motors(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	// Initialisation des PWM pour les moteurs
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 80022f4:	2100      	movs	r1, #0
 80022f6:	4810      	ldr	r0, [pc, #64]	@ (8002338 <init_motors+0x48>)
 80022f8:	f004 fdcc 	bl	8006e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 80022fc:	2104      	movs	r1, #4
 80022fe:	480e      	ldr	r0, [pc, #56]	@ (8002338 <init_motors+0x48>)
 8002300:	f004 fdc8 	bl	8006e94 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002304:	2100      	movs	r1, #0
 8002306:	480c      	ldr	r0, [pc, #48]	@ (8002338 <init_motors+0x48>)
 8002308:	f006 f868 	bl	80083dc <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800230c:	2104      	movs	r1, #4
 800230e:	480a      	ldr	r0, [pc, #40]	@ (8002338 <init_motors+0x48>)
 8002310:	f006 f864 	bl	80083dc <HAL_TIMEx_PWMN_Start>

	// Initialisation des encodeurs
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Moteur 1 (encodeur sur TIM3)
 8002314:	213c      	movs	r1, #60	@ 0x3c
 8002316:	4809      	ldr	r0, [pc, #36]	@ (800233c <init_motors+0x4c>)
 8002318:	f004 fff8 	bl	800730c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Moteur 2 (encodeur sur TIM4)
 800231c:	213c      	movs	r1, #60	@ 0x3c
 800231e:	4808      	ldr	r0, [pc, #32]	@ (8002340 <init_motors+0x50>)
 8002320:	f004 fff4 	bl	800730c <HAL_TIM_Encoder_Start>

	// Réinitialisation des compteurs d'encodeurs
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <init_motors+0x4c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <init_motors+0x50>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000031c 	.word	0x2000031c
 800233c:	20000368 	.word	0x20000368
 8002340:	200003b4 	.word	0x200003b4

08002344 <forward_r>:

/**
 * @brief Avance le moteur droit.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void forward_r(uint16_t alpha) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);  // TIM1_CH1
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <forward_r+0x2c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	635a      	str	r2, [r3, #52]	@ 0x34
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 8002356:	2100      	movs	r1, #0
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <forward_r+0x2c>)
 800235a:	f004 fd9b 	bl	8006e94 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800235e:	2100      	movs	r1, #0
 8002360:	4803      	ldr	r0, [pc, #12]	@ (8002370 <forward_r+0x2c>)
 8002362:	f006 f8ef 	bl	8008544 <HAL_TIMEx_PWMN_Stop>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000031c 	.word	0x2000031c

08002374 <forward_l>:

/**
 * @brief Avance le moteur gauche.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void forward_l(uint16_t alpha) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha);  // TIM1_CH2
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <forward_l+0x2c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
 8002386:	2104      	movs	r1, #4
 8002388:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <forward_l+0x2c>)
 800238a:	f004 fe83 	bl	8007094 <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800238e:	2104      	movs	r1, #4
 8002390:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <forward_l+0x2c>)
 8002392:	f006 f823 	bl	80083dc <HAL_TIMEx_PWMN_Start>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000031c 	.word	0x2000031c

080023a4 <reverse_r>:

/**
 * @brief Recule le moteur droit.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void reverse_r(uint16_t alpha) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha); // TIM1_CH2N
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <reverse_r+0x2c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
	//    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2
 80023b6:	2100      	movs	r1, #0
 80023b8:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <reverse_r+0x2c>)
 80023ba:	f004 fe6b 	bl	8007094 <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80023be:	2100      	movs	r1, #0
 80023c0:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <reverse_r+0x2c>)
 80023c2:	f006 f80b 	bl	80083dc <HAL_TIMEx_PWMN_Start>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000031c 	.word	0x2000031c

080023d4 <reverse_l>:

/**
 * @brief Recule le moteur gauche.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void reverse_l(uint16_t alpha) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha); // TIM1_CH1N
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <reverse_l+0x2c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
	// __HAL_TIM_SET_COMPARE(&htim1, TIM_CH0ANNEL_2, 0);      // TIM1_CH2
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 80023e6:	2104      	movs	r1, #4
 80023e8:	4805      	ldr	r0, [pc, #20]	@ (8002400 <reverse_l+0x2c>)
 80023ea:	f004 fd53 	bl	8006e94 <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023ee:	2104      	movs	r1, #4
 80023f0:	4803      	ldr	r0, [pc, #12]	@ (8002400 <reverse_l+0x2c>)
 80023f2:	f006 f8a7 	bl	8008544 <HAL_TIMEx_PWMN_Stop>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000031c 	.word	0x2000031c

08002404 <stop_r>:

/**
 * @brief Arrête le moteur droit.
 */
void stop_r(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <stop_r+0x18>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34
	//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
 8002410:	2100      	movs	r1, #0
 8002412:	4802      	ldr	r0, [pc, #8]	@ (800241c <stop_r+0x18>)
 8002414:	f004 fe3e 	bl	8007094 <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000031c 	.word	0x2000031c

08002420 <stop_l>:

/**
 * @brief Arrête le moteur gauche.
 */
void stop_l(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);      // TIM1_CH2
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <stop_l+0x18>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 800242c:	2104      	movs	r1, #4
 800242e:	4802      	ldr	r0, [pc, #8]	@ (8002438 <stop_l+0x18>)
 8002430:	f004 fe30 	bl	8007094 <HAL_TIM_PWM_Stop>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000031c 	.word	0x2000031c

0800243c <calculate_motor_speed>:
 * @param motor: Identifiant du moteur (MOTOR_LEFT ou MOTOR_RIGHT).
 * @param delta_time_ms: Intervalle de temps en ms.
 * @param encoder_resolution: Résolution de l'encodeur (pulsations par tour).
 * @return Vitesse en tours par seconde.
 */
float calculate_motor_speed(uint8_t motor, uint32_t delta_time_ms, uint16_t encoder_resolution) {
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	80bb      	strh	r3, [r7, #4]
	static int16_t last_position_motor1 = 0;
	static int16_t last_position_motor2 = 0;

	int16_t current_position = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	81bb      	strh	r3, [r7, #12]
	int16_t delta_position = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	81fb      	strh	r3, [r7, #14]

	if (motor == MOTOR_LEFT) { // Moteur gauche
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <calculate_motor_speed+0x3e>
		current_position = __HAL_TIM_GET_COUNTER(&htim3); // TIM3 pour moteur gauche
 800245a:	4b25      	ldr	r3, [pc, #148]	@ (80024f0 <calculate_motor_speed+0xb4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor1;
 8002462:	89ba      	ldrh	r2, [r7, #12]
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <calculate_motor_speed+0xb8>)
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	b29b      	uxth	r3, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	81fb      	strh	r3, [r7, #14]
		last_position_motor1 = current_position;
 8002472:	4a20      	ldr	r2, [pc, #128]	@ (80024f4 <calculate_motor_speed+0xb8>)
 8002474:	89bb      	ldrh	r3, [r7, #12]
 8002476:	8013      	strh	r3, [r2, #0]
 8002478:	e011      	b.n	800249e <calculate_motor_speed+0x62>
	} else if (motor == MOTOR_RIGHT) { // Moteur droit
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10e      	bne.n	800249e <calculate_motor_speed+0x62>
		current_position = __HAL_TIM_GET_COUNTER(&htim4); // TIM4 pour moteur droit
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <calculate_motor_speed+0xbc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor2;
 8002488:	89ba      	ldrh	r2, [r7, #12]
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <calculate_motor_speed+0xc0>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	b29b      	uxth	r3, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	81fb      	strh	r3, [r7, #14]
		last_position_motor2 = current_position;
 8002498:	4a18      	ldr	r2, [pc, #96]	@ (80024fc <calculate_motor_speed+0xc0>)
 800249a:	89bb      	ldrh	r3, [r7, #12]
 800249c:	8013      	strh	r3, [r2, #0]
	}

	// Calculer la vitesse en tours par seconde
	float speed = (float)delta_position / encoder_resolution; // Tours par intervalle
 800249e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024aa:	88bb      	ldrh	r3, [r7, #4]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b8:	edc7 7a02 	vstr	s15, [r7, #8]
	speed *= (1000.0f / delta_time_ms); // Convertir en tours par seconde
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002500 <calculate_motor_speed+0xc4>
 80024ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	edc7 7a02 	vstr	s15, [r7, #8]

	return speed;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	ee07 3a90 	vmov	s15, r3
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000368 	.word	0x20000368
 80024f4:	20000264 	.word	0x20000264
 80024f8:	200003b4 	.word	0x200003b4
 80024fc:	20000266 	.word	0x20000266
 8002500:	447a0000 	.word	0x447a0000

08002504 <motorcontrol_souris>:
}

/**
 * @brief Mode "Souris" pour un déplacement normal.
 */
void motorcontrol_souris(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 40% de 8500
 800250a:	f640 5348 	movw	r3, #3400	@ 0xd48
 800250e:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 8002510:	2300      	movs	r3, #0
 8002512:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 8002514:	2332      	movs	r3, #50	@ 0x32
 8002516:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 8002518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800251c:	81fb      	strh	r3, [r7, #14]

	printf("Mode Souris : moteurs avancent à vitesse normale.\n");
 800251e:	4827      	ldr	r0, [pc, #156]	@ (80025bc <motorcontrol_souris+0xb8>)
 8002520:	f009 fb92 	bl	800bc48 <puts>
	forward_r(alpha + 450);
 8002524:	8afb      	ldrh	r3, [r7, #22]
 8002526:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff09 	bl	8002344 <forward_r>
	forward_l(alpha + 10);
 8002532:	8afb      	ldrh	r3, [r7, #22]
 8002534:	330a      	adds	r3, #10
 8002536:	b29b      	uxth	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff1b 	bl	8002374 <forward_l>

	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	461a      	mov	r2, r3
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff ff79 	bl	800243c <calculate_motor_speed>
 800254a:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	461a      	mov	r2, r3
 8002552:	6939      	ldr	r1, [r7, #16]
 8002554:	2001      	movs	r0, #1
 8002556:	f7ff ff71 	bl	800243c <calculate_motor_speed>
 800255a:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 800255e:	68b8      	ldr	r0, [r7, #8]
 8002560:	f7fe f81a 	bl	8000598 <__aeabi_f2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4815      	ldr	r0, [pc, #84]	@ (80025c0 <motorcontrol_souris+0xbc>)
 800256a:	f009 fb05 	bl	800bb78 <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe f812 	bl	8000598 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4812      	ldr	r0, [pc, #72]	@ (80025c4 <motorcontrol_souris+0xc0>)
 800257a:	f009 fafd 	bl	800bb78 <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <motorcontrol_souris+0xc4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	4811      	ldr	r0, [pc, #68]	@ (80025cc <motorcontrol_souris+0xc8>)
 8002588:	f009 faf6 	bl	800bb78 <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <motorcontrol_souris+0xcc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	4619      	mov	r1, r3
 8002594:	480f      	ldr	r0, [pc, #60]	@ (80025d4 <motorcontrol_souris+0xd0>)
 8002596:	f009 faef 	bl	800bb78 <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <motorcontrol_souris+0xd4>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	4618      	mov	r0, r3
 80025ae:	f007 fe6d 	bl	800a28c <vTaskDelay>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	0800de9c 	.word	0x0800de9c
 80025c0:	0800ded0 	.word	0x0800ded0
 80025c4:	0800def8 	.word	0x0800def8
 80025c8:	20000368 	.word	0x20000368
 80025cc:	0800df20 	.word	0x0800df20
 80025d0:	200003b4 	.word	0x200003b4
 80025d4:	0800df40 	.word	0x0800df40
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <motorcontrol_predateur>:


/**
 * @brief Mode "Prédateur" pour un déplacement rapide.
 */
void motorcontrol_predateur(void) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 30% de 8500
 80025e2:	f640 5348 	movw	r3, #3400	@ 0xd48
 80025e6:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 80025e8:	2300      	movs	r3, #0
 80025ea:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 80025ec:	2332      	movs	r3, #50	@ 0x32
 80025ee:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 80025f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f4:	81fb      	strh	r3, [r7, #14]

	printf("Mode Prédateur : moteurs avancent à grande vitesse.\n");
 80025f6:	4827      	ldr	r0, [pc, #156]	@ (8002694 <motorcontrol_predateur+0xb8>)
 80025f8:	f009 fb26 	bl	800bc48 <puts>
	forward_r(alpha + 1850);
 80025fc:	8afb      	ldrh	r3, [r7, #22]
 80025fe:	f203 733a 	addw	r3, r3, #1850	@ 0x73a
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe9d 	bl	8002344 <forward_r>
	forward_l(alpha+ 50);
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	3332      	adds	r3, #50	@ 0x32
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff feaf 	bl	8002374 <forward_l>


	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	461a      	mov	r2, r3
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ff0d 	bl	800243c <calculate_motor_speed>
 8002622:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	461a      	mov	r2, r3
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff ff05 	bl	800243c <calculate_motor_speed>
 8002632:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f7fd ffae 	bl	8000598 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4815      	ldr	r0, [pc, #84]	@ (8002698 <motorcontrol_predateur+0xbc>)
 8002642:	f009 fa99 	bl	800bb78 <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fd ffa6 	bl	8000598 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4812      	ldr	r0, [pc, #72]	@ (800269c <motorcontrol_predateur+0xc0>)
 8002652:	f009 fa91 	bl	800bb78 <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <motorcontrol_predateur+0xc4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4811      	ldr	r0, [pc, #68]	@ (80026a4 <motorcontrol_predateur+0xc8>)
 8002660:	f009 fa8a 	bl	800bb78 <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 8002664:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <motorcontrol_predateur+0xcc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	480f      	ldr	r0, [pc, #60]	@ (80026ac <motorcontrol_predateur+0xd0>)
 800266e:	f009 fa83 	bl	800bb78 <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	4a0c      	ldr	r2, [pc, #48]	@ (80026b0 <motorcontrol_predateur+0xd4>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	4618      	mov	r0, r3
 8002686:	f007 fe01 	bl	800a28c <vTaskDelay>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800df5c 	.word	0x0800df5c
 8002698:	0800ded0 	.word	0x0800ded0
 800269c:	0800def8 	.word	0x0800def8
 80026a0:	20000368 	.word	0x20000368
 80026a4:	0800df20 	.word	0x0800df20
 80026a8:	200003b4 	.word	0x200003b4
 80026ac:	0800df40 	.word	0x0800df40
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <pivot>:

/**
 * @brief Effectue un pivot arrière en cas d'obstacle.
 */
void pivot(void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	uint16_t alpha = 1200;  // 30% de 8500
 80026ba:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80026be:	80fb      	strh	r3, [r7, #6]

	// Arrêter les moteurs
	stop_r();
 80026c0:	f7ff fea0 	bl	8002404 <stop_r>
	stop_l();
 80026c4:	f7ff feac 	bl	8002420 <stop_l>
	printf("Danger détecté : moteur arrêté. Pivot arrière en cours...\n");
 80026c8:	4815      	ldr	r0, [pc, #84]	@ (8002720 <pivot+0x6c>)
 80026ca:	f009 fabd 	bl	800bc48 <puts>

	// Effectuer un pivot en arrière
	reverse_r(alpha + 3050);       // Moteur droit recule
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	f603 33ea 	addw	r3, r3, #3050	@ 0xbea
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fe64 	bl	80023a4 <reverse_r>
	reverse_l(alpha );   // Moteur gauche recule plus lentement pour pivoter
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fe78 	bl	80023d4 <reverse_l>
	vTaskDelay(pdMS_TO_TICKS(600)); // Pivot pendant 1,5 seconde
 80026e4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80026e8:	f007 fdd0 	bl	800a28c <vTaskDelay>

	// Arrêter les moteurs après le pivot
	stop_r();
 80026ec:	f7ff fe8a 	bl	8002404 <stop_r>
	stop_l();
 80026f0:	f7ff fe96 	bl	8002420 <stop_l>

	vTaskDelay(pdMS_TO_TICKS(200));
 80026f4:	20c8      	movs	r0, #200	@ 0xc8
 80026f6:	f007 fdc9 	bl	800a28c <vTaskDelay>

	forward_r(alpha+ 2450);
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe1e 	bl	8002344 <forward_r>

	vTaskDelay(pdMS_TO_TICKS(320));
 8002708:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800270c:	f007 fdbe 	bl	800a28c <vTaskDelay>

	printf("Pivot terminé, moteurs arrêtés.\n");
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <pivot+0x70>)
 8002712:	f009 fa99 	bl	800bc48 <puts>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	0800df94 	.word	0x0800df94
 8002724:	0800dfd4 	.word	0x0800dfd4

08002728 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <MX_SPI1_Init+0x74>)
 800272e:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <MX_SPI1_Init+0x78>)
 8002730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <MX_SPI1_Init+0x74>)
 8002734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <MX_SPI1_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <MX_SPI1_Init+0x74>)
 8002742:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <MX_SPI1_Init+0x74>)
 800274a:	2202      	movs	r2, #2
 800274c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800274e:	4b13      	ldr	r3, [pc, #76]	@ (800279c <MX_SPI1_Init+0x74>)
 8002750:	2201      	movs	r2, #1
 8002752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <MX_SPI1_Init+0x74>)
 8002756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800275a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <MX_SPI1_Init+0x74>)
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <MX_SPI1_Init+0x74>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <MX_SPI1_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <MX_SPI1_Init+0x74>)
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <MX_SPI1_Init+0x74>)
 8002776:	2207      	movs	r2, #7
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800277a:	4b08      	ldr	r3, [pc, #32]	@ (800279c <MX_SPI1_Init+0x74>)
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <MX_SPI1_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	@ (800279c <MX_SPI1_Init+0x74>)
 8002788:	f003 fb2c 	bl	8005de4 <HAL_SPI_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002792:	f7ff fda7 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000268 	.word	0x20000268
 80027a0:	40013000 	.word	0x40013000

080027a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_SPI_MspInit+0x7c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d128      	bne.n	8002818 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	4a16      	ldr	r2, [pc, #88]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a10      	ldr	r2, [pc, #64]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <HAL_SPI_MspInit+0x80>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027f6:	23e0      	movs	r3, #224	@ 0xe0
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002806:	2305      	movs	r3, #5
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f001 fb10 	bl	8003e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002818:	bf00      	nop
 800281a:	3728      	adds	r7, #40	@ 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40013000 	.word	0x40013000
 8002824:	40021000 	.word	0x40021000

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_MspInit+0x50>)
 8002830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_MspInit+0x50>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6613      	str	r3, [r2, #96]	@ 0x60
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_MspInit+0x50>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_MspInit+0x50>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	4a0b      	ldr	r2, [pc, #44]	@ (8002878 <HAL_MspInit+0x50>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	@ 0x58
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_MspInit+0x50>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	210f      	movs	r1, #15
 8002862:	f06f 0001 	mvn.w	r0, #1
 8002866:	f001 f845 	bl	80038f4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800286a:	f002 fb5f 	bl	8004f2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800288c:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <HAL_InitTick+0xc4>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	4a2b      	ldr	r2, [pc, #172]	@ (8002940 <HAL_InitTick+0xc4>)
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	6593      	str	r3, [r2, #88]	@ 0x58
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <HAL_InitTick+0xc4>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028a4:	f107 020c 	add.w	r2, r7, #12
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 f832 	bl	8005918 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028b4:	f003 f804 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 80028b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028bc:	4a21      	ldr	r2, [pc, #132]	@ (8002944 <HAL_InitTick+0xc8>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9b      	lsrs	r3, r3, #18
 80028c4:	3b01      	subs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <HAL_InitTick+0xcc>)
 80028ca:	4a20      	ldr	r2, [pc, #128]	@ (800294c <HAL_InitTick+0xd0>)
 80028cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <HAL_InitTick+0xcc>)
 80028d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <HAL_InitTick+0xcc>)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_InitTick+0xcc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e2:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_InitTick+0xcc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80028e8:	4817      	ldr	r0, [pc, #92]	@ (8002948 <HAL_InitTick+0xcc>)
 80028ea:	f004 f9af 	bl	8006c4c <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80028f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11b      	bne.n	8002934 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80028fc:	4812      	ldr	r0, [pc, #72]	@ (8002948 <HAL_InitTick+0xcc>)
 80028fe:	f004 f9fd 	bl	8006cfc <HAL_TIM_Base_Start_IT>
 8002902:	4603      	mov	r3, r0
 8002904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002910:	2036      	movs	r0, #54	@ 0x36
 8002912:	f001 f809 	bl	8003928 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	d808      	bhi.n	800292e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800291c:	2200      	movs	r2, #0
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	2036      	movs	r0, #54	@ 0x36
 8002922:	f000 ffe7 	bl	80038f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <HAL_InitTick+0xd4>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e002      	b.n	8002934 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002938:	4618      	mov	r0, r3
 800293a:	3730      	adds	r7, #48	@ 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	431bde83 	.word	0x431bde83
 8002948:	200002cc 	.word	0x200002cc
 800294c:	40001000 	.word	0x40001000
 8002950:	20000004 	.word	0x20000004

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <NMI_Handler+0x4>

0800295c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <HardFault_Handler+0x4>

08002964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <MemManage_Handler+0x4>

0800296c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <BusFault_Handler+0x4>

08002974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <UsageFault_Handler+0x4>

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	printf("tap 1") ;
 8002990:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <EXTI1_IRQHandler+0x14>)
 8002992:	f009 f8f1 	bl	800bb78 <iprintf>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ADX_Pin);
 8002996:	2002      	movs	r0, #2
 8002998:	f001 fbe8 	bl	800416c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	0800dff8 	.word	0x0800dff8

080029a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	printf("tap 2") ;
 80029a8:	4803      	ldr	r0, [pc, #12]	@ (80029b8 <EXTI2_IRQHandler+0x14>)
 80029aa:	f009 f8e5 	bl	800bb78 <iprintf>

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ADX_Pin);
 80029ae:	2004      	movs	r0, #4
 80029b0:	f001 fbdc 	bl	800416c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800e000 	.word	0x0800e000

080029bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80029c0:	4802      	ldr	r0, [pc, #8]	@ (80029cc <DMA1_Channel1_IRQHandler+0x10>)
 80029c2:	f001 f927 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000528 	.word	0x20000528

080029d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_TOF2_Pin);
 80029d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80029d8:	f001 fbc8 	bl	800416c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80029dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80029e0:	f001 fbc4 	bl	800416c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <UART4_IRQHandler+0x10>)
 80029ee:	f006 f85f 	bl	8008ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000400 	.word	0x20000400

080029fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <TIM6_DAC_IRQHandler+0x10>)
 8002a02:	f004 fd11 	bl	8007428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200002cc 	.word	0x200002cc

08002a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return 1;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_kill>:

int _kill(int pid, int sig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a2a:	f009 fa3f 	bl	800beac <__errno>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2216      	movs	r2, #22
 8002a32:	601a      	str	r2, [r3, #0]
  return -1;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_exit>:

void _exit (int status)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffe7 	bl	8002a20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <_exit+0x12>

08002a56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e00a      	b.n	8002a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a68:	f3af 8000 	nop.w
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	b2ca      	uxtb	r2, r1
 8002a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	dbf0      	blt.n	8002a68 <_read+0x12>
  }

  return len;
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ab8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_isatty>:

int _isatty(int file)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad0:	2301      	movs	r3, #1
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f009 f9c0 	bl	800beac <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20008000 	.word	0x20008000
 8002b58:	00000400 	.word	0x00000400
 8002b5c:	20000318 	.word	0x20000318
 8002b60:	20005650 	.word	0x20005650

08002b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b09c      	sub	sp, #112	@ 0x70
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ba8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	615a      	str	r2, [r3, #20]
 8002bba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2234      	movs	r2, #52	@ 0x34
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f009 f920 	bl	800be08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bca:	4a54      	ldr	r2, [pc, #336]	@ (8002d1c <MX_TIM1_Init+0x194>)
 8002bcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bce:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002bd4:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8002bda:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bdc:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002be0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002be8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bf4:	4848      	ldr	r0, [pc, #288]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002bf6:	f004 f829 	bl	8006c4c <HAL_TIM_Base_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002c00:	f7ff fb70 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4841      	ldr	r0, [pc, #260]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002c12:	f004 fe6d 	bl	80078f0 <HAL_TIM_ConfigClockSource>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c1c:	f7ff fb62 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c20:	483d      	ldr	r0, [pc, #244]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002c22:	f004 f8d5 	bl	8006dd0 <HAL_TIM_PWM_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c2c:	f7ff fb5a 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c40:	4619      	mov	r1, r3
 8002c42:	4835      	ldr	r0, [pc, #212]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002c44:	f005 fcdc 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c4e:	f7ff fb49 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c52:	2360      	movs	r3, #96	@ 0x60
 8002c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8002c56:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c60:	2300      	movs	r3, #0
 8002c62:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4827      	ldr	r0, [pc, #156]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002c7a:	f004 fd25 	bl	80076c8 <HAL_TIM_PWM_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002c84:	f7ff fb2e 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4821      	ldr	r0, [pc, #132]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002c92:	f004 fd19 	bl	80076c8 <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002c9c:	f7ff fb22 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ca4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4619      	mov	r1, r3
 8002cac:	481a      	ldr	r0, [pc, #104]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002cae:	f004 fd0b 	bl	80076c8 <HAL_TIM_PWM_ConfigChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002cb8:	f7ff fb14 	bl	80022e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002cfa:	f005 fd03 	bl	8008704 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8002d04:	f7ff faee 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d08:	4803      	ldr	r0, [pc, #12]	@ (8002d18 <MX_TIM1_Init+0x190>)
 8002d0a:	f000 f949 	bl	8002fa0 <HAL_TIM_MspPostInit>

}
 8002d0e:	bf00      	nop
 8002d10:	3770      	adds	r7, #112	@ 0x70
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000031c 	.word	0x2000031c
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	@ 0x30
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	2224      	movs	r2, #36	@ 0x24
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f009 f86a 	bl	800be08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d3e:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <MX_TIM3_Init+0xa8>)
 8002d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d44:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d50:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480d      	ldr	r0, [pc, #52]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002d90:	f004 fa16 	bl	80071c0 <HAL_TIM_Encoder_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002d9a:	f7ff faa3 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da6:	463b      	mov	r3, r7
 8002da8:	4619      	mov	r1, r3
 8002daa:	4806      	ldr	r0, [pc, #24]	@ (8002dc4 <MX_TIM3_Init+0xa4>)
 8002dac:	f005 fc28 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002db6:	f7ff fa95 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	3730      	adds	r7, #48	@ 0x30
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000368 	.word	0x20000368
 8002dc8:	40000400 	.word	0x40000400

08002dcc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	@ 0x30
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2224      	movs	r2, #36	@ 0x24
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f009 f814 	bl	800be08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	463b      	mov	r3, r7
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dea:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002dec:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <MX_TIM4_Init+0xa8>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002e3c:	f004 f9c0 	bl	80071c0 <HAL_TIM_Encoder_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002e46:	f7ff fa4d 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	4619      	mov	r1, r3
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <MX_TIM4_Init+0xa4>)
 8002e58:	f005 fbd2 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002e62:	f7ff fa3f 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	3730      	adds	r7, #48	@ 0x30
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003b4 	.word	0x200003b4
 8002e74:	40000800 	.word	0x40000800

08002e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_TIM_Base_MspInit+0x38>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10b      	bne.n	8002ea2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f90 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d128      	bne.n	8002f2c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eda:	4b2e      	ldr	r3, [pc, #184]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	4a2d      	ldr	r2, [pc, #180]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efe:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Codeur1_PH1_Pin|Codeur1_PH2_Pin;
 8002f0a:	2330      	movs	r3, #48	@ 0x30
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	481c      	ldr	r0, [pc, #112]	@ (8002f98 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002f26:	f000 ff87 	bl	8003e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f2a:	e02c      	b.n	8002f86 <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d127      	bne.n	8002f86 <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f36:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	4a16      	ldr	r2, [pc, #88]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	4a10      	ldr	r2, [pc, #64]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Codeur2_PH1_Pin|Codeur2_PH2_Pin;
 8002f66:	23c0      	movs	r3, #192	@ 0xc0
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f76:	2302      	movs	r3, #2
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002f82:	f000 ff59 	bl	8003e38 <HAL_GPIO_Init>
}
 8002f86:	bf00      	nop
 8002f88:	3730      	adds	r7, #48	@ 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40021000 	.word	0x40021000
 8002f98:	48000400 	.word	0x48000400
 8002f9c:	40000800 	.word	0x40000800

08002fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_TIM_MspPostInit+0x68>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d11d      	bne.n	8002ffe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	4a11      	ldr	r2, [pc, #68]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fce:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_TIM_MspPostInit+0x6c>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_MOT1_CH1_Pin|PWM_MOT2_CH2_Pin|LIDAR_M_SCTR_Pin|PWM_MOT1_CH1N_Pin
 8002fda:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002fde:	60fb      	str	r3, [r7, #12]
                          |PWM_MOT2_CH2N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002fec:	2306      	movs	r3, #6
 8002fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ffa:	f000 ff1d 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40021000 	.word	0x40021000

08003010 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003014:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003016:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <MX_UART4_Init+0x94>)
 8003018:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 800301a:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <MX_UART4_Init+0x90>)
 800301c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8003020:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <MX_UART4_Init+0x90>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800302e:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <MX_UART4_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003046:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800304c:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <MX_UART4_Init+0x90>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <MX_UART4_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003058:	4811      	ldr	r0, [pc, #68]	@ (80030a0 <MX_UART4_Init+0x90>)
 800305a:	f005 fc4a 	bl	80088f2 <HAL_UART_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003064:	f7ff f93e 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003068:	2100      	movs	r1, #0
 800306a:	480d      	ldr	r0, [pc, #52]	@ (80030a0 <MX_UART4_Init+0x90>)
 800306c:	f006 fe01 	bl	8009c72 <HAL_UARTEx_SetTxFifoThreshold>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003076:	f7ff f935 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800307a:	2100      	movs	r1, #0
 800307c:	4808      	ldr	r0, [pc, #32]	@ (80030a0 <MX_UART4_Init+0x90>)
 800307e:	f006 fe36 	bl	8009cee <HAL_UARTEx_SetRxFifoThreshold>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003088:	f7ff f92c 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800308c:	4804      	ldr	r0, [pc, #16]	@ (80030a0 <MX_UART4_Init+0x90>)
 800308e:	f006 fdb7 	bl	8009c00 <HAL_UARTEx_DisableFifoMode>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003098:	f7ff f924 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000400 	.word	0x20000400
 80030a4:	40004c00 	.word	0x40004c00

080030a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030ac:	4b22      	ldr	r3, [pc, #136]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030ae:	4a23      	ldr	r2, [pc, #140]	@ (800313c <MX_USART2_UART_Init+0x94>)
 80030b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030b2:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030ce:	220c      	movs	r2, #12
 80030d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d2:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d8:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030f0:	4811      	ldr	r0, [pc, #68]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 80030f2:	f005 fbfe 	bl	80088f2 <HAL_UART_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80030fc:	f7ff f8f2 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003100:	2100      	movs	r1, #0
 8003102:	480d      	ldr	r0, [pc, #52]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 8003104:	f006 fdb5 	bl	8009c72 <HAL_UARTEx_SetTxFifoThreshold>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800310e:	f7ff f8e9 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003112:	2100      	movs	r1, #0
 8003114:	4808      	ldr	r0, [pc, #32]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 8003116:	f006 fdea 	bl	8009cee <HAL_UARTEx_SetRxFifoThreshold>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003120:	f7ff f8e0 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <MX_USART2_UART_Init+0x90>)
 8003126:	f006 fd6b 	bl	8009c00 <HAL_UARTEx_DisableFifoMode>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003130:	f7ff f8d8 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000494 	.word	0x20000494
 800313c:	40004400 	.word	0x40004400

08003140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09c      	sub	sp, #112	@ 0x70
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	2244      	movs	r2, #68	@ 0x44
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f008 fe51 	bl	800be08 <memset>
  if(uartHandle->Instance==UART4)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a57      	ldr	r2, [pc, #348]	@ (80032c8 <HAL_UART_MspInit+0x188>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d16a      	bne.n	8003246 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003170:	2308      	movs	r3, #8
 8003172:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003178:	f107 0318 	add.w	r3, r7, #24
 800317c:	4618      	mov	r0, r3
 800317e:	f002 fc41 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003188:	f7ff f8ac 	bl	80022e4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800318c:	4b4f      	ldr	r3, [pc, #316]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4a4e      	ldr	r2, [pc, #312]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 8003192:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003196:	6593      	str	r3, [r2, #88]	@ 0x58
 8003198:	4b4c      	ldr	r3, [pc, #304]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a4:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a8:	4a48      	ldr	r2, [pc, #288]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b0:	4b46      	ldr	r3, [pc, #280]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_LIDAR_Pin|RX_LIDAR_Pin;
 80031bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80031ce:	2305      	movs	r3, #5
 80031d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031d6:	4619      	mov	r1, r3
 80031d8:	483d      	ldr	r0, [pc, #244]	@ (80032d0 <HAL_UART_MspInit+0x190>)
 80031da:	f000 fe2d 	bl	8003e38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 80031de:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031e0:	4a3d      	ldr	r2, [pc, #244]	@ (80032d8 <HAL_UART_MspInit+0x198>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031e6:	221e      	movs	r2, #30
 80031e8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ea:	4b3a      	ldr	r3, [pc, #232]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f0:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f6:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031fc:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003208:	4b32      	ldr	r3, [pc, #200]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 800320a:	2220      	movs	r2, #32
 800320c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800320e:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 8003210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003214:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003216:	482f      	ldr	r0, [pc, #188]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 8003218:	f000 fb94 	bl	8003944 <HAL_DMA_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003222:	f7ff f85f 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2a      	ldr	r2, [pc, #168]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_UART_MspInit+0x194>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2105      	movs	r1, #5
 8003238:	2034      	movs	r0, #52	@ 0x34
 800323a:	f000 fb5b 	bl	80038f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800323e:	2034      	movs	r0, #52	@ 0x34
 8003240:	f000 fb72 	bl	8003928 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003244:	e03b      	b.n	80032be <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <HAL_UART_MspInit+0x19c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d136      	bne.n	80032be <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003250:	2302      	movs	r3, #2
 8003252:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003258:	f107 0318 	add.w	r3, r7, #24
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fbd1 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8003268:	f7ff f83c 	bl	80022e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800326c:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003276:	6593      	str	r3, [r2, #88]	@ 0x58
 8003278:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003290:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_UART_MspInit+0x18c>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_link_Pin|RX_link_Pin;
 800329c:	230c      	movs	r3, #12
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2300      	movs	r3, #0
 80032aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032ac:	2307      	movs	r3, #7
 80032ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ba:	f000 fdbd 	bl	8003e38 <HAL_GPIO_Init>
}
 80032be:	bf00      	nop
 80032c0:	3770      	adds	r7, #112	@ 0x70
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40004c00 	.word	0x40004c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	48000800 	.word	0x48000800
 80032d4:	20000528 	.word	0x20000528
 80032d8:	40020008 	.word	0x40020008
 80032dc:	40004400 	.word	0x40004400

080032e0 <VL53L1_RdByte>:
#include "VL53L1X_api.h"

extern I2C_HandleTypeDef TOF_PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	4603      	mov	r3, r0
 80032e8:	603a      	str	r2, [r7, #0]
 80032ea:	80fb      	strh	r3, [r7, #6]
 80032ec:	460b      	mov	r3, r1
 80032ee:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 80032f0:	88ba      	ldrh	r2, [r7, #4]
 80032f2:	88f9      	ldrh	r1, [r7, #6]
 80032f4:	2314      	movs	r3, #20
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	2301      	movs	r3, #1
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2302      	movs	r3, #2
 8003302:	4807      	ldr	r0, [pc, #28]	@ (8003320 <VL53L1_RdByte+0x40>)
 8003304:	f001 f8fa 	bl	80044fc <HAL_I2C_Mem_Read>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <VL53L1_RdByte+0x34>
		return VL53L1__IO_ERROR;
 800330e:	f06f 030c 	mvn.w	r3, #12
 8003312:	e000      	b.n	8003316 <VL53L1_RdByte+0x36>
	else
		return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200001f8 	.word	0x200001f8

08003324 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af04      	add	r7, sp, #16
 800332a:	4603      	mov	r3, r0
 800332c:	603a      	str	r2, [r7, #0]
 800332e:	80fb      	strh	r3, [r7, #6]
 8003330:	460b      	mov	r3, r1
 8003332:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8003334:	88ba      	ldrh	r2, [r7, #4]
 8003336:	88f9      	ldrh	r1, [r7, #6]
 8003338:	2314      	movs	r3, #20
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2302      	movs	r3, #2
 8003346:	480c      	ldr	r0, [pc, #48]	@ (8003378 <VL53L1_RdWord+0x54>)
 8003348:	f001 f8d8 	bl	80044fc <HAL_I2C_Mem_Read>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 8003352:	f06f 030c 	mvn.w	r3, #12
 8003356:	e00b      	b.n	8003370 <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b21b      	sxth	r3, r3
 800335e:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8003360:	89fb      	ldrh	r3, [r7, #14]
 8003362:	ba5b      	rev16	r3, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	b21b      	sxth	r3, r3
 8003368:	b29a      	uxth	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	801a      	strh	r2, [r3, #0]
		return 0;
 800336e:	2300      	movs	r3, #0
	}
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200001f8 	.word	0x200001f8

0800337c <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af04      	add	r7, sp, #16
 8003382:	60ba      	str	r2, [r7, #8]
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	4603      	mov	r3, r0
 8003388:	81fb      	strh	r3, [r7, #14]
 800338a:	460b      	mov	r3, r1
 800338c:	81bb      	strh	r3, [r7, #12]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, HAL_MAX_DELAY))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	b29b      	uxth	r3, r3
 8003392:	89ba      	ldrh	r2, [r7, #12]
 8003394:	89f9      	ldrh	r1, [r7, #14]
 8003396:	f04f 30ff 	mov.w	r0, #4294967295
 800339a:	9002      	str	r0, [sp, #8]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2302      	movs	r3, #2
 80033a4:	4806      	ldr	r0, [pc, #24]	@ (80033c0 <VL53L1_ReadMulti+0x44>)
 80033a6:	f001 f8a9 	bl	80044fc <HAL_I2C_Mem_Read>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <VL53L1_ReadMulti+0x3a>
		return VL53L1__IO_ERROR;
 80033b0:	f06f 030c 	mvn.w	r3, #12
 80033b4:	e000      	b.n	80033b8 <VL53L1_ReadMulti+0x3c>
	else
		return 0;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200001f8 	.word	0x200001f8

080033c4 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af04      	add	r7, sp, #16
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
 80033ce:	460b      	mov	r3, r1
 80033d0:	80bb      	strh	r3, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 80033d6:	88ba      	ldrh	r2, [r7, #4]
 80033d8:	88f9      	ldrh	r1, [r7, #6]
 80033da:	2314      	movs	r3, #20
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	2301      	movs	r3, #1
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	1cfb      	adds	r3, r7, #3
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2302      	movs	r3, #2
 80033e8:	4806      	ldr	r0, [pc, #24]	@ (8003404 <VL53L1_WrByte+0x40>)
 80033ea:	f000 ff73 	bl	80042d4 <HAL_I2C_Mem_Write>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 80033f4:	f06f 030c 	mvn.w	r3, #12
 80033f8:	e000      	b.n	80033fc <VL53L1_WrByte+0x38>
	else
		return 0;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200001f8 	.word	0x200001f8

08003408 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af04      	add	r7, sp, #16
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
 8003412:	460b      	mov	r3, r1
 8003414:	80bb      	strh	r3, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	b21b      	sxth	r3, r3
 800341e:	81fb      	strh	r3, [r7, #14]
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	ba5b      	rev16	r3, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	b21b      	sxth	r3, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 800342c:	88ba      	ldrh	r2, [r7, #4]
 800342e:	88f9      	ldrh	r1, [r7, #6]
 8003430:	2314      	movs	r3, #20
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	2302      	movs	r3, #2
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	1cbb      	adds	r3, r7, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2302      	movs	r3, #2
 800343e:	4807      	ldr	r0, [pc, #28]	@ (800345c <VL53L1_WrWord+0x54>)
 8003440:	f000 ff48 	bl	80042d4 <HAL_I2C_Mem_Write>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 800344a:	f06f 030c 	mvn.w	r3, #12
 800344e:	e000      	b.n	8003452 <VL53L1_WrWord+0x4a>
	else
		return 0;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200001f8 	.word	0x200001f8

08003460 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af04      	add	r7, sp, #16
 8003466:	4603      	mov	r3, r0
 8003468:	603a      	str	r2, [r7, #0]
 800346a:	80fb      	strh	r3, [r7, #6]
 800346c:	460b      	mov	r3, r1
 800346e:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	ba1b      	rev	r3, r3
 8003478:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 800347a:	88ba      	ldrh	r2, [r7, #4]
 800347c:	88f9      	ldrh	r1, [r7, #6]
 800347e:	2314      	movs	r3, #20
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	2304      	movs	r3, #4
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	463b      	mov	r3, r7
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2302      	movs	r3, #2
 800348c:	4806      	ldr	r0, [pc, #24]	@ (80034a8 <VL53L1_WrDWord+0x48>)
 800348e:	f000 ff21 	bl	80042d4 <HAL_I2C_Mem_Write>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 8003498:	f06f 030c 	mvn.w	r3, #12
 800349c:	e000      	b.n	80034a0 <VL53L1_WrDWord+0x40>
	else
		return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200001f8 	.word	0x200001f8

080034ac <VL53L1__Init>:
 * @brief:		Test VL53L1 presence,
 * 				initialize sensor,
 * 				set it the default Distance Mode, Timing Budget and Intermeasurement
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
	uint8_t refRegs[4] = {0,0,0,0};
 80034b2:	2300      	movs	r3, #0
 80034b4:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]
	printf("Verification du capteur via I2C...\n");
 80034ba:	4864      	ldr	r0, [pc, #400]	@ (800364c <VL53L1__Init+0x1a0>)
 80034bc:	f008 fbc4 	bl	800bc48 <puts>
	/*status |= VL53L1__Xshut(1);
	if (status)
		return (status);

	HAL_Delay(4);*/
	status = VL53L1_ReadMulti(TOF_ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 80034c0:	463a      	mov	r2, r7
 80034c2:	2304      	movs	r3, #4
 80034c4:	f240 110f 	movw	r1, #271	@ 0x10f
 80034c8:	2052      	movs	r0, #82	@ 0x52
 80034ca:	f7ff ff57 	bl	800337c <VL53L1_ReadMulti>
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <VL53L1__Init+0x3a>
		printf("Erreur I2C lors de la lecture des registres : %d\n", status);
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	4619      	mov	r1, r3
 80034dc:	485c      	ldr	r0, [pc, #368]	@ (8003650 <VL53L1__Init+0x1a4>)
 80034de:	f008 fb4b 	bl	800bb78 <iprintf>
		return 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0ae      	b.n	8003644 <VL53L1__Init+0x198>
	}

	printf("Model ID : 0x%02X, Module Type : 0x%02X, Mask Revision : 0x%02X\n", refRegs[0], refRegs[1], refRegs[2]);
 80034e6:	783b      	ldrb	r3, [r7, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	787b      	ldrb	r3, [r7, #1]
 80034ec:	461a      	mov	r2, r3
 80034ee:	78bb      	ldrb	r3, [r7, #2]
 80034f0:	4858      	ldr	r0, [pc, #352]	@ (8003654 <VL53L1__Init+0x1a8>)
 80034f2:	f008 fb41 	bl	800bb78 <iprintf>


	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1

	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 80034f6:	783b      	ldrb	r3, [r7, #0]
 80034f8:	2bea      	cmp	r3, #234	@ 0xea
 80034fa:	d105      	bne.n	8003508 <VL53L1__Init+0x5c>
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2bcc      	cmp	r3, #204	@ 0xcc
 8003500:	d102      	bne.n	8003508 <VL53L1__Init+0x5c>
 8003502:	78bb      	ldrb	r3, [r7, #2]
 8003504:	2b10      	cmp	r3, #16
 8003506:	d004      	beq.n	8003512 <VL53L1__Init+0x66>
	{
		printf("Valeurs incorrectes des registres. Vérifiez le câblage.\n");
 8003508:	4853      	ldr	r0, [pc, #332]	@ (8003658 <VL53L1__Init+0x1ac>)
 800350a:	f008 fb9d 	bl	800bc48 <puts>
		return (1);
 800350e:	2301      	movs	r3, #1
 8003510:	e098      	b.n	8003644 <VL53L1__Init+0x198>
	}

	printf("Capteur détecté avec succès ! \n");
 8003512:	4852      	ldr	r0, [pc, #328]	@ (800365c <VL53L1__Init+0x1b0>)
 8003514:	f008 fb98 	bl	800bc48 <puts>

	// Initialisation du capteur
	printf("Initialisation du capteur VL53L1X...\n");
 8003518:	4851      	ldr	r0, [pc, #324]	@ (8003660 <VL53L1__Init+0x1b4>)
 800351a:	f008 fb95 	bl	800bc48 <puts>
	status |= VL53L1X_SensorInit(TOF_ADDR);
 800351e:	2052      	movs	r0, #82	@ 0x52
 8003520:	f7fd fef0 	bl	8001304 <VL53L1X_SensorInit>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4313      	orrs	r3, r2
 800352e:	b25b      	sxtb	r3, r3
 8003530:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <VL53L1__Init+0xa0>
		printf("Échec de l'initialisation du capteur VL53L1X : %d\n", status);
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	4619      	mov	r1, r3
 800353c:	4849      	ldr	r0, [pc, #292]	@ (8003664 <VL53L1__Init+0x1b8>)
 800353e:	f008 fb1b 	bl	800bb78 <iprintf>
		HAL_Delay(50);
 8003542:	2032      	movs	r0, #50	@ 0x32
 8003544:	f000 f8fc 	bl	8003740 <HAL_Delay>
		return 1;
 8003548:	2301      	movs	r3, #1
 800354a:	e07b      	b.n	8003644 <VL53L1__Init+0x198>
	}

	// Calibration des offsets et xtalk
	printf("Calibration des offsets et xtalk...\n");
 800354c:	4846      	ldr	r0, [pc, #280]	@ (8003668 <VL53L1__Init+0x1bc>)
 800354e:	f008 fb7b 	bl	800bc48 <puts>
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 8003552:	f06f 0118 	mvn.w	r1, #24
 8003556:	2052      	movs	r0, #82	@ 0x52
 8003558:	f7fe fadf 	bl	8001b1a <VL53L1X_SetOffset>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	4313      	orrs	r3, r2
 8003566:	b25b      	sxtb	r3, r3
 8003568:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <VL53L1__Init+0xd8>
			printf("Erreur de calibration OFFSET : %d\n", status);
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	4619      	mov	r1, r3
 8003574:	483d      	ldr	r0, [pc, #244]	@ (800366c <VL53L1__Init+0x1c0>)
 8003576:	f008 faff 	bl	800bb78 <iprintf>
			HAL_Delay(50);
 800357a:	2032      	movs	r0, #50	@ 0x32
 800357c:	f000 f8e0 	bl	8003740 <HAL_Delay>
			return 1;
 8003580:	2301      	movs	r3, #1
 8003582:	e05f      	b.n	8003644 <VL53L1__Init+0x198>
		}
	status |= VL53L1X_SetXtalk(TOF_ADDR, VL53L1__CALIB_XTALK);
 8003584:	2100      	movs	r1, #0
 8003586:	2052      	movs	r0, #82	@ 0x52
 8003588:	f7fe fafc 	bl	8001b84 <VL53L1X_SetXtalk>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4313      	orrs	r3, r2
 8003596:	b25b      	sxtb	r3, r3
 8003598:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <VL53L1__Init+0x108>
			printf("Erreur de calibration XTALK : %d\n", status);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4832      	ldr	r0, [pc, #200]	@ (8003670 <VL53L1__Init+0x1c4>)
 80035a6:	f008 fae7 	bl	800bb78 <iprintf>
			HAL_Delay(50);
 80035aa:	2032      	movs	r0, #50	@ 0x32
 80035ac:	f000 f8c8 	bl	8003740 <HAL_Delay>
			return 1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e047      	b.n	8003644 <VL53L1__Init+0x198>
		}


	// Configuration des paramètres de mesure
	printf("Configuration des paramètres de mesure...\n");
 80035b4:	482f      	ldr	r0, [pc, #188]	@ (8003674 <VL53L1__Init+0x1c8>)
 80035b6:	f008 fb47 	bl	800bc48 <puts>
	// VL53L1X sensor is available
	/* inizializing: default setting  */
	status |= VL53L1X_SensorInit(TOF_ADDR);
 80035ba:	2052      	movs	r0, #82	@ 0x52
 80035bc:	f7fd fea2 	bl	8001304 <VL53L1X_SensorInit>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	71fb      	strb	r3, [r7, #7]
	/* initializing: device settings */
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 80035ce:	f06f 0118 	mvn.w	r1, #24
 80035d2:	2052      	movs	r0, #82	@ 0x52
 80035d4:	f7fe faa1 	bl	8001b1a <VL53L1X_SetOffset>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	71fb      	strb	r3, [r7, #7]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(TOF_ADDR, VL53L1__DISTANCE_MODE);
 80035e6:	2102      	movs	r1, #2
 80035e8:	2052      	movs	r0, #82	@ 0x52
 80035ea:	f7fe f973 	bl	80018d4 <VL53L1X_SetDistanceMode>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(TOF_ADDR, VL53L1__TIMING_BUDGET);
 80035fc:	2114      	movs	r1, #20
 80035fe:	2052      	movs	r0, #82	@ 0x52
 8003600:	f7fd ffcd 	bl	800159e <VL53L1X_SetTimingBudgetInMs>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4313      	orrs	r3, r2
 800360e:	b25b      	sxtb	r3, r3
 8003610:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetInterMeasurementInMs(TOF_ADDR, VL53L1__INTERMEASUREMENT);
 8003612:	2119      	movs	r1, #25
 8003614:	2052      	movs	r0, #82	@ 0x52
 8003616:	f7fe fa27 	bl	8001a68 <VL53L1X_SetInterMeasurementInMs>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	4313      	orrs	r3, r2
 8003624:	b25b      	sxtb	r3, r3
 8003626:	71fb      	strb	r3, [r7, #7]

	if (status != 0) {
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <VL53L1__Init+0x190>
		printf("Erreur de configuration : %d\n", status);
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4619      	mov	r1, r3
 8003632:	4811      	ldr	r0, [pc, #68]	@ (8003678 <VL53L1__Init+0x1cc>)
 8003634:	f008 faa0 	bl	800bb78 <iprintf>
		return 1;
 8003638:	2301      	movs	r3, #1
 800363a:	e003      	b.n	8003644 <VL53L1__Init+0x198>
	}

	printf("Capteur initialisé avec succès.\n");
 800363c:	480f      	ldr	r0, [pc, #60]	@ (800367c <VL53L1__Init+0x1d0>)
 800363e:	f008 fb03 	bl	800bc48 <puts>
	return status;
 8003642:	79fb      	ldrb	r3, [r7, #7]
};
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	0800e008 	.word	0x0800e008
 8003650:	0800e02c 	.word	0x0800e02c
 8003654:	0800e060 	.word	0x0800e060
 8003658:	0800e0a4 	.word	0x0800e0a4
 800365c:	0800e0e0 	.word	0x0800e0e0
 8003660:	0800e104 	.word	0x0800e104
 8003664:	0800e12c 	.word	0x0800e12c
 8003668:	0800e160 	.word	0x0800e160
 800366c:	0800e184 	.word	0x0800e184
 8003670:	0800e1a8 	.word	0x0800e1a8
 8003674:	0800e1cc 	.word	0x0800e1cc
 8003678:	0800e1f8 	.word	0x0800e1f8
 800367c:	0800e218 	.word	0x0800e218

08003680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003680:	480d      	ldr	r0, [pc, #52]	@ (80036b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003682:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003684:	f7ff fa6e 	bl	8002b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003688:	480c      	ldr	r0, [pc, #48]	@ (80036bc <LoopForever+0x6>)
  ldr r1, =_edata
 800368a:	490d      	ldr	r1, [pc, #52]	@ (80036c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <LoopForever+0xe>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036a0:	4c0a      	ldr	r4, [pc, #40]	@ (80036cc <LoopForever+0x16>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80036ae:	f008 fc03 	bl	800beb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036b2:	f7fe fd49 	bl	8002148 <main>

080036b6 <LoopForever>:

LoopForever:
    b LoopForever
 80036b6:	e7fe      	b.n	80036b6 <LoopForever>
  ldr   r0, =_estack
 80036b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80036c4:	0800e668 	.word	0x0800e668
  ldr r2, =_sbss
 80036c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80036cc:	2000564c 	.word	0x2000564c

080036d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC1_2_IRQHandler>

080036d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f8fe 	bl	80038de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036e2:	200f      	movs	r0, #15
 80036e4:	f7ff f8ca 	bl	800287c <HAL_InitTick>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	71fb      	strb	r3, [r7, #7]
 80036f2:	e001      	b.n	80036f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036f4:	f7ff f898 	bl	8002828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036f8:	79fb      	ldrb	r3, [r7, #7]

}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_IncTick+0x1c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_IncTick+0x20>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4413      	add	r3, r2
 8003712:	4a03      	ldr	r2, [pc, #12]	@ (8003720 <HAL_IncTick+0x1c>)
 8003714:	6013      	str	r3, [r2, #0]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20000588 	.word	0x20000588
 8003724:	20000008 	.word	0x20000008

08003728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return uwTick;
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_GetTick+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000588 	.word	0x20000588

08003740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7ff ffee 	bl	8003728 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d004      	beq.n	8003764 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_Delay+0x40>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003764:	bf00      	nop
 8003766:	f7ff ffdf 	bl	8003728 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d8f7      	bhi.n	8003766 <HAL_Delay+0x26>
  {
  }
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000008 	.word	0x20000008

08003784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b6:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <__NVIC_GetPriorityGrouping+0x18>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0307 	and.w	r3, r3, #7
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db0b      	blt.n	8003812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	4907      	ldr	r1, [pc, #28]	@ (8003820 <__NVIC_EnableIRQ+0x38>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2001      	movs	r0, #1
 800380a:	fa00 f202 	lsl.w	r2, r0, r2
 800380e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	@ (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	@ (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	@ 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff4c 	bl	8003784 <__NVIC_SetPriorityGrouping>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003902:	f7ff ff63 	bl	80037cc <__NVIC_GetPriorityGrouping>
 8003906:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f7ff ffb3 	bl	8003878 <NVIC_EncodePriority>
 8003912:	4602      	mov	r2, r0
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff82 	bl	8003824 <__NVIC_SetPriority>
}
 8003920:	bf00      	nop
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff56 	bl	80037e8 <__NVIC_EnableIRQ>
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e08d      	b.n	8003a72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_DMA_Init+0x138>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d80f      	bhi.n	8003982 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b45      	ldr	r3, [pc, #276]	@ (8003a80 <HAL_DMA_Init+0x13c>)
 800396a:	4413      	add	r3, r2
 800396c:	4a45      	ldr	r2, [pc, #276]	@ (8003a84 <HAL_DMA_Init+0x140>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a42      	ldr	r2, [pc, #264]	@ (8003a88 <HAL_DMA_Init+0x144>)
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003980:	e00e      	b.n	80039a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_DMA_Init+0x148>)
 800398a:	4413      	add	r3, r2
 800398c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <HAL_DMA_Init+0x140>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a90 <HAL_DMA_Init+0x14c>)
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9be 	bl	8003d74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a00:	d102      	bne.n	8003a08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_DMA_Init+0x104>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d80c      	bhi.n	8003a48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9de 	bl	8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	e008      	b.n	8003a5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40020407 	.word	0x40020407
 8003a80:	bffdfff8 	.word	0xbffdfff8
 8003a84:	cccccccd 	.word	0xcccccccd
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	bffdfbf8 	.word	0xbffdfbf8
 8003a90:	40020400 	.word	0x40020400

08003a94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d005      	beq.n	8003ab8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e037      	b.n	8003b28 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020e 	bic.w	r2, r2, #14
 8003ac6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b04:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b1c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b26:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e047      	b.n	8003c0a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 020e 	bic.w	r2, r2, #14
 8003b88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f003 021f 	and.w	r2, r3, #31
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003be8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
    }
  }
  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d026      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x7a>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d021      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	2104      	movs	r1, #4
 8003c76:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d071      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c8c:	e06c      	b.n	8003d68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2202      	movs	r2, #2
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02e      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d029      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020a 	bic.w	r2, r2, #10
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f003 021f 	and.w	r2, r3, #31
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2102      	movs	r1, #2
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d038      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cfe:	e033      	b.n	8003d68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2208      	movs	r2, #8
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02a      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d025      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 020e 	bic.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f003 021f 	and.w	r2, r3, #31
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
}
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d802      	bhi.n	8003d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d88:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e001      	b.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d90:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40020407 	.word	0x40020407
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40020820 	.word	0x40020820
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020880 	.word	0x40020880

08003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	1000823f 	.word	0x1000823f
 8003e34:	40020940 	.word	0x40020940

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e46:	e15a      	b.n	80040fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 814c 	beq.w	80040f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d005      	beq.n	8003e78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d017      	beq.n	8003f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d123      	bne.n	8003f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	08da      	lsrs	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3208      	adds	r2, #8
 8003f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2203      	movs	r2, #3
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a6 	beq.w	80040f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fac:	4b5b      	ldr	r3, [pc, #364]	@ (800411c <HAL_GPIO_Init+0x2e4>)
 8003fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800411c <HAL_GPIO_Init+0x2e4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fb8:	4b58      	ldr	r3, [pc, #352]	@ (800411c <HAL_GPIO_Init+0x2e4>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc4:	4a56      	ldr	r2, [pc, #344]	@ (8004120 <HAL_GPIO_Init+0x2e8>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fee:	d01f      	beq.n	8004030 <HAL_GPIO_Init+0x1f8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8004124 <HAL_GPIO_Init+0x2ec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d019      	beq.n	800402c <HAL_GPIO_Init+0x1f4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4b      	ldr	r2, [pc, #300]	@ (8004128 <HAL_GPIO_Init+0x2f0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_GPIO_Init+0x1f0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4a      	ldr	r2, [pc, #296]	@ (800412c <HAL_GPIO_Init+0x2f4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00d      	beq.n	8004024 <HAL_GPIO_Init+0x1ec>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a49      	ldr	r2, [pc, #292]	@ (8004130 <HAL_GPIO_Init+0x2f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <HAL_GPIO_Init+0x1e8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a48      	ldr	r2, [pc, #288]	@ (8004134 <HAL_GPIO_Init+0x2fc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_GPIO_Init+0x1e4>
 8004018:	2305      	movs	r3, #5
 800401a:	e00a      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 800401c:	2306      	movs	r3, #6
 800401e:	e008      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004020:	2304      	movs	r3, #4
 8004022:	e006      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004024:	2303      	movs	r3, #3
 8004026:	e004      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004028:	2302      	movs	r3, #2
 800402a:	e002      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004030:	2300      	movs	r3, #0
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004042:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_GPIO_Init+0x2e8>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004050:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_GPIO_Init+0x300>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004074:	4a30      	ldr	r2, [pc, #192]	@ (8004138 <HAL_GPIO_Init+0x300>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800407a:	4b2f      	ldr	r3, [pc, #188]	@ (8004138 <HAL_GPIO_Init+0x300>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409e:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <HAL_GPIO_Init+0x300>)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040a4:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <HAL_GPIO_Init+0x300>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <HAL_GPIO_Init+0x300>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_GPIO_Init+0x300>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040f2:	4a11      	ldr	r2, [pc, #68]	@ (8004138 <HAL_GPIO_Init+0x300>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f ae9d 	bne.w	8003e48 <HAL_GPIO_Init+0x10>
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40021000 	.word	0x40021000
 8004120:	40010000 	.word	0x40010000
 8004124:	48000400 	.word	0x48000400
 8004128:	48000800 	.word	0x48000800
 800412c:	48000c00 	.word	0x48000c00
 8004130:	48001000 	.word	0x48001000
 8004134:	48001400 	.word	0x48001400
 8004138:	40010400 	.word	0x40010400

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004158:	e002      	b.n	8004160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004176:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004182:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f882 	bl	8002294 <HAL_GPIO_EXTI_Callback>
  }
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40010400 	.word	0x40010400

0800419c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e08d      	b.n	80042ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd febc 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	@ 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	e006      	b.n	8004224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d108      	bne.n	800423e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	e007      	b.n	800424e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800425c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69d9      	ldr	r1, [r3, #28]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	f040 80f9 	bne.w	80044ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_I2C_Mem_Write+0x34>
 8004302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800430e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0ed      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Mem_Write+0x4e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0e6      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800432a:	f7ff f9fd 	bl	8003728 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2319      	movs	r3, #25
 8004336:	2201      	movs	r2, #1
 8004338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fac3 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0d1      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2221      	movs	r2, #33	@ 0x21
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800436c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004374:	88f8      	ldrh	r0, [r7, #6]
 8004376:	893a      	ldrh	r2, [r7, #8]
 8004378:	8979      	ldrh	r1, [r7, #10]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4603      	mov	r3, r0
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f9d3 	bl	8004730 <I2C_RequestMemoryWrite>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0a9      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2bff      	cmp	r3, #255	@ 0xff
 80043a4:	d90e      	bls.n	80043c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	22ff      	movs	r2, #255	@ 0xff
 80043aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fc47 	bl	8004c50 <I2C_TransferConfig>
 80043c2:	e00f      	b.n	80043e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	8979      	ldrh	r1, [r7, #10]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fc36 	bl	8004c50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fac6 	bl	800497a <I2C_WaitOnTXISFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e07b      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d034      	beq.n	800449c <HAL_I2C_Mem_Write+0x1c8>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	d130      	bne.n	800449c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	2200      	movs	r2, #0
 8004442:	2180      	movs	r1, #128	@ 0x80
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fa3f 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e04d      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2bff      	cmp	r3, #255	@ 0xff
 800445c:	d90e      	bls.n	800447c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	@ 0xff
 8004462:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	b2da      	uxtb	r2, r3
 800446a:	8979      	ldrh	r1, [r7, #10]
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fbeb 	bl	8004c50 <I2C_TransferConfig>
 800447a:	e00f      	b.n	800449c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	b2da      	uxtb	r2, r3
 800448c:	8979      	ldrh	r1, [r7, #10]
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fbda 	bl	8004c50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d19e      	bne.n	80043e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 faac 	bl	8004a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e01a      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2220      	movs	r2, #32
 80044c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <HAL_I2C_Mem_Write+0x224>)
 80044ce:	400b      	ands	r3, r1
 80044d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	fe00e800 	.word	0xfe00e800

080044fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	460b      	mov	r3, r1
 8004510:	813b      	strh	r3, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	f040 80fd 	bne.w	800471e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_I2C_Mem_Read+0x34>
 800452a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004536:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0f1      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_I2C_Mem_Read+0x4e>
 8004546:	2302      	movs	r3, #2
 8004548:	e0ea      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004552:	f7ff f8e9 	bl	8003728 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2319      	movs	r3, #25
 800455e:	2201      	movs	r2, #1
 8004560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f9af 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0d5      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2222      	movs	r2, #34	@ 0x22
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800459c:	88f8      	ldrh	r0, [r7, #6]
 800459e:	893a      	ldrh	r2, [r7, #8]
 80045a0:	8979      	ldrh	r1, [r7, #10]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4603      	mov	r3, r0
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f913 	bl	80047d8 <I2C_RequestMemoryRead>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0ad      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2bff      	cmp	r3, #255	@ 0xff
 80045cc:	d90e      	bls.n	80045ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	22ff      	movs	r2, #255	@ 0xff
 80045d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	8979      	ldrh	r1, [r7, #10]
 80045dc:	4b52      	ldr	r3, [pc, #328]	@ (8004728 <HAL_I2C_Mem_Read+0x22c>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fb33 	bl	8004c50 <I2C_TransferConfig>
 80045ea:	e00f      	b.n	800460c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	8979      	ldrh	r1, [r7, #10]
 80045fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_I2C_Mem_Read+0x22c>)
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fb22 	bl	8004c50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	2200      	movs	r2, #0
 8004614:	2104      	movs	r1, #4
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f956 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e07c      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d034      	beq.n	80046cc <HAL_I2C_Mem_Read+0x1d0>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d130      	bne.n	80046cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	@ 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f927 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e04d      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2bff      	cmp	r3, #255	@ 0xff
 800468c:	d90e      	bls.n	80046ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	@ 0xff
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	b2da      	uxtb	r2, r3
 800469a:	8979      	ldrh	r1, [r7, #10]
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fad3 	bl	8004c50 <I2C_TransferConfig>
 80046aa:	e00f      	b.n	80046cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	8979      	ldrh	r1, [r7, #10]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fac2 	bl	8004c50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d19a      	bne.n	800460c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f994 	bl	8004a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e01a      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2220      	movs	r2, #32
 80046f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_I2C_Mem_Read+0x230>)
 80046fe:	400b      	ands	r3, r1
 8004700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	80002400 	.word	0x80002400
 800472c:	fe00e800 	.word	0xfe00e800

08004730 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <I2C_RequestMemoryWrite+0xa4>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fa79 	bl	8004c50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f909 	bl	800497a <I2C_WaitOnTXISFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e02c      	b.n	80047cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004778:	893b      	ldrh	r3, [r7, #8]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	629a      	str	r2, [r3, #40]	@ 0x28
 8004782:	e015      	b.n	80047b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	b29b      	uxth	r3, r3
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f8ef 	bl	800497a <I2C_WaitOnTXISFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e012      	b.n	80047cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047a6:	893b      	ldrh	r3, [r7, #8]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2180      	movs	r1, #128	@ 0x80
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f884 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	80002000 	.word	0x80002000

080047d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	460b      	mov	r3, r1
 80047ec:	813b      	strh	r3, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	4b20      	ldr	r3, [pc, #128]	@ (800487c <I2C_RequestMemoryRead+0xa4>)
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2300      	movs	r3, #0
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa26 	bl	8004c50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f8b6 	bl	800497a <I2C_WaitOnTXISFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e02c      	b.n	8004872 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
 8004828:	e015      	b.n	8004856 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	b29b      	uxth	r3, r3
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f89c 	bl	800497a <I2C_WaitOnTXISFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e012      	b.n	8004872 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800484c:	893b      	ldrh	r3, [r7, #8]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2200      	movs	r2, #0
 800485e:	2140      	movs	r1, #64	@ 0x40
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f831 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	80002000 	.word	0x80002000

08004880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d103      	bne.n	800489e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d007      	beq.n	80048bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	619a      	str	r2, [r3, #24]
  }
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d8:	e03b      	b.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f8d6 	bl	8004a90 <I2C_IsErrorOccurred>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d02d      	beq.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fe ff17 	bl	8003728 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d122      	bne.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	d113      	bne.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e00f      	b.n	8004972 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d0b4      	beq.n	80048da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004986:	e033      	b.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f87f 	bl	8004a90 <I2C_IsErrorOccurred>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e031      	b.n	8004a00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d025      	beq.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7fe fec0 	bl	8003728 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11a      	bne.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d013      	beq.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e007      	b.n	8004a00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d1c4      	bne.n	8004988 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a14:	e02f      	b.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f838 	bl	8004a90 <I2C_IsErrorOccurred>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02d      	b.n	8004a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fe fe7d 	bl	8003728 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d013      	beq.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e007      	b.n	8004a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d1c8      	bne.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	@ 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d068      	beq.n	8004b8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ac4:	e049      	b.n	8004b5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d045      	beq.n	8004b5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe fe2b 	bl	8003728 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_IsErrorOccurred+0x54>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d13a      	bne.n	8004b5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004af6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b06:	d121      	bne.n	8004b4c <I2C_IsErrorOccurred+0xbc>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b0e:	d01d      	beq.n	8004b4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d01a      	beq.n	8004b4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b26:	f7fe fdff 	bl	8003728 <HAL_GetTick>
 8004b2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b2c:	e00e      	b.n	8004b4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b2e:	f7fe fdfb 	bl	8003728 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b19      	cmp	r3, #25
 8004b3a:	d907      	bls.n	8004b4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f043 0320 	orr.w	r3, r3, #32
 8004b42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b4a:	e006      	b.n	8004b5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d1e9      	bne.n	8004b2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d003      	beq.n	8004b70 <I2C_IsErrorOccurred+0xe0>
 8004b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0aa      	beq.n	8004ac6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01c      	beq.n	8004c3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff fe3b 	bl	8004880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <I2C_IsErrorOccurred+0x1bc>)
 8004c16:	400b      	ands	r3, r1
 8004c18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3728      	adds	r7, #40	@ 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	fe00e800 	.word	0xfe00e800

08004c50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c68:	7a7b      	ldrb	r3, [r7, #9]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	0d5b      	lsrs	r3, r3, #21
 8004c8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c8e:	4b08      	ldr	r3, [pc, #32]	@ (8004cb0 <I2C_TransferConfig+0x60>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	43db      	mvns	r3, r3
 8004c94:	ea02 0103 	and.w	r1, r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	03ff63ff 	.word	0x03ff63ff

08004cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d138      	bne.n	8004d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e032      	b.n	8004d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	@ 0x24
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d139      	bne.n	8004dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e033      	b.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	@ 0x24
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d141      	bne.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004df2:	4b4b      	ldr	r3, [pc, #300]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d131      	bne.n	8004e64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e00:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e06:	4a46      	ldr	r2, [pc, #280]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e10:	4b43      	ldr	r3, [pc, #268]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e18:	4a41      	ldr	r2, [pc, #260]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e20:	4b40      	ldr	r3, [pc, #256]	@ (8004f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2232      	movs	r2, #50	@ 0x32
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	0c9b      	lsrs	r3, r3, #18
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e36:	e002      	b.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e3e:	4b38      	ldr	r3, [pc, #224]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d102      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f2      	bne.n	8004e38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e52:	4b33      	ldr	r3, [pc, #204]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5e:	d158      	bne.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e057      	b.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e64:	4b2e      	ldr	r3, [pc, #184]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e74:	e04d      	b.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7c:	d141      	bne.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e7e:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8a:	d131      	bne.n	8004ef0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e8c:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e92:	4a23      	ldr	r2, [pc, #140]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e9c:	4b20      	ldr	r3, [pc, #128]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2232      	movs	r2, #50	@ 0x32
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	0c9b      	lsrs	r3, r3, #18
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec2:	e002      	b.n	8004eca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eca:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed6:	d102      	bne.n	8004ede <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f2      	bne.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d112      	bne.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e011      	b.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f00:	e007      	b.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f0a:	4a05      	ldr	r2, [pc, #20]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40007000 	.word	0x40007000
 8004f24:	20000000 	.word	0x20000000
 8004f28:	431bde83 	.word	0x431bde83

08004f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f30:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a04      	ldr	r2, [pc, #16]	@ (8004f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f3a:	6093      	str	r3, [r2, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40007000 	.word	0x40007000

08004f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e2fe      	b.n	800555c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d075      	beq.n	8005056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6a:	4b97      	ldr	r3, [pc, #604]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f74:	4b94      	ldr	r3, [pc, #592]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d102      	bne.n	8004f8a <HAL_RCC_OscConfig+0x3e>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_OscConfig+0x44>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	4b8d      	ldr	r3, [pc, #564]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05b      	beq.n	8005054 <HAL_RCC_OscConfig+0x108>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d157      	bne.n	8005054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e2d9      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x74>
 8004fb2:	4b85      	ldr	r3, [pc, #532]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a84      	ldr	r2, [pc, #528]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e01d      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x98>
 8004fca:	4b7f      	ldr	r3, [pc, #508]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7e      	ldr	r2, [pc, #504]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7b      	ldr	r2, [pc, #492]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fe4:	4b78      	ldr	r3, [pc, #480]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a77      	ldr	r2, [pc, #476]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b75      	ldr	r3, [pc, #468]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a74      	ldr	r2, [pc, #464]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe fb90 	bl	8003728 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500c:	f7fe fb8c 	bl	8003728 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	@ 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e29e      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501e:	4b6a      	ldr	r3, [pc, #424]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0xc0>
 800502a:	e014      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fe fb7c 	bl	8003728 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005034:	f7fe fb78 	bl	8003728 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	@ 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e28a      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005046:	4b60      	ldr	r3, [pc, #384]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0xe8>
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d075      	beq.n	800514e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	4b59      	ldr	r3, [pc, #356]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506c:	4b56      	ldr	r3, [pc, #344]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d102      	bne.n	8005082 <HAL_RCC_OscConfig+0x136>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d002      	beq.n	8005088 <HAL_RCC_OscConfig+0x13c>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d11f      	bne.n	80050c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005088:	4b4f      	ldr	r3, [pc, #316]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_OscConfig+0x154>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e25d      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a0:	4b49      	ldr	r3, [pc, #292]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	4946      	ldr	r1, [pc, #280]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050b4:	4b45      	ldr	r3, [pc, #276]	@ (80051cc <HAL_RCC_OscConfig+0x280>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd fbdf 	bl	800287c <HAL_InitTick>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d043      	beq.n	800514c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e249      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d023      	beq.n	8005118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d0:	4b3d      	ldr	r3, [pc, #244]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a3c      	ldr	r2, [pc, #240]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe fb24 	bl	8003728 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e4:	f7fe fb20 	bl	8003728 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e232      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f6:	4b34      	ldr	r3, [pc, #208]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005102:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	492d      	ldr	r1, [pc, #180]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
 8005116:	e01a      	b.n	800514e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a2a      	ldr	r2, [pc, #168]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800511e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fe fb00 	bl	8003728 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512c:	f7fe fafc 	bl	8003728 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e20e      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800513e:	4b22      	ldr	r3, [pc, #136]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x1e0>
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800514c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d041      	beq.n	80051de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01c      	beq.n	800519c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005162:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005168:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fe fad9 	bl	8003728 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517a:	f7fe fad5 	bl	8003728 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1e7      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ef      	beq.n	800517a <HAL_RCC_OscConfig+0x22e>
 800519a:	e020      	b.n	80051de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800519c:	4b0a      	ldr	r3, [pc, #40]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fe fabc 	bl	8003728 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b2:	e00d      	b.n	80051d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fe fab8 	bl	8003728 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d906      	bls.n	80051d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1ca      	b.n	800555c <HAL_RCC_OscConfig+0x610>
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ea      	bne.n	80051b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80a6 	beq.w	8005338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ec:	2300      	movs	r3, #0
 80051ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051f0:	4b84      	ldr	r3, [pc, #528]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80051f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_OscConfig+0x2b4>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x2b6>
 8005200:	2300      	movs	r3, #0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	4a7e      	ldr	r2, [pc, #504]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6593      	str	r3, [r2, #88]	@ 0x58
 8005212:	4b7c      	ldr	r3, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005222:	4b79      	ldr	r3, [pc, #484]	@ (8005408 <HAL_RCC_OscConfig+0x4bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522e:	4b76      	ldr	r3, [pc, #472]	@ (8005408 <HAL_RCC_OscConfig+0x4bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a75      	ldr	r2, [pc, #468]	@ (8005408 <HAL_RCC_OscConfig+0x4bc>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7fe fa75 	bl	8003728 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fe fa71 	bl	8003728 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e183      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005254:	4b6c      	ldr	r3, [pc, #432]	@ (8005408 <HAL_RCC_OscConfig+0x4bc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d108      	bne.n	800527a <HAL_RCC_OscConfig+0x32e>
 8005268:	4b66      	ldr	r3, [pc, #408]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	4a65      	ldr	r2, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005278:	e024      	b.n	80052c4 <HAL_RCC_OscConfig+0x378>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b05      	cmp	r3, #5
 8005280:	d110      	bne.n	80052a4 <HAL_RCC_OscConfig+0x358>
 8005282:	4b60      	ldr	r3, [pc, #384]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	4a5e      	ldr	r2, [pc, #376]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005292:	4b5c      	ldr	r3, [pc, #368]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005298:	4a5a      	ldr	r2, [pc, #360]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052a2:	e00f      	b.n	80052c4 <HAL_RCC_OscConfig+0x378>
 80052a4:	4b57      	ldr	r3, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a56      	ldr	r2, [pc, #344]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052b4:	4b53      	ldr	r3, [pc, #332]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a52      	ldr	r2, [pc, #328]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80052bc:	f023 0304 	bic.w	r3, r3, #4
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d016      	beq.n	80052fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052cc:	f7fe fa2c 	bl	8003728 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d2:	e00a      	b.n	80052ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d4:	f7fe fa28 	bl	8003728 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e138      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ea:	4b46      	ldr	r3, [pc, #280]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ed      	beq.n	80052d4 <HAL_RCC_OscConfig+0x388>
 80052f8:	e015      	b.n	8005326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fa:	f7fe fa15 	bl	8003728 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fe fa11 	bl	8003728 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e121      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005318:	4b3a      	ldr	r3, [pc, #232]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ed      	bne.n	8005302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005326:	7ffb      	ldrb	r3, [r7, #31]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532c:	4b35      	ldr	r3, [pc, #212]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	4a34      	ldr	r2, [pc, #208]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005336:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d03c      	beq.n	80053be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01c      	beq.n	8005386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800534c:	4b2d      	ldr	r3, [pc, #180]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005352:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fe f9e4 	bl	8003728 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005364:	f7fe f9e0 	bl	8003728 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0f2      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005376:	4b23      	ldr	r3, [pc, #140]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ef      	beq.n	8005364 <HAL_RCC_OscConfig+0x418>
 8005384:	e01b      	b.n	80053be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800538c:	4a1d      	ldr	r2, [pc, #116]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fe f9c7 	bl	8003728 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539e:	f7fe f9c3 	bl	8003728 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e0d5      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053b0:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80053b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ef      	bne.n	800539e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80c9 	beq.w	800555a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	f000 8083 	beq.w	80054dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d15e      	bne.n	800549c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a08      	ldr	r2, [pc, #32]	@ (8005404 <HAL_RCC_OscConfig+0x4b8>)
 80053e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ea:	f7fe f99d 	bl	8003728 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f0:	e00c      	b.n	800540c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f2:	f7fe f999 	bl	8003728 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d905      	bls.n	800540c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0ab      	b.n	800555c <HAL_RCC_OscConfig+0x610>
 8005404:	40021000 	.word	0x40021000
 8005408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800540c:	4b55      	ldr	r3, [pc, #340]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ec      	bne.n	80053f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005418:	4b52      	ldr	r3, [pc, #328]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	4b52      	ldr	r3, [pc, #328]	@ (8005568 <HAL_RCC_OscConfig+0x61c>)
 800541e:	4013      	ands	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6a11      	ldr	r1, [r2, #32]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005428:	3a01      	subs	r2, #1
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005432:	0212      	lsls	r2, r2, #8
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800543a:	0852      	lsrs	r2, r2, #1
 800543c:	3a01      	subs	r2, #1
 800543e:	0552      	lsls	r2, r2, #21
 8005440:	4311      	orrs	r1, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005446:	0852      	lsrs	r2, r2, #1
 8005448:	3a01      	subs	r2, #1
 800544a:	0652      	lsls	r2, r2, #25
 800544c:	4311      	orrs	r1, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005452:	06d2      	lsls	r2, r2, #27
 8005454:	430a      	orrs	r2, r1
 8005456:	4943      	ldr	r1, [pc, #268]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 8005458:	4313      	orrs	r3, r2
 800545a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545c:	4b41      	ldr	r3, [pc, #260]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a40      	ldr	r2, [pc, #256]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 8005462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4a3d      	ldr	r2, [pc, #244]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800546e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fe f958 	bl	8003728 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fe f954 	bl	8003728 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e066      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548e:	4b35      	ldr	r3, [pc, #212]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x530>
 800549a:	e05e      	b.n	800555a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b31      	ldr	r3, [pc, #196]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a30      	ldr	r2, [pc, #192]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fe f93e 	bl	8003728 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fe f93a 	bl	8003728 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e04c      	b.n	800555c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c2:	4b28      	ldr	r3, [pc, #160]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054ce:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	4924      	ldr	r1, [pc, #144]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 80054d4:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCC_OscConfig+0x620>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	60cb      	str	r3, [r1, #12]
 80054da:	e03e      	b.n	800555a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e039      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <HAL_RCC_OscConfig+0x618>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0203 	and.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d12c      	bne.n	8005556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	3b01      	subs	r3, #1
 8005508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d123      	bne.n	8005556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d11b      	bne.n	8005556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d113      	bne.n	8005556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d109      	bne.n	8005556 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	3b01      	subs	r3, #1
 8005550:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	019f800c 	.word	0x019f800c
 800556c:	feeefffc 	.word	0xfeeefffc

08005570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e11e      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005588:	4b91      	ldr	r3, [pc, #580]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d910      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b8e      	ldr	r3, [pc, #568]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 020f 	bic.w	r2, r3, #15
 800559e:	498c      	ldr	r1, [pc, #560]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b8a      	ldr	r3, [pc, #552]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e106      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d073      	beq.n	80056ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d129      	bne.n	8005620 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055cc:	4b81      	ldr	r3, [pc, #516]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0f4      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055dc:	f000 f9ce 	bl	800597c <RCC_GetSysClockFreqFromPLLSource>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4a7c      	ldr	r2, [pc, #496]	@ (80057d8 <HAL_RCC_ClockConfig+0x268>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d93f      	bls.n	800566a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055ea:	4b7a      	ldr	r3, [pc, #488]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d033      	beq.n	800566a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005606:	2b00      	cmp	r3, #0
 8005608:	d12f      	bne.n	800566a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800560a:	4b72      	ldr	r3, [pc, #456]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005612:	4a70      	ldr	r2, [pc, #448]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005618:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e024      	b.n	800566a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d107      	bne.n	8005638 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005628:	4b6a      	ldr	r3, [pc, #424]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0c6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005638:	4b66      	ldr	r3, [pc, #408]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0be      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005648:	f000 f8ce 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 800564c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4a61      	ldr	r2, [pc, #388]	@ (80057d8 <HAL_RCC_ClockConfig+0x268>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d909      	bls.n	800566a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005656:	4b5f      	ldr	r3, [pc, #380]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800565e:	4a5d      	ldr	r2, [pc, #372]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005664:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800566a:	4b5a      	ldr	r3, [pc, #360]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4957      	ldr	r1, [pc, #348]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567c:	f7fe f854 	bl	8003728 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	e00a      	b.n	800569a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005684:	f7fe f850 	bl	8003728 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e095      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	4b4e      	ldr	r3, [pc, #312]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 020c 	and.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d1eb      	bne.n	8005684 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d023      	beq.n	8005700 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b43      	ldr	r3, [pc, #268]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a42      	ldr	r2, [pc, #264]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056dc:	4b3d      	ldr	r3, [pc, #244]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056e4:	4a3b      	ldr	r2, [pc, #236]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b39      	ldr	r3, [pc, #228]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4936      	ldr	r1, [pc, #216]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	e008      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b80      	cmp	r3, #128	@ 0x80
 8005704:	d105      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005706:	4b33      	ldr	r3, [pc, #204]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4a32      	ldr	r2, [pc, #200]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800570c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005710:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005712:	4b2f      	ldr	r3, [pc, #188]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d21d      	bcs.n	800575c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005720:	4b2b      	ldr	r3, [pc, #172]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 020f 	bic.w	r2, r3, #15
 8005728:	4929      	ldr	r1, [pc, #164]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	4313      	orrs	r3, r2
 800572e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005730:	f7fd fffa 	bl	8003728 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fd fff6 	bl	8003728 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e03b      	b.n	80057c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d1ed      	bne.n	8005738 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005768:	4b1a      	ldr	r3, [pc, #104]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4917      	ldr	r1, [pc, #92]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005786:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	490f      	ldr	r1, [pc, #60]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800579a:	f000 f825 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 800579e:	4602      	mov	r2, r0
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <HAL_RCC_ClockConfig+0x264>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	490c      	ldr	r1, [pc, #48]	@ (80057dc <HAL_RCC_ClockConfig+0x26c>)
 80057ac:	5ccb      	ldrb	r3, [r1, r3]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	fa22 f303 	lsr.w	r3, r2, r3
 80057b6:	4a0a      	ldr	r2, [pc, #40]	@ (80057e0 <HAL_RCC_ClockConfig+0x270>)
 80057b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057ba:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <HAL_RCC_ClockConfig+0x274>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fd f85c 	bl	800287c <HAL_InitTick>
 80057c4:	4603      	mov	r3, r0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40022000 	.word	0x40022000
 80057d4:	40021000 	.word	0x40021000
 80057d8:	04c4b400 	.word	0x04c4b400
 80057dc:	0800e2a4 	.word	0x0800e2a4
 80057e0:	20000000 	.word	0x20000000
 80057e4:	20000004 	.word	0x20000004

080057e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057ee:	4b2c      	ldr	r3, [pc, #176]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d102      	bne.n	8005800 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057fa:	4b2a      	ldr	r3, [pc, #168]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	e047      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005800:	4b27      	ldr	r3, [pc, #156]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d102      	bne.n	8005812 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800580c:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	e03e      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005812:	4b23      	ldr	r3, [pc, #140]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d136      	bne.n	800588c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800581e:	4b20      	ldr	r3, [pc, #128]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005828:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	3301      	adds	r3, #1
 8005834:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800583c:	4a19      	ldr	r2, [pc, #100]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005846:	68d2      	ldr	r2, [r2, #12]
 8005848:	0a12      	lsrs	r2, r2, #8
 800584a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	617b      	str	r3, [r7, #20]
      break;
 8005854:	e00c      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005856:	4a13      	ldr	r2, [pc, #76]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005860:	68d2      	ldr	r2, [r2, #12]
 8005862:	0a12      	lsrs	r2, r2, #8
 8005864:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005868:	fb02 f303 	mul.w	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
      break;
 800586e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005870:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	0e5b      	lsrs	r3, r3, #25
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	e001      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005890:	693b      	ldr	r3, [r7, #16]
}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000
 80058a4:	00f42400 	.word	0x00f42400

080058a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	@ (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40021000 	.word	0x40021000
 80058e8:	0800e2b4 	.word	0x0800e2b4

080058ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058f0:	f7ff ffda 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	0adb      	lsrs	r3, r3, #11
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	4904      	ldr	r1, [pc, #16]	@ (8005914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40021000 	.word	0x40021000
 8005914:	0800e2b4 	.word	0x0800e2b4

08005918 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	220f      	movs	r2, #15
 8005926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005928:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_RCC_GetClockConfig+0x5c>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0203 	and.w	r2, r3, #3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005934:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <HAL_RCC_GetClockConfig+0x5c>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005940:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <HAL_RCC_GetClockConfig+0x5c>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800594c:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <HAL_RCC_GetClockConfig+0x5c>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800595a:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <HAL_RCC_GetClockConfig+0x60>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	601a      	str	r2, [r3, #0]
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	40022000 	.word	0x40022000

0800597c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005982:	4b1e      	ldr	r3, [pc, #120]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800598c:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d10c      	bne.n	80059ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059a0:	4a17      	ldr	r2, [pc, #92]	@ (8005a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	4a14      	ldr	r2, [pc, #80]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059aa:	68d2      	ldr	r2, [r2, #12]
 80059ac:	0a12      	lsrs	r2, r2, #8
 80059ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	617b      	str	r3, [r7, #20]
    break;
 80059b8:	e00c      	b.n	80059d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ba:	4a11      	ldr	r2, [pc, #68]	@ (8005a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	4a0e      	ldr	r2, [pc, #56]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	0a12      	lsrs	r2, r2, #8
 80059c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]
    break;
 80059d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0e5b      	lsrs	r3, r3, #25
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	3301      	adds	r3, #1
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80059ee:	687b      	ldr	r3, [r7, #4]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40021000 	.word	0x40021000
 8005a00:	00f42400 	.word	0x00f42400

08005a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a10:	2300      	movs	r3, #0
 8005a12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8098 	beq.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a22:	2300      	movs	r3, #0
 8005a24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a26:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10d      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a32:	4b40      	ldr	r3, [pc, #256]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	4a3f      	ldr	r2, [pc, #252]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a39      	ldr	r2, [pc, #228]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a5a:	f7fd fe65 	bl	8003728 <HAL_GetTick>
 8005a5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a60:	e009      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a62:	f7fd fe61 	bl	8003728 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d902      	bls.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	74fb      	strb	r3, [r7, #19]
        break;
 8005a74:	e005      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a76:	4b30      	ldr	r3, [pc, #192]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0ef      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d159      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a88:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01e      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d019      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aa4:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ab0:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ad0:	4a18      	ldr	r2, [pc, #96]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d016      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae2:	f7fd fe21 	bl	8003728 <HAL_GetTick>
 8005ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae8:	e00b      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fe1d 	bl	8003728 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d902      	bls.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	74fb      	strb	r3, [r7, #19]
            break;
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b02:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ec      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b10:	7cfb      	ldrb	r3, [r7, #19]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b16:	4b07      	ldr	r3, [pc, #28]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	4903      	ldr	r1, [pc, #12]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b2c:	e008      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	74bb      	strb	r3, [r7, #18]
 8005b32:	e005      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b40:	7c7b      	ldrb	r3, [r7, #17]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d105      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b46:	4ba6      	ldr	r3, [pc, #664]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	4aa5      	ldr	r2, [pc, #660]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	f023 0203 	bic.w	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	499c      	ldr	r1, [pc, #624]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b80:	4b97      	ldr	r3, [pc, #604]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b86:	f023 020c 	bic.w	r2, r3, #12
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	4994      	ldr	r1, [pc, #592]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ba2:	4b8f      	ldr	r3, [pc, #572]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	498b      	ldr	r1, [pc, #556]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bc4:	4b86      	ldr	r3, [pc, #536]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	4983      	ldr	r1, [pc, #524]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005be6:	4b7e      	ldr	r3, [pc, #504]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	497a      	ldr	r1, [pc, #488]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c08:	4b75      	ldr	r3, [pc, #468]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	4972      	ldr	r1, [pc, #456]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4969      	ldr	r1, [pc, #420]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c4c:	4b64      	ldr	r3, [pc, #400]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	4961      	ldr	r1, [pc, #388]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4958      	ldr	r1, [pc, #352]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c90:	4b53      	ldr	r3, [pc, #332]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	4950      	ldr	r1, [pc, #320]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cae:	d105      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cc8:	4b45      	ldr	r3, [pc, #276]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	4942      	ldr	r1, [pc, #264]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a3c      	ldr	r2, [pc, #240]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cf2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d00:	4b37      	ldr	r3, [pc, #220]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	4934      	ldr	r1, [pc, #208]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d20:	4b2f      	ldr	r3, [pc, #188]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a2e      	ldr	r2, [pc, #184]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d38:	4b29      	ldr	r3, [pc, #164]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	4926      	ldr	r1, [pc, #152]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d56:	d105      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	4918      	ldr	r1, [pc, #96]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d90:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d015      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005da8:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db6:	490a      	ldr	r1, [pc, #40]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc6:	d105      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4a04      	ldr	r2, [pc, #16]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005dd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40021000 	.word	0x40021000

08005de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e09d      	b.n	8005f32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d108      	bne.n	8005e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e06:	d009      	beq.n	8005e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	61da      	str	r2, [r3, #28]
 8005e0e:	e005      	b.n	8005e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc fcb4 	bl	80027a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e5c:	d902      	bls.n	8005e64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e002      	b.n	8005e6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_Init+0xa0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec6:	ea42 0103 	orr.w	r1, r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	f003 0204 	and.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	f003 0310 	and.w	r3, r3, #16
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f00:	ea42 0103 	orr.w	r1, r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b088      	sub	sp, #32
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4a:	f7fd fbed 	bl	8003728 <HAL_GetTick>
 8005f4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
 8005f62:	e15c      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Transmit+0x36>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e154      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_SPI_Transmit+0x48>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e14d      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d007      	beq.n	8006014 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800601c:	d952      	bls.n	80060c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_SPI_Transmit+0xf2>
 8006026:	8b7b      	ldrh	r3, [r7, #26]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d145      	bne.n	80060b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	881a      	ldrh	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	1c9a      	adds	r2, r3, #2
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006050:	e032      	b.n	80060b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	d112      	bne.n	8006086 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006084:	e018      	b.n	80060b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006086:	f7fd fb4f 	bl	8003728 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d803      	bhi.n	800609e <HAL_SPI_Transmit+0x164>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d102      	bne.n	80060a4 <HAL_SPI_Transmit+0x16a>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e0b2      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1c7      	bne.n	8006052 <HAL_SPI_Transmit+0x118>
 80060c2:	e083      	b.n	80061cc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Transmit+0x198>
 80060cc:	8b7b      	ldrh	r3, [r7, #26]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d177      	bne.n	80061c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d912      	bls.n	8006102 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	1c9a      	adds	r2, r3, #2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b02      	subs	r3, #2
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006100:	e05f      	b.n	80061c2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006128:	e04b      	b.n	80061c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d12b      	bne.n	8006190 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d912      	bls.n	8006168 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006152:	1c9a      	adds	r2, r3, #2
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b02      	subs	r3, #2
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006166:	e02c      	b.n	80061c2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800618e:	e018      	b.n	80061c2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006190:	f7fd faca 	bl	8003728 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d803      	bhi.n	80061a8 <HAL_SPI_Transmit+0x26e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d102      	bne.n	80061ae <HAL_SPI_Transmit+0x274>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e02d      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ae      	bne.n	800612a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fcf5 	bl	8006bc0 <SPI_EndRxTxTransaction>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800621c:	2300      	movs	r3, #0
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af02      	add	r7, sp, #8
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
 8006244:	e123      	b.n	800648e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Receive+0x2c>
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e11b      	b.n	800648e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800625e:	d112      	bne.n	8006286 <HAL_SPI_Receive+0x60>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10e      	bne.n	8006286 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2204      	movs	r2, #4
 800626c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f90a 	bl	8006496 <HAL_SPI_TransmitReceive>
 8006282:	4603      	mov	r3, r0
 8006284:	e103      	b.n	800648e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006286:	f7fd fa4f 	bl	8003728 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_SPI_Receive+0x74>
 8006296:	2302      	movs	r3, #2
 8006298:	e0f9      	b.n	800648e <HAL_SPI_Receive+0x268>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2204      	movs	r2, #4
 80062a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88fa      	ldrh	r2, [r7, #6]
 80062ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	88fa      	ldrh	r2, [r7, #6]
 80062c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ec:	d908      	bls.n	8006300 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	e007      	b.n	8006310 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006318:	d10f      	bne.n	800633a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006338:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d007      	beq.n	8006358 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006360:	d875      	bhi.n	800644e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006362:	e037      	b.n	80063d4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d117      	bne.n	80063a2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f103 020c 	add.w	r2, r3, #12
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80063a0:	e018      	b.n	80063d4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a2:	f7fd f9c1 	bl	8003728 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d803      	bhi.n	80063ba <HAL_SPI_Receive+0x194>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Receive+0x19a>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e05c      	b.n	800648e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1c1      	bne.n	8006364 <HAL_SPI_Receive+0x13e>
 80063e0:	e03b      	b.n	800645a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d115      	bne.n	800641c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	b292      	uxth	r2, r2
 80063fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800641a:	e018      	b.n	800644e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641c:	f7fd f984 	bl	8003728 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d803      	bhi.n	8006434 <HAL_SPI_Receive+0x20e>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d102      	bne.n	800643a <HAL_SPI_Receive+0x214>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e01f      	b.n	800648e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1c3      	bne.n	80063e2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fb56 	bl	8006b10 <SPI_EndRxTransaction>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b08a      	sub	sp, #40	@ 0x28
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064a4:	2301      	movs	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a8:	f7fd f93e 	bl	8003728 <HAL_GetTick>
 80064ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064bc:	887b      	ldrh	r3, [r7, #2]
 80064be:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d00c      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x4e>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064d0:	d106      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x4a>
 80064da:	7ffb      	ldrb	r3, [r7, #31]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d001      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e1f3      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x60>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x60>
 80064f0:	887b      	ldrh	r3, [r7, #2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e1e8      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x72>
 8006504:	2302      	movs	r3, #2
 8006506:	e1e1      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b04      	cmp	r3, #4
 800651a:	d003      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2205      	movs	r2, #5
 8006520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006566:	d802      	bhi.n	800656e <HAL_SPI_TransmitReceive+0xd8>
 8006568:	8abb      	ldrh	r3, [r7, #20]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d908      	bls.n	8006580 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	e007      	b.n	8006590 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d007      	beq.n	80065ae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065b6:	f240 8083 	bls.w	80066c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x132>
 80065c2:	8afb      	ldrh	r3, [r7, #22]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d16f      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ec:	e05c      	b.n	80066a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d11b      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x19e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d016      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x19e>
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	2b01      	cmp	r3, #1
 800660a:	d113      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d11c      	bne.n	800667c <HAL_SPI_TransmitReceive+0x1e6>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d016      	beq.n	800667c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	b292      	uxth	r2, r2
 800665a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	1c9a      	adds	r2, r3, #2
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006678:	2301      	movs	r3, #1
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800667c:	f7fd f854 	bl	8003728 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006688:	429a      	cmp	r2, r3
 800668a:	d80d      	bhi.n	80066a8 <HAL_SPI_TransmitReceive+0x212>
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d009      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e111      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d19d      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x158>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d197      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x158>
 80066be:	e0e5      	b.n	800688c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x23a>
 80066c8:	8afb      	ldrh	r3, [r7, #22]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	f040 80d1 	bne.w	8006872 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d912      	bls.n	8006700 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b02      	subs	r3, #2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066fe:	e0b8      	b.n	8006872 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006726:	e0a4      	b.n	8006872 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b02      	cmp	r3, #2
 8006734:	d134      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x30a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02f      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x30a>
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	2b01      	cmp	r3, #1
 8006744:	d12c      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d912      	bls.n	8006776 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	881a      	ldrh	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b02      	subs	r3, #2
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006774:	e012      	b.n	800679c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d148      	bne.n	8006840 <HAL_SPI_TransmitReceive+0x3aa>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d042      	beq.n	8006840 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d923      	bls.n	800680e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d0:	b292      	uxth	r2, r2
 80067d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	1c9a      	adds	r2, r3, #2
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b02      	subs	r3, #2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d81f      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	e016      	b.n	800683c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f103 020c 	add.w	r2, r3, #12
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800683c:	2301      	movs	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006840:	f7fc ff72 	bl	8003728 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684c:	429a      	cmp	r2, r3
 800684e:	d803      	bhi.n	8006858 <HAL_SPI_TransmitReceive+0x3c2>
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d102      	bne.n	800685e <HAL_SPI_TransmitReceive+0x3c8>
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e02c      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f af55 	bne.w	8006728 <HAL_SPI_TransmitReceive+0x292>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	f47f af4e 	bne.w	8006728 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f995 	bl	8006bc0 <SPI_EndRxTxTransaction>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e00e      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3728      	adds	r7, #40	@ 0x28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e4:	f7fc ff20 	bl	8003728 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f4:	f7fc ff18 	bl	8003728 <HAL_GetTick>
 80068f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	015b      	lsls	r3, r3, #5
 8006900:	0d1b      	lsrs	r3, r3, #20
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800690a:	e054      	b.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d050      	beq.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006914:	f7fc ff08 	bl	8003728 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	429a      	cmp	r2, r3
 8006922:	d902      	bls.n	800692a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d13d      	bne.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006942:	d111      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800694c:	d004      	beq.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006956:	d107      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006970:	d10f      	bne.n	8006992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e017      	b.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d19b      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000000 	.word	0x20000000

080069e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	@ 0x28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069f6:	f7fc fe97 	bl	8003728 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006a06:	f7fc fe8f 	bl	8003728 <HAL_GetTick>
 8006a0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a14:	4b3d      	ldr	r3, [pc, #244]	@ (8006b0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00da      	lsls	r2, r3, #3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	0d1b      	lsrs	r3, r3, #20
 8006a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a2c:	e060      	b.n	8006af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a34:	d107      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d050      	beq.n	8006af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a4e:	f7fc fe6b 	bl	8003728 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d902      	bls.n	8006a64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d13d      	bne.n	8006ae0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7c:	d111      	bne.n	8006aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a86:	d004      	beq.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d107      	bne.n	8006aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d10f      	bne.n	8006acc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006aca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e010      	b.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d196      	bne.n	8006a2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3728      	adds	r7, #40	@ 0x28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000000 	.word	0x20000000

08006b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b24:	d111      	bne.n	8006b4a <SPI_EndRxTransaction+0x3a>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2e:	d004      	beq.n	8006b3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b38:	d107      	bne.n	8006b4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2180      	movs	r1, #128	@ 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff febd 	bl	80068d4 <SPI_WaitFlagStateUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e023      	b.n	8006bb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b78:	d11d      	bne.n	8006bb6 <SPI_EndRxTransaction+0xa6>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b82:	d004      	beq.n	8006b8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d113      	bne.n	8006bb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff ff22 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e000      	b.n	8006bb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff ff03 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e027      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	@ 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe68 	bl	80068d4 <SPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e014      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fedc 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e000      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e049      	b.n	8006cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc f900 	bl	8002e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 ff52 	bl	8007b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d001      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e04a      	b.n	8006daa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a21      	ldr	r2, [pc, #132]	@ (8006db8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x6c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d013      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x6c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1d      	ldr	r2, [pc, #116]	@ (8006dbc <HAL_TIM_Base_Start_IT+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x6c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x6c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x6c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d115      	bne.n	8006d94 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d015      	beq.n	8006da6 <HAL_TIM_Base_Start_IT+0xaa>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d011      	beq.n	8006da6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	e008      	b.n	8006da6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e000      	b.n	8006da8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	00010007 	.word	0x00010007

08006dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e049      	b.n	8006e76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f841 	bl	8006e7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f000 fe90 	bl	8007b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_TIM_PWM_Start+0x24>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	bf14      	ite	ne
 8006eb0:	2301      	movne	r3, #1
 8006eb2:	2300      	moveq	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e03c      	b.n	8006f32 <HAL_TIM_PWM_Start+0x9e>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d109      	bne.n	8006ed2 <HAL_TIM_PWM_Start+0x3e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	e02f      	b.n	8006f32 <HAL_TIM_PWM_Start+0x9e>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d109      	bne.n	8006eec <HAL_TIM_PWM_Start+0x58>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	e022      	b.n	8006f32 <HAL_TIM_PWM_Start+0x9e>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b0c      	cmp	r3, #12
 8006ef0:	d109      	bne.n	8006f06 <HAL_TIM_PWM_Start+0x72>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	bf14      	ite	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	2300      	moveq	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	e015      	b.n	8006f32 <HAL_TIM_PWM_Start+0x9e>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d109      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x8c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e008      	b.n	8006f32 <HAL_TIM_PWM_Start+0x9e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e097      	b.n	800706a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_PWM_Start+0xb6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f48:	e023      	b.n	8006f92 <HAL_TIM_PWM_Start+0xfe>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_PWM_Start+0xc6>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f58:	e01b      	b.n	8006f92 <HAL_TIM_PWM_Start+0xfe>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_PWM_Start+0xd6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f68:	e013      	b.n	8006f92 <HAL_TIM_PWM_Start+0xfe>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Start+0xe6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f78:	e00b      	b.n	8006f92 <HAL_TIM_PWM_Start+0xfe>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Start+0xf6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f88:	e003      	b.n	8006f92 <HAL_TIM_PWM_Start+0xfe>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2201      	movs	r2, #1
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f9f8 	bl	8008390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a33      	ldr	r2, [pc, #204]	@ (8007074 <HAL_TIM_PWM_Start+0x1e0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x13e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a32      	ldr	r2, [pc, #200]	@ (8007078 <HAL_TIM_PWM_Start+0x1e4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x13e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a30      	ldr	r2, [pc, #192]	@ (800707c <HAL_TIM_PWM_Start+0x1e8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x13e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8007080 <HAL_TIM_PWM_Start+0x1ec>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x13e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007084 <HAL_TIM_PWM_Start+0x1f0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x142>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_PWM_Start+0x144>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	@ (8007074 <HAL_TIM_PWM_Start+0x1e0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d018      	beq.n	8007028 <HAL_TIM_PWM_Start+0x194>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffe:	d013      	beq.n	8007028 <HAL_TIM_PWM_Start+0x194>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a20      	ldr	r2, [pc, #128]	@ (8007088 <HAL_TIM_PWM_Start+0x1f4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <HAL_TIM_PWM_Start+0x194>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <HAL_TIM_PWM_Start+0x1f8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_TIM_PWM_Start+0x194>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a17      	ldr	r2, [pc, #92]	@ (8007078 <HAL_TIM_PWM_Start+0x1e4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_TIM_PWM_Start+0x194>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a16      	ldr	r2, [pc, #88]	@ (800707c <HAL_TIM_PWM_Start+0x1e8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d115      	bne.n	8007054 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	4b18      	ldr	r3, [pc, #96]	@ (8007090 <HAL_TIM_PWM_Start+0x1fc>)
 8007030:	4013      	ands	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b06      	cmp	r3, #6
 8007038:	d015      	beq.n	8007066 <HAL_TIM_PWM_Start+0x1d2>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007040:	d011      	beq.n	8007066 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007052:	e008      	b.n	8007066 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	e000      	b.n	8007068 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	00010007 	.word	0x00010007

08007094 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 f972 	bl	8008390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3e      	ldr	r2, [pc, #248]	@ (80071ac <HAL_TIM_PWM_Stop+0x118>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <HAL_TIM_PWM_Stop+0x4a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3d      	ldr	r2, [pc, #244]	@ (80071b0 <HAL_TIM_PWM_Stop+0x11c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_TIM_PWM_Stop+0x4a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a3b      	ldr	r2, [pc, #236]	@ (80071b4 <HAL_TIM_PWM_Stop+0x120>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_TIM_PWM_Stop+0x4a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a3a      	ldr	r2, [pc, #232]	@ (80071b8 <HAL_TIM_PWM_Stop+0x124>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_TIM_PWM_Stop+0x4a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a38      	ldr	r2, [pc, #224]	@ (80071bc <HAL_TIM_PWM_Stop+0x128>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_Stop+0x4e>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <HAL_TIM_PWM_Stop+0x50>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d017      	beq.n	8007118 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <HAL_TIM_PWM_Stop+0x84>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6a1a      	ldr	r2, [r3, #32]
 80070fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <HAL_TIM_PWM_Stop+0x84>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007116:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10f      	bne.n	8007148 <HAL_TIM_PWM_Stop+0xb4>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <HAL_TIM_PWM_Stop+0xb4>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <HAL_TIM_PWM_Stop+0xc4>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007156:	e023      	b.n	80071a0 <HAL_TIM_PWM_Stop+0x10c>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b04      	cmp	r3, #4
 800715c:	d104      	bne.n	8007168 <HAL_TIM_PWM_Stop+0xd4>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007166:	e01b      	b.n	80071a0 <HAL_TIM_PWM_Stop+0x10c>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b08      	cmp	r3, #8
 800716c:	d104      	bne.n	8007178 <HAL_TIM_PWM_Stop+0xe4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007176:	e013      	b.n	80071a0 <HAL_TIM_PWM_Stop+0x10c>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b0c      	cmp	r3, #12
 800717c:	d104      	bne.n	8007188 <HAL_TIM_PWM_Stop+0xf4>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007186:	e00b      	b.n	80071a0 <HAL_TIM_PWM_Stop+0x10c>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b10      	cmp	r3, #16
 800718c:	d104      	bne.n	8007198 <HAL_TIM_PWM_Stop+0x104>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007196:	e003      	b.n	80071a0 <HAL_TIM_PWM_Stop+0x10c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800

080071c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e097      	b.n	8007304 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fb fe65 	bl	8002eb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007204:	f023 0307 	bic.w	r3, r3, #7
 8007208:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f000 fc8d 	bl	8007b34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	4313      	orrs	r3, r2
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007260:	f023 030c 	bic.w	r3, r3, #12
 8007264:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800726c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	4313      	orrs	r3, r2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	011a      	lsls	r2, r3, #4
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	031b      	lsls	r3, r3, #12
 8007290:	4313      	orrs	r3, r2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4313      	orrs	r3, r2
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800731c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007324:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800732c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007334:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d110      	bne.n	800735e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d102      	bne.n	8007348 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007342:	7b7b      	ldrb	r3, [r7, #13]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d001      	beq.n	800734c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e069      	b.n	8007420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735c:	e031      	b.n	80073c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b04      	cmp	r3, #4
 8007362:	d110      	bne.n	8007386 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d102      	bne.n	8007370 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800736a:	7b3b      	ldrb	r3, [r7, #12]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d001      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e055      	b.n	8007420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007384:	e01d      	b.n	80073c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d108      	bne.n	800739e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d105      	bne.n	800739e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007392:	7b7b      	ldrb	r3, [r7, #13]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d102      	bne.n	800739e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007398:	7b3b      	ldrb	r3, [r7, #12]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d001      	beq.n	80073a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e03e      	b.n	8007420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_TIM_Encoder_Start+0xc4>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d008      	beq.n	80073e0 <HAL_TIM_Encoder_Start+0xd4>
 80073ce:	e00f      	b.n	80073f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2201      	movs	r2, #1
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 ffd9 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 80073de:	e016      	b.n	800740e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2201      	movs	r2, #1
 80073e6:	2104      	movs	r1, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 ffd1 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 80073ee:	e00e      	b.n	800740e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2201      	movs	r2, #1
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ffc9 	bl	8008390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2201      	movs	r2, #1
 8007404:	2104      	movs	r1, #4
 8007406:	4618      	mov	r0, r3
 8007408:	f000 ffc2 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 800740c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d020      	beq.n	800748c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0202 	mvn.w	r2, #2
 800745c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb40 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 8007478:	e005      	b.n	8007486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb32 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fb43 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01b      	beq.n	80074d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0204 	mvn.w	r2, #4
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb1a 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fb0c 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb1d 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d020      	beq.n	8007524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0208 	mvn.w	r2, #8
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 faf4 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fae6 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 faf7 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01b      	beq.n	8007570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0210 	mvn.w	r2, #16
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2208      	movs	r2, #8
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 face 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fac0 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fad1 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00c      	beq.n	8007594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0201 	mvn.w	r2, #1
 800758c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fe96 	bl	80022c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f937 	bl	8008830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f92f 	bl	8008844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa8b 	bl	8007b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f06f 0220 	mvn.w	r2, #32
 8007626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f8f7 	bl	800881c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800764a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f903 	bl	8008858 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800766e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 f8fb 	bl	800886c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f8f3 	bl	8008880 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00c      	beq.n	80076be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80076b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f8eb 	bl	8008894 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e0ff      	b.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b14      	cmp	r3, #20
 80076f2:	f200 80f0 	bhi.w	80078d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007751 	.word	0x08007751
 8007700:	080078d7 	.word	0x080078d7
 8007704:	080078d7 	.word	0x080078d7
 8007708:	080078d7 	.word	0x080078d7
 800770c:	08007791 	.word	0x08007791
 8007710:	080078d7 	.word	0x080078d7
 8007714:	080078d7 	.word	0x080078d7
 8007718:	080078d7 	.word	0x080078d7
 800771c:	080077d3 	.word	0x080077d3
 8007720:	080078d7 	.word	0x080078d7
 8007724:	080078d7 	.word	0x080078d7
 8007728:	080078d7 	.word	0x080078d7
 800772c:	08007813 	.word	0x08007813
 8007730:	080078d7 	.word	0x080078d7
 8007734:	080078d7 	.word	0x080078d7
 8007738:	080078d7 	.word	0x080078d7
 800773c:	08007855 	.word	0x08007855
 8007740:	080078d7 	.word	0x080078d7
 8007744:	080078d7 	.word	0x080078d7
 8007748:	080078d7 	.word	0x080078d7
 800774c:	08007895 	.word	0x08007895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fa88 	bl	8007c6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0208 	orr.w	r2, r2, #8
 800776a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6999      	ldr	r1, [r3, #24]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	619a      	str	r2, [r3, #24]
      break;
 800778e:	e0a5      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 faf8 	bl	8007d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6999      	ldr	r1, [r3, #24]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	021a      	lsls	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	619a      	str	r2, [r3, #24]
      break;
 80077d0:	e084      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fb61 	bl	8007ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0208 	orr.w	r2, r2, #8
 80077ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0204 	bic.w	r2, r2, #4
 80077fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69d9      	ldr	r1, [r3, #28]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	61da      	str	r2, [r3, #28]
      break;
 8007810:	e064      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fbc9 	bl	8007fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69d9      	ldr	r1, [r3, #28]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	021a      	lsls	r2, r3, #8
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	61da      	str	r2, [r3, #28]
      break;
 8007852:	e043      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fc32 	bl	80080c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0204 	bic.w	r2, r2, #4
 800787e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007892:	e023      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fc76 	bl	800818c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078d4:	e002      	b.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75fb      	strb	r3, [r7, #23]
      break;
 80078da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_TIM_ConfigClockSource+0x1c>
 8007908:	2302      	movs	r3, #2
 800790a:	e0de      	b.n	8007aca <HAL_TIM_ConfigClockSource+0x1da>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800792a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a63      	ldr	r2, [pc, #396]	@ (8007ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	f000 80a9 	beq.w	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800794c:	4a61      	ldr	r2, [pc, #388]	@ (8007ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f200 80ae 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007954:	4a60      	ldr	r2, [pc, #384]	@ (8007ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	f000 80a1 	beq.w	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800795c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f200 80a6 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007964:	4a5d      	ldr	r2, [pc, #372]	@ (8007adc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007966:	4293      	cmp	r3, r2
 8007968:	f000 8099 	beq.w	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800796c:	4a5b      	ldr	r2, [pc, #364]	@ (8007adc <HAL_TIM_ConfigClockSource+0x1ec>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f200 809e 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007974:	4a5a      	ldr	r2, [pc, #360]	@ (8007ae0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f000 8091 	beq.w	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800797c:	4a58      	ldr	r2, [pc, #352]	@ (8007ae0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f200 8096 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007984:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007988:	f000 8089 	beq.w	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800798c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007990:	f200 808e 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007998:	d03e      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x128>
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799e:	f200 8087 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a6:	f000 8086 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1c6>
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ae:	d87f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079b0:	2b70      	cmp	r3, #112	@ 0x70
 80079b2:	d01a      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0xfa>
 80079b4:	2b70      	cmp	r3, #112	@ 0x70
 80079b6:	d87b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079b8:	2b60      	cmp	r3, #96	@ 0x60
 80079ba:	d050      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x16e>
 80079bc:	2b60      	cmp	r3, #96	@ 0x60
 80079be:	d877      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079c0:	2b50      	cmp	r3, #80	@ 0x50
 80079c2:	d03c      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x14e>
 80079c4:	2b50      	cmp	r3, #80	@ 0x50
 80079c6:	d873      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d058      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x18e>
 80079cc:	2b40      	cmp	r3, #64	@ 0x40
 80079ce:	d86f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079d0:	2b30      	cmp	r3, #48	@ 0x30
 80079d2:	d064      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80079d4:	2b30      	cmp	r3, #48	@ 0x30
 80079d6:	d86b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d060      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d867      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d05c      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d05a      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80079e8:	e062      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079fa:	f000 fca9 	bl	8008350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	609a      	str	r2, [r3, #8]
      break;
 8007a16:	e04f      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a28:	f000 fc92 	bl	8008350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a3a:	609a      	str	r2, [r3, #8]
      break;
 8007a3c:	e03c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f000 fc04 	bl	8008258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2150      	movs	r1, #80	@ 0x50
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fc5d 	bl	8008316 <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e02c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fc23 	bl	80082b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2160      	movs	r1, #96	@ 0x60
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fc4d 	bl	8008316 <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e01c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fbe4 	bl	8008258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2140      	movs	r1, #64	@ 0x40
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fc3d 	bl	8008316 <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e00c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fc34 	bl	8008316 <TIM_ITRx_SetConfig>
      break;
 8007aae:	e003      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e000      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	00100070 	.word	0x00100070
 8007ad8:	00100040 	.word	0x00100040
 8007adc:	00100030 	.word	0x00100030
 8007ae0:	00100020 	.word	0x00100020

08007ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a42      	ldr	r2, [pc, #264]	@ (8007c50 <TIM_Base_SetConfig+0x11c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00f      	beq.n	8007b6c <TIM_Base_SetConfig+0x38>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b52:	d00b      	beq.n	8007b6c <TIM_Base_SetConfig+0x38>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a3f      	ldr	r2, [pc, #252]	@ (8007c54 <TIM_Base_SetConfig+0x120>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d007      	beq.n	8007b6c <TIM_Base_SetConfig+0x38>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8007c58 <TIM_Base_SetConfig+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_Base_SetConfig+0x38>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a3d      	ldr	r2, [pc, #244]	@ (8007c5c <TIM_Base_SetConfig+0x128>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d108      	bne.n	8007b7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a33      	ldr	r2, [pc, #204]	@ (8007c50 <TIM_Base_SetConfig+0x11c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01b      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8c:	d017      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a30      	ldr	r2, [pc, #192]	@ (8007c54 <TIM_Base_SetConfig+0x120>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <TIM_Base_SetConfig+0x124>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00f      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8007c5c <TIM_Base_SetConfig+0x128>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00b      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8007c60 <TIM_Base_SetConfig+0x12c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007c64 <TIM_Base_SetConfig+0x130>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d003      	beq.n	8007bbe <TIM_Base_SetConfig+0x8a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8007c68 <TIM_Base_SetConfig+0x134>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d108      	bne.n	8007bd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <TIM_Base_SetConfig+0x11c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d00f      	beq.n	8007c1c <TIM_Base_SetConfig+0xe8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a17      	ldr	r2, [pc, #92]	@ (8007c5c <TIM_Base_SetConfig+0x128>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00b      	beq.n	8007c1c <TIM_Base_SetConfig+0xe8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a16      	ldr	r2, [pc, #88]	@ (8007c60 <TIM_Base_SetConfig+0x12c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d007      	beq.n	8007c1c <TIM_Base_SetConfig+0xe8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <TIM_Base_SetConfig+0x130>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_Base_SetConfig+0xe8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a14      	ldr	r2, [pc, #80]	@ (8007c68 <TIM_Base_SetConfig+0x134>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d103      	bne.n	8007c24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d105      	bne.n	8007c42 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f023 0201 	bic.w	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]
  }
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800

08007c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f023 0201 	bic.w	r2, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 0302 	bic.w	r3, r3, #2
 8007cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d78 <TIM_OC1_SetConfig+0x10c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00f      	beq.n	8007cec <TIM_OC1_SetConfig+0x80>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a2b      	ldr	r2, [pc, #172]	@ (8007d7c <TIM_OC1_SetConfig+0x110>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00b      	beq.n	8007cec <TIM_OC1_SetConfig+0x80>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <TIM_OC1_SetConfig+0x114>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d007      	beq.n	8007cec <TIM_OC1_SetConfig+0x80>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a29      	ldr	r2, [pc, #164]	@ (8007d84 <TIM_OC1_SetConfig+0x118>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_OC1_SetConfig+0x80>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a28      	ldr	r2, [pc, #160]	@ (8007d88 <TIM_OC1_SetConfig+0x11c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d10c      	bne.n	8007d06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f023 0308 	bic.w	r3, r3, #8
 8007cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f023 0304 	bic.w	r3, r3, #4
 8007d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <TIM_OC1_SetConfig+0x10c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00f      	beq.n	8007d2e <TIM_OC1_SetConfig+0xc2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	@ (8007d7c <TIM_OC1_SetConfig+0x110>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d00b      	beq.n	8007d2e <TIM_OC1_SetConfig+0xc2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a19      	ldr	r2, [pc, #100]	@ (8007d80 <TIM_OC1_SetConfig+0x114>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d007      	beq.n	8007d2e <TIM_OC1_SetConfig+0xc2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a18      	ldr	r2, [pc, #96]	@ (8007d84 <TIM_OC1_SetConfig+0x118>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d003      	beq.n	8007d2e <TIM_OC1_SetConfig+0xc2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a17      	ldr	r2, [pc, #92]	@ (8007d88 <TIM_OC1_SetConfig+0x11c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d111      	bne.n	8007d52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	621a      	str	r2, [r3, #32]
}
 8007d6c:	bf00      	nop
 8007d6e:	371c      	adds	r7, #28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40013400 	.word	0x40013400
 8007d80:	40014000 	.word	0x40014000
 8007d84:	40014400 	.word	0x40014400
 8007d88:	40014800 	.word	0x40014800

08007d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	f023 0210 	bic.w	r2, r3, #16
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f023 0320 	bic.w	r3, r3, #32
 8007dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a28      	ldr	r2, [pc, #160]	@ (8007e8c <TIM_OC2_SetConfig+0x100>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_OC2_SetConfig+0x6c>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a27      	ldr	r2, [pc, #156]	@ (8007e90 <TIM_OC2_SetConfig+0x104>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d10d      	bne.n	8007e14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a1d      	ldr	r2, [pc, #116]	@ (8007e8c <TIM_OC2_SetConfig+0x100>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00f      	beq.n	8007e3c <TIM_OC2_SetConfig+0xb0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e90 <TIM_OC2_SetConfig+0x104>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <TIM_OC2_SetConfig+0xb0>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a1b      	ldr	r2, [pc, #108]	@ (8007e94 <TIM_OC2_SetConfig+0x108>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <TIM_OC2_SetConfig+0xb0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e98 <TIM_OC2_SetConfig+0x10c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_OC2_SetConfig+0xb0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a19      	ldr	r2, [pc, #100]	@ (8007e9c <TIM_OC2_SetConfig+0x110>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d113      	bne.n	8007e64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40012c00 	.word	0x40012c00
 8007e90:	40013400 	.word	0x40013400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a27      	ldr	r2, [pc, #156]	@ (8007f9c <TIM_OC3_SetConfig+0xfc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_OC3_SetConfig+0x6a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <TIM_OC3_SetConfig+0x100>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10d      	bne.n	8007f26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1c      	ldr	r2, [pc, #112]	@ (8007f9c <TIM_OC3_SetConfig+0xfc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00f      	beq.n	8007f4e <TIM_OC3_SetConfig+0xae>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa0 <TIM_OC3_SetConfig+0x100>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00b      	beq.n	8007f4e <TIM_OC3_SetConfig+0xae>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa4 <TIM_OC3_SetConfig+0x104>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <TIM_OC3_SetConfig+0xae>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a19      	ldr	r2, [pc, #100]	@ (8007fa8 <TIM_OC3_SetConfig+0x108>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_OC3_SetConfig+0xae>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a18      	ldr	r2, [pc, #96]	@ (8007fac <TIM_OC3_SetConfig+0x10c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d113      	bne.n	8007f76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40013400 	.word	0x40013400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40014400 	.word	0x40014400
 8007fac:	40014800 	.word	0x40014800

08007fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a28      	ldr	r2, [pc, #160]	@ (80080b0 <TIM_OC4_SetConfig+0x100>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d003      	beq.n	800801c <TIM_OC4_SetConfig+0x6c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a27      	ldr	r2, [pc, #156]	@ (80080b4 <TIM_OC4_SetConfig+0x104>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d10d      	bne.n	8008038 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	031b      	lsls	r3, r3, #12
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1d      	ldr	r2, [pc, #116]	@ (80080b0 <TIM_OC4_SetConfig+0x100>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d00f      	beq.n	8008060 <TIM_OC4_SetConfig+0xb0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1c      	ldr	r2, [pc, #112]	@ (80080b4 <TIM_OC4_SetConfig+0x104>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_OC4_SetConfig+0xb0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1b      	ldr	r2, [pc, #108]	@ (80080b8 <TIM_OC4_SetConfig+0x108>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_OC4_SetConfig+0xb0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1a      	ldr	r2, [pc, #104]	@ (80080bc <TIM_OC4_SetConfig+0x10c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_OC4_SetConfig+0xb0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a19      	ldr	r2, [pc, #100]	@ (80080c0 <TIM_OC4_SetConfig+0x110>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d113      	bne.n	8008088 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008066:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800806e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	019b      	lsls	r3, r3, #6
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	40013400 	.word	0x40013400
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400
 80080c0:	40014800 	.word	0x40014800

080080c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008108:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a17      	ldr	r2, [pc, #92]	@ (8008178 <TIM_OC5_SetConfig+0xb4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00f      	beq.n	800813e <TIM_OC5_SetConfig+0x7a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a16      	ldr	r2, [pc, #88]	@ (800817c <TIM_OC5_SetConfig+0xb8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00b      	beq.n	800813e <TIM_OC5_SetConfig+0x7a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a15      	ldr	r2, [pc, #84]	@ (8008180 <TIM_OC5_SetConfig+0xbc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_OC5_SetConfig+0x7a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a14      	ldr	r2, [pc, #80]	@ (8008184 <TIM_OC5_SetConfig+0xc0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_OC5_SetConfig+0x7a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a13      	ldr	r2, [pc, #76]	@ (8008188 <TIM_OC5_SetConfig+0xc4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d109      	bne.n	8008152 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40013400 	.word	0x40013400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800

0800818c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	051b      	lsls	r3, r3, #20
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a18      	ldr	r2, [pc, #96]	@ (8008244 <TIM_OC6_SetConfig+0xb8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00f      	beq.n	8008208 <TIM_OC6_SetConfig+0x7c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a17      	ldr	r2, [pc, #92]	@ (8008248 <TIM_OC6_SetConfig+0xbc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00b      	beq.n	8008208 <TIM_OC6_SetConfig+0x7c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a16      	ldr	r2, [pc, #88]	@ (800824c <TIM_OC6_SetConfig+0xc0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d007      	beq.n	8008208 <TIM_OC6_SetConfig+0x7c>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a15      	ldr	r2, [pc, #84]	@ (8008250 <TIM_OC6_SetConfig+0xc4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_OC6_SetConfig+0x7c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a14      	ldr	r2, [pc, #80]	@ (8008254 <TIM_OC6_SetConfig+0xc8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d109      	bne.n	800821c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800820e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	029b      	lsls	r3, r3, #10
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40013400 	.word	0x40013400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800

08008258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f023 030a 	bic.w	r3, r3, #10
 8008294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	621a      	str	r2, [r3, #32]
}
 80082aa:	bf00      	nop
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b087      	sub	sp, #28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	f023 0210 	bic.w	r2, r3, #16
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	031b      	lsls	r3, r3, #12
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	621a      	str	r2, [r3, #32]
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800832c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	f043 0307 	orr.w	r3, r3, #7
 800833c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	609a      	str	r2, [r3, #8]
}
 8008344:	bf00      	nop
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	431a      	orrs	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	609a      	str	r2, [r3, #8]
}
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2201      	movs	r2, #1
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1a      	ldr	r2, [r3, #32]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	43db      	mvns	r3, r3
 80083b2:	401a      	ands	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1a      	ldr	r2, [r3, #32]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	431a      	orrs	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_TIMEx_PWMN_Start+0x24>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e022      	b.n	8008446 <HAL_TIMEx_PWMN_Start+0x6a>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b04      	cmp	r3, #4
 8008404:	d109      	bne.n	800841a <HAL_TIMEx_PWMN_Start+0x3e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	bf14      	ite	ne
 8008412:	2301      	movne	r3, #1
 8008414:	2300      	moveq	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	e015      	b.n	8008446 <HAL_TIMEx_PWMN_Start+0x6a>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d109      	bne.n	8008434 <HAL_TIMEx_PWMN_Start+0x58>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	bf14      	ite	ne
 800842c:	2301      	movne	r3, #1
 800842e:	2300      	moveq	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	e008      	b.n	8008446 <HAL_TIMEx_PWMN_Start+0x6a>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	bf14      	ite	ne
 8008440:	2301      	movne	r3, #1
 8008442:	2300      	moveq	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e069      	b.n	8008522 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <HAL_TIMEx_PWMN_Start+0x82>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800845c:	e013      	b.n	8008486 <HAL_TIMEx_PWMN_Start+0xaa>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d104      	bne.n	800846e <HAL_TIMEx_PWMN_Start+0x92>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800846c:	e00b      	b.n	8008486 <HAL_TIMEx_PWMN_Start+0xaa>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d104      	bne.n	800847e <HAL_TIMEx_PWMN_Start+0xa2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800847c:	e003      	b.n	8008486 <HAL_TIMEx_PWMN_Start+0xaa>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2204      	movs	r2, #4
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fa0a 	bl	80088a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a20      	ldr	r2, [pc, #128]	@ (800852c <HAL_TIMEx_PWMN_Start+0x150>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIMEx_PWMN_Start+0x104>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b6:	d013      	beq.n	80084e0 <HAL_TIMEx_PWMN_Start+0x104>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008530 <HAL_TIMEx_PWMN_Start+0x154>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIMEx_PWMN_Start+0x104>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008534 <HAL_TIMEx_PWMN_Start+0x158>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIMEx_PWMN_Start+0x104>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a19      	ldr	r2, [pc, #100]	@ (8008538 <HAL_TIMEx_PWMN_Start+0x15c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIMEx_PWMN_Start+0x104>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a18      	ldr	r2, [pc, #96]	@ (800853c <HAL_TIMEx_PWMN_Start+0x160>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d115      	bne.n	800850c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	4b16      	ldr	r3, [pc, #88]	@ (8008540 <HAL_TIMEx_PWMN_Start+0x164>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d015      	beq.n	800851e <HAL_TIMEx_PWMN_Start+0x142>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084f8:	d011      	beq.n	800851e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0201 	orr.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850a:	e008      	b.n	800851e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	e000      	b.n	8008520 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40013400 	.word	0x40013400
 800853c:	40014000 	.word	0x40014000
 8008540:	00010007 	.word	0x00010007

08008544 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f9a6 	bl	80088a8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6a1a      	ldr	r2, [r3, #32]
 8008562:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10f      	bne.n	800858c <HAL_TIMEx_PWMN_Stop+0x48>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a1a      	ldr	r2, [r3, #32]
 8008572:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008576:	4013      	ands	r3, r2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d107      	bne.n	800858c <HAL_TIMEx_PWMN_Stop+0x48>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800858a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6a1a      	ldr	r2, [r3, #32]
 8008592:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008596:	4013      	ands	r3, r2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10f      	bne.n	80085bc <HAL_TIMEx_PWMN_Stop+0x78>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a1a      	ldr	r2, [r3, #32]
 80085a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d107      	bne.n	80085bc <HAL_TIMEx_PWMN_Stop+0x78>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0201 	bic.w	r2, r2, #1
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <HAL_TIMEx_PWMN_Stop+0x88>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ca:	e013      	b.n	80085f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d104      	bne.n	80085dc <HAL_TIMEx_PWMN_Stop+0x98>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085da:	e00b      	b.n	80085f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d104      	bne.n	80085ec <HAL_TIMEx_PWMN_Stop+0xa8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085ea:	e003      	b.n	80085f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008614:	2302      	movs	r3, #2
 8008616:	e065      	b.n	80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a2c      	ldr	r2, [pc, #176]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a2b      	ldr	r2, [pc, #172]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d108      	bne.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008652:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1b      	ldr	r2, [pc, #108]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868e:	d013      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a18      	ldr	r2, [pc, #96]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a17      	ldr	r2, [pc, #92]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a12      	ldr	r2, [pc, #72]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a13      	ldr	r2, [pc, #76]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10c      	bne.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40013400 	.word	0x40013400
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40014000 	.word	0x40014000

08008704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800871c:	2302      	movs	r3, #2
 800871e:	e073      	b.n	8008808 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a19      	ldr	r2, [pc, #100]	@ (8008814 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a18      	ldr	r2, [pc, #96]	@ (8008818 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d11c      	bne.n	80087f6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	051b      	lsls	r3, r3, #20
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40013400 	.word	0x40013400

0800881c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	2204      	movs	r2, #4
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	43db      	mvns	r3, r3
 80088ca:	401a      	ands	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1a      	ldr	r2, [r3, #32]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	431a      	orrs	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e042      	b.n	800898a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fa fc12 	bl	8003140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2224      	movs	r2, #36	@ 0x24
 8008920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fee5 	bl	800970c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fc16 	bl	8009174 <UART_SetConfig>
 8008948:	4603      	mov	r3, r0
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e01b      	b.n	800898a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008960:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008970:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0201 	orr.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 ff64 	bl	8009850 <UART_CheckIdleState>
 8008988:	4603      	mov	r3, r0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b08a      	sub	sp, #40	@ 0x28
 8008996:	af02      	add	r7, sp, #8
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	603b      	str	r3, [r7, #0]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d17b      	bne.n	8008aa4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_UART_Transmit+0x26>
 80089b2:	88fb      	ldrh	r3, [r7, #6]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e074      	b.n	8008aa6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2221      	movs	r2, #33	@ 0x21
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089cc:	f7fa feac 	bl	8003728 <HAL_GetTick>
 80089d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ea:	d108      	bne.n	80089fe <HAL_UART_Transmit+0x6c>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	61bb      	str	r3, [r7, #24]
 80089fc:	e003      	b.n	8008a06 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a06:	e030      	b.n	8008a6a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2180      	movs	r1, #128	@ 0x80
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 ffc6 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e03d      	b.n	8008aa6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	3302      	adds	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	e007      	b.n	8008a58 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3301      	adds	r3, #1
 8008a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1c8      	bne.n	8008a08 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2140      	movs	r1, #64	@ 0x40
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 ff8f 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e006      	b.n	8008aa6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e000      	b.n	8008aa6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008aa4:	2302      	movs	r3, #2
  }
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3720      	adds	r7, #32
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ada:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ade:	4013      	ands	r3, r2
 8008ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d11b      	bne.n	8008b24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8300 	beq.w	800911a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
      }
      return;
 8008b22:	e2fa      	b.n	800911a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8123 	beq.w	8008d74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b32:	4b8d      	ldr	r3, [pc, #564]	@ (8008d68 <HAL_UART_IRQHandler+0x2b8>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d6c <HAL_UART_IRQHandler+0x2bc>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8116 	beq.w	8008d74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d011      	beq.n	8008b78 <HAL_UART_IRQHandler+0xc8>
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2201      	movs	r2, #1
 8008b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b6e:	f043 0201 	orr.w	r2, r3, #1
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d011      	beq.n	8008ba8 <HAL_UART_IRQHandler+0xf8>
 8008b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2202      	movs	r2, #2
 8008b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9e:	f043 0204 	orr.w	r2, r3, #4
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d011      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x128>
 8008bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bce:	f043 0202 	orr.w	r2, r3, #2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d017      	beq.n	8008c14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d68 <HAL_UART_IRQHandler+0x2b8>)
 8008bf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2208      	movs	r2, #8
 8008c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0a:	f043 0208 	orr.w	r2, r3, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d012      	beq.n	8008c46 <HAL_UART_IRQHandler+0x196>
 8008c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00c      	beq.n	8008c46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	f043 0220 	orr.w	r2, r3, #32
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 8266 	beq.w	800911e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d013      	beq.n	8008c86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d007      	beq.n	8008c86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d005      	beq.n	8008caa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ca2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d054      	beq.n	8008d54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fee7 	bl	8009a7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cba:	2b40      	cmp	r3, #64	@ 0x40
 8008cbc:	d146      	bne.n	8008d4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1d9      	bne.n	8008cbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d017      	beq.n	8008d44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1a:	4a15      	ldr	r2, [pc, #84]	@ (8008d70 <HAL_UART_IRQHandler+0x2c0>)
 8008d1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fa ff0e 	bl	8003b46 <HAL_DMA_Abort_IT>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d019      	beq.n	8008d64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	e00f      	b.n	8008d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f9ff 	bl	8009148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4a:	e00b      	b.n	8008d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f9fb 	bl	8009148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d52:	e007      	b.n	8008d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9f7 	bl	8009148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d62:	e1dc      	b.n	800911e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d64:	bf00      	nop
    return;
 8008d66:	e1da      	b.n	800911e <HAL_UART_IRQHandler+0x66e>
 8008d68:	10000001 	.word	0x10000001
 8008d6c:	04000120 	.word	0x04000120
 8008d70:	08009b4b 	.word	0x08009b4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	f040 8170 	bne.w	800905e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d82:	f003 0310 	and.w	r3, r3, #16
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8169 	beq.w	800905e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8162 	beq.w	800905e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2210      	movs	r2, #16
 8008da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b40      	cmp	r3, #64	@ 0x40
 8008dae:	f040 80d8 	bne.w	8008f62 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80af 	beq.w	8008f28 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	f080 80a7 	bcs.w	8008f28 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008de0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f040 8087 	bne.w	8008f06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1da      	bne.n	8008df8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3308      	adds	r3, #8
 8008e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e54:	f023 0301 	bic.w	r3, r3, #1
 8008e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e1      	bne.n	8008e42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e3      	bne.n	8008e7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ed4:	f023 0310 	bic.w	r3, r3, #16
 8008ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e4      	bne.n	8008ec4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fa fdc7 	bl	8003a94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f91b 	bl	800915c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008f26:	e0fc      	b.n	8009122 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f040 80f5 	bne.w	8009122 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	f040 80eb 	bne.w	8009122 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f8fe 	bl	800915c <HAL_UARTEx_RxEventCallback>
      return;
 8008f60:	e0df      	b.n	8009122 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80d1 	beq.w	8009126 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80cc 	beq.w	8009126 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e4      	bne.n	8008f8e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e1      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	60fb      	str	r3, [r7, #12]
   return(result);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f023 0310 	bic.w	r3, r3, #16
 8009028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	69b9      	ldr	r1, [r7, #24]
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	617b      	str	r3, [r7, #20]
   return(result);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e4      	bne.n	8009014 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f880 	bl	800915c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800905c:	e063      	b.n	8009126 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00e      	beq.n	8009088 <HAL_UART_IRQHandler+0x5d8>
 800906a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800906e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800907e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fd9f 	bl	8009bc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009086:	e051      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009090:	2b00      	cmp	r3, #0
 8009092:	d014      	beq.n	80090be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d03a      	beq.n	800912a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
    }
    return;
 80090bc:	e035      	b.n	800912a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <HAL_UART_IRQHandler+0x62e>
 80090ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fd49 	bl	8009b6e <UART_EndTransmit_IT>
    return;
 80090dc:	e026      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <HAL_UART_IRQHandler+0x64e>
 80090ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fd78 	bl	8009bec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090fc:	e016      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d010      	beq.n	800912c <HAL_UART_IRQHandler+0x67c>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910e:	2b00      	cmp	r3, #0
 8009110:	da0c      	bge.n	800912c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd60 	bl	8009bd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009118:	e008      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
      return;
 800911a:	bf00      	nop
 800911c:	e006      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
    return;
 800911e:	bf00      	nop
 8009120:	e004      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
      return;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
      return;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <HAL_UART_IRQHandler+0x67c>
    return;
 800912a:	bf00      	nop
  }
}
 800912c:	37e8      	adds	r7, #232	@ 0xe8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop

08009134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009178:	b08c      	sub	sp, #48	@ 0x30
 800917a:	af00      	add	r7, sp, #0
 800917c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	431a      	orrs	r2, r3
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	431a      	orrs	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	4313      	orrs	r3, r2
 800919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4bab      	ldr	r3, [pc, #684]	@ (8009450 <UART_SetConfig+0x2dc>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	6812      	ldr	r2, [r2, #0]
 80091aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4aa0      	ldr	r2, [pc, #640]	@ (8009454 <UART_SetConfig+0x2e0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d004      	beq.n	80091e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091dc:	4313      	orrs	r3, r2
 80091de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80091ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091f4:	430b      	orrs	r3, r1
 80091f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	f023 010f 	bic.w	r1, r3, #15
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a91      	ldr	r2, [pc, #580]	@ (8009458 <UART_SetConfig+0x2e4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d125      	bne.n	8009264 <UART_SetConfig+0xf0>
 8009218:	4b90      	ldr	r3, [pc, #576]	@ (800945c <UART_SetConfig+0x2e8>)
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d81a      	bhi.n	800925c <UART_SetConfig+0xe8>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <UART_SetConfig+0xb8>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	0800923d 	.word	0x0800923d
 8009230:	0800924d 	.word	0x0800924d
 8009234:	08009245 	.word	0x08009245
 8009238:	08009255 	.word	0x08009255
 800923c:	2301      	movs	r3, #1
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009242:	e0d6      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009244:	2302      	movs	r3, #2
 8009246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800924a:	e0d2      	b.n	80093f2 <UART_SetConfig+0x27e>
 800924c:	2304      	movs	r3, #4
 800924e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009252:	e0ce      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009254:	2308      	movs	r3, #8
 8009256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800925a:	e0ca      	b.n	80093f2 <UART_SetConfig+0x27e>
 800925c:	2310      	movs	r3, #16
 800925e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009262:	e0c6      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a7d      	ldr	r2, [pc, #500]	@ (8009460 <UART_SetConfig+0x2ec>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d138      	bne.n	80092e0 <UART_SetConfig+0x16c>
 800926e:	4b7b      	ldr	r3, [pc, #492]	@ (800945c <UART_SetConfig+0x2e8>)
 8009270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009274:	f003 030c 	and.w	r3, r3, #12
 8009278:	2b0c      	cmp	r3, #12
 800927a:	d82d      	bhi.n	80092d8 <UART_SetConfig+0x164>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <UART_SetConfig+0x110>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092b9 	.word	0x080092b9
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092d9 	.word	0x080092d9
 8009290:	080092d9 	.word	0x080092d9
 8009294:	080092c9 	.word	0x080092c9
 8009298:	080092d9 	.word	0x080092d9
 800929c:	080092d9 	.word	0x080092d9
 80092a0:	080092d9 	.word	0x080092d9
 80092a4:	080092c1 	.word	0x080092c1
 80092a8:	080092d9 	.word	0x080092d9
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	080092d9 	.word	0x080092d9
 80092b4:	080092d1 	.word	0x080092d1
 80092b8:	2300      	movs	r3, #0
 80092ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092be:	e098      	b.n	80093f2 <UART_SetConfig+0x27e>
 80092c0:	2302      	movs	r3, #2
 80092c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092c6:	e094      	b.n	80093f2 <UART_SetConfig+0x27e>
 80092c8:	2304      	movs	r3, #4
 80092ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ce:	e090      	b.n	80093f2 <UART_SetConfig+0x27e>
 80092d0:	2308      	movs	r3, #8
 80092d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092d6:	e08c      	b.n	80093f2 <UART_SetConfig+0x27e>
 80092d8:	2310      	movs	r3, #16
 80092da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092de:	e088      	b.n	80093f2 <UART_SetConfig+0x27e>
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a5f      	ldr	r2, [pc, #380]	@ (8009464 <UART_SetConfig+0x2f0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d125      	bne.n	8009336 <UART_SetConfig+0x1c2>
 80092ea:	4b5c      	ldr	r3, [pc, #368]	@ (800945c <UART_SetConfig+0x2e8>)
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80092f4:	2b30      	cmp	r3, #48	@ 0x30
 80092f6:	d016      	beq.n	8009326 <UART_SetConfig+0x1b2>
 80092f8:	2b30      	cmp	r3, #48	@ 0x30
 80092fa:	d818      	bhi.n	800932e <UART_SetConfig+0x1ba>
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d00a      	beq.n	8009316 <UART_SetConfig+0x1a2>
 8009300:	2b20      	cmp	r3, #32
 8009302:	d814      	bhi.n	800932e <UART_SetConfig+0x1ba>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <UART_SetConfig+0x19a>
 8009308:	2b10      	cmp	r3, #16
 800930a:	d008      	beq.n	800931e <UART_SetConfig+0x1aa>
 800930c:	e00f      	b.n	800932e <UART_SetConfig+0x1ba>
 800930e:	2300      	movs	r3, #0
 8009310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009314:	e06d      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009316:	2302      	movs	r3, #2
 8009318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800931c:	e069      	b.n	80093f2 <UART_SetConfig+0x27e>
 800931e:	2304      	movs	r3, #4
 8009320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009324:	e065      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009326:	2308      	movs	r3, #8
 8009328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932c:	e061      	b.n	80093f2 <UART_SetConfig+0x27e>
 800932e:	2310      	movs	r3, #16
 8009330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009334:	e05d      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a4b      	ldr	r2, [pc, #300]	@ (8009468 <UART_SetConfig+0x2f4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d125      	bne.n	800938c <UART_SetConfig+0x218>
 8009340:	4b46      	ldr	r3, [pc, #280]	@ (800945c <UART_SetConfig+0x2e8>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009346:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800934a:	2bc0      	cmp	r3, #192	@ 0xc0
 800934c:	d016      	beq.n	800937c <UART_SetConfig+0x208>
 800934e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009350:	d818      	bhi.n	8009384 <UART_SetConfig+0x210>
 8009352:	2b80      	cmp	r3, #128	@ 0x80
 8009354:	d00a      	beq.n	800936c <UART_SetConfig+0x1f8>
 8009356:	2b80      	cmp	r3, #128	@ 0x80
 8009358:	d814      	bhi.n	8009384 <UART_SetConfig+0x210>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <UART_SetConfig+0x1f0>
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d008      	beq.n	8009374 <UART_SetConfig+0x200>
 8009362:	e00f      	b.n	8009384 <UART_SetConfig+0x210>
 8009364:	2300      	movs	r3, #0
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800936a:	e042      	b.n	80093f2 <UART_SetConfig+0x27e>
 800936c:	2302      	movs	r3, #2
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009372:	e03e      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937a:	e03a      	b.n	80093f2 <UART_SetConfig+0x27e>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009382:	e036      	b.n	80093f2 <UART_SetConfig+0x27e>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938a:	e032      	b.n	80093f2 <UART_SetConfig+0x27e>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a30      	ldr	r2, [pc, #192]	@ (8009454 <UART_SetConfig+0x2e0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d12a      	bne.n	80093ec <UART_SetConfig+0x278>
 8009396:	4b31      	ldr	r3, [pc, #196]	@ (800945c <UART_SetConfig+0x2e8>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093a4:	d01a      	beq.n	80093dc <UART_SetConfig+0x268>
 80093a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093aa:	d81b      	bhi.n	80093e4 <UART_SetConfig+0x270>
 80093ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b0:	d00c      	beq.n	80093cc <UART_SetConfig+0x258>
 80093b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093b6:	d815      	bhi.n	80093e4 <UART_SetConfig+0x270>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <UART_SetConfig+0x250>
 80093bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c0:	d008      	beq.n	80093d4 <UART_SetConfig+0x260>
 80093c2:	e00f      	b.n	80093e4 <UART_SetConfig+0x270>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ca:	e012      	b.n	80093f2 <UART_SetConfig+0x27e>
 80093cc:	2302      	movs	r3, #2
 80093ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093d2:	e00e      	b.n	80093f2 <UART_SetConfig+0x27e>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093da:	e00a      	b.n	80093f2 <UART_SetConfig+0x27e>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e2:	e006      	b.n	80093f2 <UART_SetConfig+0x27e>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ea:	e002      	b.n	80093f2 <UART_SetConfig+0x27e>
 80093ec:	2310      	movs	r3, #16
 80093ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a17      	ldr	r2, [pc, #92]	@ (8009454 <UART_SetConfig+0x2e0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	f040 80a8 	bne.w	800954e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009402:	2b08      	cmp	r3, #8
 8009404:	d834      	bhi.n	8009470 <UART_SetConfig+0x2fc>
 8009406:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <UART_SetConfig+0x298>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	08009431 	.word	0x08009431
 8009410:	08009471 	.word	0x08009471
 8009414:	08009439 	.word	0x08009439
 8009418:	08009471 	.word	0x08009471
 800941c:	0800943f 	.word	0x0800943f
 8009420:	08009471 	.word	0x08009471
 8009424:	08009471 	.word	0x08009471
 8009428:	08009471 	.word	0x08009471
 800942c:	08009447 	.word	0x08009447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009430:	f7fc fa46 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8009434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009436:	e021      	b.n	800947c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009438:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <UART_SetConfig+0x2f8>)
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800943c:	e01e      	b.n	800947c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800943e:	f7fc f9d3 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 8009442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009444:	e01a      	b.n	800947c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800944c:	e016      	b.n	800947c <UART_SetConfig+0x308>
 800944e:	bf00      	nop
 8009450:	cfff69f3 	.word	0xcfff69f3
 8009454:	40008000 	.word	0x40008000
 8009458:	40013800 	.word	0x40013800
 800945c:	40021000 	.word	0x40021000
 8009460:	40004400 	.word	0x40004400
 8009464:	40004800 	.word	0x40004800
 8009468:	40004c00 	.word	0x40004c00
 800946c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800947a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 812a 	beq.w	80096d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	4a9e      	ldr	r2, [pc, #632]	@ (8009704 <UART_SetConfig+0x590>)
 800948a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948e:	461a      	mov	r2, r3
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	fbb3 f3f2 	udiv	r3, r3, r2
 8009496:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	4413      	add	r3, r2
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d305      	bcc.n	80094b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d903      	bls.n	80094bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094ba:	e10d      	b.n	80096d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	2200      	movs	r2, #0
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	60fa      	str	r2, [r7, #12]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	4a8e      	ldr	r2, [pc, #568]	@ (8009704 <UART_SetConfig+0x590>)
 80094ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2200      	movs	r2, #0
 80094d2:	603b      	str	r3, [r7, #0]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094de:	f7f7 fbab 	bl	8000c38 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	f04f 0200 	mov.w	r2, #0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	020b      	lsls	r3, r1, #8
 80094f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094f8:	0202      	lsls	r2, r0, #8
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	6849      	ldr	r1, [r1, #4]
 80094fe:	0849      	lsrs	r1, r1, #1
 8009500:	2000      	movs	r0, #0
 8009502:	460c      	mov	r4, r1
 8009504:	4605      	mov	r5, r0
 8009506:	eb12 0804 	adds.w	r8, r2, r4
 800950a:	eb43 0905 	adc.w	r9, r3, r5
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	469a      	mov	sl, r3
 8009516:	4693      	mov	fp, r2
 8009518:	4652      	mov	r2, sl
 800951a:	465b      	mov	r3, fp
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f7 fb8a 	bl	8000c38 <__aeabi_uldivmod>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4613      	mov	r3, r2
 800952a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009532:	d308      	bcc.n	8009546 <UART_SetConfig+0x3d2>
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800953a:	d204      	bcs.n	8009546 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6a3a      	ldr	r2, [r7, #32]
 8009542:	60da      	str	r2, [r3, #12]
 8009544:	e0c8      	b.n	80096d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800954c:	e0c4      	b.n	80096d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009556:	d167      	bne.n	8009628 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009558:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800955c:	2b08      	cmp	r3, #8
 800955e:	d828      	bhi.n	80095b2 <UART_SetConfig+0x43e>
 8009560:	a201      	add	r2, pc, #4	@ (adr r2, 8009568 <UART_SetConfig+0x3f4>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	0800958d 	.word	0x0800958d
 800956c:	08009595 	.word	0x08009595
 8009570:	0800959d 	.word	0x0800959d
 8009574:	080095b3 	.word	0x080095b3
 8009578:	080095a3 	.word	0x080095a3
 800957c:	080095b3 	.word	0x080095b3
 8009580:	080095b3 	.word	0x080095b3
 8009584:	080095b3 	.word	0x080095b3
 8009588:	080095ab 	.word	0x080095ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800958c:	f7fc f998 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8009590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009592:	e014      	b.n	80095be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009594:	f7fc f9aa 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
 8009598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800959a:	e010      	b.n	80095be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800959c:	4b5a      	ldr	r3, [pc, #360]	@ (8009708 <UART_SetConfig+0x594>)
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095a0:	e00d      	b.n	80095be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095a2:	f7fc f921 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 80095a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095a8:	e009      	b.n	80095be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095b0:	e005      	b.n	80095be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 8089 	beq.w	80096d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ca:	4a4e      	ldr	r2, [pc, #312]	@ (8009704 <UART_SetConfig+0x590>)
 80095cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d8:	005a      	lsls	r2, r3, #1
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	441a      	add	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	2b0f      	cmp	r3, #15
 80095f0:	d916      	bls.n	8009620 <UART_SetConfig+0x4ac>
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f8:	d212      	bcs.n	8009620 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f023 030f 	bic.w	r3, r3, #15
 8009602:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	085b      	lsrs	r3, r3, #1
 8009608:	b29b      	uxth	r3, r3
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	b29a      	uxth	r2, r3
 8009610:	8bfb      	ldrh	r3, [r7, #30]
 8009612:	4313      	orrs	r3, r2
 8009614:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	8bfa      	ldrh	r2, [r7, #30]
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	e05b      	b.n	80096d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009626:	e057      	b.n	80096d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009628:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800962c:	2b08      	cmp	r3, #8
 800962e:	d828      	bhi.n	8009682 <UART_SetConfig+0x50e>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x4c4>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	0800965d 	.word	0x0800965d
 800963c:	08009665 	.word	0x08009665
 8009640:	0800966d 	.word	0x0800966d
 8009644:	08009683 	.word	0x08009683
 8009648:	08009673 	.word	0x08009673
 800964c:	08009683 	.word	0x08009683
 8009650:	08009683 	.word	0x08009683
 8009654:	08009683 	.word	0x08009683
 8009658:	0800967b 	.word	0x0800967b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800965c:	f7fc f930 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8009660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009662:	e014      	b.n	800968e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009664:	f7fc f942 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
 8009668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800966a:	e010      	b.n	800968e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800966c:	4b26      	ldr	r3, [pc, #152]	@ (8009708 <UART_SetConfig+0x594>)
 800966e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009670:	e00d      	b.n	800968e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009672:	f7fc f8b9 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 8009676:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009678:	e009      	b.n	800968e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800967a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800967e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009680:	e005      	b.n	800968e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800968c:	bf00      	nop
    }

    if (pclk != 0U)
 800968e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	d021      	beq.n	80096d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009698:	4a1a      	ldr	r2, [pc, #104]	@ (8009704 <UART_SetConfig+0x590>)
 800969a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800969e:	461a      	mov	r2, r3
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	441a      	add	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	2b0f      	cmp	r3, #15
 80096bc:	d909      	bls.n	80096d2 <UART_SetConfig+0x55e>
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096c4:	d205      	bcs.n	80096d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60da      	str	r2, [r3, #12]
 80096d0:	e002      	b.n	80096d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2200      	movs	r2, #0
 80096ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3730      	adds	r7, #48	@ 0x30
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009702:	bf00      	nop
 8009704:	0800e2bc 	.word	0x0800e2bc
 8009708:	00f42400 	.word	0x00f42400

0800970c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00a      	beq.n	80097be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01a      	beq.n	8009822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800980a:	d10a      	bne.n	8009822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	605a      	str	r2, [r3, #4]
  }
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b098      	sub	sp, #96	@ 0x60
 8009854:	af02      	add	r7, sp, #8
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009860:	f7f9 ff62 	bl	8003728 <HAL_GetTick>
 8009864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0308 	and.w	r3, r3, #8
 8009870:	2b08      	cmp	r3, #8
 8009872:	d12f      	bne.n	80098d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800987c:	2200      	movs	r2, #0
 800987e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f88e 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d022      	beq.n	80098d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800989c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e6      	bne.n	800988e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e063      	b.n	800999c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d149      	bne.n	8009976 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ea:	2200      	movs	r2, #0
 80098ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f857 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d03c      	beq.n	8009976 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	623b      	str	r3, [r7, #32]
   return(result);
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800991a:	633b      	str	r3, [r7, #48]	@ 0x30
 800991c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e6      	bne.n	80098fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	60fb      	str	r3, [r7, #12]
   return(result);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800994e:	61fa      	str	r2, [r7, #28]
 8009950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	69b9      	ldr	r1, [r7, #24]
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	617b      	str	r3, [r7, #20]
   return(result);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e5      	bne.n	800992e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e012      	b.n	800999c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3758      	adds	r7, #88	@ 0x58
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b4:	e04f      	b.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d04b      	beq.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099be:	f7f9 feb3 	bl	8003728 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d302      	bcc.n	80099d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e04e      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0304 	and.w	r3, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d037      	beq.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b80      	cmp	r3, #128	@ 0x80
 80099ea:	d034      	beq.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b40      	cmp	r3, #64	@ 0x40
 80099f0:	d031      	beq.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d110      	bne.n	8009a22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2208      	movs	r2, #8
 8009a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 f838 	bl	8009a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2208      	movs	r2, #8
 8009a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e029      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a30:	d111      	bne.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f81e 	bl	8009a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e00f      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69da      	ldr	r2, [r3, #28]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	bf0c      	ite	eq
 8009a66:	2301      	moveq	r3, #1
 8009a68:	2300      	movne	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d0a0      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b095      	sub	sp, #84	@ 0x54
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009adc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e3      	bne.n	8009ab8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d118      	bne.n	8009b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f023 0310 	bic.w	r3, r3, #16
 8009b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6979      	ldr	r1, [r7, #20]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	613b      	str	r3, [r7, #16]
   return(result);
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b3e:	bf00      	nop
 8009b40:	3754      	adds	r7, #84	@ 0x54
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7ff faf1 	bl	8009148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b088      	sub	sp, #32
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6979      	ldr	r1, [r7, #20]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e6      	bne.n	8009b76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fabc 	bl	8009134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bbc:	bf00      	nop
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e027      	b.n	8009c66 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2224      	movs	r2, #36	@ 0x24
 8009c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e02d      	b.n	8009ce6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2224      	movs	r2, #36	@ 0x24
 8009c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0201 	bic.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f850 	bl	8009d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e02d      	b.n	8009d62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2224      	movs	r2, #36	@ 0x24
 8009d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0201 	bic.w	r2, r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f812 	bl	8009d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d108      	bne.n	8009d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d8c:	e031      	b.n	8009df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d8e:	2308      	movs	r3, #8
 8009d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d92:	2308      	movs	r3, #8
 8009d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	0e5b      	lsrs	r3, r3, #25
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	0f5b      	lsrs	r3, r3, #29
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	7b3a      	ldrb	r2, [r7, #12]
 8009dba:	4911      	ldr	r1, [pc, #68]	@ (8009e00 <UARTEx_SetNbDataToProcess+0x94>)
 8009dbc:	5c8a      	ldrb	r2, [r1, r2]
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dc2:	7b3a      	ldrb	r2, [r7, #12]
 8009dc4:	490f      	ldr	r1, [pc, #60]	@ (8009e04 <UARTEx_SetNbDataToProcess+0x98>)
 8009dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	7b7a      	ldrb	r2, [r7, #13]
 8009dd8:	4909      	ldr	r1, [pc, #36]	@ (8009e00 <UARTEx_SetNbDataToProcess+0x94>)
 8009dda:	5c8a      	ldrb	r2, [r1, r2]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009de0:	7b7a      	ldrb	r2, [r7, #13]
 8009de2:	4908      	ldr	r1, [pc, #32]	@ (8009e04 <UARTEx_SetNbDataToProcess+0x98>)
 8009de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	0800e2d4 	.word	0x0800e2d4
 8009e04:	0800e2dc 	.word	0x0800e2dc

08009e08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e1a:	2b84      	cmp	r3, #132	@ 0x84
 8009e1c:	d005      	beq.n	8009e2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	3303      	adds	r3, #3
 8009e28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e3c:	f000 fa5c 	bl	800a2f8 <vTaskStartScheduler>
  
  return osOK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e48:	b087      	sub	sp, #28
 8009e4a:	af02      	add	r7, sp, #8
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685c      	ldr	r4, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e5c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff ffcf 	bl	8009e08 <makeFreeRtosPriority>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	f107 030c 	add.w	r3, r7, #12
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	9200      	str	r2, [sp, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	4632      	mov	r2, r6
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f8d2 	bl	800a024 <xTaskCreate>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d001      	beq.n	8009e8a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e000      	b.n	8009e8c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <osDelay+0x16>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	e000      	b.n	8009eac <osDelay+0x18>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f9ed 	bl	800a28c <vTaskDelay>
  
  return osOK;
 8009eb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f103 0208 	add.w	r2, r3, #8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f103 0208 	add.w	r2, r3, #8
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f103 0208 	add.w	r2, r3, #8
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f16:	b480      	push	{r7}
 8009f18:	b085      	sub	sp, #20
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	601a      	str	r2, [r3, #0]
}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d103      	bne.n	8009f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	e00c      	b.n	8009f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3308      	adds	r3, #8
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e002      	b.n	8009f8c <vListInsert+0x2e>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d2f6      	bcs.n	8009f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6892      	ldr	r2, [r2, #8]
 8009fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6852      	ldr	r2, [r2, #4]
 8009ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d103      	bne.n	800a004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08c      	sub	sp, #48	@ 0x30
 800a028:	af04      	add	r7, sp, #16
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a034:	88fb      	ldrh	r3, [r7, #6]
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fe95 	bl	800ad68 <pvPortMalloc>
 800a03e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a046:	2054      	movs	r0, #84	@ 0x54
 800a048:	f000 fe8e 	bl	800ad68 <pvPortMalloc>
 800a04c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	631a      	str	r2, [r3, #48]	@ 0x30
 800a05a:	e005      	b.n	800a068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	f000 ff51 	bl	800af04 <vPortFree>
 800a062:	e001      	b.n	800a068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d013      	beq.n	800a096 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a06e:	88fa      	ldrh	r2, [r7, #6]
 800a070:	2300      	movs	r3, #0
 800a072:	9303      	str	r3, [sp, #12]
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	9302      	str	r3, [sp, #8]
 800a078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f80e 	bl	800a0a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a08a:	69f8      	ldr	r0, [r7, #28]
 800a08c:	f000 f894 	bl	800a1b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a090:	2301      	movs	r3, #1
 800a092:	61bb      	str	r3, [r7, #24]
 800a094:	e002      	b.n	800a09c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a09c:	69bb      	ldr	r3, [r7, #24]
	}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3720      	adds	r7, #32
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b088      	sub	sp, #32
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f023 0307 	bic.w	r3, r3, #7
 800a0cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01f      	beq.n	800a136 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61fb      	str	r3, [r7, #28]
 800a0fa:	e012      	b.n	800a122 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	7819      	ldrb	r1, [r3, #0]
 800a104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	4413      	add	r3, r2
 800a10a:	3334      	adds	r3, #52	@ 0x34
 800a10c:	460a      	mov	r2, r1
 800a10e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d006      	beq.n	800a12a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	3301      	adds	r3, #1
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b0f      	cmp	r3, #15
 800a126:	d9e9      	bls.n	800a0fc <prvInitialiseNewTask+0x56>
 800a128:	e000      	b.n	800a12c <prvInitialiseNewTask+0x86>
			{
				break;
 800a12a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a134:	e003      	b.n	800a13e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a140:	2b06      	cmp	r3, #6
 800a142:	d901      	bls.n	800a148 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a144:	2306      	movs	r3, #6
 800a146:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a14c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a152:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	2200      	movs	r2, #0
 800a158:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	3304      	adds	r3, #4
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff fecc 	bl	8009efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a166:	3318      	adds	r3, #24
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fec7 	bl	8009efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	f1c3 0207 	rsb	r2, r3, #7
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a182:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	2200      	movs	r2, #0
 800a188:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	68f9      	ldr	r1, [r7, #12]
 800a196:	69b8      	ldr	r0, [r7, #24]
 800a198:	f000 fbd4 	bl	800a944 <pxPortInitialiseStack>
 800a19c:	4602      	mov	r2, r0
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1ae:	bf00      	nop
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1c0:	f000 fcf2 	bl	800aba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1c4:	4b2a      	ldr	r3, [pc, #168]	@ (800a270 <prvAddNewTaskToReadyList+0xb8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	4a29      	ldr	r2, [pc, #164]	@ (800a270 <prvAddNewTaskToReadyList+0xb8>)
 800a1cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1ce:	4b29      	ldr	r3, [pc, #164]	@ (800a274 <prvAddNewTaskToReadyList+0xbc>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d109      	bne.n	800a1ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1d6:	4a27      	ldr	r2, [pc, #156]	@ (800a274 <prvAddNewTaskToReadyList+0xbc>)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1dc:	4b24      	ldr	r3, [pc, #144]	@ (800a270 <prvAddNewTaskToReadyList+0xb8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d110      	bne.n	800a206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1e4:	f000 faaa 	bl	800a73c <prvInitialiseTaskLists>
 800a1e8:	e00d      	b.n	800a206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1ea:	4b23      	ldr	r3, [pc, #140]	@ (800a278 <prvAddNewTaskToReadyList+0xc0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d109      	bne.n	800a206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1f2:	4b20      	ldr	r3, [pc, #128]	@ (800a274 <prvAddNewTaskToReadyList+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d802      	bhi.n	800a206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a200:	4a1c      	ldr	r2, [pc, #112]	@ (800a274 <prvAddNewTaskToReadyList+0xbc>)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a206:	4b1d      	ldr	r3, [pc, #116]	@ (800a27c <prvAddNewTaskToReadyList+0xc4>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	4a1b      	ldr	r2, [pc, #108]	@ (800a27c <prvAddNewTaskToReadyList+0xc4>)
 800a20e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	2201      	movs	r2, #1
 800a216:	409a      	lsls	r2, r3
 800a218:	4b19      	ldr	r3, [pc, #100]	@ (800a280 <prvAddNewTaskToReadyList+0xc8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	4a18      	ldr	r2, [pc, #96]	@ (800a280 <prvAddNewTaskToReadyList+0xc8>)
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4a15      	ldr	r2, [pc, #84]	@ (800a284 <prvAddNewTaskToReadyList+0xcc>)
 800a230:	441a      	add	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f7ff fe6c 	bl	8009f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a23e:	f000 fce5 	bl	800ac0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a242:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <prvAddNewTaskToReadyList+0xc0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00e      	beq.n	800a268 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a24a:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <prvAddNewTaskToReadyList+0xbc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a254:	429a      	cmp	r2, r3
 800a256:	d207      	bcs.n	800a268 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a258:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <prvAddNewTaskToReadyList+0xd0>)
 800a25a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	2000068c 	.word	0x2000068c
 800a274:	2000058c 	.word	0x2000058c
 800a278:	20000698 	.word	0x20000698
 800a27c:	200006a8 	.word	0x200006a8
 800a280:	20000694 	.word	0x20000694
 800a284:	20000590 	.word	0x20000590
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d018      	beq.n	800a2d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <vTaskDelay+0x64>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <vTaskDelay+0x32>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60bb      	str	r3, [r7, #8]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2be:	f000 f863 	bl	800a388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fad7 	bl	800a878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2ca:	f000 f86b 	bl	800a3a4 <xTaskResumeAll>
 800a2ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d107      	bne.n	800a2e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a2d6:	4b07      	ldr	r3, [pc, #28]	@ (800a2f4 <vTaskDelay+0x68>)
 800a2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200006b4 	.word	0x200006b4
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a2fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a370 <vTaskStartScheduler+0x78>)
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	2300      	movs	r3, #0
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	2300      	movs	r3, #0
 800a308:	2280      	movs	r2, #128	@ 0x80
 800a30a:	491a      	ldr	r1, [pc, #104]	@ (800a374 <vTaskStartScheduler+0x7c>)
 800a30c:	481a      	ldr	r0, [pc, #104]	@ (800a378 <vTaskStartScheduler+0x80>)
 800a30e:	f7ff fe89 	bl	800a024 <xTaskCreate>
 800a312:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d116      	bne.n	800a348 <vTaskStartScheduler+0x50>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	60bb      	str	r3, [r7, #8]
}
 800a32c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a32e:	4b13      	ldr	r3, [pc, #76]	@ (800a37c <vTaskStartScheduler+0x84>)
 800a330:	f04f 32ff 	mov.w	r2, #4294967295
 800a334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a336:	4b12      	ldr	r3, [pc, #72]	@ (800a380 <vTaskStartScheduler+0x88>)
 800a338:	2201      	movs	r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a33c:	4b11      	ldr	r3, [pc, #68]	@ (800a384 <vTaskStartScheduler+0x8c>)
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a342:	f000 fb8d 	bl	800aa60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a346:	e00f      	b.n	800a368 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34e:	d10b      	bne.n	800a368 <vTaskStartScheduler+0x70>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	607b      	str	r3, [r7, #4]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <vTaskStartScheduler+0x6c>
}
 800a368:	bf00      	nop
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200006b0 	.word	0x200006b0
 800a374:	0800e23c 	.word	0x0800e23c
 800a378:	0800a70d 	.word	0x0800a70d
 800a37c:	200006ac 	.word	0x200006ac
 800a380:	20000698 	.word	0x20000698
 800a384:	20000690 	.word	0x20000690

0800a388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <vTaskSuspendAll+0x18>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	4a03      	ldr	r2, [pc, #12]	@ (800a3a0 <vTaskSuspendAll+0x18>)
 800a394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a396:	bf00      	nop
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	200006b4 	.word	0x200006b4

0800a3a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3b2:	4b42      	ldr	r3, [pc, #264]	@ (800a4bc <xTaskResumeAll+0x118>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	603b      	str	r3, [r7, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	e7fd      	b.n	800a3ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3d2:	f000 fbe9 	bl	800aba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3d6:	4b39      	ldr	r3, [pc, #228]	@ (800a4bc <xTaskResumeAll+0x118>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	4a37      	ldr	r2, [pc, #220]	@ (800a4bc <xTaskResumeAll+0x118>)
 800a3de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e0:	4b36      	ldr	r3, [pc, #216]	@ (800a4bc <xTaskResumeAll+0x118>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d161      	bne.n	800a4ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3e8:	4b35      	ldr	r3, [pc, #212]	@ (800a4c0 <xTaskResumeAll+0x11c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d05d      	beq.n	800a4ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3f0:	e02e      	b.n	800a450 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f2:	4b34      	ldr	r3, [pc, #208]	@ (800a4c4 <xTaskResumeAll+0x120>)
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3318      	adds	r3, #24
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fde6 	bl	8009fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fde1 	bl	8009fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a412:	2201      	movs	r2, #1
 800a414:	409a      	lsls	r2, r3
 800a416:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c8 <xTaskResumeAll+0x124>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c8 <xTaskResumeAll+0x124>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a27      	ldr	r2, [pc, #156]	@ (800a4cc <xTaskResumeAll+0x128>)
 800a42e:	441a      	add	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7ff fd6d 	bl	8009f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a440:	4b23      	ldr	r3, [pc, #140]	@ (800a4d0 <xTaskResumeAll+0x12c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d302      	bcc.n	800a450 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a44a:	4b22      	ldr	r3, [pc, #136]	@ (800a4d4 <xTaskResumeAll+0x130>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a450:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c4 <xTaskResumeAll+0x120>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1cc      	bne.n	800a3f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a45e:	f000 f9eb 	bl	800a838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a462:	4b1d      	ldr	r3, [pc, #116]	@ (800a4d8 <xTaskResumeAll+0x134>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d010      	beq.n	800a490 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a46e:	f000 f837 	bl	800a4e0 <xTaskIncrementTick>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a478:	4b16      	ldr	r3, [pc, #88]	@ (800a4d4 <xTaskResumeAll+0x130>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3b01      	subs	r3, #1
 800a482:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f1      	bne.n	800a46e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a48a:	4b13      	ldr	r3, [pc, #76]	@ (800a4d8 <xTaskResumeAll+0x134>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a490:	4b10      	ldr	r3, [pc, #64]	@ (800a4d4 <xTaskResumeAll+0x130>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a49c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <xTaskResumeAll+0x138>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4ac:	f000 fbae 	bl	800ac0c <vPortExitCritical>

	return xAlreadyYielded;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	200006b4 	.word	0x200006b4
 800a4c0:	2000068c 	.word	0x2000068c
 800a4c4:	2000064c 	.word	0x2000064c
 800a4c8:	20000694 	.word	0x20000694
 800a4cc:	20000590 	.word	0x20000590
 800a4d0:	2000058c 	.word	0x2000058c
 800a4d4:	200006a0 	.word	0x200006a0
 800a4d8:	2000069c 	.word	0x2000069c
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ea:	4b4f      	ldr	r3, [pc, #316]	@ (800a628 <xTaskIncrementTick+0x148>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f040 808f 	bne.w	800a612 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4f4:	4b4d      	ldr	r3, [pc, #308]	@ (800a62c <xTaskIncrementTick+0x14c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4fc:	4a4b      	ldr	r2, [pc, #300]	@ (800a62c <xTaskIncrementTick+0x14c>)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d121      	bne.n	800a54c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a508:	4b49      	ldr	r3, [pc, #292]	@ (800a630 <xTaskIncrementTick+0x150>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00b      	beq.n	800a52a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	603b      	str	r3, [r7, #0]
}
 800a524:	bf00      	nop
 800a526:	bf00      	nop
 800a528:	e7fd      	b.n	800a526 <xTaskIncrementTick+0x46>
 800a52a:	4b41      	ldr	r3, [pc, #260]	@ (800a630 <xTaskIncrementTick+0x150>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	4b40      	ldr	r3, [pc, #256]	@ (800a634 <xTaskIncrementTick+0x154>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a3e      	ldr	r2, [pc, #248]	@ (800a630 <xTaskIncrementTick+0x150>)
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	4a3e      	ldr	r2, [pc, #248]	@ (800a634 <xTaskIncrementTick+0x154>)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	4b3e      	ldr	r3, [pc, #248]	@ (800a638 <xTaskIncrementTick+0x158>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a3c      	ldr	r2, [pc, #240]	@ (800a638 <xTaskIncrementTick+0x158>)
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	f000 f976 	bl	800a838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a54c:	4b3b      	ldr	r3, [pc, #236]	@ (800a63c <xTaskIncrementTick+0x15c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	429a      	cmp	r2, r3
 800a554:	d348      	bcc.n	800a5e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a556:	4b36      	ldr	r3, [pc, #216]	@ (800a630 <xTaskIncrementTick+0x150>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d104      	bne.n	800a56a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a560:	4b36      	ldr	r3, [pc, #216]	@ (800a63c <xTaskIncrementTick+0x15c>)
 800a562:	f04f 32ff 	mov.w	r2, #4294967295
 800a566:	601a      	str	r2, [r3, #0]
					break;
 800a568:	e03e      	b.n	800a5e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56a:	4b31      	ldr	r3, [pc, #196]	@ (800a630 <xTaskIncrementTick+0x150>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d203      	bcs.n	800a58a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a582:	4a2e      	ldr	r2, [pc, #184]	@ (800a63c <xTaskIncrementTick+0x15c>)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a588:	e02e      	b.n	800a5e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	3304      	adds	r3, #4
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fd1e 	bl	8009fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3318      	adds	r3, #24
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fd15 	bl	8009fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	409a      	lsls	r2, r3
 800a5ae:	4b24      	ldr	r3, [pc, #144]	@ (800a640 <xTaskIncrementTick+0x160>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	4a22      	ldr	r2, [pc, #136]	@ (800a640 <xTaskIncrementTick+0x160>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a644 <xTaskIncrementTick+0x164>)
 800a5c6:	441a      	add	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7ff fca1 	bl	8009f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a648 <xTaskIncrementTick+0x168>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d3b9      	bcc.n	800a556 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5e6:	e7b6      	b.n	800a556 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5e8:	4b17      	ldr	r3, [pc, #92]	@ (800a648 <xTaskIncrementTick+0x168>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ee:	4915      	ldr	r1, [pc, #84]	@ (800a644 <xTaskIncrementTick+0x164>)
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	440b      	add	r3, r1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d901      	bls.n	800a604 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a604:	4b11      	ldr	r3, [pc, #68]	@ (800a64c <xTaskIncrementTick+0x16c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e004      	b.n	800a61c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a612:	4b0f      	ldr	r3, [pc, #60]	@ (800a650 <xTaskIncrementTick+0x170>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	4a0d      	ldr	r2, [pc, #52]	@ (800a650 <xTaskIncrementTick+0x170>)
 800a61a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a61c:	697b      	ldr	r3, [r7, #20]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	200006b4 	.word	0x200006b4
 800a62c:	20000690 	.word	0x20000690
 800a630:	20000644 	.word	0x20000644
 800a634:	20000648 	.word	0x20000648
 800a638:	200006a4 	.word	0x200006a4
 800a63c:	200006ac 	.word	0x200006ac
 800a640:	20000694 	.word	0x20000694
 800a644:	20000590 	.word	0x20000590
 800a648:	2000058c 	.word	0x2000058c
 800a64c:	200006a0 	.word	0x200006a0
 800a650:	2000069c 	.word	0x2000069c

0800a654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a65a:	4b27      	ldr	r3, [pc, #156]	@ (800a6f8 <vTaskSwitchContext+0xa4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a662:	4b26      	ldr	r3, [pc, #152]	@ (800a6fc <vTaskSwitchContext+0xa8>)
 800a664:	2201      	movs	r2, #1
 800a666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a668:	e040      	b.n	800a6ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a66a:	4b24      	ldr	r3, [pc, #144]	@ (800a6fc <vTaskSwitchContext+0xa8>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a670:	4b23      	ldr	r3, [pc, #140]	@ (800a700 <vTaskSwitchContext+0xac>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	fab3 f383 	clz	r3, r3
 800a67c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	f1c3 031f 	rsb	r3, r3, #31
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	491f      	ldr	r1, [pc, #124]	@ (800a704 <vTaskSwitchContext+0xb0>)
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	607b      	str	r3, [r7, #4]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <vTaskSwitchContext+0x5a>
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a11      	ldr	r2, [pc, #68]	@ (800a704 <vTaskSwitchContext+0xb0>)
 800a6be:	4413      	add	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	605a      	str	r2, [r3, #4]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d104      	bne.n	800a6e2 <vTaskSwitchContext+0x8e>
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	4a07      	ldr	r2, [pc, #28]	@ (800a708 <vTaskSwitchContext+0xb4>)
 800a6ea:	6013      	str	r3, [r2, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	200006b4 	.word	0x200006b4
 800a6fc:	200006a0 	.word	0x200006a0
 800a700:	20000694 	.word	0x20000694
 800a704:	20000590 	.word	0x20000590
 800a708:	2000058c 	.word	0x2000058c

0800a70c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a714:	f000 f852 	bl	800a7bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a718:	4b06      	ldr	r3, [pc, #24]	@ (800a734 <prvIdleTask+0x28>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d9f9      	bls.n	800a714 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a720:	4b05      	ldr	r3, [pc, #20]	@ (800a738 <prvIdleTask+0x2c>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a730:	e7f0      	b.n	800a714 <prvIdleTask+0x8>
 800a732:	bf00      	nop
 800a734:	20000590 	.word	0x20000590
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a742:	2300      	movs	r3, #0
 800a744:	607b      	str	r3, [r7, #4]
 800a746:	e00c      	b.n	800a762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4a12      	ldr	r2, [pc, #72]	@ (800a79c <prvInitialiseTaskLists+0x60>)
 800a754:	4413      	add	r3, r2
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fbb0 	bl	8009ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3301      	adds	r3, #1
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b06      	cmp	r3, #6
 800a766:	d9ef      	bls.n	800a748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a768:	480d      	ldr	r0, [pc, #52]	@ (800a7a0 <prvInitialiseTaskLists+0x64>)
 800a76a:	f7ff fba7 	bl	8009ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a76e:	480d      	ldr	r0, [pc, #52]	@ (800a7a4 <prvInitialiseTaskLists+0x68>)
 800a770:	f7ff fba4 	bl	8009ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a774:	480c      	ldr	r0, [pc, #48]	@ (800a7a8 <prvInitialiseTaskLists+0x6c>)
 800a776:	f7ff fba1 	bl	8009ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a77a:	480c      	ldr	r0, [pc, #48]	@ (800a7ac <prvInitialiseTaskLists+0x70>)
 800a77c:	f7ff fb9e 	bl	8009ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a780:	480b      	ldr	r0, [pc, #44]	@ (800a7b0 <prvInitialiseTaskLists+0x74>)
 800a782:	f7ff fb9b 	bl	8009ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a786:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b4 <prvInitialiseTaskLists+0x78>)
 800a788:	4a05      	ldr	r2, [pc, #20]	@ (800a7a0 <prvInitialiseTaskLists+0x64>)
 800a78a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <prvInitialiseTaskLists+0x7c>)
 800a78e:	4a05      	ldr	r2, [pc, #20]	@ (800a7a4 <prvInitialiseTaskLists+0x68>)
 800a790:	601a      	str	r2, [r3, #0]
}
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000590 	.word	0x20000590
 800a7a0:	2000061c 	.word	0x2000061c
 800a7a4:	20000630 	.word	0x20000630
 800a7a8:	2000064c 	.word	0x2000064c
 800a7ac:	20000660 	.word	0x20000660
 800a7b0:	20000678 	.word	0x20000678
 800a7b4:	20000644 	.word	0x20000644
 800a7b8:	20000648 	.word	0x20000648

0800a7bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7c2:	e019      	b.n	800a7f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7c4:	f000 f9f0 	bl	800aba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7c8:	4b10      	ldr	r3, [pc, #64]	@ (800a80c <prvCheckTasksWaitingTermination+0x50>)
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fbfb 	bl	8009fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <prvCheckTasksWaitingTermination+0x54>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	4a0b      	ldr	r2, [pc, #44]	@ (800a810 <prvCheckTasksWaitingTermination+0x54>)
 800a7e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <prvCheckTasksWaitingTermination+0x58>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800a814 <prvCheckTasksWaitingTermination+0x58>)
 800a7ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7ee:	f000 fa0d 	bl	800ac0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f810 	bl	800a818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7f8:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <prvCheckTasksWaitingTermination+0x58>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e1      	bne.n	800a7c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20000660 	.word	0x20000660
 800a810:	2000068c 	.word	0x2000068c
 800a814:	20000674 	.word	0x20000674

0800a818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fb6d 	bl	800af04 <vPortFree>
			vPortFree( pxTCB );
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fb6a 	bl	800af04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a83e:	4b0c      	ldr	r3, [pc, #48]	@ (800a870 <prvResetNextTaskUnblockTime+0x38>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a848:	4b0a      	ldr	r3, [pc, #40]	@ (800a874 <prvResetNextTaskUnblockTime+0x3c>)
 800a84a:	f04f 32ff 	mov.w	r2, #4294967295
 800a84e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a850:	e008      	b.n	800a864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a852:	4b07      	ldr	r3, [pc, #28]	@ (800a870 <prvResetNextTaskUnblockTime+0x38>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a04      	ldr	r2, [pc, #16]	@ (800a874 <prvResetNextTaskUnblockTime+0x3c>)
 800a862:	6013      	str	r3, [r2, #0]
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20000644 	.word	0x20000644
 800a874:	200006ac 	.word	0x200006ac

0800a878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a882:	4b29      	ldr	r3, [pc, #164]	@ (800a928 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a888:	4b28      	ldr	r3, [pc, #160]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fb9e 	bl	8009fd0 <uxListRemove>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a89a:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a6:	43da      	mvns	r2, r3
 800a8a8:	4b21      	ldr	r3, [pc, #132]	@ (800a930 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	4a20      	ldr	r2, [pc, #128]	@ (800a930 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d10a      	bne.n	800a8d0 <prvAddCurrentTaskToDelayedList+0x58>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d007      	beq.n	800a8d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	481a      	ldr	r0, [pc, #104]	@ (800a934 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a8ca:	f7ff fb24 	bl	8009f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8ce:	e026      	b.n	800a91e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8d8:	4b14      	ldr	r3, [pc, #80]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d209      	bcs.n	800a8fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8e8:	4b13      	ldr	r3, [pc, #76]	@ (800a938 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7ff fb32 	bl	8009f5e <vListInsert>
}
 800a8fa:	e010      	b.n	800a91e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a93c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b0a      	ldr	r3, [pc, #40]	@ (800a92c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3304      	adds	r3, #4
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f7ff fb28 	bl	8009f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a90e:	4b0c      	ldr	r3, [pc, #48]	@ (800a940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	429a      	cmp	r2, r3
 800a916:	d202      	bcs.n	800a91e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a918:	4a09      	ldr	r2, [pc, #36]	@ (800a940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	6013      	str	r3, [r2, #0]
}
 800a91e:	bf00      	nop
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20000690 	.word	0x20000690
 800a92c:	2000058c 	.word	0x2000058c
 800a930:	20000694 	.word	0x20000694
 800a934:	20000678 	.word	0x20000678
 800a938:	20000648 	.word	0x20000648
 800a93c:	20000644 	.word	0x20000644
 800a940:	200006ac 	.word	0x200006ac

0800a944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3b04      	subs	r3, #4
 800a954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a95c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3b04      	subs	r3, #4
 800a962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f023 0201 	bic.w	r2, r3, #1
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3b04      	subs	r3, #4
 800a972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a974:	4a0c      	ldr	r2, [pc, #48]	@ (800a9a8 <pxPortInitialiseStack+0x64>)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3b14      	subs	r3, #20
 800a97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3b04      	subs	r3, #4
 800a98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f06f 0202 	mvn.w	r2, #2
 800a992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3b20      	subs	r3, #32
 800a998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a99a:	68fb      	ldr	r3, [r7, #12]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	0800a9ad 	.word	0x0800a9ad

0800a9ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9b6:	4b13      	ldr	r3, [pc, #76]	@ (800aa04 <prvTaskExitError+0x58>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d00b      	beq.n	800a9d8 <prvTaskExitError+0x2c>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	60fb      	str	r3, [r7, #12]
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <prvTaskExitError+0x28>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60bb      	str	r3, [r7, #8]
}
 800a9ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ec:	bf00      	nop
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0fc      	beq.n	800a9ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	2000000c 	.word	0x2000000c
	...

0800aa10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <pxCurrentTCBConst2>)
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	6808      	ldr	r0, [r1, #0]
 800aa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	f380 8809 	msr	PSP, r0
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8811 	msr	BASEPRI, r0
 800aa2a:	4770      	bx	lr
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst2>:
 800aa30:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa38:	4808      	ldr	r0, [pc, #32]	@ (800aa5c <prvPortStartFirstTask+0x24>)
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	f380 8808 	msr	MSP, r0
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8814 	msr	CONTROL, r0
 800aa4a:	b662      	cpsie	i
 800aa4c:	b661      	cpsie	f
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	df00      	svc	0
 800aa58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa5a:	bf00      	nop
 800aa5c:	e000ed08 	.word	0xe000ed08

0800aa60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa66:	4b47      	ldr	r3, [pc, #284]	@ (800ab84 <xPortStartScheduler+0x124>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a47      	ldr	r2, [pc, #284]	@ (800ab88 <xPortStartScheduler+0x128>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10b      	bne.n	800aa88 <xPortStartScheduler+0x28>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	613b      	str	r3, [r7, #16]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa88:	4b3e      	ldr	r3, [pc, #248]	@ (800ab84 <xPortStartScheduler+0x124>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab8c <xPortStartScheduler+0x12c>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d10b      	bne.n	800aaaa <xPortStartScheduler+0x4a>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60fb      	str	r3, [r7, #12]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaaa:	4b39      	ldr	r3, [pc, #228]	@ (800ab90 <xPortStartScheduler+0x130>)
 800aaac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	22ff      	movs	r2, #255	@ 0xff
 800aaba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b31      	ldr	r3, [pc, #196]	@ (800ab94 <xPortStartScheduler+0x134>)
 800aad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aad2:	4b31      	ldr	r3, [pc, #196]	@ (800ab98 <xPortStartScheduler+0x138>)
 800aad4:	2207      	movs	r2, #7
 800aad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aad8:	e009      	b.n	800aaee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aada:	4b2f      	ldr	r3, [pc, #188]	@ (800ab98 <xPortStartScheduler+0x138>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3b01      	subs	r3, #1
 800aae0:	4a2d      	ldr	r2, [pc, #180]	@ (800ab98 <xPortStartScheduler+0x138>)
 800aae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf6:	2b80      	cmp	r3, #128	@ 0x80
 800aaf8:	d0ef      	beq.n	800aada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aafa:	4b27      	ldr	r3, [pc, #156]	@ (800ab98 <xPortStartScheduler+0x138>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f1c3 0307 	rsb	r3, r3, #7
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d00b      	beq.n	800ab1e <xPortStartScheduler+0xbe>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	60bb      	str	r3, [r7, #8]
}
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ab98 <xPortStartScheduler+0x138>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	4a1c      	ldr	r2, [pc, #112]	@ (800ab98 <xPortStartScheduler+0x138>)
 800ab26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab28:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <xPortStartScheduler+0x138>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab30:	4a19      	ldr	r2, [pc, #100]	@ (800ab98 <xPortStartScheduler+0x138>)
 800ab32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab3c:	4b17      	ldr	r3, [pc, #92]	@ (800ab9c <xPortStartScheduler+0x13c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a16      	ldr	r2, [pc, #88]	@ (800ab9c <xPortStartScheduler+0x13c>)
 800ab42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab48:	4b14      	ldr	r3, [pc, #80]	@ (800ab9c <xPortStartScheduler+0x13c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a13      	ldr	r2, [pc, #76]	@ (800ab9c <xPortStartScheduler+0x13c>)
 800ab4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab54:	f000 f8da 	bl	800ad0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab58:	4b11      	ldr	r3, [pc, #68]	@ (800aba0 <xPortStartScheduler+0x140>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab5e:	f000 f8f9 	bl	800ad54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab62:	4b10      	ldr	r3, [pc, #64]	@ (800aba4 <xPortStartScheduler+0x144>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a0f      	ldr	r2, [pc, #60]	@ (800aba4 <xPortStartScheduler+0x144>)
 800ab68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab6e:	f7ff ff63 	bl	800aa38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab72:	f7ff fd6f 	bl	800a654 <vTaskSwitchContext>
	prvTaskExitError();
 800ab76:	f7ff ff19 	bl	800a9ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed00 	.word	0xe000ed00
 800ab88:	410fc271 	.word	0x410fc271
 800ab8c:	410fc270 	.word	0x410fc270
 800ab90:	e000e400 	.word	0xe000e400
 800ab94:	200006b8 	.word	0x200006b8
 800ab98:	200006bc 	.word	0x200006bc
 800ab9c:	e000ed20 	.word	0xe000ed20
 800aba0:	2000000c 	.word	0x2000000c
 800aba4:	e000ef34 	.word	0xe000ef34

0800aba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	607b      	str	r3, [r7, #4]
}
 800abc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abc2:	4b10      	ldr	r3, [pc, #64]	@ (800ac04 <vPortEnterCritical+0x5c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	4a0e      	ldr	r2, [pc, #56]	@ (800ac04 <vPortEnterCritical+0x5c>)
 800abca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ac04 <vPortEnterCritical+0x5c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d110      	bne.n	800abf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <vPortEnterCritical+0x60>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	603b      	str	r3, [r7, #0]
}
 800abf0:	bf00      	nop
 800abf2:	bf00      	nop
 800abf4:	e7fd      	b.n	800abf2 <vPortEnterCritical+0x4a>
	}
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	2000000c 	.word	0x2000000c
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac12:	4b12      	ldr	r3, [pc, #72]	@ (800ac5c <vPortExitCritical+0x50>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10b      	bne.n	800ac32 <vPortExitCritical+0x26>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	607b      	str	r3, [r7, #4]
}
 800ac2c:	bf00      	nop
 800ac2e:	bf00      	nop
 800ac30:	e7fd      	b.n	800ac2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac32:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <vPortExitCritical+0x50>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3b01      	subs	r3, #1
 800ac38:	4a08      	ldr	r2, [pc, #32]	@ (800ac5c <vPortExitCritical+0x50>)
 800ac3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac3c:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <vPortExitCritical+0x50>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d105      	bne.n	800ac50 <vPortExitCritical+0x44>
 800ac44:	2300      	movs	r3, #0
 800ac46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	2000000c 	.word	0x2000000c

0800ac60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac60:	f3ef 8009 	mrs	r0, PSP
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	4b15      	ldr	r3, [pc, #84]	@ (800acc0 <pxCurrentTCBConst>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	f01e 0f10 	tst.w	lr, #16
 800ac70:	bf08      	it	eq
 800ac72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	6010      	str	r0, [r2, #0]
 800ac7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac84:	f380 8811 	msr	BASEPRI, r0
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f7ff fce0 	bl	800a654 <vTaskSwitchContext>
 800ac94:	f04f 0000 	mov.w	r0, #0
 800ac98:	f380 8811 	msr	BASEPRI, r0
 800ac9c:	bc09      	pop	{r0, r3}
 800ac9e:	6819      	ldr	r1, [r3, #0]
 800aca0:	6808      	ldr	r0, [r1, #0]
 800aca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca6:	f01e 0f10 	tst.w	lr, #16
 800acaa:	bf08      	it	eq
 800acac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acb0:	f380 8809 	msr	PSP, r0
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w

0800acc0 <pxCurrentTCBConst>:
 800acc0:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop

0800acc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	607b      	str	r3, [r7, #4]
}
 800ace0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ace2:	f7ff fbfd 	bl	800a4e0 <xTaskIncrementTick>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acec:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <SysTick_Handler+0x40>)
 800acee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	2300      	movs	r3, #0
 800acf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	f383 8811 	msr	BASEPRI, r3
}
 800acfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad10:	4b0b      	ldr	r3, [pc, #44]	@ (800ad40 <vPortSetupTimerInterrupt+0x34>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad16:	4b0b      	ldr	r3, [pc, #44]	@ (800ad44 <vPortSetupTimerInterrupt+0x38>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad48 <vPortSetupTimerInterrupt+0x3c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a0a      	ldr	r2, [pc, #40]	@ (800ad4c <vPortSetupTimerInterrupt+0x40>)
 800ad22:	fba2 2303 	umull	r2, r3, r2, r3
 800ad26:	099b      	lsrs	r3, r3, #6
 800ad28:	4a09      	ldr	r2, [pc, #36]	@ (800ad50 <vPortSetupTimerInterrupt+0x44>)
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad2e:	4b04      	ldr	r3, [pc, #16]	@ (800ad40 <vPortSetupTimerInterrupt+0x34>)
 800ad30:	2207      	movs	r2, #7
 800ad32:	601a      	str	r2, [r3, #0]
}
 800ad34:	bf00      	nop
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	e000e010 	.word	0xe000e010
 800ad44:	e000e018 	.word	0xe000e018
 800ad48:	20000000 	.word	0x20000000
 800ad4c:	10624dd3 	.word	0x10624dd3
 800ad50:	e000e014 	.word	0xe000e014

0800ad54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad64 <vPortEnableVFP+0x10>
 800ad58:	6801      	ldr	r1, [r0, #0]
 800ad5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad5e:	6001      	str	r1, [r0, #0]
 800ad60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad62:	bf00      	nop
 800ad64:	e000ed88 	.word	0xe000ed88

0800ad68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	@ 0x28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad74:	f7ff fb08 	bl	800a388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad78:	4b5c      	ldr	r3, [pc, #368]	@ (800aeec <pvPortMalloc+0x184>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad80:	f000 f924 	bl	800afcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad84:	4b5a      	ldr	r3, [pc, #360]	@ (800aef0 <pvPortMalloc+0x188>)
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f040 8095 	bne.w	800aebc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01e      	beq.n	800add6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad98:	2208      	movs	r2, #8
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f003 0307 	and.w	r3, r3, #7
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d015      	beq.n	800add6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f023 0307 	bic.w	r3, r3, #7
 800adb0:	3308      	adds	r3, #8
 800adb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00b      	beq.n	800add6 <pvPortMalloc+0x6e>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	617b      	str	r3, [r7, #20]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d06f      	beq.n	800aebc <pvPortMalloc+0x154>
 800addc:	4b45      	ldr	r3, [pc, #276]	@ (800aef4 <pvPortMalloc+0x18c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d86a      	bhi.n	800aebc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ade6:	4b44      	ldr	r3, [pc, #272]	@ (800aef8 <pvPortMalloc+0x190>)
 800ade8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adea:	4b43      	ldr	r3, [pc, #268]	@ (800aef8 <pvPortMalloc+0x190>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adf0:	e004      	b.n	800adfc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d903      	bls.n	800ae0e <pvPortMalloc+0xa6>
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f1      	bne.n	800adf2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae0e:	4b37      	ldr	r3, [pc, #220]	@ (800aeec <pvPortMalloc+0x184>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d051      	beq.n	800aebc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	4413      	add	r3, r2
 800ae20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	1ad2      	subs	r2, r2, r3
 800ae32:	2308      	movs	r3, #8
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d920      	bls.n	800ae7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4413      	add	r3, r2
 800ae40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <pvPortMalloc+0xfc>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	613b      	str	r3, [r7, #16]
}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae76:	69b8      	ldr	r0, [r7, #24]
 800ae78:	f000 f90a 	bl	800b090 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aef4 <pvPortMalloc+0x18c>)
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	4a1b      	ldr	r2, [pc, #108]	@ (800aef4 <pvPortMalloc+0x18c>)
 800ae88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae8a:	4b1a      	ldr	r3, [pc, #104]	@ (800aef4 <pvPortMalloc+0x18c>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <pvPortMalloc+0x194>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d203      	bcs.n	800ae9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae96:	4b17      	ldr	r3, [pc, #92]	@ (800aef4 <pvPortMalloc+0x18c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a18      	ldr	r2, [pc, #96]	@ (800aefc <pvPortMalloc+0x194>)
 800ae9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	4b13      	ldr	r3, [pc, #76]	@ (800aef0 <pvPortMalloc+0x188>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	431a      	orrs	r2, r3
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aeb2:	4b13      	ldr	r3, [pc, #76]	@ (800af00 <pvPortMalloc+0x198>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	4a11      	ldr	r2, [pc, #68]	@ (800af00 <pvPortMalloc+0x198>)
 800aeba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aebc:	f7ff fa72 	bl	800a3a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00b      	beq.n	800aee2 <pvPortMalloc+0x17a>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	60fb      	str	r3, [r7, #12]
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	e7fd      	b.n	800aede <pvPortMalloc+0x176>
	return pvReturn;
 800aee2:	69fb      	ldr	r3, [r7, #28]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3728      	adds	r7, #40	@ 0x28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	200054e8 	.word	0x200054e8
 800aef0:	200054fc 	.word	0x200054fc
 800aef4:	200054ec 	.word	0x200054ec
 800aef8:	200054e0 	.word	0x200054e0
 800aefc:	200054f0 	.word	0x200054f0
 800af00:	200054f4 	.word	0x200054f4

0800af04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d04f      	beq.n	800afb6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af16:	2308      	movs	r3, #8
 800af18:	425b      	negs	r3, r3
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	4b25      	ldr	r3, [pc, #148]	@ (800afc0 <vPortFree+0xbc>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4013      	ands	r3, r2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <vPortFree+0x46>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60fb      	str	r3, [r7, #12]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <vPortFree+0x66>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	60bb      	str	r3, [r7, #8]
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	e7fd      	b.n	800af66 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	4b14      	ldr	r3, [pc, #80]	@ (800afc0 <vPortFree+0xbc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4013      	ands	r3, r2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01e      	beq.n	800afb6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d11a      	bne.n	800afb6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	4b0e      	ldr	r3, [pc, #56]	@ (800afc0 <vPortFree+0xbc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	43db      	mvns	r3, r3
 800af8a:	401a      	ands	r2, r3
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af90:	f7ff f9fa 	bl	800a388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	4b0a      	ldr	r3, [pc, #40]	@ (800afc4 <vPortFree+0xc0>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4413      	add	r3, r2
 800af9e:	4a09      	ldr	r2, [pc, #36]	@ (800afc4 <vPortFree+0xc0>)
 800afa0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afa2:	6938      	ldr	r0, [r7, #16]
 800afa4:	f000 f874 	bl	800b090 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afa8:	4b07      	ldr	r3, [pc, #28]	@ (800afc8 <vPortFree+0xc4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	4a06      	ldr	r2, [pc, #24]	@ (800afc8 <vPortFree+0xc4>)
 800afb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800afb2:	f7ff f9f7 	bl	800a3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afb6:	bf00      	nop
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	200054fc 	.word	0x200054fc
 800afc4:	200054ec 	.word	0x200054ec
 800afc8:	200054f8 	.word	0x200054f8

0800afcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afd2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800afd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afd8:	4b27      	ldr	r3, [pc, #156]	@ (800b078 <prvHeapInit+0xac>)
 800afda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00c      	beq.n	800b000 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3307      	adds	r3, #7
 800afea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 0307 	bic.w	r3, r3, #7
 800aff2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	4a1f      	ldr	r2, [pc, #124]	@ (800b078 <prvHeapInit+0xac>)
 800affc:	4413      	add	r3, r2
 800affe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b004:	4a1d      	ldr	r2, [pc, #116]	@ (800b07c <prvHeapInit+0xb0>)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b00a:	4b1c      	ldr	r3, [pc, #112]	@ (800b07c <prvHeapInit+0xb0>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	4413      	add	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b018:	2208      	movs	r2, #8
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f023 0307 	bic.w	r3, r3, #7
 800b026:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4a15      	ldr	r2, [pc, #84]	@ (800b080 <prvHeapInit+0xb4>)
 800b02c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b02e:	4b14      	ldr	r3, [pc, #80]	@ (800b080 <prvHeapInit+0xb4>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2200      	movs	r2, #0
 800b034:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b036:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <prvHeapInit+0xb4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	1ad2      	subs	r2, r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b04c:	4b0c      	ldr	r3, [pc, #48]	@ (800b080 <prvHeapInit+0xb4>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	4a0a      	ldr	r2, [pc, #40]	@ (800b084 <prvHeapInit+0xb8>)
 800b05a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	4a09      	ldr	r2, [pc, #36]	@ (800b088 <prvHeapInit+0xbc>)
 800b062:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b064:	4b09      	ldr	r3, [pc, #36]	@ (800b08c <prvHeapInit+0xc0>)
 800b066:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b06a:	601a      	str	r2, [r3, #0]
}
 800b06c:	bf00      	nop
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	200006c0 	.word	0x200006c0
 800b07c:	200054e0 	.word	0x200054e0
 800b080:	200054e8 	.word	0x200054e8
 800b084:	200054f0 	.word	0x200054f0
 800b088:	200054ec 	.word	0x200054ec
 800b08c:	200054fc 	.word	0x200054fc

0800b090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b098:	4b28      	ldr	r3, [pc, #160]	@ (800b13c <prvInsertBlockIntoFreeList+0xac>)
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	e002      	b.n	800b0a4 <prvInsertBlockIntoFreeList+0x14>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d8f7      	bhi.n	800b09e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d108      	bne.n	800b0d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	441a      	add	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d118      	bne.n	800b118 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	4b15      	ldr	r3, [pc, #84]	@ (800b140 <prvInsertBlockIntoFreeList+0xb0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d00d      	beq.n	800b10e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	441a      	add	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e008      	b.n	800b120 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b10e:	4b0c      	ldr	r3, [pc, #48]	@ (800b140 <prvInsertBlockIntoFreeList+0xb0>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	e003      	b.n	800b120 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d002      	beq.n	800b12e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12e:	bf00      	nop
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	200054e0 	.word	0x200054e0
 800b140:	200054e8 	.word	0x200054e8

0800b144 <__cvt>:
 800b144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	ec57 6b10 	vmov	r6, r7, d0
 800b14c:	2f00      	cmp	r7, #0
 800b14e:	460c      	mov	r4, r1
 800b150:	4619      	mov	r1, r3
 800b152:	463b      	mov	r3, r7
 800b154:	bfbb      	ittet	lt
 800b156:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b15a:	461f      	movlt	r7, r3
 800b15c:	2300      	movge	r3, #0
 800b15e:	232d      	movlt	r3, #45	@ 0x2d
 800b160:	700b      	strb	r3, [r1, #0]
 800b162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b164:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b168:	4691      	mov	r9, r2
 800b16a:	f023 0820 	bic.w	r8, r3, #32
 800b16e:	bfbc      	itt	lt
 800b170:	4632      	movlt	r2, r6
 800b172:	4616      	movlt	r6, r2
 800b174:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b178:	d005      	beq.n	800b186 <__cvt+0x42>
 800b17a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b17e:	d100      	bne.n	800b182 <__cvt+0x3e>
 800b180:	3401      	adds	r4, #1
 800b182:	2102      	movs	r1, #2
 800b184:	e000      	b.n	800b188 <__cvt+0x44>
 800b186:	2103      	movs	r1, #3
 800b188:	ab03      	add	r3, sp, #12
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	ab02      	add	r3, sp, #8
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	ec47 6b10 	vmov	d0, r6, r7
 800b194:	4653      	mov	r3, sl
 800b196:	4622      	mov	r2, r4
 800b198:	f000 ff4e 	bl	800c038 <_dtoa_r>
 800b19c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	d119      	bne.n	800b1d8 <__cvt+0x94>
 800b1a4:	f019 0f01 	tst.w	r9, #1
 800b1a8:	d00e      	beq.n	800b1c8 <__cvt+0x84>
 800b1aa:	eb00 0904 	add.w	r9, r0, r4
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	f7f5 fcaf 	bl	8000b18 <__aeabi_dcmpeq>
 800b1ba:	b108      	cbz	r0, 800b1c0 <__cvt+0x7c>
 800b1bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1c0:	2230      	movs	r2, #48	@ 0x30
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	454b      	cmp	r3, r9
 800b1c6:	d31e      	bcc.n	800b206 <__cvt+0xc2>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1cc:	1b5b      	subs	r3, r3, r5
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	b004      	add	sp, #16
 800b1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1dc:	eb00 0904 	add.w	r9, r0, r4
 800b1e0:	d1e5      	bne.n	800b1ae <__cvt+0x6a>
 800b1e2:	7803      	ldrb	r3, [r0, #0]
 800b1e4:	2b30      	cmp	r3, #48	@ 0x30
 800b1e6:	d10a      	bne.n	800b1fe <__cvt+0xba>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	f7f5 fc92 	bl	8000b18 <__aeabi_dcmpeq>
 800b1f4:	b918      	cbnz	r0, 800b1fe <__cvt+0xba>
 800b1f6:	f1c4 0401 	rsb	r4, r4, #1
 800b1fa:	f8ca 4000 	str.w	r4, [sl]
 800b1fe:	f8da 3000 	ldr.w	r3, [sl]
 800b202:	4499      	add	r9, r3
 800b204:	e7d3      	b.n	800b1ae <__cvt+0x6a>
 800b206:	1c59      	adds	r1, r3, #1
 800b208:	9103      	str	r1, [sp, #12]
 800b20a:	701a      	strb	r2, [r3, #0]
 800b20c:	e7d9      	b.n	800b1c2 <__cvt+0x7e>

0800b20e <__exponent>:
 800b20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b210:	2900      	cmp	r1, #0
 800b212:	bfba      	itte	lt
 800b214:	4249      	neglt	r1, r1
 800b216:	232d      	movlt	r3, #45	@ 0x2d
 800b218:	232b      	movge	r3, #43	@ 0x2b
 800b21a:	2909      	cmp	r1, #9
 800b21c:	7002      	strb	r2, [r0, #0]
 800b21e:	7043      	strb	r3, [r0, #1]
 800b220:	dd29      	ble.n	800b276 <__exponent+0x68>
 800b222:	f10d 0307 	add.w	r3, sp, #7
 800b226:	461d      	mov	r5, r3
 800b228:	270a      	movs	r7, #10
 800b22a:	461a      	mov	r2, r3
 800b22c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b230:	fb07 1416 	mls	r4, r7, r6, r1
 800b234:	3430      	adds	r4, #48	@ 0x30
 800b236:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b23a:	460c      	mov	r4, r1
 800b23c:	2c63      	cmp	r4, #99	@ 0x63
 800b23e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b242:	4631      	mov	r1, r6
 800b244:	dcf1      	bgt.n	800b22a <__exponent+0x1c>
 800b246:	3130      	adds	r1, #48	@ 0x30
 800b248:	1e94      	subs	r4, r2, #2
 800b24a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b24e:	1c41      	adds	r1, r0, #1
 800b250:	4623      	mov	r3, r4
 800b252:	42ab      	cmp	r3, r5
 800b254:	d30a      	bcc.n	800b26c <__exponent+0x5e>
 800b256:	f10d 0309 	add.w	r3, sp, #9
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	42ac      	cmp	r4, r5
 800b25e:	bf88      	it	hi
 800b260:	2300      	movhi	r3, #0
 800b262:	3302      	adds	r3, #2
 800b264:	4403      	add	r3, r0
 800b266:	1a18      	subs	r0, r3, r0
 800b268:	b003      	add	sp, #12
 800b26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b270:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b274:	e7ed      	b.n	800b252 <__exponent+0x44>
 800b276:	2330      	movs	r3, #48	@ 0x30
 800b278:	3130      	adds	r1, #48	@ 0x30
 800b27a:	7083      	strb	r3, [r0, #2]
 800b27c:	70c1      	strb	r1, [r0, #3]
 800b27e:	1d03      	adds	r3, r0, #4
 800b280:	e7f1      	b.n	800b266 <__exponent+0x58>
	...

0800b284 <_printf_float>:
 800b284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	b08d      	sub	sp, #52	@ 0x34
 800b28a:	460c      	mov	r4, r1
 800b28c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b290:	4616      	mov	r6, r2
 800b292:	461f      	mov	r7, r3
 800b294:	4605      	mov	r5, r0
 800b296:	f000 fdbf 	bl	800be18 <_localeconv_r>
 800b29a:	6803      	ldr	r3, [r0, #0]
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f5 f80e 	bl	80002c0 <strlen>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ac:	9005      	str	r0, [sp, #20]
 800b2ae:	3307      	adds	r3, #7
 800b2b0:	f023 0307 	bic.w	r3, r3, #7
 800b2b4:	f103 0208 	add.w	r2, r3, #8
 800b2b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2bc:	f8d4 b000 	ldr.w	fp, [r4]
 800b2c0:	f8c8 2000 	str.w	r2, [r8]
 800b2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2cc:	9307      	str	r3, [sp, #28]
 800b2ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2da:	4b9c      	ldr	r3, [pc, #624]	@ (800b54c <_printf_float+0x2c8>)
 800b2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e0:	f7f5 fc4c 	bl	8000b7c <__aeabi_dcmpun>
 800b2e4:	bb70      	cbnz	r0, 800b344 <_printf_float+0xc0>
 800b2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2ea:	4b98      	ldr	r3, [pc, #608]	@ (800b54c <_printf_float+0x2c8>)
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f0:	f7f5 fc26 	bl	8000b40 <__aeabi_dcmple>
 800b2f4:	bb30      	cbnz	r0, 800b344 <_printf_float+0xc0>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f5 fc15 	bl	8000b2c <__aeabi_dcmplt>
 800b302:	b110      	cbz	r0, 800b30a <_printf_float+0x86>
 800b304:	232d      	movs	r3, #45	@ 0x2d
 800b306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b30a:	4a91      	ldr	r2, [pc, #580]	@ (800b550 <_printf_float+0x2cc>)
 800b30c:	4b91      	ldr	r3, [pc, #580]	@ (800b554 <_printf_float+0x2d0>)
 800b30e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b312:	bf94      	ite	ls
 800b314:	4690      	movls	r8, r2
 800b316:	4698      	movhi	r8, r3
 800b318:	2303      	movs	r3, #3
 800b31a:	6123      	str	r3, [r4, #16]
 800b31c:	f02b 0304 	bic.w	r3, fp, #4
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	9700      	str	r7, [sp, #0]
 800b328:	4633      	mov	r3, r6
 800b32a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f9d2 	bl	800b6d8 <_printf_common>
 800b334:	3001      	adds	r0, #1
 800b336:	f040 808d 	bne.w	800b454 <_printf_float+0x1d0>
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	b00d      	add	sp, #52	@ 0x34
 800b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	4642      	mov	r2, r8
 800b346:	464b      	mov	r3, r9
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	f7f5 fc16 	bl	8000b7c <__aeabi_dcmpun>
 800b350:	b140      	cbz	r0, 800b364 <_printf_float+0xe0>
 800b352:	464b      	mov	r3, r9
 800b354:	2b00      	cmp	r3, #0
 800b356:	bfbc      	itt	lt
 800b358:	232d      	movlt	r3, #45	@ 0x2d
 800b35a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b35e:	4a7e      	ldr	r2, [pc, #504]	@ (800b558 <_printf_float+0x2d4>)
 800b360:	4b7e      	ldr	r3, [pc, #504]	@ (800b55c <_printf_float+0x2d8>)
 800b362:	e7d4      	b.n	800b30e <_printf_float+0x8a>
 800b364:	6863      	ldr	r3, [r4, #4]
 800b366:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b36a:	9206      	str	r2, [sp, #24]
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	d13b      	bne.n	800b3e8 <_printf_float+0x164>
 800b370:	2306      	movs	r3, #6
 800b372:	6063      	str	r3, [r4, #4]
 800b374:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b378:	2300      	movs	r3, #0
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b380:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b384:	ab09      	add	r3, sp, #36	@ 0x24
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	ec49 8b10 	vmov	d0, r8, r9
 800b38e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b392:	4628      	mov	r0, r5
 800b394:	f7ff fed6 	bl	800b144 <__cvt>
 800b398:	9b06      	ldr	r3, [sp, #24]
 800b39a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b39c:	2b47      	cmp	r3, #71	@ 0x47
 800b39e:	4680      	mov	r8, r0
 800b3a0:	d129      	bne.n	800b3f6 <_printf_float+0x172>
 800b3a2:	1cc8      	adds	r0, r1, #3
 800b3a4:	db02      	blt.n	800b3ac <_printf_float+0x128>
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	dd41      	ble.n	800b430 <_printf_float+0x1ac>
 800b3ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3b0:	fa5f fa8a 	uxtb.w	sl, sl
 800b3b4:	3901      	subs	r1, #1
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3be:	f7ff ff26 	bl	800b20e <__exponent>
 800b3c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3c4:	1813      	adds	r3, r2, r0
 800b3c6:	2a01      	cmp	r2, #1
 800b3c8:	4681      	mov	r9, r0
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	dc02      	bgt.n	800b3d4 <_printf_float+0x150>
 800b3ce:	6822      	ldr	r2, [r4, #0]
 800b3d0:	07d2      	lsls	r2, r2, #31
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_float+0x154>
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0a2      	beq.n	800b326 <_printf_float+0xa2>
 800b3e0:	232d      	movs	r3, #45	@ 0x2d
 800b3e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e6:	e79e      	b.n	800b326 <_printf_float+0xa2>
 800b3e8:	9a06      	ldr	r2, [sp, #24]
 800b3ea:	2a47      	cmp	r2, #71	@ 0x47
 800b3ec:	d1c2      	bne.n	800b374 <_printf_float+0xf0>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1c0      	bne.n	800b374 <_printf_float+0xf0>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e7bd      	b.n	800b372 <_printf_float+0xee>
 800b3f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3fa:	d9db      	bls.n	800b3b4 <_printf_float+0x130>
 800b3fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b400:	d118      	bne.n	800b434 <_printf_float+0x1b0>
 800b402:	2900      	cmp	r1, #0
 800b404:	6863      	ldr	r3, [r4, #4]
 800b406:	dd0b      	ble.n	800b420 <_printf_float+0x19c>
 800b408:	6121      	str	r1, [r4, #16]
 800b40a:	b913      	cbnz	r3, 800b412 <_printf_float+0x18e>
 800b40c:	6822      	ldr	r2, [r4, #0]
 800b40e:	07d0      	lsls	r0, r2, #31
 800b410:	d502      	bpl.n	800b418 <_printf_float+0x194>
 800b412:	3301      	adds	r3, #1
 800b414:	440b      	add	r3, r1
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b41a:	f04f 0900 	mov.w	r9, #0
 800b41e:	e7db      	b.n	800b3d8 <_printf_float+0x154>
 800b420:	b913      	cbnz	r3, 800b428 <_printf_float+0x1a4>
 800b422:	6822      	ldr	r2, [r4, #0]
 800b424:	07d2      	lsls	r2, r2, #31
 800b426:	d501      	bpl.n	800b42c <_printf_float+0x1a8>
 800b428:	3302      	adds	r3, #2
 800b42a:	e7f4      	b.n	800b416 <_printf_float+0x192>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e7f2      	b.n	800b416 <_printf_float+0x192>
 800b430:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b436:	4299      	cmp	r1, r3
 800b438:	db05      	blt.n	800b446 <_printf_float+0x1c2>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	6121      	str	r1, [r4, #16]
 800b43e:	07d8      	lsls	r0, r3, #31
 800b440:	d5ea      	bpl.n	800b418 <_printf_float+0x194>
 800b442:	1c4b      	adds	r3, r1, #1
 800b444:	e7e7      	b.n	800b416 <_printf_float+0x192>
 800b446:	2900      	cmp	r1, #0
 800b448:	bfd4      	ite	le
 800b44a:	f1c1 0202 	rsble	r2, r1, #2
 800b44e:	2201      	movgt	r2, #1
 800b450:	4413      	add	r3, r2
 800b452:	e7e0      	b.n	800b416 <_printf_float+0x192>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	055a      	lsls	r2, r3, #21
 800b458:	d407      	bmi.n	800b46a <_printf_float+0x1e6>
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	4642      	mov	r2, r8
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	d12b      	bne.n	800b4c0 <_printf_float+0x23c>
 800b468:	e767      	b.n	800b33a <_printf_float+0xb6>
 800b46a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b46e:	f240 80dd 	bls.w	800b62c <_printf_float+0x3a8>
 800b472:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b476:	2200      	movs	r2, #0
 800b478:	2300      	movs	r3, #0
 800b47a:	f7f5 fb4d 	bl	8000b18 <__aeabi_dcmpeq>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d033      	beq.n	800b4ea <_printf_float+0x266>
 800b482:	4a37      	ldr	r2, [pc, #220]	@ (800b560 <_printf_float+0x2dc>)
 800b484:	2301      	movs	r3, #1
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	f43f af54 	beq.w	800b33a <_printf_float+0xb6>
 800b492:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b496:	4543      	cmp	r3, r8
 800b498:	db02      	blt.n	800b4a0 <_printf_float+0x21c>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	07d8      	lsls	r0, r3, #31
 800b49e:	d50f      	bpl.n	800b4c0 <_printf_float+0x23c>
 800b4a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	47b8      	blx	r7
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	f43f af45 	beq.w	800b33a <_printf_float+0xb6>
 800b4b0:	f04f 0900 	mov.w	r9, #0
 800b4b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4b8:	f104 0a1a 	add.w	sl, r4, #26
 800b4bc:	45c8      	cmp	r8, r9
 800b4be:	dc09      	bgt.n	800b4d4 <_printf_float+0x250>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	079b      	lsls	r3, r3, #30
 800b4c4:	f100 8103 	bmi.w	800b6ce <_printf_float+0x44a>
 800b4c8:	68e0      	ldr	r0, [r4, #12]
 800b4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4cc:	4298      	cmp	r0, r3
 800b4ce:	bfb8      	it	lt
 800b4d0:	4618      	movlt	r0, r3
 800b4d2:	e734      	b.n	800b33e <_printf_float+0xba>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b8      	blx	r7
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f43f af2b 	beq.w	800b33a <_printf_float+0xb6>
 800b4e4:	f109 0901 	add.w	r9, r9, #1
 800b4e8:	e7e8      	b.n	800b4bc <_printf_float+0x238>
 800b4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dc39      	bgt.n	800b564 <_printf_float+0x2e0>
 800b4f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b560 <_printf_float+0x2dc>)
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	47b8      	blx	r7
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	f43f af1d 	beq.w	800b33a <_printf_float+0xb6>
 800b500:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b504:	ea59 0303 	orrs.w	r3, r9, r3
 800b508:	d102      	bne.n	800b510 <_printf_float+0x28c>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	07d9      	lsls	r1, r3, #31
 800b50e:	d5d7      	bpl.n	800b4c0 <_printf_float+0x23c>
 800b510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b514:	4631      	mov	r1, r6
 800b516:	4628      	mov	r0, r5
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	f43f af0d 	beq.w	800b33a <_printf_float+0xb6>
 800b520:	f04f 0a00 	mov.w	sl, #0
 800b524:	f104 0b1a 	add.w	fp, r4, #26
 800b528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52a:	425b      	negs	r3, r3
 800b52c:	4553      	cmp	r3, sl
 800b52e:	dc01      	bgt.n	800b534 <_printf_float+0x2b0>
 800b530:	464b      	mov	r3, r9
 800b532:	e793      	b.n	800b45c <_printf_float+0x1d8>
 800b534:	2301      	movs	r3, #1
 800b536:	465a      	mov	r2, fp
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	f43f aefb 	beq.w	800b33a <_printf_float+0xb6>
 800b544:	f10a 0a01 	add.w	sl, sl, #1
 800b548:	e7ee      	b.n	800b528 <_printf_float+0x2a4>
 800b54a:	bf00      	nop
 800b54c:	7fefffff 	.word	0x7fefffff
 800b550:	0800e2e4 	.word	0x0800e2e4
 800b554:	0800e2e8 	.word	0x0800e2e8
 800b558:	0800e2ec 	.word	0x0800e2ec
 800b55c:	0800e2f0 	.word	0x0800e2f0
 800b560:	0800e2f4 	.word	0x0800e2f4
 800b564:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b566:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b56a:	4553      	cmp	r3, sl
 800b56c:	bfa8      	it	ge
 800b56e:	4653      	movge	r3, sl
 800b570:	2b00      	cmp	r3, #0
 800b572:	4699      	mov	r9, r3
 800b574:	dc36      	bgt.n	800b5e4 <_printf_float+0x360>
 800b576:	f04f 0b00 	mov.w	fp, #0
 800b57a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b57e:	f104 021a 	add.w	r2, r4, #26
 800b582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b584:	9306      	str	r3, [sp, #24]
 800b586:	eba3 0309 	sub.w	r3, r3, r9
 800b58a:	455b      	cmp	r3, fp
 800b58c:	dc31      	bgt.n	800b5f2 <_printf_float+0x36e>
 800b58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b590:	459a      	cmp	sl, r3
 800b592:	dc3a      	bgt.n	800b60a <_printf_float+0x386>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	07da      	lsls	r2, r3, #31
 800b598:	d437      	bmi.n	800b60a <_printf_float+0x386>
 800b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59c:	ebaa 0903 	sub.w	r9, sl, r3
 800b5a0:	9b06      	ldr	r3, [sp, #24]
 800b5a2:	ebaa 0303 	sub.w	r3, sl, r3
 800b5a6:	4599      	cmp	r9, r3
 800b5a8:	bfa8      	it	ge
 800b5aa:	4699      	movge	r9, r3
 800b5ac:	f1b9 0f00 	cmp.w	r9, #0
 800b5b0:	dc33      	bgt.n	800b61a <_printf_float+0x396>
 800b5b2:	f04f 0800 	mov.w	r8, #0
 800b5b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5ba:	f104 0b1a 	add.w	fp, r4, #26
 800b5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c0:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c4:	eba3 0309 	sub.w	r3, r3, r9
 800b5c8:	4543      	cmp	r3, r8
 800b5ca:	f77f af79 	ble.w	800b4c0 <_printf_float+0x23c>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	465a      	mov	r2, fp
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	47b8      	blx	r7
 800b5d8:	3001      	adds	r0, #1
 800b5da:	f43f aeae 	beq.w	800b33a <_printf_float+0xb6>
 800b5de:	f108 0801 	add.w	r8, r8, #1
 800b5e2:	e7ec      	b.n	800b5be <_printf_float+0x33a>
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	47b8      	blx	r7
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	d1c2      	bne.n	800b576 <_printf_float+0x2f2>
 800b5f0:	e6a3      	b.n	800b33a <_printf_float+0xb6>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	9206      	str	r2, [sp, #24]
 800b5fa:	47b8      	blx	r7
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	f43f ae9c 	beq.w	800b33a <_printf_float+0xb6>
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	f10b 0b01 	add.w	fp, fp, #1
 800b608:	e7bb      	b.n	800b582 <_printf_float+0x2fe>
 800b60a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	d1c0      	bne.n	800b59a <_printf_float+0x316>
 800b618:	e68f      	b.n	800b33a <_printf_float+0xb6>
 800b61a:	9a06      	ldr	r2, [sp, #24]
 800b61c:	464b      	mov	r3, r9
 800b61e:	4442      	add	r2, r8
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	d1c3      	bne.n	800b5b2 <_printf_float+0x32e>
 800b62a:	e686      	b.n	800b33a <_printf_float+0xb6>
 800b62c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b630:	f1ba 0f01 	cmp.w	sl, #1
 800b634:	dc01      	bgt.n	800b63a <_printf_float+0x3b6>
 800b636:	07db      	lsls	r3, r3, #31
 800b638:	d536      	bpl.n	800b6a8 <_printf_float+0x424>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4642      	mov	r2, r8
 800b63e:	4631      	mov	r1, r6
 800b640:	4628      	mov	r0, r5
 800b642:	47b8      	blx	r7
 800b644:	3001      	adds	r0, #1
 800b646:	f43f ae78 	beq.w	800b33a <_printf_float+0xb6>
 800b64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b64e:	4631      	mov	r1, r6
 800b650:	4628      	mov	r0, r5
 800b652:	47b8      	blx	r7
 800b654:	3001      	adds	r0, #1
 800b656:	f43f ae70 	beq.w	800b33a <_printf_float+0xb6>
 800b65a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b65e:	2200      	movs	r2, #0
 800b660:	2300      	movs	r3, #0
 800b662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b666:	f7f5 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800b66a:	b9c0      	cbnz	r0, 800b69e <_printf_float+0x41a>
 800b66c:	4653      	mov	r3, sl
 800b66e:	f108 0201 	add.w	r2, r8, #1
 800b672:	4631      	mov	r1, r6
 800b674:	4628      	mov	r0, r5
 800b676:	47b8      	blx	r7
 800b678:	3001      	adds	r0, #1
 800b67a:	d10c      	bne.n	800b696 <_printf_float+0x412>
 800b67c:	e65d      	b.n	800b33a <_printf_float+0xb6>
 800b67e:	2301      	movs	r3, #1
 800b680:	465a      	mov	r2, fp
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	f43f ae56 	beq.w	800b33a <_printf_float+0xb6>
 800b68e:	f108 0801 	add.w	r8, r8, #1
 800b692:	45d0      	cmp	r8, sl
 800b694:	dbf3      	blt.n	800b67e <_printf_float+0x3fa>
 800b696:	464b      	mov	r3, r9
 800b698:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b69c:	e6df      	b.n	800b45e <_printf_float+0x1da>
 800b69e:	f04f 0800 	mov.w	r8, #0
 800b6a2:	f104 0b1a 	add.w	fp, r4, #26
 800b6a6:	e7f4      	b.n	800b692 <_printf_float+0x40e>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	e7e1      	b.n	800b672 <_printf_float+0x3ee>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	464a      	mov	r2, r9
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	47b8      	blx	r7
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	f43f ae3e 	beq.w	800b33a <_printf_float+0xb6>
 800b6be:	f108 0801 	add.w	r8, r8, #1
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6c6:	1a5b      	subs	r3, r3, r1
 800b6c8:	4543      	cmp	r3, r8
 800b6ca:	dcf0      	bgt.n	800b6ae <_printf_float+0x42a>
 800b6cc:	e6fc      	b.n	800b4c8 <_printf_float+0x244>
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	f104 0919 	add.w	r9, r4, #25
 800b6d6:	e7f4      	b.n	800b6c2 <_printf_float+0x43e>

0800b6d8 <_printf_common>:
 800b6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	4616      	mov	r6, r2
 800b6de:	4698      	mov	r8, r3
 800b6e0:	688a      	ldr	r2, [r1, #8]
 800b6e2:	690b      	ldr	r3, [r1, #16]
 800b6e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	bfb8      	it	lt
 800b6ec:	4613      	movlt	r3, r2
 800b6ee:	6033      	str	r3, [r6, #0]
 800b6f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	b10a      	cbz	r2, 800b6fe <_printf_common+0x26>
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	6033      	str	r3, [r6, #0]
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	0699      	lsls	r1, r3, #26
 800b702:	bf42      	ittt	mi
 800b704:	6833      	ldrmi	r3, [r6, #0]
 800b706:	3302      	addmi	r3, #2
 800b708:	6033      	strmi	r3, [r6, #0]
 800b70a:	6825      	ldr	r5, [r4, #0]
 800b70c:	f015 0506 	ands.w	r5, r5, #6
 800b710:	d106      	bne.n	800b720 <_printf_common+0x48>
 800b712:	f104 0a19 	add.w	sl, r4, #25
 800b716:	68e3      	ldr	r3, [r4, #12]
 800b718:	6832      	ldr	r2, [r6, #0]
 800b71a:	1a9b      	subs	r3, r3, r2
 800b71c:	42ab      	cmp	r3, r5
 800b71e:	dc26      	bgt.n	800b76e <_printf_common+0x96>
 800b720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	3b00      	subs	r3, #0
 800b728:	bf18      	it	ne
 800b72a:	2301      	movne	r3, #1
 800b72c:	0692      	lsls	r2, r2, #26
 800b72e:	d42b      	bmi.n	800b788 <_printf_common+0xb0>
 800b730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b734:	4641      	mov	r1, r8
 800b736:	4638      	mov	r0, r7
 800b738:	47c8      	blx	r9
 800b73a:	3001      	adds	r0, #1
 800b73c:	d01e      	beq.n	800b77c <_printf_common+0xa4>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	f003 0306 	and.w	r3, r3, #6
 800b746:	2b04      	cmp	r3, #4
 800b748:	bf02      	ittt	eq
 800b74a:	68e5      	ldreq	r5, [r4, #12]
 800b74c:	6833      	ldreq	r3, [r6, #0]
 800b74e:	1aed      	subeq	r5, r5, r3
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	bf0c      	ite	eq
 800b754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b758:	2500      	movne	r5, #0
 800b75a:	4293      	cmp	r3, r2
 800b75c:	bfc4      	itt	gt
 800b75e:	1a9b      	subgt	r3, r3, r2
 800b760:	18ed      	addgt	r5, r5, r3
 800b762:	2600      	movs	r6, #0
 800b764:	341a      	adds	r4, #26
 800b766:	42b5      	cmp	r5, r6
 800b768:	d11a      	bne.n	800b7a0 <_printf_common+0xc8>
 800b76a:	2000      	movs	r0, #0
 800b76c:	e008      	b.n	800b780 <_printf_common+0xa8>
 800b76e:	2301      	movs	r3, #1
 800b770:	4652      	mov	r2, sl
 800b772:	4641      	mov	r1, r8
 800b774:	4638      	mov	r0, r7
 800b776:	47c8      	blx	r9
 800b778:	3001      	adds	r0, #1
 800b77a:	d103      	bne.n	800b784 <_printf_common+0xac>
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b784:	3501      	adds	r5, #1
 800b786:	e7c6      	b.n	800b716 <_printf_common+0x3e>
 800b788:	18e1      	adds	r1, r4, r3
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	2030      	movs	r0, #48	@ 0x30
 800b78e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b792:	4422      	add	r2, r4
 800b794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b79c:	3302      	adds	r3, #2
 800b79e:	e7c7      	b.n	800b730 <_printf_common+0x58>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	4641      	mov	r1, r8
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	47c8      	blx	r9
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d0e6      	beq.n	800b77c <_printf_common+0xa4>
 800b7ae:	3601      	adds	r6, #1
 800b7b0:	e7d9      	b.n	800b766 <_printf_common+0x8e>
	...

0800b7b4 <_printf_i>:
 800b7b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	7e0f      	ldrb	r7, [r1, #24]
 800b7ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7bc:	2f78      	cmp	r7, #120	@ 0x78
 800b7be:	4691      	mov	r9, r2
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	469a      	mov	sl, r3
 800b7c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7ca:	d807      	bhi.n	800b7dc <_printf_i+0x28>
 800b7cc:	2f62      	cmp	r7, #98	@ 0x62
 800b7ce:	d80a      	bhi.n	800b7e6 <_printf_i+0x32>
 800b7d0:	2f00      	cmp	r7, #0
 800b7d2:	f000 80d2 	beq.w	800b97a <_printf_i+0x1c6>
 800b7d6:	2f58      	cmp	r7, #88	@ 0x58
 800b7d8:	f000 80b9 	beq.w	800b94e <_printf_i+0x19a>
 800b7dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7e4:	e03a      	b.n	800b85c <_printf_i+0xa8>
 800b7e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7ea:	2b15      	cmp	r3, #21
 800b7ec:	d8f6      	bhi.n	800b7dc <_printf_i+0x28>
 800b7ee:	a101      	add	r1, pc, #4	@ (adr r1, 800b7f4 <_printf_i+0x40>)
 800b7f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7f4:	0800b84d 	.word	0x0800b84d
 800b7f8:	0800b861 	.word	0x0800b861
 800b7fc:	0800b7dd 	.word	0x0800b7dd
 800b800:	0800b7dd 	.word	0x0800b7dd
 800b804:	0800b7dd 	.word	0x0800b7dd
 800b808:	0800b7dd 	.word	0x0800b7dd
 800b80c:	0800b861 	.word	0x0800b861
 800b810:	0800b7dd 	.word	0x0800b7dd
 800b814:	0800b7dd 	.word	0x0800b7dd
 800b818:	0800b7dd 	.word	0x0800b7dd
 800b81c:	0800b7dd 	.word	0x0800b7dd
 800b820:	0800b961 	.word	0x0800b961
 800b824:	0800b88b 	.word	0x0800b88b
 800b828:	0800b91b 	.word	0x0800b91b
 800b82c:	0800b7dd 	.word	0x0800b7dd
 800b830:	0800b7dd 	.word	0x0800b7dd
 800b834:	0800b983 	.word	0x0800b983
 800b838:	0800b7dd 	.word	0x0800b7dd
 800b83c:	0800b88b 	.word	0x0800b88b
 800b840:	0800b7dd 	.word	0x0800b7dd
 800b844:	0800b7dd 	.word	0x0800b7dd
 800b848:	0800b923 	.word	0x0800b923
 800b84c:	6833      	ldr	r3, [r6, #0]
 800b84e:	1d1a      	adds	r2, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6032      	str	r2, [r6, #0]
 800b854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b85c:	2301      	movs	r3, #1
 800b85e:	e09d      	b.n	800b99c <_printf_i+0x1e8>
 800b860:	6833      	ldr	r3, [r6, #0]
 800b862:	6820      	ldr	r0, [r4, #0]
 800b864:	1d19      	adds	r1, r3, #4
 800b866:	6031      	str	r1, [r6, #0]
 800b868:	0606      	lsls	r6, r0, #24
 800b86a:	d501      	bpl.n	800b870 <_printf_i+0xbc>
 800b86c:	681d      	ldr	r5, [r3, #0]
 800b86e:	e003      	b.n	800b878 <_printf_i+0xc4>
 800b870:	0645      	lsls	r5, r0, #25
 800b872:	d5fb      	bpl.n	800b86c <_printf_i+0xb8>
 800b874:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b878:	2d00      	cmp	r5, #0
 800b87a:	da03      	bge.n	800b884 <_printf_i+0xd0>
 800b87c:	232d      	movs	r3, #45	@ 0x2d
 800b87e:	426d      	negs	r5, r5
 800b880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b884:	4859      	ldr	r0, [pc, #356]	@ (800b9ec <_printf_i+0x238>)
 800b886:	230a      	movs	r3, #10
 800b888:	e011      	b.n	800b8ae <_printf_i+0xfa>
 800b88a:	6821      	ldr	r1, [r4, #0]
 800b88c:	6833      	ldr	r3, [r6, #0]
 800b88e:	0608      	lsls	r0, r1, #24
 800b890:	f853 5b04 	ldr.w	r5, [r3], #4
 800b894:	d402      	bmi.n	800b89c <_printf_i+0xe8>
 800b896:	0649      	lsls	r1, r1, #25
 800b898:	bf48      	it	mi
 800b89a:	b2ad      	uxthmi	r5, r5
 800b89c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b89e:	4853      	ldr	r0, [pc, #332]	@ (800b9ec <_printf_i+0x238>)
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	bf14      	ite	ne
 800b8a4:	230a      	movne	r3, #10
 800b8a6:	2308      	moveq	r3, #8
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8ae:	6866      	ldr	r6, [r4, #4]
 800b8b0:	60a6      	str	r6, [r4, #8]
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	bfa2      	ittt	ge
 800b8b6:	6821      	ldrge	r1, [r4, #0]
 800b8b8:	f021 0104 	bicge.w	r1, r1, #4
 800b8bc:	6021      	strge	r1, [r4, #0]
 800b8be:	b90d      	cbnz	r5, 800b8c4 <_printf_i+0x110>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	d04b      	beq.n	800b95c <_printf_i+0x1a8>
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b8ce:	5dc7      	ldrb	r7, [r0, r7]
 800b8d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8d4:	462f      	mov	r7, r5
 800b8d6:	42bb      	cmp	r3, r7
 800b8d8:	460d      	mov	r5, r1
 800b8da:	d9f4      	bls.n	800b8c6 <_printf_i+0x112>
 800b8dc:	2b08      	cmp	r3, #8
 800b8de:	d10b      	bne.n	800b8f8 <_printf_i+0x144>
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	07df      	lsls	r7, r3, #31
 800b8e4:	d508      	bpl.n	800b8f8 <_printf_i+0x144>
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6861      	ldr	r1, [r4, #4]
 800b8ea:	4299      	cmp	r1, r3
 800b8ec:	bfde      	ittt	le
 800b8ee:	2330      	movle	r3, #48	@ 0x30
 800b8f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8f8:	1b92      	subs	r2, r2, r6
 800b8fa:	6122      	str	r2, [r4, #16]
 800b8fc:	f8cd a000 	str.w	sl, [sp]
 800b900:	464b      	mov	r3, r9
 800b902:	aa03      	add	r2, sp, #12
 800b904:	4621      	mov	r1, r4
 800b906:	4640      	mov	r0, r8
 800b908:	f7ff fee6 	bl	800b6d8 <_printf_common>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d14a      	bne.n	800b9a6 <_printf_i+0x1f2>
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	b004      	add	sp, #16
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	f043 0320 	orr.w	r3, r3, #32
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	4833      	ldr	r0, [pc, #204]	@ (800b9f0 <_printf_i+0x23c>)
 800b924:	2778      	movs	r7, #120	@ 0x78
 800b926:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	6831      	ldr	r1, [r6, #0]
 800b92e:	061f      	lsls	r7, r3, #24
 800b930:	f851 5b04 	ldr.w	r5, [r1], #4
 800b934:	d402      	bmi.n	800b93c <_printf_i+0x188>
 800b936:	065f      	lsls	r7, r3, #25
 800b938:	bf48      	it	mi
 800b93a:	b2ad      	uxthmi	r5, r5
 800b93c:	6031      	str	r1, [r6, #0]
 800b93e:	07d9      	lsls	r1, r3, #31
 800b940:	bf44      	itt	mi
 800b942:	f043 0320 	orrmi.w	r3, r3, #32
 800b946:	6023      	strmi	r3, [r4, #0]
 800b948:	b11d      	cbz	r5, 800b952 <_printf_i+0x19e>
 800b94a:	2310      	movs	r3, #16
 800b94c:	e7ac      	b.n	800b8a8 <_printf_i+0xf4>
 800b94e:	4827      	ldr	r0, [pc, #156]	@ (800b9ec <_printf_i+0x238>)
 800b950:	e7e9      	b.n	800b926 <_printf_i+0x172>
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	f023 0320 	bic.w	r3, r3, #32
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	e7f6      	b.n	800b94a <_printf_i+0x196>
 800b95c:	4616      	mov	r6, r2
 800b95e:	e7bd      	b.n	800b8dc <_printf_i+0x128>
 800b960:	6833      	ldr	r3, [r6, #0]
 800b962:	6825      	ldr	r5, [r4, #0]
 800b964:	6961      	ldr	r1, [r4, #20]
 800b966:	1d18      	adds	r0, r3, #4
 800b968:	6030      	str	r0, [r6, #0]
 800b96a:	062e      	lsls	r6, r5, #24
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	d501      	bpl.n	800b974 <_printf_i+0x1c0>
 800b970:	6019      	str	r1, [r3, #0]
 800b972:	e002      	b.n	800b97a <_printf_i+0x1c6>
 800b974:	0668      	lsls	r0, r5, #25
 800b976:	d5fb      	bpl.n	800b970 <_printf_i+0x1bc>
 800b978:	8019      	strh	r1, [r3, #0]
 800b97a:	2300      	movs	r3, #0
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	4616      	mov	r6, r2
 800b980:	e7bc      	b.n	800b8fc <_printf_i+0x148>
 800b982:	6833      	ldr	r3, [r6, #0]
 800b984:	1d1a      	adds	r2, r3, #4
 800b986:	6032      	str	r2, [r6, #0]
 800b988:	681e      	ldr	r6, [r3, #0]
 800b98a:	6862      	ldr	r2, [r4, #4]
 800b98c:	2100      	movs	r1, #0
 800b98e:	4630      	mov	r0, r6
 800b990:	f7f4 fc46 	bl	8000220 <memchr>
 800b994:	b108      	cbz	r0, 800b99a <_printf_i+0x1e6>
 800b996:	1b80      	subs	r0, r0, r6
 800b998:	6060      	str	r0, [r4, #4]
 800b99a:	6863      	ldr	r3, [r4, #4]
 800b99c:	6123      	str	r3, [r4, #16]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9a4:	e7aa      	b.n	800b8fc <_printf_i+0x148>
 800b9a6:	6923      	ldr	r3, [r4, #16]
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	47d0      	blx	sl
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d0ad      	beq.n	800b910 <_printf_i+0x15c>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	079b      	lsls	r3, r3, #30
 800b9b8:	d413      	bmi.n	800b9e2 <_printf_i+0x22e>
 800b9ba:	68e0      	ldr	r0, [r4, #12]
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	4298      	cmp	r0, r3
 800b9c0:	bfb8      	it	lt
 800b9c2:	4618      	movlt	r0, r3
 800b9c4:	e7a6      	b.n	800b914 <_printf_i+0x160>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	47d0      	blx	sl
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d09d      	beq.n	800b910 <_printf_i+0x15c>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	68e3      	ldr	r3, [r4, #12]
 800b9d8:	9903      	ldr	r1, [sp, #12]
 800b9da:	1a5b      	subs	r3, r3, r1
 800b9dc:	42ab      	cmp	r3, r5
 800b9de:	dcf2      	bgt.n	800b9c6 <_printf_i+0x212>
 800b9e0:	e7eb      	b.n	800b9ba <_printf_i+0x206>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	f104 0619 	add.w	r6, r4, #25
 800b9e8:	e7f5      	b.n	800b9d6 <_printf_i+0x222>
 800b9ea:	bf00      	nop
 800b9ec:	0800e2f6 	.word	0x0800e2f6
 800b9f0:	0800e307 	.word	0x0800e307

0800b9f4 <std>:
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b9fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba02:	6083      	str	r3, [r0, #8]
 800ba04:	8181      	strh	r1, [r0, #12]
 800ba06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba08:	81c2      	strh	r2, [r0, #14]
 800ba0a:	6183      	str	r3, [r0, #24]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	2208      	movs	r2, #8
 800ba10:	305c      	adds	r0, #92	@ 0x5c
 800ba12:	f000 f9f9 	bl	800be08 <memset>
 800ba16:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <std+0x58>)
 800ba18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba50 <std+0x5c>)
 800ba1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba54 <std+0x60>)
 800ba20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba22:	4b0d      	ldr	r3, [pc, #52]	@ (800ba58 <std+0x64>)
 800ba24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba26:	4b0d      	ldr	r3, [pc, #52]	@ (800ba5c <std+0x68>)
 800ba28:	6224      	str	r4, [r4, #32]
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d006      	beq.n	800ba3c <std+0x48>
 800ba2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba32:	4294      	cmp	r4, r2
 800ba34:	d002      	beq.n	800ba3c <std+0x48>
 800ba36:	33d0      	adds	r3, #208	@ 0xd0
 800ba38:	429c      	cmp	r4, r3
 800ba3a:	d105      	bne.n	800ba48 <std+0x54>
 800ba3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba44:	f000 ba5c 	b.w	800bf00 <__retarget_lock_init_recursive>
 800ba48:	bd10      	pop	{r4, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800bc59 	.word	0x0800bc59
 800ba50:	0800bc7b 	.word	0x0800bc7b
 800ba54:	0800bcb3 	.word	0x0800bcb3
 800ba58:	0800bcd7 	.word	0x0800bcd7
 800ba5c:	20005500 	.word	0x20005500

0800ba60 <stdio_exit_handler>:
 800ba60:	4a02      	ldr	r2, [pc, #8]	@ (800ba6c <stdio_exit_handler+0xc>)
 800ba62:	4903      	ldr	r1, [pc, #12]	@ (800ba70 <stdio_exit_handler+0x10>)
 800ba64:	4803      	ldr	r0, [pc, #12]	@ (800ba74 <stdio_exit_handler+0x14>)
 800ba66:	f000 b869 	b.w	800bb3c <_fwalk_sglue>
 800ba6a:	bf00      	nop
 800ba6c:	20000010 	.word	0x20000010
 800ba70:	0800d851 	.word	0x0800d851
 800ba74:	20000020 	.word	0x20000020

0800ba78 <cleanup_stdio>:
 800ba78:	6841      	ldr	r1, [r0, #4]
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <cleanup_stdio+0x34>)
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	4604      	mov	r4, r0
 800ba82:	d001      	beq.n	800ba88 <cleanup_stdio+0x10>
 800ba84:	f001 fee4 	bl	800d850 <_fflush_r>
 800ba88:	68a1      	ldr	r1, [r4, #8]
 800ba8a:	4b09      	ldr	r3, [pc, #36]	@ (800bab0 <cleanup_stdio+0x38>)
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	d002      	beq.n	800ba96 <cleanup_stdio+0x1e>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f001 fedd 	bl	800d850 <_fflush_r>
 800ba96:	68e1      	ldr	r1, [r4, #12]
 800ba98:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <cleanup_stdio+0x3c>)
 800ba9a:	4299      	cmp	r1, r3
 800ba9c:	d004      	beq.n	800baa8 <cleanup_stdio+0x30>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa4:	f001 bed4 	b.w	800d850 <_fflush_r>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	20005500 	.word	0x20005500
 800bab0:	20005568 	.word	0x20005568
 800bab4:	200055d0 	.word	0x200055d0

0800bab8 <global_stdio_init.part.0>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	4b0b      	ldr	r3, [pc, #44]	@ (800bae8 <global_stdio_init.part.0+0x30>)
 800babc:	4c0b      	ldr	r4, [pc, #44]	@ (800baec <global_stdio_init.part.0+0x34>)
 800babe:	4a0c      	ldr	r2, [pc, #48]	@ (800baf0 <global_stdio_init.part.0+0x38>)
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	4620      	mov	r0, r4
 800bac4:	2200      	movs	r2, #0
 800bac6:	2104      	movs	r1, #4
 800bac8:	f7ff ff94 	bl	800b9f4 <std>
 800bacc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bad0:	2201      	movs	r2, #1
 800bad2:	2109      	movs	r1, #9
 800bad4:	f7ff ff8e 	bl	800b9f4 <std>
 800bad8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800badc:	2202      	movs	r2, #2
 800bade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae2:	2112      	movs	r1, #18
 800bae4:	f7ff bf86 	b.w	800b9f4 <std>
 800bae8:	20005638 	.word	0x20005638
 800baec:	20005500 	.word	0x20005500
 800baf0:	0800ba61 	.word	0x0800ba61

0800baf4 <__sfp_lock_acquire>:
 800baf4:	4801      	ldr	r0, [pc, #4]	@ (800bafc <__sfp_lock_acquire+0x8>)
 800baf6:	f000 ba04 	b.w	800bf02 <__retarget_lock_acquire_recursive>
 800bafa:	bf00      	nop
 800bafc:	20005641 	.word	0x20005641

0800bb00 <__sfp_lock_release>:
 800bb00:	4801      	ldr	r0, [pc, #4]	@ (800bb08 <__sfp_lock_release+0x8>)
 800bb02:	f000 b9ff 	b.w	800bf04 <__retarget_lock_release_recursive>
 800bb06:	bf00      	nop
 800bb08:	20005641 	.word	0x20005641

0800bb0c <__sinit>:
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	4604      	mov	r4, r0
 800bb10:	f7ff fff0 	bl	800baf4 <__sfp_lock_acquire>
 800bb14:	6a23      	ldr	r3, [r4, #32]
 800bb16:	b11b      	cbz	r3, 800bb20 <__sinit+0x14>
 800bb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb1c:	f7ff bff0 	b.w	800bb00 <__sfp_lock_release>
 800bb20:	4b04      	ldr	r3, [pc, #16]	@ (800bb34 <__sinit+0x28>)
 800bb22:	6223      	str	r3, [r4, #32]
 800bb24:	4b04      	ldr	r3, [pc, #16]	@ (800bb38 <__sinit+0x2c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f5      	bne.n	800bb18 <__sinit+0xc>
 800bb2c:	f7ff ffc4 	bl	800bab8 <global_stdio_init.part.0>
 800bb30:	e7f2      	b.n	800bb18 <__sinit+0xc>
 800bb32:	bf00      	nop
 800bb34:	0800ba79 	.word	0x0800ba79
 800bb38:	20005638 	.word	0x20005638

0800bb3c <_fwalk_sglue>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	4607      	mov	r7, r0
 800bb42:	4688      	mov	r8, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	2600      	movs	r6, #0
 800bb48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb4c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb50:	d505      	bpl.n	800bb5e <_fwalk_sglue+0x22>
 800bb52:	6824      	ldr	r4, [r4, #0]
 800bb54:	2c00      	cmp	r4, #0
 800bb56:	d1f7      	bne.n	800bb48 <_fwalk_sglue+0xc>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d907      	bls.n	800bb74 <_fwalk_sglue+0x38>
 800bb64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	d003      	beq.n	800bb74 <_fwalk_sglue+0x38>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4638      	mov	r0, r7
 800bb70:	47c0      	blx	r8
 800bb72:	4306      	orrs	r6, r0
 800bb74:	3568      	adds	r5, #104	@ 0x68
 800bb76:	e7e9      	b.n	800bb4c <_fwalk_sglue+0x10>

0800bb78 <iprintf>:
 800bb78:	b40f      	push	{r0, r1, r2, r3}
 800bb7a:	b507      	push	{r0, r1, r2, lr}
 800bb7c:	4906      	ldr	r1, [pc, #24]	@ (800bb98 <iprintf+0x20>)
 800bb7e:	ab04      	add	r3, sp, #16
 800bb80:	6808      	ldr	r0, [r1, #0]
 800bb82:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb86:	6881      	ldr	r1, [r0, #8]
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	f001 fcc5 	bl	800d518 <_vfiprintf_r>
 800bb8e:	b003      	add	sp, #12
 800bb90:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb94:	b004      	add	sp, #16
 800bb96:	4770      	bx	lr
 800bb98:	2000001c 	.word	0x2000001c

0800bb9c <_puts_r>:
 800bb9c:	6a03      	ldr	r3, [r0, #32]
 800bb9e:	b570      	push	{r4, r5, r6, lr}
 800bba0:	6884      	ldr	r4, [r0, #8]
 800bba2:	4605      	mov	r5, r0
 800bba4:	460e      	mov	r6, r1
 800bba6:	b90b      	cbnz	r3, 800bbac <_puts_r+0x10>
 800bba8:	f7ff ffb0 	bl	800bb0c <__sinit>
 800bbac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbae:	07db      	lsls	r3, r3, #31
 800bbb0:	d405      	bmi.n	800bbbe <_puts_r+0x22>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	0598      	lsls	r0, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_puts_r+0x22>
 800bbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbba:	f000 f9a2 	bl	800bf02 <__retarget_lock_acquire_recursive>
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	0719      	lsls	r1, r3, #28
 800bbc2:	d502      	bpl.n	800bbca <_puts_r+0x2e>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d135      	bne.n	800bc36 <_puts_r+0x9a>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 f8c5 	bl	800bd5c <__swsetup_r>
 800bbd2:	b380      	cbz	r0, 800bc36 <_puts_r+0x9a>
 800bbd4:	f04f 35ff 	mov.w	r5, #4294967295
 800bbd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbda:	07da      	lsls	r2, r3, #31
 800bbdc:	d405      	bmi.n	800bbea <_puts_r+0x4e>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	059b      	lsls	r3, r3, #22
 800bbe2:	d402      	bmi.n	800bbea <_puts_r+0x4e>
 800bbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbe6:	f000 f98d 	bl	800bf04 <__retarget_lock_release_recursive>
 800bbea:	4628      	mov	r0, r5
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	da04      	bge.n	800bbfc <_puts_r+0x60>
 800bbf2:	69a2      	ldr	r2, [r4, #24]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	dc17      	bgt.n	800bc28 <_puts_r+0x8c>
 800bbf8:	290a      	cmp	r1, #10
 800bbfa:	d015      	beq.n	800bc28 <_puts_r+0x8c>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	6022      	str	r2, [r4, #0]
 800bc02:	7019      	strb	r1, [r3, #0]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	60a3      	str	r3, [r4, #8]
 800bc0e:	2900      	cmp	r1, #0
 800bc10:	d1ed      	bne.n	800bbee <_puts_r+0x52>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	da11      	bge.n	800bc3a <_puts_r+0x9e>
 800bc16:	4622      	mov	r2, r4
 800bc18:	210a      	movs	r1, #10
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f000 f85f 	bl	800bcde <__swbuf_r>
 800bc20:	3001      	adds	r0, #1
 800bc22:	d0d7      	beq.n	800bbd4 <_puts_r+0x38>
 800bc24:	250a      	movs	r5, #10
 800bc26:	e7d7      	b.n	800bbd8 <_puts_r+0x3c>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f000 f857 	bl	800bcde <__swbuf_r>
 800bc30:	3001      	adds	r0, #1
 800bc32:	d1e7      	bne.n	800bc04 <_puts_r+0x68>
 800bc34:	e7ce      	b.n	800bbd4 <_puts_r+0x38>
 800bc36:	3e01      	subs	r6, #1
 800bc38:	e7e4      	b.n	800bc04 <_puts_r+0x68>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	6022      	str	r2, [r4, #0]
 800bc40:	220a      	movs	r2, #10
 800bc42:	701a      	strb	r2, [r3, #0]
 800bc44:	e7ee      	b.n	800bc24 <_puts_r+0x88>
	...

0800bc48 <puts>:
 800bc48:	4b02      	ldr	r3, [pc, #8]	@ (800bc54 <puts+0xc>)
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	f7ff bfa5 	b.w	800bb9c <_puts_r>
 800bc52:	bf00      	nop
 800bc54:	2000001c 	.word	0x2000001c

0800bc58 <__sread>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc60:	f000 f900 	bl	800be64 <_read_r>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	bfab      	itete	ge
 800bc68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc6a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc6c:	181b      	addge	r3, r3, r0
 800bc6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc72:	bfac      	ite	ge
 800bc74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc76:	81a3      	strhlt	r3, [r4, #12]
 800bc78:	bd10      	pop	{r4, pc}

0800bc7a <__swrite>:
 800bc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7e:	461f      	mov	r7, r3
 800bc80:	898b      	ldrh	r3, [r1, #12]
 800bc82:	05db      	lsls	r3, r3, #23
 800bc84:	4605      	mov	r5, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	4616      	mov	r6, r2
 800bc8a:	d505      	bpl.n	800bc98 <__swrite+0x1e>
 800bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc90:	2302      	movs	r3, #2
 800bc92:	2200      	movs	r2, #0
 800bc94:	f000 f8d4 	bl	800be40 <_lseek_r>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	4632      	mov	r2, r6
 800bca6:	463b      	mov	r3, r7
 800bca8:	4628      	mov	r0, r5
 800bcaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcae:	f000 b8eb 	b.w	800be88 <_write_r>

0800bcb2 <__sseek>:
 800bcb2:	b510      	push	{r4, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	f000 f8c1 	bl	800be40 <_lseek_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	bf15      	itete	ne
 800bcc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcce:	81a3      	strheq	r3, [r4, #12]
 800bcd0:	bf18      	it	ne
 800bcd2:	81a3      	strhne	r3, [r4, #12]
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <__sclose>:
 800bcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcda:	f000 b8a1 	b.w	800be20 <_close_r>

0800bcde <__swbuf_r>:
 800bcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce0:	460e      	mov	r6, r1
 800bce2:	4614      	mov	r4, r2
 800bce4:	4605      	mov	r5, r0
 800bce6:	b118      	cbz	r0, 800bcf0 <__swbuf_r+0x12>
 800bce8:	6a03      	ldr	r3, [r0, #32]
 800bcea:	b90b      	cbnz	r3, 800bcf0 <__swbuf_r+0x12>
 800bcec:	f7ff ff0e 	bl	800bb0c <__sinit>
 800bcf0:	69a3      	ldr	r3, [r4, #24]
 800bcf2:	60a3      	str	r3, [r4, #8]
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	071a      	lsls	r2, r3, #28
 800bcf8:	d501      	bpl.n	800bcfe <__swbuf_r+0x20>
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	b943      	cbnz	r3, 800bd10 <__swbuf_r+0x32>
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4628      	mov	r0, r5
 800bd02:	f000 f82b 	bl	800bd5c <__swsetup_r>
 800bd06:	b118      	cbz	r0, 800bd10 <__swbuf_r+0x32>
 800bd08:	f04f 37ff 	mov.w	r7, #4294967295
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	6922      	ldr	r2, [r4, #16]
 800bd14:	1a98      	subs	r0, r3, r2
 800bd16:	6963      	ldr	r3, [r4, #20]
 800bd18:	b2f6      	uxtb	r6, r6
 800bd1a:	4283      	cmp	r3, r0
 800bd1c:	4637      	mov	r7, r6
 800bd1e:	dc05      	bgt.n	800bd2c <__swbuf_r+0x4e>
 800bd20:	4621      	mov	r1, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	f001 fd94 	bl	800d850 <_fflush_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d1ed      	bne.n	800bd08 <__swbuf_r+0x2a>
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	60a3      	str	r3, [r4, #8]
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	6022      	str	r2, [r4, #0]
 800bd38:	701e      	strb	r6, [r3, #0]
 800bd3a:	6962      	ldr	r2, [r4, #20]
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d004      	beq.n	800bd4c <__swbuf_r+0x6e>
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	07db      	lsls	r3, r3, #31
 800bd46:	d5e1      	bpl.n	800bd0c <__swbuf_r+0x2e>
 800bd48:	2e0a      	cmp	r6, #10
 800bd4a:	d1df      	bne.n	800bd0c <__swbuf_r+0x2e>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f001 fd7e 	bl	800d850 <_fflush_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d0d9      	beq.n	800bd0c <__swbuf_r+0x2e>
 800bd58:	e7d6      	b.n	800bd08 <__swbuf_r+0x2a>
	...

0800bd5c <__swsetup_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4b29      	ldr	r3, [pc, #164]	@ (800be04 <__swsetup_r+0xa8>)
 800bd60:	4605      	mov	r5, r0
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	460c      	mov	r4, r1
 800bd66:	b118      	cbz	r0, 800bd70 <__swsetup_r+0x14>
 800bd68:	6a03      	ldr	r3, [r0, #32]
 800bd6a:	b90b      	cbnz	r3, 800bd70 <__swsetup_r+0x14>
 800bd6c:	f7ff fece 	bl	800bb0c <__sinit>
 800bd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd74:	0719      	lsls	r1, r3, #28
 800bd76:	d422      	bmi.n	800bdbe <__swsetup_r+0x62>
 800bd78:	06da      	lsls	r2, r3, #27
 800bd7a:	d407      	bmi.n	800bd8c <__swsetup_r+0x30>
 800bd7c:	2209      	movs	r2, #9
 800bd7e:	602a      	str	r2, [r5, #0]
 800bd80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	e033      	b.n	800bdf4 <__swsetup_r+0x98>
 800bd8c:	0758      	lsls	r0, r3, #29
 800bd8e:	d512      	bpl.n	800bdb6 <__swsetup_r+0x5a>
 800bd90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd92:	b141      	cbz	r1, 800bda6 <__swsetup_r+0x4a>
 800bd94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d002      	beq.n	800bda2 <__swsetup_r+0x46>
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 ff0f 	bl	800cbc0 <_free_r>
 800bda2:	2300      	movs	r3, #0
 800bda4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6063      	str	r3, [r4, #4]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	f043 0308 	orr.w	r3, r3, #8
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	b94b      	cbnz	r3, 800bdd6 <__swsetup_r+0x7a>
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdcc:	d003      	beq.n	800bdd6 <__swsetup_r+0x7a>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f001 fd8b 	bl	800d8ec <__smakebuf_r>
 800bdd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdda:	f013 0201 	ands.w	r2, r3, #1
 800bdde:	d00a      	beq.n	800bdf6 <__swsetup_r+0x9a>
 800bde0:	2200      	movs	r2, #0
 800bde2:	60a2      	str	r2, [r4, #8]
 800bde4:	6962      	ldr	r2, [r4, #20]
 800bde6:	4252      	negs	r2, r2
 800bde8:	61a2      	str	r2, [r4, #24]
 800bdea:	6922      	ldr	r2, [r4, #16]
 800bdec:	b942      	cbnz	r2, 800be00 <__swsetup_r+0xa4>
 800bdee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdf2:	d1c5      	bne.n	800bd80 <__swsetup_r+0x24>
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	0799      	lsls	r1, r3, #30
 800bdf8:	bf58      	it	pl
 800bdfa:	6962      	ldrpl	r2, [r4, #20]
 800bdfc:	60a2      	str	r2, [r4, #8]
 800bdfe:	e7f4      	b.n	800bdea <__swsetup_r+0x8e>
 800be00:	2000      	movs	r0, #0
 800be02:	e7f7      	b.n	800bdf4 <__swsetup_r+0x98>
 800be04:	2000001c 	.word	0x2000001c

0800be08 <memset>:
 800be08:	4402      	add	r2, r0
 800be0a:	4603      	mov	r3, r0
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d100      	bne.n	800be12 <memset+0xa>
 800be10:	4770      	bx	lr
 800be12:	f803 1b01 	strb.w	r1, [r3], #1
 800be16:	e7f9      	b.n	800be0c <memset+0x4>

0800be18 <_localeconv_r>:
 800be18:	4800      	ldr	r0, [pc, #0]	@ (800be1c <_localeconv_r+0x4>)
 800be1a:	4770      	bx	lr
 800be1c:	2000015c 	.word	0x2000015c

0800be20 <_close_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d06      	ldr	r5, [pc, #24]	@ (800be3c <_close_r+0x1c>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7f6 fe30 	bl	8002a90 <_close>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_close_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_close_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	2000563c 	.word	0x2000563c

0800be40 <_lseek_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	@ (800be60 <_lseek_r+0x20>)
 800be44:	4604      	mov	r4, r0
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	f7f6 fe45 	bl	8002ade <_lseek>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_lseek_r+0x1e>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_lseek_r+0x1e>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	2000563c 	.word	0x2000563c

0800be64 <_read_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d07      	ldr	r5, [pc, #28]	@ (800be84 <_read_r+0x20>)
 800be68:	4604      	mov	r4, r0
 800be6a:	4608      	mov	r0, r1
 800be6c:	4611      	mov	r1, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	602a      	str	r2, [r5, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	f7f6 fdef 	bl	8002a56 <_read>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_read_r+0x1e>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_read_r+0x1e>
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	2000563c 	.word	0x2000563c

0800be88 <_write_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	@ (800bea8 <_write_r+0x20>)
 800be8c:	4604      	mov	r4, r0
 800be8e:	4608      	mov	r0, r1
 800be90:	4611      	mov	r1, r2
 800be92:	2200      	movs	r2, #0
 800be94:	602a      	str	r2, [r5, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	f7f6 f8ac 	bl	8001ff4 <_write>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d102      	bne.n	800bea6 <_write_r+0x1e>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	b103      	cbz	r3, 800bea6 <_write_r+0x1e>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	2000563c 	.word	0x2000563c

0800beac <__errno>:
 800beac:	4b01      	ldr	r3, [pc, #4]	@ (800beb4 <__errno+0x8>)
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	2000001c 	.word	0x2000001c

0800beb8 <__libc_init_array>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	4d0d      	ldr	r5, [pc, #52]	@ (800bef0 <__libc_init_array+0x38>)
 800bebc:	4c0d      	ldr	r4, [pc, #52]	@ (800bef4 <__libc_init_array+0x3c>)
 800bebe:	1b64      	subs	r4, r4, r5
 800bec0:	10a4      	asrs	r4, r4, #2
 800bec2:	2600      	movs	r6, #0
 800bec4:	42a6      	cmp	r6, r4
 800bec6:	d109      	bne.n	800bedc <__libc_init_array+0x24>
 800bec8:	4d0b      	ldr	r5, [pc, #44]	@ (800bef8 <__libc_init_array+0x40>)
 800beca:	4c0c      	ldr	r4, [pc, #48]	@ (800befc <__libc_init_array+0x44>)
 800becc:	f001 fe2c 	bl	800db28 <_init>
 800bed0:	1b64      	subs	r4, r4, r5
 800bed2:	10a4      	asrs	r4, r4, #2
 800bed4:	2600      	movs	r6, #0
 800bed6:	42a6      	cmp	r6, r4
 800bed8:	d105      	bne.n	800bee6 <__libc_init_array+0x2e>
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee0:	4798      	blx	r3
 800bee2:	3601      	adds	r6, #1
 800bee4:	e7ee      	b.n	800bec4 <__libc_init_array+0xc>
 800bee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beea:	4798      	blx	r3
 800beec:	3601      	adds	r6, #1
 800beee:	e7f2      	b.n	800bed6 <__libc_init_array+0x1e>
 800bef0:	0800e660 	.word	0x0800e660
 800bef4:	0800e660 	.word	0x0800e660
 800bef8:	0800e660 	.word	0x0800e660
 800befc:	0800e664 	.word	0x0800e664

0800bf00 <__retarget_lock_init_recursive>:
 800bf00:	4770      	bx	lr

0800bf02 <__retarget_lock_acquire_recursive>:
 800bf02:	4770      	bx	lr

0800bf04 <__retarget_lock_release_recursive>:
 800bf04:	4770      	bx	lr

0800bf06 <memcpy>:
 800bf06:	440a      	add	r2, r1
 800bf08:	4291      	cmp	r1, r2
 800bf0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf0e:	d100      	bne.n	800bf12 <memcpy+0xc>
 800bf10:	4770      	bx	lr
 800bf12:	b510      	push	{r4, lr}
 800bf14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf1c:	4291      	cmp	r1, r2
 800bf1e:	d1f9      	bne.n	800bf14 <memcpy+0xe>
 800bf20:	bd10      	pop	{r4, pc}

0800bf22 <quorem>:
 800bf22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf26:	6903      	ldr	r3, [r0, #16]
 800bf28:	690c      	ldr	r4, [r1, #16]
 800bf2a:	42a3      	cmp	r3, r4
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	db7e      	blt.n	800c02e <quorem+0x10c>
 800bf30:	3c01      	subs	r4, #1
 800bf32:	f101 0814 	add.w	r8, r1, #20
 800bf36:	00a3      	lsls	r3, r4, #2
 800bf38:	f100 0514 	add.w	r5, r0, #20
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf54:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf58:	d32e      	bcc.n	800bfb8 <quorem+0x96>
 800bf5a:	f04f 0a00 	mov.w	sl, #0
 800bf5e:	46c4      	mov	ip, r8
 800bf60:	46ae      	mov	lr, r5
 800bf62:	46d3      	mov	fp, sl
 800bf64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf68:	b298      	uxth	r0, r3
 800bf6a:	fb06 a000 	mla	r0, r6, r0, sl
 800bf6e:	0c02      	lsrs	r2, r0, #16
 800bf70:	0c1b      	lsrs	r3, r3, #16
 800bf72:	fb06 2303 	mla	r3, r6, r3, r2
 800bf76:	f8de 2000 	ldr.w	r2, [lr]
 800bf7a:	b280      	uxth	r0, r0
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	1a12      	subs	r2, r2, r0
 800bf80:	445a      	add	r2, fp
 800bf82:	f8de 0000 	ldr.w	r0, [lr]
 800bf86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf94:	b292      	uxth	r2, r2
 800bf96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf9a:	45e1      	cmp	r9, ip
 800bf9c:	f84e 2b04 	str.w	r2, [lr], #4
 800bfa0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bfa4:	d2de      	bcs.n	800bf64 <quorem+0x42>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	58eb      	ldr	r3, [r5, r3]
 800bfaa:	b92b      	cbnz	r3, 800bfb8 <quorem+0x96>
 800bfac:	9b01      	ldr	r3, [sp, #4]
 800bfae:	3b04      	subs	r3, #4
 800bfb0:	429d      	cmp	r5, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	d32f      	bcc.n	800c016 <quorem+0xf4>
 800bfb6:	613c      	str	r4, [r7, #16]
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f001 f97b 	bl	800d2b4 <__mcmp>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	db25      	blt.n	800c00e <quorem+0xec>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfca:	f8d1 c000 	ldr.w	ip, [r1]
 800bfce:	fa1f fe82 	uxth.w	lr, r2
 800bfd2:	fa1f f38c 	uxth.w	r3, ip
 800bfd6:	eba3 030e 	sub.w	r3, r3, lr
 800bfda:	4403      	add	r3, r0
 800bfdc:	0c12      	lsrs	r2, r2, #16
 800bfde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bfe2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfec:	45c1      	cmp	r9, r8
 800bfee:	f841 3b04 	str.w	r3, [r1], #4
 800bff2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bff6:	d2e6      	bcs.n	800bfc6 <quorem+0xa4>
 800bff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c000:	b922      	cbnz	r2, 800c00c <quorem+0xea>
 800c002:	3b04      	subs	r3, #4
 800c004:	429d      	cmp	r5, r3
 800c006:	461a      	mov	r2, r3
 800c008:	d30b      	bcc.n	800c022 <quorem+0x100>
 800c00a:	613c      	str	r4, [r7, #16]
 800c00c:	3601      	adds	r6, #1
 800c00e:	4630      	mov	r0, r6
 800c010:	b003      	add	sp, #12
 800c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	6812      	ldr	r2, [r2, #0]
 800c018:	3b04      	subs	r3, #4
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d1cb      	bne.n	800bfb6 <quorem+0x94>
 800c01e:	3c01      	subs	r4, #1
 800c020:	e7c6      	b.n	800bfb0 <quorem+0x8e>
 800c022:	6812      	ldr	r2, [r2, #0]
 800c024:	3b04      	subs	r3, #4
 800c026:	2a00      	cmp	r2, #0
 800c028:	d1ef      	bne.n	800c00a <quorem+0xe8>
 800c02a:	3c01      	subs	r4, #1
 800c02c:	e7ea      	b.n	800c004 <quorem+0xe2>
 800c02e:	2000      	movs	r0, #0
 800c030:	e7ee      	b.n	800c010 <quorem+0xee>
 800c032:	0000      	movs	r0, r0
 800c034:	0000      	movs	r0, r0
	...

0800c038 <_dtoa_r>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	69c7      	ldr	r7, [r0, #28]
 800c03e:	b099      	sub	sp, #100	@ 0x64
 800c040:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c044:	ec55 4b10 	vmov	r4, r5, d0
 800c048:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c04a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c04c:	4683      	mov	fp, r0
 800c04e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c050:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c052:	b97f      	cbnz	r7, 800c074 <_dtoa_r+0x3c>
 800c054:	2010      	movs	r0, #16
 800c056:	f000 fdfd 	bl	800cc54 <malloc>
 800c05a:	4602      	mov	r2, r0
 800c05c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c060:	b920      	cbnz	r0, 800c06c <_dtoa_r+0x34>
 800c062:	4ba7      	ldr	r3, [pc, #668]	@ (800c300 <_dtoa_r+0x2c8>)
 800c064:	21ef      	movs	r1, #239	@ 0xef
 800c066:	48a7      	ldr	r0, [pc, #668]	@ (800c304 <_dtoa_r+0x2cc>)
 800c068:	f001 fcae 	bl	800d9c8 <__assert_func>
 800c06c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c070:	6007      	str	r7, [r0, #0]
 800c072:	60c7      	str	r7, [r0, #12]
 800c074:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c078:	6819      	ldr	r1, [r3, #0]
 800c07a:	b159      	cbz	r1, 800c094 <_dtoa_r+0x5c>
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	604a      	str	r2, [r1, #4]
 800c080:	2301      	movs	r3, #1
 800c082:	4093      	lsls	r3, r2
 800c084:	608b      	str	r3, [r1, #8]
 800c086:	4658      	mov	r0, fp
 800c088:	f000 feda 	bl	800ce40 <_Bfree>
 800c08c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	1e2b      	subs	r3, r5, #0
 800c096:	bfb9      	ittee	lt
 800c098:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c09c:	9303      	strlt	r3, [sp, #12]
 800c09e:	2300      	movge	r3, #0
 800c0a0:	6033      	strge	r3, [r6, #0]
 800c0a2:	9f03      	ldr	r7, [sp, #12]
 800c0a4:	4b98      	ldr	r3, [pc, #608]	@ (800c308 <_dtoa_r+0x2d0>)
 800c0a6:	bfbc      	itt	lt
 800c0a8:	2201      	movlt	r2, #1
 800c0aa:	6032      	strlt	r2, [r6, #0]
 800c0ac:	43bb      	bics	r3, r7
 800c0ae:	d112      	bne.n	800c0d6 <_dtoa_r+0x9e>
 800c0b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0bc:	4323      	orrs	r3, r4
 800c0be:	f000 854d 	beq.w	800cb5c <_dtoa_r+0xb24>
 800c0c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c31c <_dtoa_r+0x2e4>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 854f 	beq.w	800cb6c <_dtoa_r+0xb34>
 800c0ce:	f10a 0303 	add.w	r3, sl, #3
 800c0d2:	f000 bd49 	b.w	800cb68 <_dtoa_r+0xb30>
 800c0d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	ec51 0b17 	vmov	r0, r1, d7
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c0e6:	f7f4 fd17 	bl	8000b18 <__aeabi_dcmpeq>
 800c0ea:	4680      	mov	r8, r0
 800c0ec:	b158      	cbz	r0, 800c106 <_dtoa_r+0xce>
 800c0ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	6013      	str	r3, [r2, #0]
 800c0f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0f6:	b113      	cbz	r3, 800c0fe <_dtoa_r+0xc6>
 800c0f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0fa:	4b84      	ldr	r3, [pc, #528]	@ (800c30c <_dtoa_r+0x2d4>)
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c320 <_dtoa_r+0x2e8>
 800c102:	f000 bd33 	b.w	800cb6c <_dtoa_r+0xb34>
 800c106:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c10a:	aa16      	add	r2, sp, #88	@ 0x58
 800c10c:	a917      	add	r1, sp, #92	@ 0x5c
 800c10e:	4658      	mov	r0, fp
 800c110:	f001 f980 	bl	800d414 <__d2b>
 800c114:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c118:	4681      	mov	r9, r0
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	d077      	beq.n	800c20e <_dtoa_r+0x1d6>
 800c11e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c120:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c12c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c130:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c134:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c138:	4619      	mov	r1, r3
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b74      	ldr	r3, [pc, #464]	@ (800c310 <_dtoa_r+0x2d8>)
 800c13e:	f7f4 f8cb 	bl	80002d8 <__aeabi_dsub>
 800c142:	a369      	add	r3, pc, #420	@ (adr r3, 800c2e8 <_dtoa_r+0x2b0>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f7f4 fa7e 	bl	8000648 <__aeabi_dmul>
 800c14c:	a368      	add	r3, pc, #416	@ (adr r3, 800c2f0 <_dtoa_r+0x2b8>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	f7f4 f8c3 	bl	80002dc <__adddf3>
 800c156:	4604      	mov	r4, r0
 800c158:	4630      	mov	r0, r6
 800c15a:	460d      	mov	r5, r1
 800c15c:	f7f4 fa0a 	bl	8000574 <__aeabi_i2d>
 800c160:	a365      	add	r3, pc, #404	@ (adr r3, 800c2f8 <_dtoa_r+0x2c0>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 fa6f 	bl	8000648 <__aeabi_dmul>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 f8b3 	bl	80002dc <__adddf3>
 800c176:	4604      	mov	r4, r0
 800c178:	460d      	mov	r5, r1
 800c17a:	f7f4 fd15 	bl	8000ba8 <__aeabi_d2iz>
 800c17e:	2200      	movs	r2, #0
 800c180:	4607      	mov	r7, r0
 800c182:	2300      	movs	r3, #0
 800c184:	4620      	mov	r0, r4
 800c186:	4629      	mov	r1, r5
 800c188:	f7f4 fcd0 	bl	8000b2c <__aeabi_dcmplt>
 800c18c:	b140      	cbz	r0, 800c1a0 <_dtoa_r+0x168>
 800c18e:	4638      	mov	r0, r7
 800c190:	f7f4 f9f0 	bl	8000574 <__aeabi_i2d>
 800c194:	4622      	mov	r2, r4
 800c196:	462b      	mov	r3, r5
 800c198:	f7f4 fcbe 	bl	8000b18 <__aeabi_dcmpeq>
 800c19c:	b900      	cbnz	r0, 800c1a0 <_dtoa_r+0x168>
 800c19e:	3f01      	subs	r7, #1
 800c1a0:	2f16      	cmp	r7, #22
 800c1a2:	d851      	bhi.n	800c248 <_dtoa_r+0x210>
 800c1a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c314 <_dtoa_r+0x2dc>)
 800c1a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b2:	f7f4 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d048      	beq.n	800c24c <_dtoa_r+0x214>
 800c1ba:	3f01      	subs	r7, #1
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1c2:	1b9b      	subs	r3, r3, r6
 800c1c4:	1e5a      	subs	r2, r3, #1
 800c1c6:	bf44      	itt	mi
 800c1c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1cc:	2300      	movmi	r3, #0
 800c1ce:	9208      	str	r2, [sp, #32]
 800c1d0:	bf54      	ite	pl
 800c1d2:	f04f 0800 	movpl.w	r8, #0
 800c1d6:	9308      	strmi	r3, [sp, #32]
 800c1d8:	2f00      	cmp	r7, #0
 800c1da:	db39      	blt.n	800c250 <_dtoa_r+0x218>
 800c1dc:	9b08      	ldr	r3, [sp, #32]
 800c1de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c1e0:	443b      	add	r3, r7
 800c1e2:	9308      	str	r3, [sp, #32]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ea:	2b09      	cmp	r3, #9
 800c1ec:	d864      	bhi.n	800c2b8 <_dtoa_r+0x280>
 800c1ee:	2b05      	cmp	r3, #5
 800c1f0:	bfc4      	itt	gt
 800c1f2:	3b04      	subgt	r3, #4
 800c1f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f8:	f1a3 0302 	sub.w	r3, r3, #2
 800c1fc:	bfcc      	ite	gt
 800c1fe:	2400      	movgt	r4, #0
 800c200:	2401      	movle	r4, #1
 800c202:	2b03      	cmp	r3, #3
 800c204:	d863      	bhi.n	800c2ce <_dtoa_r+0x296>
 800c206:	e8df f003 	tbb	[pc, r3]
 800c20a:	372a      	.short	0x372a
 800c20c:	5535      	.short	0x5535
 800c20e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c212:	441e      	add	r6, r3
 800c214:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c218:	2b20      	cmp	r3, #32
 800c21a:	bfc1      	itttt	gt
 800c21c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c220:	409f      	lslgt	r7, r3
 800c222:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c226:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c22a:	bfd6      	itet	le
 800c22c:	f1c3 0320 	rsble	r3, r3, #32
 800c230:	ea47 0003 	orrgt.w	r0, r7, r3
 800c234:	fa04 f003 	lslle.w	r0, r4, r3
 800c238:	f7f4 f98c 	bl	8000554 <__aeabi_ui2d>
 800c23c:	2201      	movs	r2, #1
 800c23e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c242:	3e01      	subs	r6, #1
 800c244:	9214      	str	r2, [sp, #80]	@ 0x50
 800c246:	e777      	b.n	800c138 <_dtoa_r+0x100>
 800c248:	2301      	movs	r3, #1
 800c24a:	e7b8      	b.n	800c1be <_dtoa_r+0x186>
 800c24c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c24e:	e7b7      	b.n	800c1c0 <_dtoa_r+0x188>
 800c250:	427b      	negs	r3, r7
 800c252:	930a      	str	r3, [sp, #40]	@ 0x28
 800c254:	2300      	movs	r3, #0
 800c256:	eba8 0807 	sub.w	r8, r8, r7
 800c25a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c25c:	e7c4      	b.n	800c1e8 <_dtoa_r+0x1b0>
 800c25e:	2300      	movs	r3, #0
 800c260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc35      	bgt.n	800c2d4 <_dtoa_r+0x29c>
 800c268:	2301      	movs	r3, #1
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	461a      	mov	r2, r3
 800c270:	920e      	str	r2, [sp, #56]	@ 0x38
 800c272:	e00b      	b.n	800c28c <_dtoa_r+0x254>
 800c274:	2301      	movs	r3, #1
 800c276:	e7f3      	b.n	800c260 <_dtoa_r+0x228>
 800c278:	2300      	movs	r3, #0
 800c27a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c27e:	18fb      	adds	r3, r7, r3
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	3301      	adds	r3, #1
 800c284:	2b01      	cmp	r3, #1
 800c286:	9307      	str	r3, [sp, #28]
 800c288:	bfb8      	it	lt
 800c28a:	2301      	movlt	r3, #1
 800c28c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c290:	2100      	movs	r1, #0
 800c292:	2204      	movs	r2, #4
 800c294:	f102 0514 	add.w	r5, r2, #20
 800c298:	429d      	cmp	r5, r3
 800c29a:	d91f      	bls.n	800c2dc <_dtoa_r+0x2a4>
 800c29c:	6041      	str	r1, [r0, #4]
 800c29e:	4658      	mov	r0, fp
 800c2a0:	f000 fd8e 	bl	800cdc0 <_Balloc>
 800c2a4:	4682      	mov	sl, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d13c      	bne.n	800c324 <_dtoa_r+0x2ec>
 800c2aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c318 <_dtoa_r+0x2e0>)
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2b2:	e6d8      	b.n	800c066 <_dtoa_r+0x2e>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e7e0      	b.n	800c27a <_dtoa_r+0x242>
 800c2b8:	2401      	movs	r4, #1
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	9307      	str	r3, [sp, #28]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2312      	movs	r3, #18
 800c2cc:	e7d0      	b.n	800c270 <_dtoa_r+0x238>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2d2:	e7f5      	b.n	800c2c0 <_dtoa_r+0x288>
 800c2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	e7d7      	b.n	800c28c <_dtoa_r+0x254>
 800c2dc:	3101      	adds	r1, #1
 800c2de:	0052      	lsls	r2, r2, #1
 800c2e0:	e7d8      	b.n	800c294 <_dtoa_r+0x25c>
 800c2e2:	bf00      	nop
 800c2e4:	f3af 8000 	nop.w
 800c2e8:	636f4361 	.word	0x636f4361
 800c2ec:	3fd287a7 	.word	0x3fd287a7
 800c2f0:	8b60c8b3 	.word	0x8b60c8b3
 800c2f4:	3fc68a28 	.word	0x3fc68a28
 800c2f8:	509f79fb 	.word	0x509f79fb
 800c2fc:	3fd34413 	.word	0x3fd34413
 800c300:	0800e325 	.word	0x0800e325
 800c304:	0800e33c 	.word	0x0800e33c
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	0800e2f5 	.word	0x0800e2f5
 800c310:	3ff80000 	.word	0x3ff80000
 800c314:	0800e438 	.word	0x0800e438
 800c318:	0800e394 	.word	0x0800e394
 800c31c:	0800e321 	.word	0x0800e321
 800c320:	0800e2f4 	.word	0x0800e2f4
 800c324:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c328:	6018      	str	r0, [r3, #0]
 800c32a:	9b07      	ldr	r3, [sp, #28]
 800c32c:	2b0e      	cmp	r3, #14
 800c32e:	f200 80a4 	bhi.w	800c47a <_dtoa_r+0x442>
 800c332:	2c00      	cmp	r4, #0
 800c334:	f000 80a1 	beq.w	800c47a <_dtoa_r+0x442>
 800c338:	2f00      	cmp	r7, #0
 800c33a:	dd33      	ble.n	800c3a4 <_dtoa_r+0x36c>
 800c33c:	4bad      	ldr	r3, [pc, #692]	@ (800c5f4 <_dtoa_r+0x5bc>)
 800c33e:	f007 020f 	and.w	r2, r7, #15
 800c342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c346:	ed93 7b00 	vldr	d7, [r3]
 800c34a:	05f8      	lsls	r0, r7, #23
 800c34c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c350:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c354:	d516      	bpl.n	800c384 <_dtoa_r+0x34c>
 800c356:	4ba8      	ldr	r3, [pc, #672]	@ (800c5f8 <_dtoa_r+0x5c0>)
 800c358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c35c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c360:	f7f4 fa9c 	bl	800089c <__aeabi_ddiv>
 800c364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c368:	f004 040f 	and.w	r4, r4, #15
 800c36c:	2603      	movs	r6, #3
 800c36e:	4da2      	ldr	r5, [pc, #648]	@ (800c5f8 <_dtoa_r+0x5c0>)
 800c370:	b954      	cbnz	r4, 800c388 <_dtoa_r+0x350>
 800c372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37a:	f7f4 fa8f 	bl	800089c <__aeabi_ddiv>
 800c37e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c382:	e028      	b.n	800c3d6 <_dtoa_r+0x39e>
 800c384:	2602      	movs	r6, #2
 800c386:	e7f2      	b.n	800c36e <_dtoa_r+0x336>
 800c388:	07e1      	lsls	r1, r4, #31
 800c38a:	d508      	bpl.n	800c39e <_dtoa_r+0x366>
 800c38c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c390:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c394:	f7f4 f958 	bl	8000648 <__aeabi_dmul>
 800c398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c39c:	3601      	adds	r6, #1
 800c39e:	1064      	asrs	r4, r4, #1
 800c3a0:	3508      	adds	r5, #8
 800c3a2:	e7e5      	b.n	800c370 <_dtoa_r+0x338>
 800c3a4:	f000 80d2 	beq.w	800c54c <_dtoa_r+0x514>
 800c3a8:	427c      	negs	r4, r7
 800c3aa:	4b92      	ldr	r3, [pc, #584]	@ (800c5f4 <_dtoa_r+0x5bc>)
 800c3ac:	4d92      	ldr	r5, [pc, #584]	@ (800c5f8 <_dtoa_r+0x5c0>)
 800c3ae:	f004 020f 	and.w	r2, r4, #15
 800c3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3be:	f7f4 f943 	bl	8000648 <__aeabi_dmul>
 800c3c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3c6:	1124      	asrs	r4, r4, #4
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	2602      	movs	r6, #2
 800c3cc:	2c00      	cmp	r4, #0
 800c3ce:	f040 80b2 	bne.w	800c536 <_dtoa_r+0x4fe>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1d3      	bne.n	800c37e <_dtoa_r+0x346>
 800c3d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80b7 	beq.w	800c550 <_dtoa_r+0x518>
 800c3e2:	4b86      	ldr	r3, [pc, #536]	@ (800c5fc <_dtoa_r+0x5c4>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	f7f4 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	f000 80ae 	beq.w	800c550 <_dtoa_r+0x518>
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 80aa 	beq.w	800c550 <_dtoa_r+0x518>
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd37      	ble.n	800c472 <_dtoa_r+0x43a>
 800c402:	1e7b      	subs	r3, r7, #1
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	4620      	mov	r0, r4
 800c408:	4b7d      	ldr	r3, [pc, #500]	@ (800c600 <_dtoa_r+0x5c8>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7f4 f91b 	bl	8000648 <__aeabi_dmul>
 800c412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c416:	9c00      	ldr	r4, [sp, #0]
 800c418:	3601      	adds	r6, #1
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7f4 f8aa 	bl	8000574 <__aeabi_i2d>
 800c420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c424:	f7f4 f910 	bl	8000648 <__aeabi_dmul>
 800c428:	4b76      	ldr	r3, [pc, #472]	@ (800c604 <_dtoa_r+0x5cc>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	f7f3 ff56 	bl	80002dc <__adddf3>
 800c430:	4605      	mov	r5, r0
 800c432:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c436:	2c00      	cmp	r4, #0
 800c438:	f040 808d 	bne.w	800c556 <_dtoa_r+0x51e>
 800c43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c440:	4b71      	ldr	r3, [pc, #452]	@ (800c608 <_dtoa_r+0x5d0>)
 800c442:	2200      	movs	r2, #0
 800c444:	f7f3 ff48 	bl	80002d8 <__aeabi_dsub>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c450:	462a      	mov	r2, r5
 800c452:	4633      	mov	r3, r6
 800c454:	f7f4 fb88 	bl	8000b68 <__aeabi_dcmpgt>
 800c458:	2800      	cmp	r0, #0
 800c45a:	f040 828b 	bne.w	800c974 <_dtoa_r+0x93c>
 800c45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c462:	462a      	mov	r2, r5
 800c464:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c468:	f7f4 fb60 	bl	8000b2c <__aeabi_dcmplt>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	f040 8128 	bne.w	800c6c2 <_dtoa_r+0x68a>
 800c472:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c476:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c47a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f2c0 815a 	blt.w	800c736 <_dtoa_r+0x6fe>
 800c482:	2f0e      	cmp	r7, #14
 800c484:	f300 8157 	bgt.w	800c736 <_dtoa_r+0x6fe>
 800c488:	4b5a      	ldr	r3, [pc, #360]	@ (800c5f4 <_dtoa_r+0x5bc>)
 800c48a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c48e:	ed93 7b00 	vldr	d7, [r3]
 800c492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c494:	2b00      	cmp	r3, #0
 800c496:	ed8d 7b00 	vstr	d7, [sp]
 800c49a:	da03      	bge.n	800c4a4 <_dtoa_r+0x46c>
 800c49c:	9b07      	ldr	r3, [sp, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f340 8101 	ble.w	800c6a6 <_dtoa_r+0x66e>
 800c4a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4a8:	4656      	mov	r6, sl
 800c4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f4 f9f3 	bl	800089c <__aeabi_ddiv>
 800c4b6:	f7f4 fb77 	bl	8000ba8 <__aeabi_d2iz>
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	f7f4 f85a 	bl	8000574 <__aeabi_i2d>
 800c4c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4c4:	f7f4 f8c0 	bl	8000648 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4d4:	f7f3 ff00 	bl	80002d8 <__aeabi_dsub>
 800c4d8:	f806 4b01 	strb.w	r4, [r6], #1
 800c4dc:	9d07      	ldr	r5, [sp, #28]
 800c4de:	eba6 040a 	sub.w	r4, r6, sl
 800c4e2:	42a5      	cmp	r5, r4
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	f040 8117 	bne.w	800c71a <_dtoa_r+0x6e2>
 800c4ec:	f7f3 fef6 	bl	80002dc <__adddf3>
 800c4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	f7f4 fb36 	bl	8000b68 <__aeabi_dcmpgt>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	f040 80f9 	bne.w	800c6f4 <_dtoa_r+0x6bc>
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fb05 	bl	8000b18 <__aeabi_dcmpeq>
 800c50e:	b118      	cbz	r0, 800c518 <_dtoa_r+0x4e0>
 800c510:	f018 0f01 	tst.w	r8, #1
 800c514:	f040 80ee 	bne.w	800c6f4 <_dtoa_r+0x6bc>
 800c518:	4649      	mov	r1, r9
 800c51a:	4658      	mov	r0, fp
 800c51c:	f000 fc90 	bl	800ce40 <_Bfree>
 800c520:	2300      	movs	r3, #0
 800c522:	7033      	strb	r3, [r6, #0]
 800c524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c526:	3701      	adds	r7, #1
 800c528:	601f      	str	r7, [r3, #0]
 800c52a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 831d 	beq.w	800cb6c <_dtoa_r+0xb34>
 800c532:	601e      	str	r6, [r3, #0]
 800c534:	e31a      	b.n	800cb6c <_dtoa_r+0xb34>
 800c536:	07e2      	lsls	r2, r4, #31
 800c538:	d505      	bpl.n	800c546 <_dtoa_r+0x50e>
 800c53a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c53e:	f7f4 f883 	bl	8000648 <__aeabi_dmul>
 800c542:	3601      	adds	r6, #1
 800c544:	2301      	movs	r3, #1
 800c546:	1064      	asrs	r4, r4, #1
 800c548:	3508      	adds	r5, #8
 800c54a:	e73f      	b.n	800c3cc <_dtoa_r+0x394>
 800c54c:	2602      	movs	r6, #2
 800c54e:	e742      	b.n	800c3d6 <_dtoa_r+0x39e>
 800c550:	9c07      	ldr	r4, [sp, #28]
 800c552:	9704      	str	r7, [sp, #16]
 800c554:	e761      	b.n	800c41a <_dtoa_r+0x3e2>
 800c556:	4b27      	ldr	r3, [pc, #156]	@ (800c5f4 <_dtoa_r+0x5bc>)
 800c558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c55a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c55e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c562:	4454      	add	r4, sl
 800c564:	2900      	cmp	r1, #0
 800c566:	d053      	beq.n	800c610 <_dtoa_r+0x5d8>
 800c568:	4928      	ldr	r1, [pc, #160]	@ (800c60c <_dtoa_r+0x5d4>)
 800c56a:	2000      	movs	r0, #0
 800c56c:	f7f4 f996 	bl	800089c <__aeabi_ddiv>
 800c570:	4633      	mov	r3, r6
 800c572:	462a      	mov	r2, r5
 800c574:	f7f3 feb0 	bl	80002d8 <__aeabi_dsub>
 800c578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c57c:	4656      	mov	r6, sl
 800c57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c582:	f7f4 fb11 	bl	8000ba8 <__aeabi_d2iz>
 800c586:	4605      	mov	r5, r0
 800c588:	f7f3 fff4 	bl	8000574 <__aeabi_i2d>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c594:	f7f3 fea0 	bl	80002d8 <__aeabi_dsub>
 800c598:	3530      	adds	r5, #48	@ 0x30
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5a2:	f806 5b01 	strb.w	r5, [r6], #1
 800c5a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5aa:	f7f4 fabf 	bl	8000b2c <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d171      	bne.n	800c696 <_dtoa_r+0x65e>
 800c5b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5b6:	4911      	ldr	r1, [pc, #68]	@ (800c5fc <_dtoa_r+0x5c4>)
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	f7f3 fe8d 	bl	80002d8 <__aeabi_dsub>
 800c5be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5c2:	f7f4 fab3 	bl	8000b2c <__aeabi_dcmplt>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f040 8095 	bne.w	800c6f6 <_dtoa_r+0x6be>
 800c5cc:	42a6      	cmp	r6, r4
 800c5ce:	f43f af50 	beq.w	800c472 <_dtoa_r+0x43a>
 800c5d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c600 <_dtoa_r+0x5c8>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f7f4 f835 	bl	8000648 <__aeabi_dmul>
 800c5de:	4b08      	ldr	r3, [pc, #32]	@ (800c600 <_dtoa_r+0x5c8>)
 800c5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ea:	f7f4 f82d 	bl	8000648 <__aeabi_dmul>
 800c5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f2:	e7c4      	b.n	800c57e <_dtoa_r+0x546>
 800c5f4:	0800e438 	.word	0x0800e438
 800c5f8:	0800e410 	.word	0x0800e410
 800c5fc:	3ff00000 	.word	0x3ff00000
 800c600:	40240000 	.word	0x40240000
 800c604:	401c0000 	.word	0x401c0000
 800c608:	40140000 	.word	0x40140000
 800c60c:	3fe00000 	.word	0x3fe00000
 800c610:	4631      	mov	r1, r6
 800c612:	4628      	mov	r0, r5
 800c614:	f7f4 f818 	bl	8000648 <__aeabi_dmul>
 800c618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c61c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c61e:	4656      	mov	r6, sl
 800c620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c624:	f7f4 fac0 	bl	8000ba8 <__aeabi_d2iz>
 800c628:	4605      	mov	r5, r0
 800c62a:	f7f3 ffa3 	bl	8000574 <__aeabi_i2d>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c636:	f7f3 fe4f 	bl	80002d8 <__aeabi_dsub>
 800c63a:	3530      	adds	r5, #48	@ 0x30
 800c63c:	f806 5b01 	strb.w	r5, [r6], #1
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	42a6      	cmp	r6, r4
 800c646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c64a:	f04f 0200 	mov.w	r2, #0
 800c64e:	d124      	bne.n	800c69a <_dtoa_r+0x662>
 800c650:	4bac      	ldr	r3, [pc, #688]	@ (800c904 <_dtoa_r+0x8cc>)
 800c652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c656:	f7f3 fe41 	bl	80002dc <__adddf3>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c662:	f7f4 fa81 	bl	8000b68 <__aeabi_dcmpgt>
 800c666:	2800      	cmp	r0, #0
 800c668:	d145      	bne.n	800c6f6 <_dtoa_r+0x6be>
 800c66a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c66e:	49a5      	ldr	r1, [pc, #660]	@ (800c904 <_dtoa_r+0x8cc>)
 800c670:	2000      	movs	r0, #0
 800c672:	f7f3 fe31 	bl	80002d8 <__aeabi_dsub>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c67e:	f7f4 fa55 	bl	8000b2c <__aeabi_dcmplt>
 800c682:	2800      	cmp	r0, #0
 800c684:	f43f aef5 	beq.w	800c472 <_dtoa_r+0x43a>
 800c688:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c68a:	1e73      	subs	r3, r6, #1
 800c68c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c68e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c692:	2b30      	cmp	r3, #48	@ 0x30
 800c694:	d0f8      	beq.n	800c688 <_dtoa_r+0x650>
 800c696:	9f04      	ldr	r7, [sp, #16]
 800c698:	e73e      	b.n	800c518 <_dtoa_r+0x4e0>
 800c69a:	4b9b      	ldr	r3, [pc, #620]	@ (800c908 <_dtoa_r+0x8d0>)
 800c69c:	f7f3 ffd4 	bl	8000648 <__aeabi_dmul>
 800c6a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6a4:	e7bc      	b.n	800c620 <_dtoa_r+0x5e8>
 800c6a6:	d10c      	bne.n	800c6c2 <_dtoa_r+0x68a>
 800c6a8:	4b98      	ldr	r3, [pc, #608]	@ (800c90c <_dtoa_r+0x8d4>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6b0:	f7f3 ffca 	bl	8000648 <__aeabi_dmul>
 800c6b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6b8:	f7f4 fa4c 	bl	8000b54 <__aeabi_dcmpge>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f000 8157 	beq.w	800c970 <_dtoa_r+0x938>
 800c6c2:	2400      	movs	r4, #0
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	4656      	mov	r6, sl
 800c6ce:	2700      	movs	r7, #0
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	4658      	mov	r0, fp
 800c6d4:	f000 fbb4 	bl	800ce40 <_Bfree>
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	d0dc      	beq.n	800c696 <_dtoa_r+0x65e>
 800c6dc:	b12f      	cbz	r7, 800c6ea <_dtoa_r+0x6b2>
 800c6de:	42af      	cmp	r7, r5
 800c6e0:	d003      	beq.n	800c6ea <_dtoa_r+0x6b2>
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	4658      	mov	r0, fp
 800c6e6:	f000 fbab 	bl	800ce40 <_Bfree>
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	4658      	mov	r0, fp
 800c6ee:	f000 fba7 	bl	800ce40 <_Bfree>
 800c6f2:	e7d0      	b.n	800c696 <_dtoa_r+0x65e>
 800c6f4:	9704      	str	r7, [sp, #16]
 800c6f6:	4633      	mov	r3, r6
 800c6f8:	461e      	mov	r6, r3
 800c6fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6fe:	2a39      	cmp	r2, #57	@ 0x39
 800c700:	d107      	bne.n	800c712 <_dtoa_r+0x6da>
 800c702:	459a      	cmp	sl, r3
 800c704:	d1f8      	bne.n	800c6f8 <_dtoa_r+0x6c0>
 800c706:	9a04      	ldr	r2, [sp, #16]
 800c708:	3201      	adds	r2, #1
 800c70a:	9204      	str	r2, [sp, #16]
 800c70c:	2230      	movs	r2, #48	@ 0x30
 800c70e:	f88a 2000 	strb.w	r2, [sl]
 800c712:	781a      	ldrb	r2, [r3, #0]
 800c714:	3201      	adds	r2, #1
 800c716:	701a      	strb	r2, [r3, #0]
 800c718:	e7bd      	b.n	800c696 <_dtoa_r+0x65e>
 800c71a:	4b7b      	ldr	r3, [pc, #492]	@ (800c908 <_dtoa_r+0x8d0>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	f7f3 ff93 	bl	8000648 <__aeabi_dmul>
 800c722:	2200      	movs	r2, #0
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	460d      	mov	r5, r1
 800c72a:	f7f4 f9f5 	bl	8000b18 <__aeabi_dcmpeq>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f43f aebb 	beq.w	800c4aa <_dtoa_r+0x472>
 800c734:	e6f0      	b.n	800c518 <_dtoa_r+0x4e0>
 800c736:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c738:	2a00      	cmp	r2, #0
 800c73a:	f000 80db 	beq.w	800c8f4 <_dtoa_r+0x8bc>
 800c73e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c740:	2a01      	cmp	r2, #1
 800c742:	f300 80bf 	bgt.w	800c8c4 <_dtoa_r+0x88c>
 800c746:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c748:	2a00      	cmp	r2, #0
 800c74a:	f000 80b7 	beq.w	800c8bc <_dtoa_r+0x884>
 800c74e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c752:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c754:	4646      	mov	r6, r8
 800c756:	9a08      	ldr	r2, [sp, #32]
 800c758:	2101      	movs	r1, #1
 800c75a:	441a      	add	r2, r3
 800c75c:	4658      	mov	r0, fp
 800c75e:	4498      	add	r8, r3
 800c760:	9208      	str	r2, [sp, #32]
 800c762:	f000 fc21 	bl	800cfa8 <__i2b>
 800c766:	4605      	mov	r5, r0
 800c768:	b15e      	cbz	r6, 800c782 <_dtoa_r+0x74a>
 800c76a:	9b08      	ldr	r3, [sp, #32]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	dd08      	ble.n	800c782 <_dtoa_r+0x74a>
 800c770:	42b3      	cmp	r3, r6
 800c772:	9a08      	ldr	r2, [sp, #32]
 800c774:	bfa8      	it	ge
 800c776:	4633      	movge	r3, r6
 800c778:	eba8 0803 	sub.w	r8, r8, r3
 800c77c:	1af6      	subs	r6, r6, r3
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	9308      	str	r3, [sp, #32]
 800c782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c784:	b1f3      	cbz	r3, 800c7c4 <_dtoa_r+0x78c>
 800c786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 80b7 	beq.w	800c8fc <_dtoa_r+0x8c4>
 800c78e:	b18c      	cbz	r4, 800c7b4 <_dtoa_r+0x77c>
 800c790:	4629      	mov	r1, r5
 800c792:	4622      	mov	r2, r4
 800c794:	4658      	mov	r0, fp
 800c796:	f000 fcc7 	bl	800d128 <__pow5mult>
 800c79a:	464a      	mov	r2, r9
 800c79c:	4601      	mov	r1, r0
 800c79e:	4605      	mov	r5, r0
 800c7a0:	4658      	mov	r0, fp
 800c7a2:	f000 fc17 	bl	800cfd4 <__multiply>
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	9004      	str	r0, [sp, #16]
 800c7aa:	4658      	mov	r0, fp
 800c7ac:	f000 fb48 	bl	800ce40 <_Bfree>
 800c7b0:	9b04      	ldr	r3, [sp, #16]
 800c7b2:	4699      	mov	r9, r3
 800c7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b6:	1b1a      	subs	r2, r3, r4
 800c7b8:	d004      	beq.n	800c7c4 <_dtoa_r+0x78c>
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	4658      	mov	r0, fp
 800c7be:	f000 fcb3 	bl	800d128 <__pow5mult>
 800c7c2:	4681      	mov	r9, r0
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	f000 fbee 	bl	800cfa8 <__i2b>
 800c7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 81cf 	beq.w	800cb74 <_dtoa_r+0xb3c>
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	4601      	mov	r1, r0
 800c7da:	4658      	mov	r0, fp
 800c7dc:	f000 fca4 	bl	800d128 <__pow5mult>
 800c7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	f300 8095 	bgt.w	800c914 <_dtoa_r+0x8dc>
 800c7ea:	9b02      	ldr	r3, [sp, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 8087 	bne.w	800c900 <_dtoa_r+0x8c8>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f040 8089 	bne.w	800c910 <_dtoa_r+0x8d8>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c804:	0d1b      	lsrs	r3, r3, #20
 800c806:	051b      	lsls	r3, r3, #20
 800c808:	b12b      	cbz	r3, 800c816 <_dtoa_r+0x7de>
 800c80a:	9b08      	ldr	r3, [sp, #32]
 800c80c:	3301      	adds	r3, #1
 800c80e:	9308      	str	r3, [sp, #32]
 800c810:	f108 0801 	add.w	r8, r8, #1
 800c814:	2301      	movs	r3, #1
 800c816:	930a      	str	r3, [sp, #40]	@ 0x28
 800c818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 81b0 	beq.w	800cb80 <_dtoa_r+0xb48>
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c826:	6918      	ldr	r0, [r3, #16]
 800c828:	f000 fb72 	bl	800cf10 <__hi0bits>
 800c82c:	f1c0 0020 	rsb	r0, r0, #32
 800c830:	9b08      	ldr	r3, [sp, #32]
 800c832:	4418      	add	r0, r3
 800c834:	f010 001f 	ands.w	r0, r0, #31
 800c838:	d077      	beq.n	800c92a <_dtoa_r+0x8f2>
 800c83a:	f1c0 0320 	rsb	r3, r0, #32
 800c83e:	2b04      	cmp	r3, #4
 800c840:	dd6b      	ble.n	800c91a <_dtoa_r+0x8e2>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	f1c0 001c 	rsb	r0, r0, #28
 800c848:	4403      	add	r3, r0
 800c84a:	4480      	add	r8, r0
 800c84c:	4406      	add	r6, r0
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	f1b8 0f00 	cmp.w	r8, #0
 800c854:	dd05      	ble.n	800c862 <_dtoa_r+0x82a>
 800c856:	4649      	mov	r1, r9
 800c858:	4642      	mov	r2, r8
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fcbe 	bl	800d1dc <__lshift>
 800c860:	4681      	mov	r9, r0
 800c862:	9b08      	ldr	r3, [sp, #32]
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd05      	ble.n	800c874 <_dtoa_r+0x83c>
 800c868:	4621      	mov	r1, r4
 800c86a:	461a      	mov	r2, r3
 800c86c:	4658      	mov	r0, fp
 800c86e:	f000 fcb5 	bl	800d1dc <__lshift>
 800c872:	4604      	mov	r4, r0
 800c874:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c876:	2b00      	cmp	r3, #0
 800c878:	d059      	beq.n	800c92e <_dtoa_r+0x8f6>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4648      	mov	r0, r9
 800c87e:	f000 fd19 	bl	800d2b4 <__mcmp>
 800c882:	2800      	cmp	r0, #0
 800c884:	da53      	bge.n	800c92e <_dtoa_r+0x8f6>
 800c886:	1e7b      	subs	r3, r7, #1
 800c888:	9304      	str	r3, [sp, #16]
 800c88a:	4649      	mov	r1, r9
 800c88c:	2300      	movs	r3, #0
 800c88e:	220a      	movs	r2, #10
 800c890:	4658      	mov	r0, fp
 800c892:	f000 faf7 	bl	800ce84 <__multadd>
 800c896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c898:	4681      	mov	r9, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 8172 	beq.w	800cb84 <_dtoa_r+0xb4c>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	220a      	movs	r2, #10
 800c8a6:	4658      	mov	r0, fp
 800c8a8:	f000 faec 	bl	800ce84 <__multadd>
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	dc67      	bgt.n	800c984 <_dtoa_r+0x94c>
 800c8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	dc41      	bgt.n	800c93e <_dtoa_r+0x906>
 800c8ba:	e063      	b.n	800c984 <_dtoa_r+0x94c>
 800c8bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8c2:	e746      	b.n	800c752 <_dtoa_r+0x71a>
 800c8c4:	9b07      	ldr	r3, [sp, #28]
 800c8c6:	1e5c      	subs	r4, r3, #1
 800c8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ca:	42a3      	cmp	r3, r4
 800c8cc:	bfbf      	itttt	lt
 800c8ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c8d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c8d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c8d4:	1ae3      	sublt	r3, r4, r3
 800c8d6:	bfb4      	ite	lt
 800c8d8:	18d2      	addlt	r2, r2, r3
 800c8da:	1b1c      	subge	r4, r3, r4
 800c8dc:	9b07      	ldr	r3, [sp, #28]
 800c8de:	bfbc      	itt	lt
 800c8e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c8e2:	2400      	movlt	r4, #0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bfb5      	itete	lt
 800c8e8:	eba8 0603 	sublt.w	r6, r8, r3
 800c8ec:	9b07      	ldrge	r3, [sp, #28]
 800c8ee:	2300      	movlt	r3, #0
 800c8f0:	4646      	movge	r6, r8
 800c8f2:	e730      	b.n	800c756 <_dtoa_r+0x71e>
 800c8f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c8f8:	4646      	mov	r6, r8
 800c8fa:	e735      	b.n	800c768 <_dtoa_r+0x730>
 800c8fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8fe:	e75c      	b.n	800c7ba <_dtoa_r+0x782>
 800c900:	2300      	movs	r3, #0
 800c902:	e788      	b.n	800c816 <_dtoa_r+0x7de>
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	40240000 	.word	0x40240000
 800c90c:	40140000 	.word	0x40140000
 800c910:	9b02      	ldr	r3, [sp, #8]
 800c912:	e780      	b.n	800c816 <_dtoa_r+0x7de>
 800c914:	2300      	movs	r3, #0
 800c916:	930a      	str	r3, [sp, #40]	@ 0x28
 800c918:	e782      	b.n	800c820 <_dtoa_r+0x7e8>
 800c91a:	d099      	beq.n	800c850 <_dtoa_r+0x818>
 800c91c:	9a08      	ldr	r2, [sp, #32]
 800c91e:	331c      	adds	r3, #28
 800c920:	441a      	add	r2, r3
 800c922:	4498      	add	r8, r3
 800c924:	441e      	add	r6, r3
 800c926:	9208      	str	r2, [sp, #32]
 800c928:	e792      	b.n	800c850 <_dtoa_r+0x818>
 800c92a:	4603      	mov	r3, r0
 800c92c:	e7f6      	b.n	800c91c <_dtoa_r+0x8e4>
 800c92e:	9b07      	ldr	r3, [sp, #28]
 800c930:	9704      	str	r7, [sp, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	dc20      	bgt.n	800c978 <_dtoa_r+0x940>
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	dd1e      	ble.n	800c97c <_dtoa_r+0x944>
 800c93e:	9b00      	ldr	r3, [sp, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	f47f aec0 	bne.w	800c6c6 <_dtoa_r+0x68e>
 800c946:	4621      	mov	r1, r4
 800c948:	2205      	movs	r2, #5
 800c94a:	4658      	mov	r0, fp
 800c94c:	f000 fa9a 	bl	800ce84 <__multadd>
 800c950:	4601      	mov	r1, r0
 800c952:	4604      	mov	r4, r0
 800c954:	4648      	mov	r0, r9
 800c956:	f000 fcad 	bl	800d2b4 <__mcmp>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f77f aeb3 	ble.w	800c6c6 <_dtoa_r+0x68e>
 800c960:	4656      	mov	r6, sl
 800c962:	2331      	movs	r3, #49	@ 0x31
 800c964:	f806 3b01 	strb.w	r3, [r6], #1
 800c968:	9b04      	ldr	r3, [sp, #16]
 800c96a:	3301      	adds	r3, #1
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	e6ae      	b.n	800c6ce <_dtoa_r+0x696>
 800c970:	9c07      	ldr	r4, [sp, #28]
 800c972:	9704      	str	r7, [sp, #16]
 800c974:	4625      	mov	r5, r4
 800c976:	e7f3      	b.n	800c960 <_dtoa_r+0x928>
 800c978:	9b07      	ldr	r3, [sp, #28]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 8104 	beq.w	800cb8c <_dtoa_r+0xb54>
 800c984:	2e00      	cmp	r6, #0
 800c986:	dd05      	ble.n	800c994 <_dtoa_r+0x95c>
 800c988:	4629      	mov	r1, r5
 800c98a:	4632      	mov	r2, r6
 800c98c:	4658      	mov	r0, fp
 800c98e:	f000 fc25 	bl	800d1dc <__lshift>
 800c992:	4605      	mov	r5, r0
 800c994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c996:	2b00      	cmp	r3, #0
 800c998:	d05a      	beq.n	800ca50 <_dtoa_r+0xa18>
 800c99a:	6869      	ldr	r1, [r5, #4]
 800c99c:	4658      	mov	r0, fp
 800c99e:	f000 fa0f 	bl	800cdc0 <_Balloc>
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	b928      	cbnz	r0, 800c9b2 <_dtoa_r+0x97a>
 800c9a6:	4b84      	ldr	r3, [pc, #528]	@ (800cbb8 <_dtoa_r+0xb80>)
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9ae:	f7ff bb5a 	b.w	800c066 <_dtoa_r+0x2e>
 800c9b2:	692a      	ldr	r2, [r5, #16]
 800c9b4:	3202      	adds	r2, #2
 800c9b6:	0092      	lsls	r2, r2, #2
 800c9b8:	f105 010c 	add.w	r1, r5, #12
 800c9bc:	300c      	adds	r0, #12
 800c9be:	f7ff faa2 	bl	800bf06 <memcpy>
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4658      	mov	r0, fp
 800c9c8:	f000 fc08 	bl	800d1dc <__lshift>
 800c9cc:	f10a 0301 	add.w	r3, sl, #1
 800c9d0:	9307      	str	r3, [sp, #28]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	4453      	add	r3, sl
 800c9d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9d8:	9b02      	ldr	r3, [sp, #8]
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	462f      	mov	r7, r5
 800c9e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	9b07      	ldr	r3, [sp, #28]
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	4648      	mov	r0, r9
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	f7ff fa98 	bl	800bf22 <quorem>
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	9002      	str	r0, [sp, #8]
 800c9f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9fa:	4648      	mov	r0, r9
 800c9fc:	f000 fc5a 	bl	800d2b4 <__mcmp>
 800ca00:	462a      	mov	r2, r5
 800ca02:	9008      	str	r0, [sp, #32]
 800ca04:	4621      	mov	r1, r4
 800ca06:	4658      	mov	r0, fp
 800ca08:	f000 fc70 	bl	800d2ec <__mdiff>
 800ca0c:	68c2      	ldr	r2, [r0, #12]
 800ca0e:	4606      	mov	r6, r0
 800ca10:	bb02      	cbnz	r2, 800ca54 <_dtoa_r+0xa1c>
 800ca12:	4601      	mov	r1, r0
 800ca14:	4648      	mov	r0, r9
 800ca16:	f000 fc4d 	bl	800d2b4 <__mcmp>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4658      	mov	r0, fp
 800ca20:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca22:	f000 fa0d 	bl	800ce40 <_Bfree>
 800ca26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca2a:	9e07      	ldr	r6, [sp, #28]
 800ca2c:	ea43 0102 	orr.w	r1, r3, r2
 800ca30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca32:	4319      	orrs	r1, r3
 800ca34:	d110      	bne.n	800ca58 <_dtoa_r+0xa20>
 800ca36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca3a:	d029      	beq.n	800ca90 <_dtoa_r+0xa58>
 800ca3c:	9b08      	ldr	r3, [sp, #32]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd02      	ble.n	800ca48 <_dtoa_r+0xa10>
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca48:	9b00      	ldr	r3, [sp, #0]
 800ca4a:	f883 8000 	strb.w	r8, [r3]
 800ca4e:	e63f      	b.n	800c6d0 <_dtoa_r+0x698>
 800ca50:	4628      	mov	r0, r5
 800ca52:	e7bb      	b.n	800c9cc <_dtoa_r+0x994>
 800ca54:	2201      	movs	r2, #1
 800ca56:	e7e1      	b.n	800ca1c <_dtoa_r+0x9e4>
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db04      	blt.n	800ca68 <_dtoa_r+0xa30>
 800ca5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca60:	430b      	orrs	r3, r1
 800ca62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca64:	430b      	orrs	r3, r1
 800ca66:	d120      	bne.n	800caaa <_dtoa_r+0xa72>
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	dded      	ble.n	800ca48 <_dtoa_r+0xa10>
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4658      	mov	r0, fp
 800ca72:	f000 fbb3 	bl	800d1dc <__lshift>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4681      	mov	r9, r0
 800ca7a:	f000 fc1b 	bl	800d2b4 <__mcmp>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	dc03      	bgt.n	800ca8a <_dtoa_r+0xa52>
 800ca82:	d1e1      	bne.n	800ca48 <_dtoa_r+0xa10>
 800ca84:	f018 0f01 	tst.w	r8, #1
 800ca88:	d0de      	beq.n	800ca48 <_dtoa_r+0xa10>
 800ca8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca8e:	d1d8      	bne.n	800ca42 <_dtoa_r+0xa0a>
 800ca90:	9a00      	ldr	r2, [sp, #0]
 800ca92:	2339      	movs	r3, #57	@ 0x39
 800ca94:	7013      	strb	r3, [r2, #0]
 800ca96:	4633      	mov	r3, r6
 800ca98:	461e      	mov	r6, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800caa0:	2a39      	cmp	r2, #57	@ 0x39
 800caa2:	d052      	beq.n	800cb4a <_dtoa_r+0xb12>
 800caa4:	3201      	adds	r2, #1
 800caa6:	701a      	strb	r2, [r3, #0]
 800caa8:	e612      	b.n	800c6d0 <_dtoa_r+0x698>
 800caaa:	2a00      	cmp	r2, #0
 800caac:	dd07      	ble.n	800cabe <_dtoa_r+0xa86>
 800caae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cab2:	d0ed      	beq.n	800ca90 <_dtoa_r+0xa58>
 800cab4:	9a00      	ldr	r2, [sp, #0]
 800cab6:	f108 0301 	add.w	r3, r8, #1
 800caba:	7013      	strb	r3, [r2, #0]
 800cabc:	e608      	b.n	800c6d0 <_dtoa_r+0x698>
 800cabe:	9b07      	ldr	r3, [sp, #28]
 800cac0:	9a07      	ldr	r2, [sp, #28]
 800cac2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cac8:	4293      	cmp	r3, r2
 800caca:	d028      	beq.n	800cb1e <_dtoa_r+0xae6>
 800cacc:	4649      	mov	r1, r9
 800cace:	2300      	movs	r3, #0
 800cad0:	220a      	movs	r2, #10
 800cad2:	4658      	mov	r0, fp
 800cad4:	f000 f9d6 	bl	800ce84 <__multadd>
 800cad8:	42af      	cmp	r7, r5
 800cada:	4681      	mov	r9, r0
 800cadc:	f04f 0300 	mov.w	r3, #0
 800cae0:	f04f 020a 	mov.w	r2, #10
 800cae4:	4639      	mov	r1, r7
 800cae6:	4658      	mov	r0, fp
 800cae8:	d107      	bne.n	800cafa <_dtoa_r+0xac2>
 800caea:	f000 f9cb 	bl	800ce84 <__multadd>
 800caee:	4607      	mov	r7, r0
 800caf0:	4605      	mov	r5, r0
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	3301      	adds	r3, #1
 800caf6:	9307      	str	r3, [sp, #28]
 800caf8:	e774      	b.n	800c9e4 <_dtoa_r+0x9ac>
 800cafa:	f000 f9c3 	bl	800ce84 <__multadd>
 800cafe:	4629      	mov	r1, r5
 800cb00:	4607      	mov	r7, r0
 800cb02:	2300      	movs	r3, #0
 800cb04:	220a      	movs	r2, #10
 800cb06:	4658      	mov	r0, fp
 800cb08:	f000 f9bc 	bl	800ce84 <__multadd>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	e7f0      	b.n	800caf2 <_dtoa_r+0xaba>
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	bfcc      	ite	gt
 800cb16:	461e      	movgt	r6, r3
 800cb18:	2601      	movle	r6, #1
 800cb1a:	4456      	add	r6, sl
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	4649      	mov	r1, r9
 800cb20:	2201      	movs	r2, #1
 800cb22:	4658      	mov	r0, fp
 800cb24:	f000 fb5a 	bl	800d1dc <__lshift>
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4681      	mov	r9, r0
 800cb2c:	f000 fbc2 	bl	800d2b4 <__mcmp>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	dcb0      	bgt.n	800ca96 <_dtoa_r+0xa5e>
 800cb34:	d102      	bne.n	800cb3c <_dtoa_r+0xb04>
 800cb36:	f018 0f01 	tst.w	r8, #1
 800cb3a:	d1ac      	bne.n	800ca96 <_dtoa_r+0xa5e>
 800cb3c:	4633      	mov	r3, r6
 800cb3e:	461e      	mov	r6, r3
 800cb40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb44:	2a30      	cmp	r2, #48	@ 0x30
 800cb46:	d0fa      	beq.n	800cb3e <_dtoa_r+0xb06>
 800cb48:	e5c2      	b.n	800c6d0 <_dtoa_r+0x698>
 800cb4a:	459a      	cmp	sl, r3
 800cb4c:	d1a4      	bne.n	800ca98 <_dtoa_r+0xa60>
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	3301      	adds	r3, #1
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	2331      	movs	r3, #49	@ 0x31
 800cb56:	f88a 3000 	strb.w	r3, [sl]
 800cb5a:	e5b9      	b.n	800c6d0 <_dtoa_r+0x698>
 800cb5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cbbc <_dtoa_r+0xb84>
 800cb62:	b11b      	cbz	r3, 800cb6c <_dtoa_r+0xb34>
 800cb64:	f10a 0308 	add.w	r3, sl, #8
 800cb68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	b019      	add	sp, #100	@ 0x64
 800cb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	f77f ae37 	ble.w	800c7ea <_dtoa_r+0x7b2>
 800cb7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb80:	2001      	movs	r0, #1
 800cb82:	e655      	b.n	800c830 <_dtoa_r+0x7f8>
 800cb84:	9b00      	ldr	r3, [sp, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f77f aed6 	ble.w	800c938 <_dtoa_r+0x900>
 800cb8c:	4656      	mov	r6, sl
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4648      	mov	r0, r9
 800cb92:	f7ff f9c6 	bl	800bf22 <quorem>
 800cb96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb9a:	f806 8b01 	strb.w	r8, [r6], #1
 800cb9e:	9b00      	ldr	r3, [sp, #0]
 800cba0:	eba6 020a 	sub.w	r2, r6, sl
 800cba4:	4293      	cmp	r3, r2
 800cba6:	ddb3      	ble.n	800cb10 <_dtoa_r+0xad8>
 800cba8:	4649      	mov	r1, r9
 800cbaa:	2300      	movs	r3, #0
 800cbac:	220a      	movs	r2, #10
 800cbae:	4658      	mov	r0, fp
 800cbb0:	f000 f968 	bl	800ce84 <__multadd>
 800cbb4:	4681      	mov	r9, r0
 800cbb6:	e7ea      	b.n	800cb8e <_dtoa_r+0xb56>
 800cbb8:	0800e394 	.word	0x0800e394
 800cbbc:	0800e318 	.word	0x0800e318

0800cbc0 <_free_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	d041      	beq.n	800cc4c <_free_r+0x8c>
 800cbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbcc:	1f0c      	subs	r4, r1, #4
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	bfb8      	it	lt
 800cbd2:	18e4      	addlt	r4, r4, r3
 800cbd4:	f000 f8e8 	bl	800cda8 <__malloc_lock>
 800cbd8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc50 <_free_r+0x90>)
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	b933      	cbnz	r3, 800cbec <_free_r+0x2c>
 800cbde:	6063      	str	r3, [r4, #4]
 800cbe0:	6014      	str	r4, [r2, #0]
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe8:	f000 b8e4 	b.w	800cdb4 <__malloc_unlock>
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d908      	bls.n	800cc02 <_free_r+0x42>
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	1821      	adds	r1, r4, r0
 800cbf4:	428b      	cmp	r3, r1
 800cbf6:	bf01      	itttt	eq
 800cbf8:	6819      	ldreq	r1, [r3, #0]
 800cbfa:	685b      	ldreq	r3, [r3, #4]
 800cbfc:	1809      	addeq	r1, r1, r0
 800cbfe:	6021      	streq	r1, [r4, #0]
 800cc00:	e7ed      	b.n	800cbde <_free_r+0x1e>
 800cc02:	461a      	mov	r2, r3
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	b10b      	cbz	r3, 800cc0c <_free_r+0x4c>
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	d9fa      	bls.n	800cc02 <_free_r+0x42>
 800cc0c:	6811      	ldr	r1, [r2, #0]
 800cc0e:	1850      	adds	r0, r2, r1
 800cc10:	42a0      	cmp	r0, r4
 800cc12:	d10b      	bne.n	800cc2c <_free_r+0x6c>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	4401      	add	r1, r0
 800cc18:	1850      	adds	r0, r2, r1
 800cc1a:	4283      	cmp	r3, r0
 800cc1c:	6011      	str	r1, [r2, #0]
 800cc1e:	d1e0      	bne.n	800cbe2 <_free_r+0x22>
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	6053      	str	r3, [r2, #4]
 800cc26:	4408      	add	r0, r1
 800cc28:	6010      	str	r0, [r2, #0]
 800cc2a:	e7da      	b.n	800cbe2 <_free_r+0x22>
 800cc2c:	d902      	bls.n	800cc34 <_free_r+0x74>
 800cc2e:	230c      	movs	r3, #12
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	e7d6      	b.n	800cbe2 <_free_r+0x22>
 800cc34:	6820      	ldr	r0, [r4, #0]
 800cc36:	1821      	adds	r1, r4, r0
 800cc38:	428b      	cmp	r3, r1
 800cc3a:	bf04      	itt	eq
 800cc3c:	6819      	ldreq	r1, [r3, #0]
 800cc3e:	685b      	ldreq	r3, [r3, #4]
 800cc40:	6063      	str	r3, [r4, #4]
 800cc42:	bf04      	itt	eq
 800cc44:	1809      	addeq	r1, r1, r0
 800cc46:	6021      	streq	r1, [r4, #0]
 800cc48:	6054      	str	r4, [r2, #4]
 800cc4a:	e7ca      	b.n	800cbe2 <_free_r+0x22>
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	20005648 	.word	0x20005648

0800cc54 <malloc>:
 800cc54:	4b02      	ldr	r3, [pc, #8]	@ (800cc60 <malloc+0xc>)
 800cc56:	4601      	mov	r1, r0
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	f000 b825 	b.w	800cca8 <_malloc_r>
 800cc5e:	bf00      	nop
 800cc60:	2000001c 	.word	0x2000001c

0800cc64 <sbrk_aligned>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	4e0f      	ldr	r6, [pc, #60]	@ (800cca4 <sbrk_aligned+0x40>)
 800cc68:	460c      	mov	r4, r1
 800cc6a:	6831      	ldr	r1, [r6, #0]
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	b911      	cbnz	r1, 800cc76 <sbrk_aligned+0x12>
 800cc70:	f000 fe9a 	bl	800d9a8 <_sbrk_r>
 800cc74:	6030      	str	r0, [r6, #0]
 800cc76:	4621      	mov	r1, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 fe95 	bl	800d9a8 <_sbrk_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d103      	bne.n	800cc8a <sbrk_aligned+0x26>
 800cc82:	f04f 34ff 	mov.w	r4, #4294967295
 800cc86:	4620      	mov	r0, r4
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	1cc4      	adds	r4, r0, #3
 800cc8c:	f024 0403 	bic.w	r4, r4, #3
 800cc90:	42a0      	cmp	r0, r4
 800cc92:	d0f8      	beq.n	800cc86 <sbrk_aligned+0x22>
 800cc94:	1a21      	subs	r1, r4, r0
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 fe86 	bl	800d9a8 <_sbrk_r>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d1f2      	bne.n	800cc86 <sbrk_aligned+0x22>
 800cca0:	e7ef      	b.n	800cc82 <sbrk_aligned+0x1e>
 800cca2:	bf00      	nop
 800cca4:	20005644 	.word	0x20005644

0800cca8 <_malloc_r>:
 800cca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccac:	1ccd      	adds	r5, r1, #3
 800ccae:	f025 0503 	bic.w	r5, r5, #3
 800ccb2:	3508      	adds	r5, #8
 800ccb4:	2d0c      	cmp	r5, #12
 800ccb6:	bf38      	it	cc
 800ccb8:	250c      	movcc	r5, #12
 800ccba:	2d00      	cmp	r5, #0
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	db01      	blt.n	800ccc4 <_malloc_r+0x1c>
 800ccc0:	42a9      	cmp	r1, r5
 800ccc2:	d904      	bls.n	800ccce <_malloc_r+0x26>
 800ccc4:	230c      	movs	r3, #12
 800ccc6:	6033      	str	r3, [r6, #0]
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cda4 <_malloc_r+0xfc>
 800ccd2:	f000 f869 	bl	800cda8 <__malloc_lock>
 800ccd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccda:	461c      	mov	r4, r3
 800ccdc:	bb44      	cbnz	r4, 800cd30 <_malloc_r+0x88>
 800ccde:	4629      	mov	r1, r5
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7ff ffbf 	bl	800cc64 <sbrk_aligned>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	4604      	mov	r4, r0
 800ccea:	d158      	bne.n	800cd9e <_malloc_r+0xf6>
 800ccec:	f8d8 4000 	ldr.w	r4, [r8]
 800ccf0:	4627      	mov	r7, r4
 800ccf2:	2f00      	cmp	r7, #0
 800ccf4:	d143      	bne.n	800cd7e <_malloc_r+0xd6>
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	d04b      	beq.n	800cd92 <_malloc_r+0xea>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	4630      	mov	r0, r6
 800cd00:	eb04 0903 	add.w	r9, r4, r3
 800cd04:	f000 fe50 	bl	800d9a8 <_sbrk_r>
 800cd08:	4581      	cmp	r9, r0
 800cd0a:	d142      	bne.n	800cd92 <_malloc_r+0xea>
 800cd0c:	6821      	ldr	r1, [r4, #0]
 800cd0e:	1a6d      	subs	r5, r5, r1
 800cd10:	4629      	mov	r1, r5
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff ffa6 	bl	800cc64 <sbrk_aligned>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d03a      	beq.n	800cd92 <_malloc_r+0xea>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	442b      	add	r3, r5
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	f8d8 3000 	ldr.w	r3, [r8]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	bb62      	cbnz	r2, 800cd84 <_malloc_r+0xdc>
 800cd2a:	f8c8 7000 	str.w	r7, [r8]
 800cd2e:	e00f      	b.n	800cd50 <_malloc_r+0xa8>
 800cd30:	6822      	ldr	r2, [r4, #0]
 800cd32:	1b52      	subs	r2, r2, r5
 800cd34:	d420      	bmi.n	800cd78 <_malloc_r+0xd0>
 800cd36:	2a0b      	cmp	r2, #11
 800cd38:	d917      	bls.n	800cd6a <_malloc_r+0xc2>
 800cd3a:	1961      	adds	r1, r4, r5
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	6025      	str	r5, [r4, #0]
 800cd40:	bf18      	it	ne
 800cd42:	6059      	strne	r1, [r3, #4]
 800cd44:	6863      	ldr	r3, [r4, #4]
 800cd46:	bf08      	it	eq
 800cd48:	f8c8 1000 	streq.w	r1, [r8]
 800cd4c:	5162      	str	r2, [r4, r5]
 800cd4e:	604b      	str	r3, [r1, #4]
 800cd50:	4630      	mov	r0, r6
 800cd52:	f000 f82f 	bl	800cdb4 <__malloc_unlock>
 800cd56:	f104 000b 	add.w	r0, r4, #11
 800cd5a:	1d23      	adds	r3, r4, #4
 800cd5c:	f020 0007 	bic.w	r0, r0, #7
 800cd60:	1ac2      	subs	r2, r0, r3
 800cd62:	bf1c      	itt	ne
 800cd64:	1a1b      	subne	r3, r3, r0
 800cd66:	50a3      	strne	r3, [r4, r2]
 800cd68:	e7af      	b.n	800ccca <_malloc_r+0x22>
 800cd6a:	6862      	ldr	r2, [r4, #4]
 800cd6c:	42a3      	cmp	r3, r4
 800cd6e:	bf0c      	ite	eq
 800cd70:	f8c8 2000 	streq.w	r2, [r8]
 800cd74:	605a      	strne	r2, [r3, #4]
 800cd76:	e7eb      	b.n	800cd50 <_malloc_r+0xa8>
 800cd78:	4623      	mov	r3, r4
 800cd7a:	6864      	ldr	r4, [r4, #4]
 800cd7c:	e7ae      	b.n	800ccdc <_malloc_r+0x34>
 800cd7e:	463c      	mov	r4, r7
 800cd80:	687f      	ldr	r7, [r7, #4]
 800cd82:	e7b6      	b.n	800ccf2 <_malloc_r+0x4a>
 800cd84:	461a      	mov	r2, r3
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	d1fb      	bne.n	800cd84 <_malloc_r+0xdc>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	6053      	str	r3, [r2, #4]
 800cd90:	e7de      	b.n	800cd50 <_malloc_r+0xa8>
 800cd92:	230c      	movs	r3, #12
 800cd94:	6033      	str	r3, [r6, #0]
 800cd96:	4630      	mov	r0, r6
 800cd98:	f000 f80c 	bl	800cdb4 <__malloc_unlock>
 800cd9c:	e794      	b.n	800ccc8 <_malloc_r+0x20>
 800cd9e:	6005      	str	r5, [r0, #0]
 800cda0:	e7d6      	b.n	800cd50 <_malloc_r+0xa8>
 800cda2:	bf00      	nop
 800cda4:	20005648 	.word	0x20005648

0800cda8 <__malloc_lock>:
 800cda8:	4801      	ldr	r0, [pc, #4]	@ (800cdb0 <__malloc_lock+0x8>)
 800cdaa:	f7ff b8aa 	b.w	800bf02 <__retarget_lock_acquire_recursive>
 800cdae:	bf00      	nop
 800cdb0:	20005640 	.word	0x20005640

0800cdb4 <__malloc_unlock>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	@ (800cdbc <__malloc_unlock+0x8>)
 800cdb6:	f7ff b8a5 	b.w	800bf04 <__retarget_lock_release_recursive>
 800cdba:	bf00      	nop
 800cdbc:	20005640 	.word	0x20005640

0800cdc0 <_Balloc>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	69c6      	ldr	r6, [r0, #28]
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	b976      	cbnz	r6, 800cde8 <_Balloc+0x28>
 800cdca:	2010      	movs	r0, #16
 800cdcc:	f7ff ff42 	bl	800cc54 <malloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	61e0      	str	r0, [r4, #28]
 800cdd4:	b920      	cbnz	r0, 800cde0 <_Balloc+0x20>
 800cdd6:	4b18      	ldr	r3, [pc, #96]	@ (800ce38 <_Balloc+0x78>)
 800cdd8:	4818      	ldr	r0, [pc, #96]	@ (800ce3c <_Balloc+0x7c>)
 800cdda:	216b      	movs	r1, #107	@ 0x6b
 800cddc:	f000 fdf4 	bl	800d9c8 <__assert_func>
 800cde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde4:	6006      	str	r6, [r0, #0]
 800cde6:	60c6      	str	r6, [r0, #12]
 800cde8:	69e6      	ldr	r6, [r4, #28]
 800cdea:	68f3      	ldr	r3, [r6, #12]
 800cdec:	b183      	cbz	r3, 800ce10 <_Balloc+0x50>
 800cdee:	69e3      	ldr	r3, [r4, #28]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdf6:	b9b8      	cbnz	r0, 800ce28 <_Balloc+0x68>
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	fa01 f605 	lsl.w	r6, r1, r5
 800cdfe:	1d72      	adds	r2, r6, #5
 800ce00:	0092      	lsls	r2, r2, #2
 800ce02:	4620      	mov	r0, r4
 800ce04:	f000 fdfe 	bl	800da04 <_calloc_r>
 800ce08:	b160      	cbz	r0, 800ce24 <_Balloc+0x64>
 800ce0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce0e:	e00e      	b.n	800ce2e <_Balloc+0x6e>
 800ce10:	2221      	movs	r2, #33	@ 0x21
 800ce12:	2104      	movs	r1, #4
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fdf5 	bl	800da04 <_calloc_r>
 800ce1a:	69e3      	ldr	r3, [r4, #28]
 800ce1c:	60f0      	str	r0, [r6, #12]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e4      	bne.n	800cdee <_Balloc+0x2e>
 800ce24:	2000      	movs	r0, #0
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	6802      	ldr	r2, [r0, #0]
 800ce2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce34:	e7f7      	b.n	800ce26 <_Balloc+0x66>
 800ce36:	bf00      	nop
 800ce38:	0800e325 	.word	0x0800e325
 800ce3c:	0800e3a5 	.word	0x0800e3a5

0800ce40 <_Bfree>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	69c6      	ldr	r6, [r0, #28]
 800ce44:	4605      	mov	r5, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	b976      	cbnz	r6, 800ce68 <_Bfree+0x28>
 800ce4a:	2010      	movs	r0, #16
 800ce4c:	f7ff ff02 	bl	800cc54 <malloc>
 800ce50:	4602      	mov	r2, r0
 800ce52:	61e8      	str	r0, [r5, #28]
 800ce54:	b920      	cbnz	r0, 800ce60 <_Bfree+0x20>
 800ce56:	4b09      	ldr	r3, [pc, #36]	@ (800ce7c <_Bfree+0x3c>)
 800ce58:	4809      	ldr	r0, [pc, #36]	@ (800ce80 <_Bfree+0x40>)
 800ce5a:	218f      	movs	r1, #143	@ 0x8f
 800ce5c:	f000 fdb4 	bl	800d9c8 <__assert_func>
 800ce60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce64:	6006      	str	r6, [r0, #0]
 800ce66:	60c6      	str	r6, [r0, #12]
 800ce68:	b13c      	cbz	r4, 800ce7a <_Bfree+0x3a>
 800ce6a:	69eb      	ldr	r3, [r5, #28]
 800ce6c:	6862      	ldr	r2, [r4, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce74:	6021      	str	r1, [r4, #0]
 800ce76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	0800e325 	.word	0x0800e325
 800ce80:	0800e3a5 	.word	0x0800e3a5

0800ce84 <__multadd>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	690d      	ldr	r5, [r1, #16]
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	461e      	mov	r6, r3
 800ce90:	f101 0c14 	add.w	ip, r1, #20
 800ce94:	2000      	movs	r0, #0
 800ce96:	f8dc 3000 	ldr.w	r3, [ip]
 800ce9a:	b299      	uxth	r1, r3
 800ce9c:	fb02 6101 	mla	r1, r2, r1, r6
 800cea0:	0c1e      	lsrs	r6, r3, #16
 800cea2:	0c0b      	lsrs	r3, r1, #16
 800cea4:	fb02 3306 	mla	r3, r2, r6, r3
 800cea8:	b289      	uxth	r1, r1
 800ceaa:	3001      	adds	r0, #1
 800ceac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ceb0:	4285      	cmp	r5, r0
 800ceb2:	f84c 1b04 	str.w	r1, [ip], #4
 800ceb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceba:	dcec      	bgt.n	800ce96 <__multadd+0x12>
 800cebc:	b30e      	cbz	r6, 800cf02 <__multadd+0x7e>
 800cebe:	68a3      	ldr	r3, [r4, #8]
 800cec0:	42ab      	cmp	r3, r5
 800cec2:	dc19      	bgt.n	800cef8 <__multadd+0x74>
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4638      	mov	r0, r7
 800cec8:	3101      	adds	r1, #1
 800ceca:	f7ff ff79 	bl	800cdc0 <_Balloc>
 800cece:	4680      	mov	r8, r0
 800ced0:	b928      	cbnz	r0, 800cede <__multadd+0x5a>
 800ced2:	4602      	mov	r2, r0
 800ced4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf08 <__multadd+0x84>)
 800ced6:	480d      	ldr	r0, [pc, #52]	@ (800cf0c <__multadd+0x88>)
 800ced8:	21ba      	movs	r1, #186	@ 0xba
 800ceda:	f000 fd75 	bl	800d9c8 <__assert_func>
 800cede:	6922      	ldr	r2, [r4, #16]
 800cee0:	3202      	adds	r2, #2
 800cee2:	f104 010c 	add.w	r1, r4, #12
 800cee6:	0092      	lsls	r2, r2, #2
 800cee8:	300c      	adds	r0, #12
 800ceea:	f7ff f80c 	bl	800bf06 <memcpy>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4638      	mov	r0, r7
 800cef2:	f7ff ffa5 	bl	800ce40 <_Bfree>
 800cef6:	4644      	mov	r4, r8
 800cef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cefc:	3501      	adds	r5, #1
 800cefe:	615e      	str	r6, [r3, #20]
 800cf00:	6125      	str	r5, [r4, #16]
 800cf02:	4620      	mov	r0, r4
 800cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf08:	0800e394 	.word	0x0800e394
 800cf0c:	0800e3a5 	.word	0x0800e3a5

0800cf10 <__hi0bits>:
 800cf10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf14:	4603      	mov	r3, r0
 800cf16:	bf36      	itet	cc
 800cf18:	0403      	lslcc	r3, r0, #16
 800cf1a:	2000      	movcs	r0, #0
 800cf1c:	2010      	movcc	r0, #16
 800cf1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf22:	bf3c      	itt	cc
 800cf24:	021b      	lslcc	r3, r3, #8
 800cf26:	3008      	addcc	r0, #8
 800cf28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf2c:	bf3c      	itt	cc
 800cf2e:	011b      	lslcc	r3, r3, #4
 800cf30:	3004      	addcc	r0, #4
 800cf32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf36:	bf3c      	itt	cc
 800cf38:	009b      	lslcc	r3, r3, #2
 800cf3a:	3002      	addcc	r0, #2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	db05      	blt.n	800cf4c <__hi0bits+0x3c>
 800cf40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf44:	f100 0001 	add.w	r0, r0, #1
 800cf48:	bf08      	it	eq
 800cf4a:	2020      	moveq	r0, #32
 800cf4c:	4770      	bx	lr

0800cf4e <__lo0bits>:
 800cf4e:	6803      	ldr	r3, [r0, #0]
 800cf50:	4602      	mov	r2, r0
 800cf52:	f013 0007 	ands.w	r0, r3, #7
 800cf56:	d00b      	beq.n	800cf70 <__lo0bits+0x22>
 800cf58:	07d9      	lsls	r1, r3, #31
 800cf5a:	d421      	bmi.n	800cfa0 <__lo0bits+0x52>
 800cf5c:	0798      	lsls	r0, r3, #30
 800cf5e:	bf49      	itett	mi
 800cf60:	085b      	lsrmi	r3, r3, #1
 800cf62:	089b      	lsrpl	r3, r3, #2
 800cf64:	2001      	movmi	r0, #1
 800cf66:	6013      	strmi	r3, [r2, #0]
 800cf68:	bf5c      	itt	pl
 800cf6a:	6013      	strpl	r3, [r2, #0]
 800cf6c:	2002      	movpl	r0, #2
 800cf6e:	4770      	bx	lr
 800cf70:	b299      	uxth	r1, r3
 800cf72:	b909      	cbnz	r1, 800cf78 <__lo0bits+0x2a>
 800cf74:	0c1b      	lsrs	r3, r3, #16
 800cf76:	2010      	movs	r0, #16
 800cf78:	b2d9      	uxtb	r1, r3
 800cf7a:	b909      	cbnz	r1, 800cf80 <__lo0bits+0x32>
 800cf7c:	3008      	adds	r0, #8
 800cf7e:	0a1b      	lsrs	r3, r3, #8
 800cf80:	0719      	lsls	r1, r3, #28
 800cf82:	bf04      	itt	eq
 800cf84:	091b      	lsreq	r3, r3, #4
 800cf86:	3004      	addeq	r0, #4
 800cf88:	0799      	lsls	r1, r3, #30
 800cf8a:	bf04      	itt	eq
 800cf8c:	089b      	lsreq	r3, r3, #2
 800cf8e:	3002      	addeq	r0, #2
 800cf90:	07d9      	lsls	r1, r3, #31
 800cf92:	d403      	bmi.n	800cf9c <__lo0bits+0x4e>
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	f100 0001 	add.w	r0, r0, #1
 800cf9a:	d003      	beq.n	800cfa4 <__lo0bits+0x56>
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	4770      	bx	lr
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	4770      	bx	lr
 800cfa4:	2020      	movs	r0, #32
 800cfa6:	4770      	bx	lr

0800cfa8 <__i2b>:
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	460c      	mov	r4, r1
 800cfac:	2101      	movs	r1, #1
 800cfae:	f7ff ff07 	bl	800cdc0 <_Balloc>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	b928      	cbnz	r0, 800cfc2 <__i2b+0x1a>
 800cfb6:	4b05      	ldr	r3, [pc, #20]	@ (800cfcc <__i2b+0x24>)
 800cfb8:	4805      	ldr	r0, [pc, #20]	@ (800cfd0 <__i2b+0x28>)
 800cfba:	f240 1145 	movw	r1, #325	@ 0x145
 800cfbe:	f000 fd03 	bl	800d9c8 <__assert_func>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	6144      	str	r4, [r0, #20]
 800cfc6:	6103      	str	r3, [r0, #16]
 800cfc8:	bd10      	pop	{r4, pc}
 800cfca:	bf00      	nop
 800cfcc:	0800e394 	.word	0x0800e394
 800cfd0:	0800e3a5 	.word	0x0800e3a5

0800cfd4 <__multiply>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	4614      	mov	r4, r2
 800cfda:	690a      	ldr	r2, [r1, #16]
 800cfdc:	6923      	ldr	r3, [r4, #16]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	bfa8      	it	ge
 800cfe2:	4623      	movge	r3, r4
 800cfe4:	460f      	mov	r7, r1
 800cfe6:	bfa4      	itt	ge
 800cfe8:	460c      	movge	r4, r1
 800cfea:	461f      	movge	r7, r3
 800cfec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cff0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cff4:	68a3      	ldr	r3, [r4, #8]
 800cff6:	6861      	ldr	r1, [r4, #4]
 800cff8:	eb0a 0609 	add.w	r6, sl, r9
 800cffc:	42b3      	cmp	r3, r6
 800cffe:	b085      	sub	sp, #20
 800d000:	bfb8      	it	lt
 800d002:	3101      	addlt	r1, #1
 800d004:	f7ff fedc 	bl	800cdc0 <_Balloc>
 800d008:	b930      	cbnz	r0, 800d018 <__multiply+0x44>
 800d00a:	4602      	mov	r2, r0
 800d00c:	4b44      	ldr	r3, [pc, #272]	@ (800d120 <__multiply+0x14c>)
 800d00e:	4845      	ldr	r0, [pc, #276]	@ (800d124 <__multiply+0x150>)
 800d010:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d014:	f000 fcd8 	bl	800d9c8 <__assert_func>
 800d018:	f100 0514 	add.w	r5, r0, #20
 800d01c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d020:	462b      	mov	r3, r5
 800d022:	2200      	movs	r2, #0
 800d024:	4543      	cmp	r3, r8
 800d026:	d321      	bcc.n	800d06c <__multiply+0x98>
 800d028:	f107 0114 	add.w	r1, r7, #20
 800d02c:	f104 0214 	add.w	r2, r4, #20
 800d030:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d034:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d038:	9302      	str	r3, [sp, #8]
 800d03a:	1b13      	subs	r3, r2, r4
 800d03c:	3b15      	subs	r3, #21
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	3304      	adds	r3, #4
 800d044:	f104 0715 	add.w	r7, r4, #21
 800d048:	42ba      	cmp	r2, r7
 800d04a:	bf38      	it	cc
 800d04c:	2304      	movcc	r3, #4
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	9b02      	ldr	r3, [sp, #8]
 800d052:	9103      	str	r1, [sp, #12]
 800d054:	428b      	cmp	r3, r1
 800d056:	d80c      	bhi.n	800d072 <__multiply+0x9e>
 800d058:	2e00      	cmp	r6, #0
 800d05a:	dd03      	ble.n	800d064 <__multiply+0x90>
 800d05c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d060:	2b00      	cmp	r3, #0
 800d062:	d05b      	beq.n	800d11c <__multiply+0x148>
 800d064:	6106      	str	r6, [r0, #16]
 800d066:	b005      	add	sp, #20
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	f843 2b04 	str.w	r2, [r3], #4
 800d070:	e7d8      	b.n	800d024 <__multiply+0x50>
 800d072:	f8b1 a000 	ldrh.w	sl, [r1]
 800d076:	f1ba 0f00 	cmp.w	sl, #0
 800d07a:	d024      	beq.n	800d0c6 <__multiply+0xf2>
 800d07c:	f104 0e14 	add.w	lr, r4, #20
 800d080:	46a9      	mov	r9, r5
 800d082:	f04f 0c00 	mov.w	ip, #0
 800d086:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d08a:	f8d9 3000 	ldr.w	r3, [r9]
 800d08e:	fa1f fb87 	uxth.w	fp, r7
 800d092:	b29b      	uxth	r3, r3
 800d094:	fb0a 330b 	mla	r3, sl, fp, r3
 800d098:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d09c:	f8d9 7000 	ldr.w	r7, [r9]
 800d0a0:	4463      	add	r3, ip
 800d0a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d0aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0b4:	4572      	cmp	r2, lr
 800d0b6:	f849 3b04 	str.w	r3, [r9], #4
 800d0ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0be:	d8e2      	bhi.n	800d086 <__multiply+0xb2>
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	f845 c003 	str.w	ip, [r5, r3]
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0cc:	3104      	adds	r1, #4
 800d0ce:	f1b9 0f00 	cmp.w	r9, #0
 800d0d2:	d021      	beq.n	800d118 <__multiply+0x144>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	f104 0c14 	add.w	ip, r4, #20
 800d0da:	46ae      	mov	lr, r5
 800d0dc:	f04f 0a00 	mov.w	sl, #0
 800d0e0:	f8bc b000 	ldrh.w	fp, [ip]
 800d0e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d0e8:	fb09 770b 	mla	r7, r9, fp, r7
 800d0ec:	4457      	add	r7, sl
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0f4:	f84e 3b04 	str.w	r3, [lr], #4
 800d0f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d100:	f8be 3000 	ldrh.w	r3, [lr]
 800d104:	fb09 330a 	mla	r3, r9, sl, r3
 800d108:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d10c:	4562      	cmp	r2, ip
 800d10e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d112:	d8e5      	bhi.n	800d0e0 <__multiply+0x10c>
 800d114:	9f01      	ldr	r7, [sp, #4]
 800d116:	51eb      	str	r3, [r5, r7]
 800d118:	3504      	adds	r5, #4
 800d11a:	e799      	b.n	800d050 <__multiply+0x7c>
 800d11c:	3e01      	subs	r6, #1
 800d11e:	e79b      	b.n	800d058 <__multiply+0x84>
 800d120:	0800e394 	.word	0x0800e394
 800d124:	0800e3a5 	.word	0x0800e3a5

0800d128 <__pow5mult>:
 800d128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d12c:	4615      	mov	r5, r2
 800d12e:	f012 0203 	ands.w	r2, r2, #3
 800d132:	4607      	mov	r7, r0
 800d134:	460e      	mov	r6, r1
 800d136:	d007      	beq.n	800d148 <__pow5mult+0x20>
 800d138:	4c25      	ldr	r4, [pc, #148]	@ (800d1d0 <__pow5mult+0xa8>)
 800d13a:	3a01      	subs	r2, #1
 800d13c:	2300      	movs	r3, #0
 800d13e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d142:	f7ff fe9f 	bl	800ce84 <__multadd>
 800d146:	4606      	mov	r6, r0
 800d148:	10ad      	asrs	r5, r5, #2
 800d14a:	d03d      	beq.n	800d1c8 <__pow5mult+0xa0>
 800d14c:	69fc      	ldr	r4, [r7, #28]
 800d14e:	b97c      	cbnz	r4, 800d170 <__pow5mult+0x48>
 800d150:	2010      	movs	r0, #16
 800d152:	f7ff fd7f 	bl	800cc54 <malloc>
 800d156:	4602      	mov	r2, r0
 800d158:	61f8      	str	r0, [r7, #28]
 800d15a:	b928      	cbnz	r0, 800d168 <__pow5mult+0x40>
 800d15c:	4b1d      	ldr	r3, [pc, #116]	@ (800d1d4 <__pow5mult+0xac>)
 800d15e:	481e      	ldr	r0, [pc, #120]	@ (800d1d8 <__pow5mult+0xb0>)
 800d160:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d164:	f000 fc30 	bl	800d9c8 <__assert_func>
 800d168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d16c:	6004      	str	r4, [r0, #0]
 800d16e:	60c4      	str	r4, [r0, #12]
 800d170:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d178:	b94c      	cbnz	r4, 800d18e <__pow5mult+0x66>
 800d17a:	f240 2171 	movw	r1, #625	@ 0x271
 800d17e:	4638      	mov	r0, r7
 800d180:	f7ff ff12 	bl	800cfa8 <__i2b>
 800d184:	2300      	movs	r3, #0
 800d186:	f8c8 0008 	str.w	r0, [r8, #8]
 800d18a:	4604      	mov	r4, r0
 800d18c:	6003      	str	r3, [r0, #0]
 800d18e:	f04f 0900 	mov.w	r9, #0
 800d192:	07eb      	lsls	r3, r5, #31
 800d194:	d50a      	bpl.n	800d1ac <__pow5mult+0x84>
 800d196:	4631      	mov	r1, r6
 800d198:	4622      	mov	r2, r4
 800d19a:	4638      	mov	r0, r7
 800d19c:	f7ff ff1a 	bl	800cfd4 <__multiply>
 800d1a0:	4631      	mov	r1, r6
 800d1a2:	4680      	mov	r8, r0
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f7ff fe4b 	bl	800ce40 <_Bfree>
 800d1aa:	4646      	mov	r6, r8
 800d1ac:	106d      	asrs	r5, r5, #1
 800d1ae:	d00b      	beq.n	800d1c8 <__pow5mult+0xa0>
 800d1b0:	6820      	ldr	r0, [r4, #0]
 800d1b2:	b938      	cbnz	r0, 800d1c4 <__pow5mult+0x9c>
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f7ff ff0b 	bl	800cfd4 <__multiply>
 800d1be:	6020      	str	r0, [r4, #0]
 800d1c0:	f8c0 9000 	str.w	r9, [r0]
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	e7e4      	b.n	800d192 <__pow5mult+0x6a>
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	bf00      	nop
 800d1d0:	0800e400 	.word	0x0800e400
 800d1d4:	0800e325 	.word	0x0800e325
 800d1d8:	0800e3a5 	.word	0x0800e3a5

0800d1dc <__lshift>:
 800d1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	6849      	ldr	r1, [r1, #4]
 800d1e4:	6923      	ldr	r3, [r4, #16]
 800d1e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	4691      	mov	r9, r2
 800d1f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1f4:	f108 0601 	add.w	r6, r8, #1
 800d1f8:	42b3      	cmp	r3, r6
 800d1fa:	db0b      	blt.n	800d214 <__lshift+0x38>
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7ff fddf 	bl	800cdc0 <_Balloc>
 800d202:	4605      	mov	r5, r0
 800d204:	b948      	cbnz	r0, 800d21a <__lshift+0x3e>
 800d206:	4602      	mov	r2, r0
 800d208:	4b28      	ldr	r3, [pc, #160]	@ (800d2ac <__lshift+0xd0>)
 800d20a:	4829      	ldr	r0, [pc, #164]	@ (800d2b0 <__lshift+0xd4>)
 800d20c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d210:	f000 fbda 	bl	800d9c8 <__assert_func>
 800d214:	3101      	adds	r1, #1
 800d216:	005b      	lsls	r3, r3, #1
 800d218:	e7ee      	b.n	800d1f8 <__lshift+0x1c>
 800d21a:	2300      	movs	r3, #0
 800d21c:	f100 0114 	add.w	r1, r0, #20
 800d220:	f100 0210 	add.w	r2, r0, #16
 800d224:	4618      	mov	r0, r3
 800d226:	4553      	cmp	r3, sl
 800d228:	db33      	blt.n	800d292 <__lshift+0xb6>
 800d22a:	6920      	ldr	r0, [r4, #16]
 800d22c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d230:	f104 0314 	add.w	r3, r4, #20
 800d234:	f019 091f 	ands.w	r9, r9, #31
 800d238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d23c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d240:	d02b      	beq.n	800d29a <__lshift+0xbe>
 800d242:	f1c9 0e20 	rsb	lr, r9, #32
 800d246:	468a      	mov	sl, r1
 800d248:	2200      	movs	r2, #0
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	fa00 f009 	lsl.w	r0, r0, r9
 800d250:	4310      	orrs	r0, r2
 800d252:	f84a 0b04 	str.w	r0, [sl], #4
 800d256:	f853 2b04 	ldr.w	r2, [r3], #4
 800d25a:	459c      	cmp	ip, r3
 800d25c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d260:	d8f3      	bhi.n	800d24a <__lshift+0x6e>
 800d262:	ebac 0304 	sub.w	r3, ip, r4
 800d266:	3b15      	subs	r3, #21
 800d268:	f023 0303 	bic.w	r3, r3, #3
 800d26c:	3304      	adds	r3, #4
 800d26e:	f104 0015 	add.w	r0, r4, #21
 800d272:	4584      	cmp	ip, r0
 800d274:	bf38      	it	cc
 800d276:	2304      	movcc	r3, #4
 800d278:	50ca      	str	r2, [r1, r3]
 800d27a:	b10a      	cbz	r2, 800d280 <__lshift+0xa4>
 800d27c:	f108 0602 	add.w	r6, r8, #2
 800d280:	3e01      	subs	r6, #1
 800d282:	4638      	mov	r0, r7
 800d284:	612e      	str	r6, [r5, #16]
 800d286:	4621      	mov	r1, r4
 800d288:	f7ff fdda 	bl	800ce40 <_Bfree>
 800d28c:	4628      	mov	r0, r5
 800d28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d292:	f842 0f04 	str.w	r0, [r2, #4]!
 800d296:	3301      	adds	r3, #1
 800d298:	e7c5      	b.n	800d226 <__lshift+0x4a>
 800d29a:	3904      	subs	r1, #4
 800d29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2a4:	459c      	cmp	ip, r3
 800d2a6:	d8f9      	bhi.n	800d29c <__lshift+0xc0>
 800d2a8:	e7ea      	b.n	800d280 <__lshift+0xa4>
 800d2aa:	bf00      	nop
 800d2ac:	0800e394 	.word	0x0800e394
 800d2b0:	0800e3a5 	.word	0x0800e3a5

0800d2b4 <__mcmp>:
 800d2b4:	690a      	ldr	r2, [r1, #16]
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6900      	ldr	r0, [r0, #16]
 800d2ba:	1a80      	subs	r0, r0, r2
 800d2bc:	b530      	push	{r4, r5, lr}
 800d2be:	d10e      	bne.n	800d2de <__mcmp+0x2a>
 800d2c0:	3314      	adds	r3, #20
 800d2c2:	3114      	adds	r1, #20
 800d2c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2d4:	4295      	cmp	r5, r2
 800d2d6:	d003      	beq.n	800d2e0 <__mcmp+0x2c>
 800d2d8:	d205      	bcs.n	800d2e6 <__mcmp+0x32>
 800d2da:	f04f 30ff 	mov.w	r0, #4294967295
 800d2de:	bd30      	pop	{r4, r5, pc}
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	d3f3      	bcc.n	800d2cc <__mcmp+0x18>
 800d2e4:	e7fb      	b.n	800d2de <__mcmp+0x2a>
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	e7f9      	b.n	800d2de <__mcmp+0x2a>
	...

0800d2ec <__mdiff>:
 800d2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	4689      	mov	r9, r1
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4648      	mov	r0, r9
 800d2f8:	4614      	mov	r4, r2
 800d2fa:	f7ff ffdb 	bl	800d2b4 <__mcmp>
 800d2fe:	1e05      	subs	r5, r0, #0
 800d300:	d112      	bne.n	800d328 <__mdiff+0x3c>
 800d302:	4629      	mov	r1, r5
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff fd5b 	bl	800cdc0 <_Balloc>
 800d30a:	4602      	mov	r2, r0
 800d30c:	b928      	cbnz	r0, 800d31a <__mdiff+0x2e>
 800d30e:	4b3f      	ldr	r3, [pc, #252]	@ (800d40c <__mdiff+0x120>)
 800d310:	f240 2137 	movw	r1, #567	@ 0x237
 800d314:	483e      	ldr	r0, [pc, #248]	@ (800d410 <__mdiff+0x124>)
 800d316:	f000 fb57 	bl	800d9c8 <__assert_func>
 800d31a:	2301      	movs	r3, #1
 800d31c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d320:	4610      	mov	r0, r2
 800d322:	b003      	add	sp, #12
 800d324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d328:	bfbc      	itt	lt
 800d32a:	464b      	movlt	r3, r9
 800d32c:	46a1      	movlt	r9, r4
 800d32e:	4630      	mov	r0, r6
 800d330:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d334:	bfba      	itte	lt
 800d336:	461c      	movlt	r4, r3
 800d338:	2501      	movlt	r5, #1
 800d33a:	2500      	movge	r5, #0
 800d33c:	f7ff fd40 	bl	800cdc0 <_Balloc>
 800d340:	4602      	mov	r2, r0
 800d342:	b918      	cbnz	r0, 800d34c <__mdiff+0x60>
 800d344:	4b31      	ldr	r3, [pc, #196]	@ (800d40c <__mdiff+0x120>)
 800d346:	f240 2145 	movw	r1, #581	@ 0x245
 800d34a:	e7e3      	b.n	800d314 <__mdiff+0x28>
 800d34c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d350:	6926      	ldr	r6, [r4, #16]
 800d352:	60c5      	str	r5, [r0, #12]
 800d354:	f109 0310 	add.w	r3, r9, #16
 800d358:	f109 0514 	add.w	r5, r9, #20
 800d35c:	f104 0e14 	add.w	lr, r4, #20
 800d360:	f100 0b14 	add.w	fp, r0, #20
 800d364:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d368:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	46d9      	mov	r9, fp
 800d370:	f04f 0c00 	mov.w	ip, #0
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d37a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	fa1f f38a 	uxth.w	r3, sl
 800d384:	4619      	mov	r1, r3
 800d386:	b283      	uxth	r3, r0
 800d388:	1acb      	subs	r3, r1, r3
 800d38a:	0c00      	lsrs	r0, r0, #16
 800d38c:	4463      	add	r3, ip
 800d38e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d392:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d396:	b29b      	uxth	r3, r3
 800d398:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d39c:	4576      	cmp	r6, lr
 800d39e:	f849 3b04 	str.w	r3, [r9], #4
 800d3a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3a6:	d8e5      	bhi.n	800d374 <__mdiff+0x88>
 800d3a8:	1b33      	subs	r3, r6, r4
 800d3aa:	3b15      	subs	r3, #21
 800d3ac:	f023 0303 	bic.w	r3, r3, #3
 800d3b0:	3415      	adds	r4, #21
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	42a6      	cmp	r6, r4
 800d3b6:	bf38      	it	cc
 800d3b8:	2304      	movcc	r3, #4
 800d3ba:	441d      	add	r5, r3
 800d3bc:	445b      	add	r3, fp
 800d3be:	461e      	mov	r6, r3
 800d3c0:	462c      	mov	r4, r5
 800d3c2:	4544      	cmp	r4, r8
 800d3c4:	d30e      	bcc.n	800d3e4 <__mdiff+0xf8>
 800d3c6:	f108 0103 	add.w	r1, r8, #3
 800d3ca:	1b49      	subs	r1, r1, r5
 800d3cc:	f021 0103 	bic.w	r1, r1, #3
 800d3d0:	3d03      	subs	r5, #3
 800d3d2:	45a8      	cmp	r8, r5
 800d3d4:	bf38      	it	cc
 800d3d6:	2100      	movcc	r1, #0
 800d3d8:	440b      	add	r3, r1
 800d3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3de:	b191      	cbz	r1, 800d406 <__mdiff+0x11a>
 800d3e0:	6117      	str	r7, [r2, #16]
 800d3e2:	e79d      	b.n	800d320 <__mdiff+0x34>
 800d3e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3e8:	46e6      	mov	lr, ip
 800d3ea:	0c08      	lsrs	r0, r1, #16
 800d3ec:	fa1c fc81 	uxtah	ip, ip, r1
 800d3f0:	4471      	add	r1, lr
 800d3f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3f6:	b289      	uxth	r1, r1
 800d3f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3fc:	f846 1b04 	str.w	r1, [r6], #4
 800d400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d404:	e7dd      	b.n	800d3c2 <__mdiff+0xd6>
 800d406:	3f01      	subs	r7, #1
 800d408:	e7e7      	b.n	800d3da <__mdiff+0xee>
 800d40a:	bf00      	nop
 800d40c:	0800e394 	.word	0x0800e394
 800d410:	0800e3a5 	.word	0x0800e3a5

0800d414 <__d2b>:
 800d414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d418:	460f      	mov	r7, r1
 800d41a:	2101      	movs	r1, #1
 800d41c:	ec59 8b10 	vmov	r8, r9, d0
 800d420:	4616      	mov	r6, r2
 800d422:	f7ff fccd 	bl	800cdc0 <_Balloc>
 800d426:	4604      	mov	r4, r0
 800d428:	b930      	cbnz	r0, 800d438 <__d2b+0x24>
 800d42a:	4602      	mov	r2, r0
 800d42c:	4b23      	ldr	r3, [pc, #140]	@ (800d4bc <__d2b+0xa8>)
 800d42e:	4824      	ldr	r0, [pc, #144]	@ (800d4c0 <__d2b+0xac>)
 800d430:	f240 310f 	movw	r1, #783	@ 0x30f
 800d434:	f000 fac8 	bl	800d9c8 <__assert_func>
 800d438:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d43c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d440:	b10d      	cbz	r5, 800d446 <__d2b+0x32>
 800d442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	f1b8 0300 	subs.w	r3, r8, #0
 800d44c:	d023      	beq.n	800d496 <__d2b+0x82>
 800d44e:	4668      	mov	r0, sp
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	f7ff fd7c 	bl	800cf4e <__lo0bits>
 800d456:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d45a:	b1d0      	cbz	r0, 800d492 <__d2b+0x7e>
 800d45c:	f1c0 0320 	rsb	r3, r0, #32
 800d460:	fa02 f303 	lsl.w	r3, r2, r3
 800d464:	430b      	orrs	r3, r1
 800d466:	40c2      	lsrs	r2, r0
 800d468:	6163      	str	r3, [r4, #20]
 800d46a:	9201      	str	r2, [sp, #4]
 800d46c:	9b01      	ldr	r3, [sp, #4]
 800d46e:	61a3      	str	r3, [r4, #24]
 800d470:	2b00      	cmp	r3, #0
 800d472:	bf0c      	ite	eq
 800d474:	2201      	moveq	r2, #1
 800d476:	2202      	movne	r2, #2
 800d478:	6122      	str	r2, [r4, #16]
 800d47a:	b1a5      	cbz	r5, 800d4a6 <__d2b+0x92>
 800d47c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d480:	4405      	add	r5, r0
 800d482:	603d      	str	r5, [r7, #0]
 800d484:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d488:	6030      	str	r0, [r6, #0]
 800d48a:	4620      	mov	r0, r4
 800d48c:	b003      	add	sp, #12
 800d48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d492:	6161      	str	r1, [r4, #20]
 800d494:	e7ea      	b.n	800d46c <__d2b+0x58>
 800d496:	a801      	add	r0, sp, #4
 800d498:	f7ff fd59 	bl	800cf4e <__lo0bits>
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	6163      	str	r3, [r4, #20]
 800d4a0:	3020      	adds	r0, #32
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	e7e8      	b.n	800d478 <__d2b+0x64>
 800d4a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4ae:	6038      	str	r0, [r7, #0]
 800d4b0:	6918      	ldr	r0, [r3, #16]
 800d4b2:	f7ff fd2d 	bl	800cf10 <__hi0bits>
 800d4b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ba:	e7e5      	b.n	800d488 <__d2b+0x74>
 800d4bc:	0800e394 	.word	0x0800e394
 800d4c0:	0800e3a5 	.word	0x0800e3a5

0800d4c4 <__sfputc_r>:
 800d4c4:	6893      	ldr	r3, [r2, #8]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	b410      	push	{r4}
 800d4cc:	6093      	str	r3, [r2, #8]
 800d4ce:	da08      	bge.n	800d4e2 <__sfputc_r+0x1e>
 800d4d0:	6994      	ldr	r4, [r2, #24]
 800d4d2:	42a3      	cmp	r3, r4
 800d4d4:	db01      	blt.n	800d4da <__sfputc_r+0x16>
 800d4d6:	290a      	cmp	r1, #10
 800d4d8:	d103      	bne.n	800d4e2 <__sfputc_r+0x1e>
 800d4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4de:	f7fe bbfe 	b.w	800bcde <__swbuf_r>
 800d4e2:	6813      	ldr	r3, [r2, #0]
 800d4e4:	1c58      	adds	r0, r3, #1
 800d4e6:	6010      	str	r0, [r2, #0]
 800d4e8:	7019      	strb	r1, [r3, #0]
 800d4ea:	4608      	mov	r0, r1
 800d4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <__sfputs_r>:
 800d4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	460f      	mov	r7, r1
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	18d5      	adds	r5, r2, r3
 800d4fc:	42ac      	cmp	r4, r5
 800d4fe:	d101      	bne.n	800d504 <__sfputs_r+0x12>
 800d500:	2000      	movs	r0, #0
 800d502:	e007      	b.n	800d514 <__sfputs_r+0x22>
 800d504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d508:	463a      	mov	r2, r7
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7ff ffda 	bl	800d4c4 <__sfputc_r>
 800d510:	1c43      	adds	r3, r0, #1
 800d512:	d1f3      	bne.n	800d4fc <__sfputs_r+0xa>
 800d514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d518 <_vfiprintf_r>:
 800d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	460d      	mov	r5, r1
 800d51e:	b09d      	sub	sp, #116	@ 0x74
 800d520:	4614      	mov	r4, r2
 800d522:	4698      	mov	r8, r3
 800d524:	4606      	mov	r6, r0
 800d526:	b118      	cbz	r0, 800d530 <_vfiprintf_r+0x18>
 800d528:	6a03      	ldr	r3, [r0, #32]
 800d52a:	b90b      	cbnz	r3, 800d530 <_vfiprintf_r+0x18>
 800d52c:	f7fe faee 	bl	800bb0c <__sinit>
 800d530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d532:	07d9      	lsls	r1, r3, #31
 800d534:	d405      	bmi.n	800d542 <_vfiprintf_r+0x2a>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	059a      	lsls	r2, r3, #22
 800d53a:	d402      	bmi.n	800d542 <_vfiprintf_r+0x2a>
 800d53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d53e:	f7fe fce0 	bl	800bf02 <__retarget_lock_acquire_recursive>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	071b      	lsls	r3, r3, #28
 800d546:	d501      	bpl.n	800d54c <_vfiprintf_r+0x34>
 800d548:	692b      	ldr	r3, [r5, #16]
 800d54a:	b99b      	cbnz	r3, 800d574 <_vfiprintf_r+0x5c>
 800d54c:	4629      	mov	r1, r5
 800d54e:	4630      	mov	r0, r6
 800d550:	f7fe fc04 	bl	800bd5c <__swsetup_r>
 800d554:	b170      	cbz	r0, 800d574 <_vfiprintf_r+0x5c>
 800d556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d558:	07dc      	lsls	r4, r3, #31
 800d55a:	d504      	bpl.n	800d566 <_vfiprintf_r+0x4e>
 800d55c:	f04f 30ff 	mov.w	r0, #4294967295
 800d560:	b01d      	add	sp, #116	@ 0x74
 800d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	0598      	lsls	r0, r3, #22
 800d56a:	d4f7      	bmi.n	800d55c <_vfiprintf_r+0x44>
 800d56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d56e:	f7fe fcc9 	bl	800bf04 <__retarget_lock_release_recursive>
 800d572:	e7f3      	b.n	800d55c <_vfiprintf_r+0x44>
 800d574:	2300      	movs	r3, #0
 800d576:	9309      	str	r3, [sp, #36]	@ 0x24
 800d578:	2320      	movs	r3, #32
 800d57a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d582:	2330      	movs	r3, #48	@ 0x30
 800d584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d734 <_vfiprintf_r+0x21c>
 800d588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d58c:	f04f 0901 	mov.w	r9, #1
 800d590:	4623      	mov	r3, r4
 800d592:	469a      	mov	sl, r3
 800d594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d598:	b10a      	cbz	r2, 800d59e <_vfiprintf_r+0x86>
 800d59a:	2a25      	cmp	r2, #37	@ 0x25
 800d59c:	d1f9      	bne.n	800d592 <_vfiprintf_r+0x7a>
 800d59e:	ebba 0b04 	subs.w	fp, sl, r4
 800d5a2:	d00b      	beq.n	800d5bc <_vfiprintf_r+0xa4>
 800d5a4:	465b      	mov	r3, fp
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff ffa1 	bl	800d4f2 <__sfputs_r>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	f000 80a7 	beq.w	800d704 <_vfiprintf_r+0x1ec>
 800d5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5b8:	445a      	add	r2, fp
 800d5ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 809f 	beq.w	800d704 <_vfiprintf_r+0x1ec>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d0:	f10a 0a01 	add.w	sl, sl, #1
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5de:	4654      	mov	r4, sl
 800d5e0:	2205      	movs	r2, #5
 800d5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e6:	4853      	ldr	r0, [pc, #332]	@ (800d734 <_vfiprintf_r+0x21c>)
 800d5e8:	f7f2 fe1a 	bl	8000220 <memchr>
 800d5ec:	9a04      	ldr	r2, [sp, #16]
 800d5ee:	b9d8      	cbnz	r0, 800d628 <_vfiprintf_r+0x110>
 800d5f0:	06d1      	lsls	r1, r2, #27
 800d5f2:	bf44      	itt	mi
 800d5f4:	2320      	movmi	r3, #32
 800d5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5fa:	0713      	lsls	r3, r2, #28
 800d5fc:	bf44      	itt	mi
 800d5fe:	232b      	movmi	r3, #43	@ 0x2b
 800d600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d604:	f89a 3000 	ldrb.w	r3, [sl]
 800d608:	2b2a      	cmp	r3, #42	@ 0x2a
 800d60a:	d015      	beq.n	800d638 <_vfiprintf_r+0x120>
 800d60c:	9a07      	ldr	r2, [sp, #28]
 800d60e:	4654      	mov	r4, sl
 800d610:	2000      	movs	r0, #0
 800d612:	f04f 0c0a 	mov.w	ip, #10
 800d616:	4621      	mov	r1, r4
 800d618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d61c:	3b30      	subs	r3, #48	@ 0x30
 800d61e:	2b09      	cmp	r3, #9
 800d620:	d94b      	bls.n	800d6ba <_vfiprintf_r+0x1a2>
 800d622:	b1b0      	cbz	r0, 800d652 <_vfiprintf_r+0x13a>
 800d624:	9207      	str	r2, [sp, #28]
 800d626:	e014      	b.n	800d652 <_vfiprintf_r+0x13a>
 800d628:	eba0 0308 	sub.w	r3, r0, r8
 800d62c:	fa09 f303 	lsl.w	r3, r9, r3
 800d630:	4313      	orrs	r3, r2
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	46a2      	mov	sl, r4
 800d636:	e7d2      	b.n	800d5de <_vfiprintf_r+0xc6>
 800d638:	9b03      	ldr	r3, [sp, #12]
 800d63a:	1d19      	adds	r1, r3, #4
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	9103      	str	r1, [sp, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	bfbb      	ittet	lt
 800d644:	425b      	neglt	r3, r3
 800d646:	f042 0202 	orrlt.w	r2, r2, #2
 800d64a:	9307      	strge	r3, [sp, #28]
 800d64c:	9307      	strlt	r3, [sp, #28]
 800d64e:	bfb8      	it	lt
 800d650:	9204      	strlt	r2, [sp, #16]
 800d652:	7823      	ldrb	r3, [r4, #0]
 800d654:	2b2e      	cmp	r3, #46	@ 0x2e
 800d656:	d10a      	bne.n	800d66e <_vfiprintf_r+0x156>
 800d658:	7863      	ldrb	r3, [r4, #1]
 800d65a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d65c:	d132      	bne.n	800d6c4 <_vfiprintf_r+0x1ac>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	1d1a      	adds	r2, r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	9203      	str	r2, [sp, #12]
 800d666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d66a:	3402      	adds	r4, #2
 800d66c:	9305      	str	r3, [sp, #20]
 800d66e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d744 <_vfiprintf_r+0x22c>
 800d672:	7821      	ldrb	r1, [r4, #0]
 800d674:	2203      	movs	r2, #3
 800d676:	4650      	mov	r0, sl
 800d678:	f7f2 fdd2 	bl	8000220 <memchr>
 800d67c:	b138      	cbz	r0, 800d68e <_vfiprintf_r+0x176>
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	eba0 000a 	sub.w	r0, r0, sl
 800d684:	2240      	movs	r2, #64	@ 0x40
 800d686:	4082      	lsls	r2, r0
 800d688:	4313      	orrs	r3, r2
 800d68a:	3401      	adds	r4, #1
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d692:	4829      	ldr	r0, [pc, #164]	@ (800d738 <_vfiprintf_r+0x220>)
 800d694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d698:	2206      	movs	r2, #6
 800d69a:	f7f2 fdc1 	bl	8000220 <memchr>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d03f      	beq.n	800d722 <_vfiprintf_r+0x20a>
 800d6a2:	4b26      	ldr	r3, [pc, #152]	@ (800d73c <_vfiprintf_r+0x224>)
 800d6a4:	bb1b      	cbnz	r3, 800d6ee <_vfiprintf_r+0x1d6>
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	3307      	adds	r3, #7
 800d6aa:	f023 0307 	bic.w	r3, r3, #7
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	9303      	str	r3, [sp, #12]
 800d6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b4:	443b      	add	r3, r7
 800d6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b8:	e76a      	b.n	800d590 <_vfiprintf_r+0x78>
 800d6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6be:	460c      	mov	r4, r1
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	e7a8      	b.n	800d616 <_vfiprintf_r+0xfe>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	3401      	adds	r4, #1
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	f04f 0c0a 	mov.w	ip, #10
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6d6:	3a30      	subs	r2, #48	@ 0x30
 800d6d8:	2a09      	cmp	r2, #9
 800d6da:	d903      	bls.n	800d6e4 <_vfiprintf_r+0x1cc>
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d0c6      	beq.n	800d66e <_vfiprintf_r+0x156>
 800d6e0:	9105      	str	r1, [sp, #20]
 800d6e2:	e7c4      	b.n	800d66e <_vfiprintf_r+0x156>
 800d6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e7f0      	b.n	800d6d0 <_vfiprintf_r+0x1b8>
 800d6ee:	ab03      	add	r3, sp, #12
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	462a      	mov	r2, r5
 800d6f4:	4b12      	ldr	r3, [pc, #72]	@ (800d740 <_vfiprintf_r+0x228>)
 800d6f6:	a904      	add	r1, sp, #16
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f7fd fdc3 	bl	800b284 <_printf_float>
 800d6fe:	4607      	mov	r7, r0
 800d700:	1c78      	adds	r0, r7, #1
 800d702:	d1d6      	bne.n	800d6b2 <_vfiprintf_r+0x19a>
 800d704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d706:	07d9      	lsls	r1, r3, #31
 800d708:	d405      	bmi.n	800d716 <_vfiprintf_r+0x1fe>
 800d70a:	89ab      	ldrh	r3, [r5, #12]
 800d70c:	059a      	lsls	r2, r3, #22
 800d70e:	d402      	bmi.n	800d716 <_vfiprintf_r+0x1fe>
 800d710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d712:	f7fe fbf7 	bl	800bf04 <__retarget_lock_release_recursive>
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	065b      	lsls	r3, r3, #25
 800d71a:	f53f af1f 	bmi.w	800d55c <_vfiprintf_r+0x44>
 800d71e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d720:	e71e      	b.n	800d560 <_vfiprintf_r+0x48>
 800d722:	ab03      	add	r3, sp, #12
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	462a      	mov	r2, r5
 800d728:	4b05      	ldr	r3, [pc, #20]	@ (800d740 <_vfiprintf_r+0x228>)
 800d72a:	a904      	add	r1, sp, #16
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7fe f841 	bl	800b7b4 <_printf_i>
 800d732:	e7e4      	b.n	800d6fe <_vfiprintf_r+0x1e6>
 800d734:	0800e500 	.word	0x0800e500
 800d738:	0800e50a 	.word	0x0800e50a
 800d73c:	0800b285 	.word	0x0800b285
 800d740:	0800d4f3 	.word	0x0800d4f3
 800d744:	0800e506 	.word	0x0800e506

0800d748 <__sflush_r>:
 800d748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	0716      	lsls	r6, r2, #28
 800d752:	4605      	mov	r5, r0
 800d754:	460c      	mov	r4, r1
 800d756:	d454      	bmi.n	800d802 <__sflush_r+0xba>
 800d758:	684b      	ldr	r3, [r1, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	dc02      	bgt.n	800d764 <__sflush_r+0x1c>
 800d75e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d760:	2b00      	cmp	r3, #0
 800d762:	dd48      	ble.n	800d7f6 <__sflush_r+0xae>
 800d764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d766:	2e00      	cmp	r6, #0
 800d768:	d045      	beq.n	800d7f6 <__sflush_r+0xae>
 800d76a:	2300      	movs	r3, #0
 800d76c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d770:	682f      	ldr	r7, [r5, #0]
 800d772:	6a21      	ldr	r1, [r4, #32]
 800d774:	602b      	str	r3, [r5, #0]
 800d776:	d030      	beq.n	800d7da <__sflush_r+0x92>
 800d778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	0759      	lsls	r1, r3, #29
 800d77e:	d505      	bpl.n	800d78c <__sflush_r+0x44>
 800d780:	6863      	ldr	r3, [r4, #4]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d786:	b10b      	cbz	r3, 800d78c <__sflush_r+0x44>
 800d788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	2300      	movs	r3, #0
 800d78e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d790:	6a21      	ldr	r1, [r4, #32]
 800d792:	4628      	mov	r0, r5
 800d794:	47b0      	blx	r6
 800d796:	1c43      	adds	r3, r0, #1
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	d106      	bne.n	800d7aa <__sflush_r+0x62>
 800d79c:	6829      	ldr	r1, [r5, #0]
 800d79e:	291d      	cmp	r1, #29
 800d7a0:	d82b      	bhi.n	800d7fa <__sflush_r+0xb2>
 800d7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800d84c <__sflush_r+0x104>)
 800d7a4:	410a      	asrs	r2, r1
 800d7a6:	07d6      	lsls	r6, r2, #31
 800d7a8:	d427      	bmi.n	800d7fa <__sflush_r+0xb2>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	6062      	str	r2, [r4, #4]
 800d7ae:	04d9      	lsls	r1, r3, #19
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	6022      	str	r2, [r4, #0]
 800d7b4:	d504      	bpl.n	800d7c0 <__sflush_r+0x78>
 800d7b6:	1c42      	adds	r2, r0, #1
 800d7b8:	d101      	bne.n	800d7be <__sflush_r+0x76>
 800d7ba:	682b      	ldr	r3, [r5, #0]
 800d7bc:	b903      	cbnz	r3, 800d7c0 <__sflush_r+0x78>
 800d7be:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7c2:	602f      	str	r7, [r5, #0]
 800d7c4:	b1b9      	cbz	r1, 800d7f6 <__sflush_r+0xae>
 800d7c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	d002      	beq.n	800d7d4 <__sflush_r+0x8c>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff f9f6 	bl	800cbc0 <_free_r>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7d8:	e00d      	b.n	800d7f6 <__sflush_r+0xae>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b0      	blx	r6
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	1c50      	adds	r0, r2, #1
 800d7e4:	d1c9      	bne.n	800d77a <__sflush_r+0x32>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0c6      	beq.n	800d77a <__sflush_r+0x32>
 800d7ec:	2b1d      	cmp	r3, #29
 800d7ee:	d001      	beq.n	800d7f4 <__sflush_r+0xac>
 800d7f0:	2b16      	cmp	r3, #22
 800d7f2:	d11e      	bne.n	800d832 <__sflush_r+0xea>
 800d7f4:	602f      	str	r7, [r5, #0]
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	e022      	b.n	800d840 <__sflush_r+0xf8>
 800d7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fe:	b21b      	sxth	r3, r3
 800d800:	e01b      	b.n	800d83a <__sflush_r+0xf2>
 800d802:	690f      	ldr	r7, [r1, #16]
 800d804:	2f00      	cmp	r7, #0
 800d806:	d0f6      	beq.n	800d7f6 <__sflush_r+0xae>
 800d808:	0793      	lsls	r3, r2, #30
 800d80a:	680e      	ldr	r6, [r1, #0]
 800d80c:	bf08      	it	eq
 800d80e:	694b      	ldreq	r3, [r1, #20]
 800d810:	600f      	str	r7, [r1, #0]
 800d812:	bf18      	it	ne
 800d814:	2300      	movne	r3, #0
 800d816:	eba6 0807 	sub.w	r8, r6, r7
 800d81a:	608b      	str	r3, [r1, #8]
 800d81c:	f1b8 0f00 	cmp.w	r8, #0
 800d820:	dde9      	ble.n	800d7f6 <__sflush_r+0xae>
 800d822:	6a21      	ldr	r1, [r4, #32]
 800d824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d826:	4643      	mov	r3, r8
 800d828:	463a      	mov	r2, r7
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b0      	blx	r6
 800d82e:	2800      	cmp	r0, #0
 800d830:	dc08      	bgt.n	800d844 <__sflush_r+0xfc>
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d83a:	81a3      	strh	r3, [r4, #12]
 800d83c:	f04f 30ff 	mov.w	r0, #4294967295
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	4407      	add	r7, r0
 800d846:	eba8 0800 	sub.w	r8, r8, r0
 800d84a:	e7e7      	b.n	800d81c <__sflush_r+0xd4>
 800d84c:	dfbffffe 	.word	0xdfbffffe

0800d850 <_fflush_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	690b      	ldr	r3, [r1, #16]
 800d854:	4605      	mov	r5, r0
 800d856:	460c      	mov	r4, r1
 800d858:	b913      	cbnz	r3, 800d860 <_fflush_r+0x10>
 800d85a:	2500      	movs	r5, #0
 800d85c:	4628      	mov	r0, r5
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	b118      	cbz	r0, 800d86a <_fflush_r+0x1a>
 800d862:	6a03      	ldr	r3, [r0, #32]
 800d864:	b90b      	cbnz	r3, 800d86a <_fflush_r+0x1a>
 800d866:	f7fe f951 	bl	800bb0c <__sinit>
 800d86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0f3      	beq.n	800d85a <_fflush_r+0xa>
 800d872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d874:	07d0      	lsls	r0, r2, #31
 800d876:	d404      	bmi.n	800d882 <_fflush_r+0x32>
 800d878:	0599      	lsls	r1, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_fflush_r+0x32>
 800d87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d87e:	f7fe fb40 	bl	800bf02 <__retarget_lock_acquire_recursive>
 800d882:	4628      	mov	r0, r5
 800d884:	4621      	mov	r1, r4
 800d886:	f7ff ff5f 	bl	800d748 <__sflush_r>
 800d88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d88c:	07da      	lsls	r2, r3, #31
 800d88e:	4605      	mov	r5, r0
 800d890:	d4e4      	bmi.n	800d85c <_fflush_r+0xc>
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	d4e1      	bmi.n	800d85c <_fflush_r+0xc>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7fe fb33 	bl	800bf04 <__retarget_lock_release_recursive>
 800d89e:	e7dd      	b.n	800d85c <_fflush_r+0xc>

0800d8a0 <__swhatbuf_r>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a8:	2900      	cmp	r1, #0
 800d8aa:	b096      	sub	sp, #88	@ 0x58
 800d8ac:	4615      	mov	r5, r2
 800d8ae:	461e      	mov	r6, r3
 800d8b0:	da0d      	bge.n	800d8ce <__swhatbuf_r+0x2e>
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d8b8:	f04f 0100 	mov.w	r1, #0
 800d8bc:	bf14      	ite	ne
 800d8be:	2340      	movne	r3, #64	@ 0x40
 800d8c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	6031      	str	r1, [r6, #0]
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	b016      	add	sp, #88	@ 0x58
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
 800d8ce:	466a      	mov	r2, sp
 800d8d0:	f000 f848 	bl	800d964 <_fstat_r>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	dbec      	blt.n	800d8b2 <__swhatbuf_r+0x12>
 800d8d8:	9901      	ldr	r1, [sp, #4]
 800d8da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8e2:	4259      	negs	r1, r3
 800d8e4:	4159      	adcs	r1, r3
 800d8e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ea:	e7eb      	b.n	800d8c4 <__swhatbuf_r+0x24>

0800d8ec <__smakebuf_r>:
 800d8ec:	898b      	ldrh	r3, [r1, #12]
 800d8ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8f0:	079d      	lsls	r5, r3, #30
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	460c      	mov	r4, r1
 800d8f6:	d507      	bpl.n	800d908 <__smakebuf_r+0x1c>
 800d8f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	6123      	str	r3, [r4, #16]
 800d900:	2301      	movs	r3, #1
 800d902:	6163      	str	r3, [r4, #20]
 800d904:	b003      	add	sp, #12
 800d906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d908:	ab01      	add	r3, sp, #4
 800d90a:	466a      	mov	r2, sp
 800d90c:	f7ff ffc8 	bl	800d8a0 <__swhatbuf_r>
 800d910:	9f00      	ldr	r7, [sp, #0]
 800d912:	4605      	mov	r5, r0
 800d914:	4639      	mov	r1, r7
 800d916:	4630      	mov	r0, r6
 800d918:	f7ff f9c6 	bl	800cca8 <_malloc_r>
 800d91c:	b948      	cbnz	r0, 800d932 <__smakebuf_r+0x46>
 800d91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d922:	059a      	lsls	r2, r3, #22
 800d924:	d4ee      	bmi.n	800d904 <__smakebuf_r+0x18>
 800d926:	f023 0303 	bic.w	r3, r3, #3
 800d92a:	f043 0302 	orr.w	r3, r3, #2
 800d92e:	81a3      	strh	r3, [r4, #12]
 800d930:	e7e2      	b.n	800d8f8 <__smakebuf_r+0xc>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	6020      	str	r0, [r4, #0]
 800d936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d942:	b15b      	cbz	r3, 800d95c <__smakebuf_r+0x70>
 800d944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 f81d 	bl	800d988 <_isatty_r>
 800d94e:	b128      	cbz	r0, 800d95c <__smakebuf_r+0x70>
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	f023 0303 	bic.w	r3, r3, #3
 800d956:	f043 0301 	orr.w	r3, r3, #1
 800d95a:	81a3      	strh	r3, [r4, #12]
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	431d      	orrs	r5, r3
 800d960:	81a5      	strh	r5, [r4, #12]
 800d962:	e7cf      	b.n	800d904 <__smakebuf_r+0x18>

0800d964 <_fstat_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d07      	ldr	r5, [pc, #28]	@ (800d984 <_fstat_r+0x20>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	4611      	mov	r1, r2
 800d970:	602b      	str	r3, [r5, #0]
 800d972:	f7f5 f899 	bl	8002aa8 <_fstat>
 800d976:	1c43      	adds	r3, r0, #1
 800d978:	d102      	bne.n	800d980 <_fstat_r+0x1c>
 800d97a:	682b      	ldr	r3, [r5, #0]
 800d97c:	b103      	cbz	r3, 800d980 <_fstat_r+0x1c>
 800d97e:	6023      	str	r3, [r4, #0]
 800d980:	bd38      	pop	{r3, r4, r5, pc}
 800d982:	bf00      	nop
 800d984:	2000563c 	.word	0x2000563c

0800d988 <_isatty_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d06      	ldr	r5, [pc, #24]	@ (800d9a4 <_isatty_r+0x1c>)
 800d98c:	2300      	movs	r3, #0
 800d98e:	4604      	mov	r4, r0
 800d990:	4608      	mov	r0, r1
 800d992:	602b      	str	r3, [r5, #0]
 800d994:	f7f5 f898 	bl	8002ac8 <_isatty>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_isatty_r+0x1a>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_isatty_r+0x1a>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	2000563c 	.word	0x2000563c

0800d9a8 <_sbrk_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4d06      	ldr	r5, [pc, #24]	@ (800d9c4 <_sbrk_r+0x1c>)
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	4608      	mov	r0, r1
 800d9b2:	602b      	str	r3, [r5, #0]
 800d9b4:	f7f5 f8a0 	bl	8002af8 <_sbrk>
 800d9b8:	1c43      	adds	r3, r0, #1
 800d9ba:	d102      	bne.n	800d9c2 <_sbrk_r+0x1a>
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	b103      	cbz	r3, 800d9c2 <_sbrk_r+0x1a>
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	bd38      	pop	{r3, r4, r5, pc}
 800d9c4:	2000563c 	.word	0x2000563c

0800d9c8 <__assert_func>:
 800d9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ca:	4614      	mov	r4, r2
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4b09      	ldr	r3, [pc, #36]	@ (800d9f4 <__assert_func+0x2c>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	68d8      	ldr	r0, [r3, #12]
 800d9d6:	b954      	cbnz	r4, 800d9ee <__assert_func+0x26>
 800d9d8:	4b07      	ldr	r3, [pc, #28]	@ (800d9f8 <__assert_func+0x30>)
 800d9da:	461c      	mov	r4, r3
 800d9dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9e0:	9100      	str	r1, [sp, #0]
 800d9e2:	462b      	mov	r3, r5
 800d9e4:	4905      	ldr	r1, [pc, #20]	@ (800d9fc <__assert_func+0x34>)
 800d9e6:	f000 f841 	bl	800da6c <fiprintf>
 800d9ea:	f000 f851 	bl	800da90 <abort>
 800d9ee:	4b04      	ldr	r3, [pc, #16]	@ (800da00 <__assert_func+0x38>)
 800d9f0:	e7f4      	b.n	800d9dc <__assert_func+0x14>
 800d9f2:	bf00      	nop
 800d9f4:	2000001c 	.word	0x2000001c
 800d9f8:	0800e556 	.word	0x0800e556
 800d9fc:	0800e528 	.word	0x0800e528
 800da00:	0800e51b 	.word	0x0800e51b

0800da04 <_calloc_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	fba1 5402 	umull	r5, r4, r1, r2
 800da0a:	b93c      	cbnz	r4, 800da1c <_calloc_r+0x18>
 800da0c:	4629      	mov	r1, r5
 800da0e:	f7ff f94b 	bl	800cca8 <_malloc_r>
 800da12:	4606      	mov	r6, r0
 800da14:	b928      	cbnz	r0, 800da22 <_calloc_r+0x1e>
 800da16:	2600      	movs	r6, #0
 800da18:	4630      	mov	r0, r6
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	220c      	movs	r2, #12
 800da1e:	6002      	str	r2, [r0, #0]
 800da20:	e7f9      	b.n	800da16 <_calloc_r+0x12>
 800da22:	462a      	mov	r2, r5
 800da24:	4621      	mov	r1, r4
 800da26:	f7fe f9ef 	bl	800be08 <memset>
 800da2a:	e7f5      	b.n	800da18 <_calloc_r+0x14>

0800da2c <__ascii_mbtowc>:
 800da2c:	b082      	sub	sp, #8
 800da2e:	b901      	cbnz	r1, 800da32 <__ascii_mbtowc+0x6>
 800da30:	a901      	add	r1, sp, #4
 800da32:	b142      	cbz	r2, 800da46 <__ascii_mbtowc+0x1a>
 800da34:	b14b      	cbz	r3, 800da4a <__ascii_mbtowc+0x1e>
 800da36:	7813      	ldrb	r3, [r2, #0]
 800da38:	600b      	str	r3, [r1, #0]
 800da3a:	7812      	ldrb	r2, [r2, #0]
 800da3c:	1e10      	subs	r0, r2, #0
 800da3e:	bf18      	it	ne
 800da40:	2001      	movne	r0, #1
 800da42:	b002      	add	sp, #8
 800da44:	4770      	bx	lr
 800da46:	4610      	mov	r0, r2
 800da48:	e7fb      	b.n	800da42 <__ascii_mbtowc+0x16>
 800da4a:	f06f 0001 	mvn.w	r0, #1
 800da4e:	e7f8      	b.n	800da42 <__ascii_mbtowc+0x16>

0800da50 <__ascii_wctomb>:
 800da50:	4603      	mov	r3, r0
 800da52:	4608      	mov	r0, r1
 800da54:	b141      	cbz	r1, 800da68 <__ascii_wctomb+0x18>
 800da56:	2aff      	cmp	r2, #255	@ 0xff
 800da58:	d904      	bls.n	800da64 <__ascii_wctomb+0x14>
 800da5a:	228a      	movs	r2, #138	@ 0x8a
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	f04f 30ff 	mov.w	r0, #4294967295
 800da62:	4770      	bx	lr
 800da64:	700a      	strb	r2, [r1, #0]
 800da66:	2001      	movs	r0, #1
 800da68:	4770      	bx	lr
	...

0800da6c <fiprintf>:
 800da6c:	b40e      	push	{r1, r2, r3}
 800da6e:	b503      	push	{r0, r1, lr}
 800da70:	4601      	mov	r1, r0
 800da72:	ab03      	add	r3, sp, #12
 800da74:	4805      	ldr	r0, [pc, #20]	@ (800da8c <fiprintf+0x20>)
 800da76:	f853 2b04 	ldr.w	r2, [r3], #4
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	f7ff fd4b 	bl	800d518 <_vfiprintf_r>
 800da82:	b002      	add	sp, #8
 800da84:	f85d eb04 	ldr.w	lr, [sp], #4
 800da88:	b003      	add	sp, #12
 800da8a:	4770      	bx	lr
 800da8c:	2000001c 	.word	0x2000001c

0800da90 <abort>:
 800da90:	b508      	push	{r3, lr}
 800da92:	2006      	movs	r0, #6
 800da94:	f000 f82c 	bl	800daf0 <raise>
 800da98:	2001      	movs	r0, #1
 800da9a:	f7f4 ffd1 	bl	8002a40 <_exit>

0800da9e <_raise_r>:
 800da9e:	291f      	cmp	r1, #31
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4605      	mov	r5, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	d904      	bls.n	800dab2 <_raise_r+0x14>
 800daa8:	2316      	movs	r3, #22
 800daaa:	6003      	str	r3, [r0, #0]
 800daac:	f04f 30ff 	mov.w	r0, #4294967295
 800dab0:	bd38      	pop	{r3, r4, r5, pc}
 800dab2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dab4:	b112      	cbz	r2, 800dabc <_raise_r+0x1e>
 800dab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daba:	b94b      	cbnz	r3, 800dad0 <_raise_r+0x32>
 800dabc:	4628      	mov	r0, r5
 800dabe:	f000 f831 	bl	800db24 <_getpid_r>
 800dac2:	4622      	mov	r2, r4
 800dac4:	4601      	mov	r1, r0
 800dac6:	4628      	mov	r0, r5
 800dac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dacc:	f000 b818 	b.w	800db00 <_kill_r>
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d00a      	beq.n	800daea <_raise_r+0x4c>
 800dad4:	1c59      	adds	r1, r3, #1
 800dad6:	d103      	bne.n	800dae0 <_raise_r+0x42>
 800dad8:	2316      	movs	r3, #22
 800dada:	6003      	str	r3, [r0, #0]
 800dadc:	2001      	movs	r0, #1
 800dade:	e7e7      	b.n	800dab0 <_raise_r+0x12>
 800dae0:	2100      	movs	r1, #0
 800dae2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dae6:	4620      	mov	r0, r4
 800dae8:	4798      	blx	r3
 800daea:	2000      	movs	r0, #0
 800daec:	e7e0      	b.n	800dab0 <_raise_r+0x12>
	...

0800daf0 <raise>:
 800daf0:	4b02      	ldr	r3, [pc, #8]	@ (800dafc <raise+0xc>)
 800daf2:	4601      	mov	r1, r0
 800daf4:	6818      	ldr	r0, [r3, #0]
 800daf6:	f7ff bfd2 	b.w	800da9e <_raise_r>
 800dafa:	bf00      	nop
 800dafc:	2000001c 	.word	0x2000001c

0800db00 <_kill_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d07      	ldr	r5, [pc, #28]	@ (800db20 <_kill_r+0x20>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	4611      	mov	r1, r2
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	f7f4 ff87 	bl	8002a20 <_kill>
 800db12:	1c43      	adds	r3, r0, #1
 800db14:	d102      	bne.n	800db1c <_kill_r+0x1c>
 800db16:	682b      	ldr	r3, [r5, #0]
 800db18:	b103      	cbz	r3, 800db1c <_kill_r+0x1c>
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
 800db1e:	bf00      	nop
 800db20:	2000563c 	.word	0x2000563c

0800db24 <_getpid_r>:
 800db24:	f7f4 bf74 	b.w	8002a10 <_getpid>

0800db28 <_init>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	bf00      	nop
 800db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2e:	bc08      	pop	{r3}
 800db30:	469e      	mov	lr, r3
 800db32:	4770      	bx	lr

0800db34 <_fini>:
 800db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db36:	bf00      	nop
 800db38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3a:	bc08      	pop	{r3}
 800db3c:	469e      	mov	lr, r3
 800db3e:	4770      	bx	lr
