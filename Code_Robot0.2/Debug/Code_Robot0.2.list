
Code_Robot0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011380  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08011560  08011560  00012560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121d8  080121d8  000141e8  2**0
                  CONTENTS
  4 .ARM          00000008  080121d8  080121d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121e0  080121e0  000141e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121e0  080121e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080121e4  080121e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080121e8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cf0  200001e8  080123d0  000141e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ed8  080123d0  00014ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025642  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000563d  00000000  00000000  0003985a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002030  00000000  00000000  0003ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018e9  00000000  00000000  00040ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245c3  00000000  00000000  000427b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002888b  00000000  00000000  00066d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8107  00000000  00000000  0008f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098c4  00000000  00000000  0016774c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00171010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011548 	.word	0x08011548

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08011548 	.word	0x08011548

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <ADXL343_initialization>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param dev: Pointeur vers la structure ADXL343 contenant les informations du périphérique.
 * @return 0 si l'initialisation est réussie, 255 sinon.
 */
uint8_t ADXL343_initialization(SPI_HandleTypeDef *hspi, ADXL343 *dev)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    dev->hspiHandle = hspi;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
    uint8_t regAddr = ADXL343_REG_DEVICE_ID | 0x80; // Lecture du registre DEVICE_ID
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	737b      	strb	r3, [r7, #13]
    uint8_t regData = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status;

    printf("Starting ADXL343 initialization...\r\n");
 8000fe6:	482a      	ldr	r0, [pc, #168]	@ (8001090 <ADXL343_initialization+0xc8>)
 8000fe8:	f00e f818 	bl	800f01c <puts>

    // Lecture du DEVICE_ID
    ADXL_CS_LOW();
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4828      	ldr	r0, [pc, #160]	@ (8001094 <ADXL343_initialization+0xcc>)
 8000ff2:	f004 f887 	bl	8005104 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 8000ff6:	f107 010d 	add.w	r1, r7, #13
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f005 ff7e 	bl	8006f02 <HAL_SPI_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d009      	beq.n	8001024 <ADXL343_initialization+0x5c>
        printf("Erreur SPI lors de l'envoi de l'adresse.\r\n");
 8001010:	4821      	ldr	r0, [pc, #132]	@ (8001098 <ADXL343_initialization+0xd0>)
 8001012:	f00e f803 	bl	800f01c <puts>
        ADXL_CS_HIGH();
 8001016:	2201      	movs	r2, #1
 8001018:	2110      	movs	r1, #16
 800101a:	481e      	ldr	r0, [pc, #120]	@ (8001094 <ADXL343_initialization+0xcc>)
 800101c:	f004 f872 	bl	8005104 <HAL_GPIO_WritePin>
        return 255; // Erreur
 8001020:	23ff      	movs	r3, #255	@ 0xff
 8001022:	e030      	b.n	8001086 <ADXL343_initialization+0xbe>
    }
    status = HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 8001024:	f107 010c 	add.w	r1, r7, #12
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	2201      	movs	r2, #1
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f006 f8dd 	bl	80071ee <HAL_SPI_Receive>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
    ADXL_CS_HIGH();
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4815      	ldr	r0, [pc, #84]	@ (8001094 <ADXL343_initialization+0xcc>)
 800103e:	f004 f861 	bl	8005104 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <ADXL343_initialization+0x8a>
        printf("Erreur SPI lors de la réception des données.\r\n");
 8001048:	4814      	ldr	r0, [pc, #80]	@ (800109c <ADXL343_initialization+0xd4>)
 800104a:	f00d ffe7 	bl	800f01c <puts>
        return 255; // Erreur
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	e019      	b.n	8001086 <ADXL343_initialization+0xbe>
    }

    // Vérification du DEVICE_ID
    if (regData != ADXL343_DEVICE_ID) {
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	22e5      	movs	r2, #229	@ 0xe5
 8001056:	4293      	cmp	r3, r2
 8001058:	d006      	beq.n	8001068 <ADXL343_initialization+0xa0>
        printf("Erreur SPI : Device ID attendu 0xE5, reçu 0x%02X\r\n", regData);
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	4619      	mov	r1, r3
 800105e:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <ADXL343_initialization+0xd8>)
 8001060:	f00d ff74 	bl	800ef4c <iprintf>
        return 255; // Erreur
 8001064:	23ff      	movs	r3, #255	@ 0xff
 8001066:	e00e      	b.n	8001086 <ADXL343_initialization+0xbe>
    }

    printf("ADXL343 détecté avec succès : Device ID = 0x%02X\r\n", regData);
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	4619      	mov	r1, r3
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <ADXL343_initialization+0xdc>)
 800106e:	f00d ff6d 	bl	800ef4c <iprintf>

    // Configurer le mode mesure
    uint8_t powerCtl = 0x08; // Activer le mode mesure
 8001072:	2308      	movs	r3, #8
 8001074:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(hspi, ADXL343_REG_POWER_CTL, powerCtl);
 8001076:	232d      	movs	r3, #45	@ 0x2d
 8001078:	4619      	mov	r1, r3
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	461a      	mov	r2, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f812 	bl	80010a8 <ADXL343_write_register>

    return 0; // Initialisation réussie
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08011560 	.word	0x08011560
 8001094:	48000800 	.word	0x48000800
 8001098:	08011584 	.word	0x08011584
 800109c:	080115b0 	.word	0x080115b0
 80010a0:	080115e0 	.word	0x080115e0
 80010a4:	08011614 	.word	0x08011614

080010a8 <ADXL343_write_register>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param regAddr: Adresse du registre où écrire.
 * @param regData: Valeur à écrire dans le registre.
 */
void ADXL343_write_register(SPI_HandleTypeDef *hspi, uint8_t regAddr, uint8_t regData)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	4613      	mov	r3, r2
 80010b6:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = regAddr & 0x7F; // Assurez-vous que le bit MSB est 0 pour l'écriture
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73bb      	strb	r3, [r7, #14]
    ADXL_CS_LOW();
 80010c2:	2200      	movs	r2, #0
 80010c4:	2110      	movs	r1, #16
 80010c6:	4819      	ldr	r0, [pc, #100]	@ (800112c <ADXL343_write_register+0x84>)
 80010c8:	f004 f81c 	bl	8005104 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 80010cc:	f107 010e 	add.w	r1, r7, #14
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	2201      	movs	r2, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f005 ff13 	bl	8006f02 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &regData, 1, HAL_MAX_DELAY);
 80010dc:	1cb9      	adds	r1, r7, #2
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2201      	movs	r2, #1
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f005 ff0c 	bl	8006f02 <HAL_SPI_Transmit>
    ADXL_CS_HIGH();
 80010ea:	2201      	movs	r2, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	480f      	ldr	r0, [pc, #60]	@ (800112c <ADXL343_write_register+0x84>)
 80010f0:	f004 f808 	bl	8005104 <HAL_GPIO_WritePin>

    // Vérification de l'écriture
    uint8_t verify = ADXL343_read_register(hspi, regAddr);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f81d 	bl	8001138 <ADXL343_read_register>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
    if (verify != regData) {
 8001102:	78bb      	ldrb	r3, [r7, #2]
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	429a      	cmp	r2, r3
 8001108:	d006      	beq.n	8001118 <ADXL343_write_register+0x70>
        printf("Erreur : le registre 0x%02X contient 0x%02X (attendu 0x%02X)\r\n", regAddr, verify, regData);
 800110a:	78f9      	ldrb	r1, [r7, #3]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	4807      	ldr	r0, [pc, #28]	@ (8001130 <ADXL343_write_register+0x88>)
 8001112:	f00d ff1b 	bl	800ef4c <iprintf>
    } else {
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
    }
}
 8001116:	e005      	b.n	8001124 <ADXL343_write_register+0x7c>
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	78ba      	ldrb	r2, [r7, #2]
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <ADXL343_write_register+0x8c>)
 8001120:	f00d ff14 	bl	800ef4c <iprintf>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	48000800 	.word	0x48000800
 8001130:	0801164c 	.word	0x0801164c
 8001134:	0801168c 	.word	0x0801168c

08001138 <ADXL343_read_register>:
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param regAddr: Adresse du registre à lire.
 * @return La valeur lue depuis le registre.
 */
uint8_t ADXL343_read_register(SPI_HandleTypeDef *hspi, uint8_t regAddr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);  // Mettre NSS à 0 pour commencer la communication SPI
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	4810      	ldr	r0, [pc, #64]	@ (800118c <ADXL343_read_register+0x54>)
 800114a:	f003 ffdb 	bl	8005104 <HAL_GPIO_WritePin>
	regAddr |= 0x80;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 8001158:	1cf9      	adds	r1, r7, #3
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	2201      	movs	r2, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f005 fece 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 8001166:	f107 010f 	add.w	r1, r7, #15
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2201      	movs	r2, #1
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f006 f83c 	bl	80071ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);    // Mettre NSS à 1 pour terminer la communication SPI
 8001176:	2201      	movs	r2, #1
 8001178:	2110      	movs	r1, #16
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <ADXL343_read_register+0x54>)
 800117c:	f003 ffc2 	bl	8005104 <HAL_GPIO_WritePin>
	return regData;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	48000800 	.word	0x48000800

08001190 <ADXL343_set_tap_parameters>:
 * @param threshold: Seuil de détection du tapotement.
 * @param duration: Durée minimale pour considérer un tapotement valide.
 * @param latency: Délai pour un double tapotement.
 * @param window: Fenêtre de temps pour le double tapotement.
 */
void ADXL343_set_tap_parameters(ADXL343 *dev, uint8_t threshold, uint8_t duration, uint8_t latency, uint8_t window) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	70fb      	strb	r3, [r7, #3]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70bb      	strb	r3, [r7, #2]
 80011a6:	4613      	mov	r3, r2
 80011a8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	4835      	ldr	r0, [pc, #212]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 80011b0:	f003 ffa8 	bl	8005104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_THRESH_TAP, 1, HAL_MAX_DELAY);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	2201      	movs	r2, #1
 80011be:	4932      	ldr	r1, [pc, #200]	@ (8001288 <ADXL343_set_tap_parameters+0xf8>)
 80011c0:	f005 fe9f 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &threshold, 1, HAL_MAX_DELAY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	1cf9      	adds	r1, r7, #3
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	2201      	movs	r2, #1
 80011d0:	f005 fe97 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2110      	movs	r1, #16
 80011d8:	482a      	ldr	r0, [pc, #168]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 80011da:	f003 ff93 	bl	8005104 <HAL_GPIO_WritePin>

	// Configurer la durée du tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	4828      	ldr	r0, [pc, #160]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 80011e4:	f003 ff8e 	bl	8005104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_DUR, 1, HAL_MAX_DELAY);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	2201      	movs	r2, #1
 80011f2:	4926      	ldr	r1, [pc, #152]	@ (800128c <ADXL343_set_tap_parameters+0xfc>)
 80011f4:	f005 fe85 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &duration, 1, HAL_MAX_DELAY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	1cb9      	adds	r1, r7, #2
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	2201      	movs	r2, #1
 8001204:	f005 fe7d 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	481d      	ldr	r0, [pc, #116]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 800120e:	f003 ff79 	bl	8005104 <HAL_GPIO_WritePin>

	// Configurer la latence pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2110      	movs	r1, #16
 8001216:	481b      	ldr	r0, [pc, #108]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 8001218:	f003 ff74 	bl	8005104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_LATENT, 1, HAL_MAX_DELAY);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	2201      	movs	r2, #1
 8001226:	491a      	ldr	r1, [pc, #104]	@ (8001290 <ADXL343_set_tap_parameters+0x100>)
 8001228:	f005 fe6b 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &latency, 1, HAL_MAX_DELAY);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	1c79      	adds	r1, r7, #1
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2201      	movs	r2, #1
 8001238:	f005 fe63 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2110      	movs	r1, #16
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 8001242:	f003 ff5f 	bl	8005104 <HAL_GPIO_WritePin>

	// Configurer la fenêtre pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2110      	movs	r1, #16
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 800124c:	f003 ff5a 	bl	8005104 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_WINDOW, 1, HAL_MAX_DELAY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	2201      	movs	r2, #1
 800125a:	490e      	ldr	r1, [pc, #56]	@ (8001294 <ADXL343_set_tap_parameters+0x104>)
 800125c:	f005 fe51 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &window, 1, HAL_MAX_DELAY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	2201      	movs	r2, #1
 800126a:	f107 0110 	add.w	r1, r7, #16
 800126e:	f005 fe48 	bl	8006f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <ADXL343_set_tap_parameters+0xf4>)
 8001278:	f003 ff44 	bl	8005104 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000800 	.word	0x48000800
 8001288:	08011dc5 	.word	0x08011dc5
 800128c:	08011dc6 	.word	0x08011dc6
 8001290:	08011dc7 	.word	0x08011dc7
 8001294:	08011dc8 	.word	0x08011dc8

08001298 <ADXL343_EnableTapInterrupts>:

	printf("Valeur du registre INT_MAP après écriture: 0x%02X\n", int_map_read);
}*/

void ADXL343_EnableTapInterrupts(ADXL343 *dev)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    // Activer les interruptions SINGLE_TAP
    uint8_t intEnable = 0x40;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE, intEnable);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	212e      	movs	r1, #46	@ 0x2e
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fefb 	bl	80010a8 <ADXL343_write_register>

    // Configurer les axes pour les tapotements
    uint8_t tapAxes = 0x07;
 80012b2:	2307      	movs	r3, #7
 80012b4:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_TAP_AXES, tapAxes);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	212a      	movs	r1, #42	@ 0x2a
 80012bc:	7bba      	ldrb	r2, [r7, #14]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fef2 	bl	80010a8 <ADXL343_write_register>

    // Vérification
    uint8_t intEnableRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	222e      	movs	r2, #46	@ 0x2e
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff33 	bl	8001138 <ADXL343_read_register>
 80012d2:	4603      	mov	r3, r0
 80012d4:	737b      	strb	r3, [r7, #13]
    uint8_t tapAxesRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_TAP_AXES);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	222a      	movs	r2, #42	@ 0x2a
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff2a 	bl	8001138 <ADXL343_read_register>
 80012e4:	4603      	mov	r3, r0
 80012e6:	733b      	strb	r3, [r7, #12]

    printf("INT_ENABLE configuré : 0x%02X\r\n", intEnableRead);
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <ADXL343_EnableTapInterrupts+0x6c>)
 80012ee:	f00d fe2d 	bl	800ef4c <iprintf>
    printf("TAP_AXES configuré : 0x%02X\r\n", tapAxesRead);
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	@ (8001308 <ADXL343_EnableTapInterrupts+0x70>)
 80012f8:	f00d fe28 	bl	800ef4c <iprintf>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0801172c 	.word	0x0801172c
 8001308:	08011750 	.word	0x08011750

0800130c <ADXL343_check_tap>:
/**
 * @brief Vérifie si un "Single Tap" a été détecté.
 * @param dev: Pointeur vers la structure ADXL343 contenant les informations du périphérique.
 * @return 1 si un tapotement est détecté, 0 sinon.
 */
int ADXL343_check_tap(ADXL343 *dev) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    uint8_t intSource = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2230      	movs	r2, #48	@ 0x30
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff0b 	bl	8001138 <ADXL343_read_register>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]

    // Si un "Single Tap" est détecté
    if (intSource & 0x40) {
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <ADXL343_check_tap+0x3c>
        printf("Single Tap detected!\n");
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <ADXL343_check_tap+0x48>)
 8001332:	f00d fe73 	bl	800f01c <puts>

        // Réinitialiser le registre d'interruption pour éviter des lectures multiples
        ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2230      	movs	r2, #48	@ 0x30
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fefa 	bl	8001138 <ADXL343_read_register>

        return 1; // "Tap" détecté
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <ADXL343_check_tap+0x3e>
    }

    // Aucun "Tap" détecté
    return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	08011770 	.word	0x08011770

08001358 <ADXL343_SetDataFormat>:
 * @brief Configure le format des données de l'ADXL343.
 * @param hspi: Pointeur vers la structure SPI_HandleTypeDef utilisée pour SPI.
 * @param range: Plage de mesure (par exemple, ±2g, ±4g, etc.).
 */
void ADXL343_SetDataFormat(SPI_HandleTypeDef *hspi, uint8_t range)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
    uint8_t dataFormat = 0x08 | (range & 0x03); // Activer FULL_RES et définir la plage
 8001364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	b25b      	sxtb	r3, r3
 8001374:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(hspi, ADXL343_REG_DATA_FORMAT, dataFormat);
 8001376:	2131      	movs	r1, #49	@ 0x31
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	461a      	mov	r2, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fe93 	bl	80010a8 <ADXL343_write_register>

    printf("DATA_FORMAT configuré : 0x%02X\r\n", ADXL343_read_register(hspi, ADXL343_REG_DATA_FORMAT));
 8001382:	2331      	movs	r3, #49	@ 0x31
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fed6 	bl	8001138 <ADXL343_read_register>
 800138c:	4603      	mov	r3, r0
 800138e:	4619      	mov	r1, r3
 8001390:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <ADXL343_SetDataFormat+0x48>)
 8001392:	f00d fddb 	bl	800ef4c <iprintf>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08011788 	.word	0x08011788

080013a4 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80013b6:	232d      	movs	r3, #45	@ 0x2d
 80013b8:	73bb      	strb	r3, [r7, #14]
 80013ba:	e011      	b.n	80013e0 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	b299      	uxth	r1, r3
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3b2d      	subs	r3, #45	@ 0x2d
 80013c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001478 <VL53L1X_SensorInit+0xd4>)
 80013c6:	5cd2      	ldrb	r2, [r2, r3]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 ff2a 	bl	8004224 <VL53L1_WrByte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3301      	adds	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b87      	cmp	r3, #135	@ 0x87
 80013e4:	d9ea      	bls.n	80013bc <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f8c1 	bl	8001570 <VL53L1X_StartRanging>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80013fc:	e00b      	b.n	8001416 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80013fe:	f107 020d 	add.w	r2, r7, #13
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f8e2 	bl	80015d0 <VL53L1X_CheckForDataReady>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	4313      	orrs	r3, r2
 8001414:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f82c 	bl	800147c <VL53L1X_ClearInterrupt>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4313      	orrs	r3, r2
 800142c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f8b5 	bl	80015a0 <VL53L1X_StopRanging>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	4313      	orrs	r3, r2
 800143e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2209      	movs	r2, #9
 8001444:	2108      	movs	r1, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f002 feec 	bl	8004224 <VL53L1_WrByte>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	4313      	orrs	r3, r2
 8001454:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2200      	movs	r2, #0
 800145a:	210b      	movs	r1, #11
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fee1 	bl	8004224 <VL53L1_WrByte>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	4313      	orrs	r3, r2
 800146a:	73fb      	strb	r3, [r7, #15]
	return status;
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08011dcc 	.word	0x08011dcc

0800147c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2201      	movs	r2, #1
 800148e:	2186      	movs	r1, #134	@ 0x86
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fec7 	bl	8004224 <VL53L1_WrByte>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4313      	orrs	r3, r2
 800149e:	73fb      	strb	r3, [r7, #15]
	return status;
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <VL53L1X_SetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_SetInterruptPolarity(uint16_t dev, uint8_t NewPolarity)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	4613      	mov	r3, r2
 80014ba:	717b      	strb	r3, [r7, #5]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80014c0:	f107 020e 	add.w	r2, r7, #14
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	2130      	movs	r1, #48	@ 0x30
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fe39 	bl	8004140 <VL53L1_RdByte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0xEF;
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	f023 0310 	bic.w	r3, r3, #16
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	73bb      	strb	r3, [r7, #14]
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
 80014e2:	797b      	ldrb	r3, [r7, #5]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <VL53L1X_SetInterruptPolarity+0x44>
 80014ec:	2210      	movs	r2, #16
 80014ee:	e000      	b.n	80014f2 <VL53L1X_SetInterruptPolarity+0x46>
 80014f0:	2200      	movs	r2, #0
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2130      	movs	r1, #48	@ 0x30
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fe8f 	bl	8004224 <VL53L1_WrByte>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	4313      	orrs	r3, r2
 800150e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <VL53L1X_GetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800152c:	f107 020e 	add.w	r2, r7, #14
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	2130      	movs	r1, #48	@ 0x30
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fe03 	bl	8004140 <VL53L1_RdByte>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4313      	orrs	r3, r2
 8001542:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	b2db      	uxtb	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	701a      	strb	r2, [r3, #0]
	return status;
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2240      	movs	r2, #64	@ 0x40
 8001582:	2187      	movs	r1, #135	@ 0x87
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fe4d 	bl	8004224 <VL53L1_WrByte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	4313      	orrs	r3, r2
 8001592:	73fb      	strb	r3, [r7, #15]
	return status;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2187      	movs	r1, #135	@ 0x87
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fe35 	bl	8004224 <VL53L1_WrByte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80015e0:	f107 020d 	add.w	r2, r7, #13
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff97 	bl	800151c <VL53L1X_GetInterruptPolarity>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80015f8:	f107 020e 	add.w	r2, r7, #14
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	2131      	movs	r1, #49	@ 0x31
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fd9d 	bl	8004140 <VL53L1_RdByte>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	7b7a      	ldrb	r2, [r7, #13]
 8001620:	4293      	cmp	r3, r2
 8001622:	d103      	bne.n	800162c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e002      	b.n	8001632 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	460a      	mov	r2, r1
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	4613      	mov	r3, r2
 800164c:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8001652:	f107 020c 	add.w	r2, r7, #12
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fa2a 	bl	8001ab4 <VL53L1X_GetDistanceMode>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4313      	orrs	r3, r2
 8001668:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8001670:	2301      	movs	r3, #1
 8001672:	e0f6      	b.n	8001862 <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8001674:	89bb      	ldrh	r3, [r7, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	f040 8082 	bne.w	8001780 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 800167c:	88bb      	ldrh	r3, [r7, #4]
 800167e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001682:	d06b      	beq.n	800175c <VL53L1X_SetTimingBudgetInMs+0x11e>
 8001684:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001688:	dc77      	bgt.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
 800168a:	2bc8      	cmp	r3, #200	@ 0xc8
 800168c:	d057      	beq.n	800173e <VL53L1X_SetTimingBudgetInMs+0x100>
 800168e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001690:	dc73      	bgt.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d044      	beq.n	8001720 <VL53L1X_SetTimingBudgetInMs+0xe2>
 8001696:	2b64      	cmp	r3, #100	@ 0x64
 8001698:	dc6f      	bgt.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
 800169a:	2b32      	cmp	r3, #50	@ 0x32
 800169c:	d031      	beq.n	8001702 <VL53L1X_SetTimingBudgetInMs+0xc4>
 800169e:	2b32      	cmp	r3, #50	@ 0x32
 80016a0:	dc6b      	bgt.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
 80016a2:	2b21      	cmp	r3, #33	@ 0x21
 80016a4:	d020      	beq.n	80016e8 <VL53L1X_SetTimingBudgetInMs+0xaa>
 80016a6:	2b21      	cmp	r3, #33	@ 0x21
 80016a8:	dc67      	bgt.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d002      	beq.n	80016b4 <VL53L1X_SetTimingBudgetInMs+0x76>
 80016ae:	2b14      	cmp	r3, #20
 80016b0:	d00d      	beq.n	80016ce <VL53L1X_SetTimingBudgetInMs+0x90>
 80016b2:	e062      	b.n	800177a <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	221d      	movs	r2, #29
 80016b8:	215e      	movs	r1, #94	@ 0x5e
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fdd4 	bl	8004268 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2227      	movs	r2, #39	@ 0x27
 80016c4:	2161      	movs	r1, #97	@ 0x61
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fdce 	bl	8004268 <VL53L1_WrWord>
					0x0027);
			break;
 80016cc:	e0c7      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2251      	movs	r2, #81	@ 0x51
 80016d2:	215e      	movs	r1, #94	@ 0x5e
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fdc7 	bl	8004268 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	226e      	movs	r2, #110	@ 0x6e
 80016de:	2161      	movs	r1, #97	@ 0x61
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fdc1 	bl	8004268 <VL53L1_WrWord>
					0x006E);
			break;
 80016e6:	e0ba      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	22d6      	movs	r2, #214	@ 0xd6
 80016ec:	215e      	movs	r1, #94	@ 0x5e
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fdba 	bl	8004268 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	226e      	movs	r2, #110	@ 0x6e
 80016f8:	2161      	movs	r1, #97	@ 0x61
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fdb4 	bl	8004268 <VL53L1_WrWord>
					0x006E);
			break;
 8001700:	e0ad      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001708:	215e      	movs	r1, #94	@ 0x5e
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fdac 	bl	8004268 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001716:	2161      	movs	r1, #97	@ 0x61
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fda5 	bl	8004268 <VL53L1_WrWord>
					0x01E8);
			break;
 800171e:	e09e      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001726:	215e      	movs	r1, #94	@ 0x5e
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fd9d 	bl	8004268 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8001734:	2161      	movs	r1, #97	@ 0x61
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fd96 	bl	8004268 <VL53L1_WrWord>
					0x0388);
			break;
 800173c:	e08f      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8001744:	215e      	movs	r1, #94	@ 0x5e
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fd8e 	bl	8004268 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	f240 4296 	movw	r2, #1174	@ 0x496
 8001752:	2161      	movs	r1, #97	@ 0x61
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fd87 	bl	8004268 <VL53L1_WrWord>
					0x0496);
			break;
 800175a:	e080      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	f240 5291 	movw	r2, #1425	@ 0x591
 8001762:	215e      	movs	r1, #94	@ 0x5e
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fd7f 	bl	8004268 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8001770:	2161      	movs	r1, #97	@ 0x61
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fd78 	bl	8004268 <VL53L1_WrWord>
					0x05C1);
			break;
 8001778:	e071      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
			break;
 800177e:	e06e      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001786:	d058      	beq.n	800183a <VL53L1X_SetTimingBudgetInMs+0x1fc>
 8001788:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800178c:	dc64      	bgt.n	8001858 <VL53L1X_SetTimingBudgetInMs+0x21a>
 800178e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001790:	d044      	beq.n	800181c <VL53L1X_SetTimingBudgetInMs+0x1de>
 8001792:	2bc8      	cmp	r3, #200	@ 0xc8
 8001794:	dc60      	bgt.n	8001858 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d031      	beq.n	80017fe <VL53L1X_SetTimingBudgetInMs+0x1c0>
 800179a:	2b64      	cmp	r3, #100	@ 0x64
 800179c:	dc5c      	bgt.n	8001858 <VL53L1X_SetTimingBudgetInMs+0x21a>
 800179e:	2b32      	cmp	r3, #50	@ 0x32
 80017a0:	d020      	beq.n	80017e4 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 80017a2:	2b32      	cmp	r3, #50	@ 0x32
 80017a4:	dc58      	bgt.n	8001858 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80017a6:	2b14      	cmp	r3, #20
 80017a8:	d002      	beq.n	80017b0 <VL53L1X_SetTimingBudgetInMs+0x172>
 80017aa:	2b21      	cmp	r3, #33	@ 0x21
 80017ac:	d00d      	beq.n	80017ca <VL53L1X_SetTimingBudgetInMs+0x18c>
 80017ae:	e053      	b.n	8001858 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	221e      	movs	r2, #30
 80017b4:	215e      	movs	r1, #94	@ 0x5e
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fd56 	bl	8004268 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	2222      	movs	r2, #34	@ 0x22
 80017c0:	2161      	movs	r1, #97	@ 0x61
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fd50 	bl	8004268 <VL53L1_WrWord>
					0x0022);
			break;
 80017c8:	e049      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2260      	movs	r2, #96	@ 0x60
 80017ce:	215e      	movs	r1, #94	@ 0x5e
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fd49 	bl	8004268 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	226e      	movs	r2, #110	@ 0x6e
 80017da:	2161      	movs	r1, #97	@ 0x61
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fd43 	bl	8004268 <VL53L1_WrWord>
					0x006E);
			break;
 80017e2:	e03c      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	22ad      	movs	r2, #173	@ 0xad
 80017e8:	215e      	movs	r1, #94	@ 0x5e
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fd3c 	bl	8004268 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	22c6      	movs	r2, #198	@ 0xc6
 80017f4:	2161      	movs	r1, #97	@ 0x61
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fd36 	bl	8004268 <VL53L1_WrWord>
					0x00C6);
			break;
 80017fc:	e02f      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001804:	215e      	movs	r1, #94	@ 0x5e
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fd2e 	bl	8004268 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001812:	2161      	movs	r1, #97	@ 0x61
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fd27 	bl	8004268 <VL53L1_WrWord>
					0x01EA);
			break;
 800181a:	e020      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001822:	215e      	movs	r1, #94	@ 0x5e
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fd1f 	bl	8004268 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001830:	2161      	movs	r1, #97	@ 0x61
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fd18 	bl	8004268 <VL53L1_WrWord>
					0x02F8);
			break;
 8001838:	e011      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f240 428f 	movw	r2, #1167	@ 0x48f
 8001840:	215e      	movs	r1, #94	@ 0x5e
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fd10 	bl	8004268 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 800184e:	2161      	movs	r1, #97	@ 0x61
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fd09 	bl	8004268 <VL53L1_WrWord>
					0x04A4);
			break;
 8001856:	e002      	b.n	800185e <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
			break;
 800185c:	bf00      	nop
		}
	}
	return status;
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	6039      	str	r1, [r7, #0]
 8001874:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 800187a:	f107 020c 	add.w	r2, r7, #12
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	215e      	movs	r1, #94	@ 0x5e
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fc7e 	bl	8004184 <VL53L1_RdWord>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4313      	orrs	r3, r2
 8001890:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8001892:	89bb      	ldrh	r3, [r7, #12]
 8001894:	f240 5291 	movw	r2, #1425	@ 0x591
 8001898:	4293      	cmp	r3, r2
 800189a:	d05b      	beq.n	8001954 <VL53L1X_GetTimingBudgetInMs+0xea>
 800189c:	f240 5291 	movw	r2, #1425	@ 0x591
 80018a0:	4293      	cmp	r3, r2
 80018a2:	dc5c      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018a4:	f240 428f 	movw	r2, #1167	@ 0x48f
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d053      	beq.n	8001954 <VL53L1X_GetTimingBudgetInMs+0xea>
 80018ac:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 80018b0:	da55      	bge.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018b2:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d048      	beq.n	800194c <VL53L1X_GetTimingBudgetInMs+0xe2>
 80018ba:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80018be:	4293      	cmp	r3, r2
 80018c0:	dc4d      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018c2:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d03c      	beq.n	8001944 <VL53L1X_GetTimingBudgetInMs+0xda>
 80018ca:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dc45      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018d2:	f240 22d9 	movw	r2, #729	@ 0x2d9
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d038      	beq.n	800194c <VL53L1X_GetTimingBudgetInMs+0xe2>
 80018da:	f240 22d9 	movw	r2, #729	@ 0x2d9
 80018de:	4293      	cmp	r3, r2
 80018e0:	dc3d      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018e2:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 80018e6:	d02d      	beq.n	8001944 <VL53L1X_GetTimingBudgetInMs+0xda>
 80018e8:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 80018ec:	dc37      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018ee:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 80018f2:	d023      	beq.n	800193c <VL53L1X_GetTimingBudgetInMs+0xd2>
 80018f4:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 80018f8:	dc31      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 80018fa:	2bd6      	cmp	r3, #214	@ 0xd6
 80018fc:	d01a      	beq.n	8001934 <VL53L1X_GetTimingBudgetInMs+0xca>
 80018fe:	2bd6      	cmp	r3, #214	@ 0xd6
 8001900:	dc2d      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001902:	2bad      	cmp	r3, #173	@ 0xad
 8001904:	d01a      	beq.n	800193c <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001906:	2bad      	cmp	r3, #173	@ 0xad
 8001908:	dc29      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 800190a:	2b60      	cmp	r3, #96	@ 0x60
 800190c:	d012      	beq.n	8001934 <VL53L1X_GetTimingBudgetInMs+0xca>
 800190e:	2b60      	cmp	r3, #96	@ 0x60
 8001910:	dc25      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001912:	2b51      	cmp	r3, #81	@ 0x51
 8001914:	d00a      	beq.n	800192c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001916:	2b51      	cmp	r3, #81	@ 0x51
 8001918:	dc21      	bgt.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
 800191a:	2b1d      	cmp	r3, #29
 800191c:	d002      	beq.n	8001924 <VL53L1X_GetTimingBudgetInMs+0xba>
 800191e:	2b1e      	cmp	r3, #30
 8001920:	d004      	beq.n	800192c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001922:	e01c      	b.n	800195e <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	220f      	movs	r2, #15
 8001928:	801a      	strh	r2, [r3, #0]
			break;
 800192a:	e01d      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2214      	movs	r2, #20
 8001930:	801a      	strh	r2, [r3, #0]
			break;
 8001932:	e019      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2221      	movs	r2, #33	@ 0x21
 8001938:	801a      	strh	r2, [r3, #0]
			break;
 800193a:	e015      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	801a      	strh	r2, [r3, #0]
			break;
 8001942:	e011      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2264      	movs	r2, #100	@ 0x64
 8001948:	801a      	strh	r2, [r3, #0]
			break;
 800194a:	e00d      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	22c8      	movs	r2, #200	@ 0xc8
 8001950:	801a      	strh	r2, [r3, #0]
			break;
 8001952:	e009      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800195a:	801a      	strh	r2, [r3, #0]
			break;
 800195c:	e004      	b.n	8001968 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	4613      	mov	r3, r2
 8001982:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8001988:	f107 020c 	add.w	r2, r7, #12
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff6a 	bl	800186a <VL53L1X_GetTimingBudgetInMs>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	4313      	orrs	r3, r2
 800199e:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 80019a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <VL53L1X_SetDistanceMode+0x38>
		return 1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e07f      	b.n	8001aac <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d002      	beq.n	80019b8 <VL53L1X_SetDistanceMode+0x44>
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d033      	beq.n	8001a1e <VL53L1X_SetDistanceMode+0xaa>
 80019b6:	e065      	b.n	8001a84 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2214      	movs	r2, #20
 80019bc:	214b      	movs	r1, #75	@ 0x4b
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fc30 	bl	8004224 <VL53L1_WrByte>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	2207      	movs	r2, #7
 80019cc:	2160      	movs	r1, #96	@ 0x60
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fc28 	bl	8004224 <VL53L1_WrByte>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2205      	movs	r2, #5
 80019dc:	2163      	movs	r1, #99	@ 0x63
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fc20 	bl	8004224 <VL53L1_WrByte>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	2238      	movs	r2, #56	@ 0x38
 80019ec:	2169      	movs	r1, #105	@ 0x69
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fc18 	bl	8004224 <VL53L1_WrByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f240 7205 	movw	r2, #1797	@ 0x705
 80019fe:	2178      	movs	r1, #120	@ 0x78
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fc31 	bl	8004268 <VL53L1_WrWord>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f240 6206 	movw	r2, #1542	@ 0x606
 8001a10:	217a      	movs	r1, #122	@ 0x7a
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fc28 	bl	8004268 <VL53L1_WrWord>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
		break;
 8001a1c:	e035      	b.n	8001a8a <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	220a      	movs	r2, #10
 8001a22:	214b      	movs	r1, #75	@ 0x4b
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fbfd 	bl	8004224 <VL53L1_WrByte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	220f      	movs	r2, #15
 8001a32:	2160      	movs	r1, #96	@ 0x60
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fbf5 	bl	8004224 <VL53L1_WrByte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	220d      	movs	r2, #13
 8001a42:	2163      	movs	r1, #99	@ 0x63
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fbed 	bl	8004224 <VL53L1_WrByte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	22b8      	movs	r2, #184	@ 0xb8
 8001a52:	2169      	movs	r1, #105	@ 0x69
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fbe5 	bl	8004224 <VL53L1_WrByte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f640 720d 	movw	r2, #3853	@ 0xf0d
 8001a64:	2178      	movs	r1, #120	@ 0x78
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fbfe 	bl	8004268 <VL53L1_WrWord>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8001a76:	217a      	movs	r1, #122	@ 0x7a
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fbf5 	bl	8004268 <VL53L1_WrWord>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
		break;
 8001a82:	e002      	b.n	8001a8a <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
		break;
 8001a88:	bf00      	nop
	}

	if (status == 0)
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8001a92:	89ba      	ldrh	r2, [r7, #12]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fdd0 	bl	800163e <VL53L1X_SetTimingBudgetInMs>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	73fb      	strb	r3, [r7, #15]
	return status;
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001ac4:	f107 020e 	add.w	r2, r7, #14
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	214b      	movs	r1, #75	@ 0x4b
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fb37 	bl	8004140 <VL53L1_RdByte>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	2b14      	cmp	r3, #20
 8001ae4:	d102      	bne.n	8001aec <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	2b0a      	cmp	r3, #10
 8001af0:	d102      	bne.n	8001af8 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	801a      	strh	r2, [r3, #0]
	return status;
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	0000      	movs	r0, r0
	...

08001b08 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001b18:	f107 020c 	add.w	r2, r7, #12
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	21de      	movs	r1, #222	@ 0xde
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 fb2f 	bl	8004184 <VL53L1_RdWord>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd05 	bl	8000554 <__aeabi_ui2d>
 8001b4a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001b78 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fd7a 	bl	8000648 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f84c 	bl	8000bf8 <__aeabi_d2uiz>
 8001b60:	4602      	mov	r2, r0
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	216c      	movs	r1, #108	@ 0x6c
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fbaa 	bl	80042c0 <VL53L1_WrDWord>
	return status;
 8001b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	33333333 	.word	0x33333333
 8001b7c:	3ff13333 	.word	0x3ff13333

08001b80 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001b90:	f107 020c 	add.w	r2, r7, #12
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	2196      	movs	r1, #150	@ 0x96
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 faf3 	bl	8004184 <VL53L1_RdWord>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001ba8:	89ba      	ldrh	r2, [r7, #12]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	801a      	strh	r2, [r3, #0]
	return status;
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8001bce:	88bb      	ldrh	r3, [r7, #4]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8001bd6:	89ba      	ldrh	r2, [r7, #12]
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	211e      	movs	r1, #30
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fb43 	bl	8004268 <VL53L1_WrWord>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fb38 	bl	8004268 <VL53L1_WrWord>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2122      	movs	r1, #34	@ 0x22
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fb2d 	bl	8004268 <VL53L1_WrWord>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2118      	movs	r1, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 fb12 	bl	8004268 <VL53L1_WrWord>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	2200      	movs	r2, #0
 8001c52:	211a      	movs	r1, #26
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fb07 	bl	8004268 <VL53L1_WrWord>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <VL53L1X_SetXtalk+0x74>)
 8001c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6e:	1192      	asrs	r2, r2, #6
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2116      	movs	r1, #22
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 faf4 	bl	8004268 <VL53L1_WrWord>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	80fb      	strh	r3, [r7, #6]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80bb      	strh	r3, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 8001cc2:	f107 020e 	add.w	r2, r7, #14
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2146      	movs	r1, #70	@ 0x46
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fa38 	bl	8004140 <VL53L1_RdByte>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & (~0x6F);
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	f023 036f 	bic.w	r3, r3, #111	@ 0x6f
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	73bb      	strb	r3, [r7, #14]
	Temp = Temp|Window;
 8001ce4:	7bba      	ldrb	r2, [r7, #14]
 8001ce6:	787b      	ldrb	r3, [r7, #1]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 8001cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <VL53L1X_SetDistanceThreshold+0x6c>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,Temp);
 8001cf6:	7bba      	ldrb	r2, [r7, #14]
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2146      	movs	r1, #70	@ 0x46
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fa91 	bl	8004224 <VL53L1_WrByte>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e00a      	b.n	8001d1e <VL53L1X_SetDistanceThreshold+0x82>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,(Temp | 0x40));
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	2146      	movs	r1, #70	@ 0x46
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fa85 	bl	8004224 <VL53L1_WrByte>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	2172      	movs	r1, #114	@ 0x72
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fa9f 	bl	8004268 <VL53L1_WrWord>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8001d34:	88ba      	ldrh	r2, [r7, #4]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	2174      	movs	r1, #116	@ 0x74
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fa94 	bl	8004268 <VL53L1_WrWord>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
	...

08001d58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_FREERTOS_Init+0x2c>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	461d      	mov	r5, r3
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00a fce6 	bl	800c742 <osThreadCreate>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a03      	ldr	r2, [pc, #12]	@ (8001d88 <MX_FREERTOS_Init+0x30>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bdb0      	pop	{r4, r5, r7, pc}
 8001d84:	080117b8 	.word	0x080117b8
 8001d88:	20000204 	.word	0x20000204

08001d8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f00a fcfb 	bl	800c790 <osDelay>
 8001d9a:	e7fb      	b.n	8001d94 <StartDefaultTask+0x8>

08001d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <MX_DMA_Init+0x50>)
 8001da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da6:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <MX_DMA_Init+0x50>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <MX_DMA_Init+0x50>)
 8001db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <MX_DMA_Init+0x50>)
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <MX_DMA_Init+0x50>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <MX_DMA_Init+0x50>)
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2105      	movs	r1, #5
 8001dd6:	200b      	movs	r0, #11
 8001dd8:	f002 fcb8 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ddc:	200b      	movs	r0, #11
 8001dde:	f002 fccf 	bl	8004780 <HAL_NVIC_EnableIRQ>

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <lidar_begin>:

/**
 * @brief Démarre le scan LIDAR
 * @return 0 si succès
 */
int lidar_begin() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
    uint8_t cmd_buff[2] = {CMD_HEADER, CMD_INIT};
 8001df6:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8001dfa:	80bb      	strh	r3, [r7, #4]
    uart_dma_receive(g_raw_data, BUFFER_SIZE);
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <lidar_begin+0x30>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e04:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <lidar_begin+0x34>)
 8001e06:	4798      	blx	r3
    uart_transmit(cmd_buff, 2);
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <lidar_begin+0x38>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1d3a      	adds	r2, r7, #4
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4610      	mov	r0, r2
 8001e12:	4798      	blx	r3
    return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20001a70 	.word	0x20001a70
 8001e24:	20000208 	.word	0x20000208
 8001e28:	20001a5c 	.word	0x20001a5c

08001e2c <lidar_end>:

/**
 * @brief Arrête le scan LIDAR
 * @return 0 si succès
 */
int lidar_end() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
    uint8_t cmd_buff[2] = {CMD_HEADER, CMD_HALT};
 8001e32:	f246 53a5 	movw	r3, #26021	@ 0x65a5
 8001e36:	80bb      	strh	r3, [r7, #4]
    uart_transmit(cmd_buff, 2);
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <lidar_end+0x24>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1d3a      	adds	r2, r7, #4
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4610      	mov	r0, r2
 8001e42:	4798      	blx	r3
    return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20001a5c 	.word	0x20001a5c

08001e54 <lidar_query_status>:

/**
 * @brief Interroge le statut du LIDAR
 * @return 0 si succès
 */
int lidar_query_status() {
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b0a3      	sub	sp, #140	@ 0x8c
 8001e58:	af10      	add	r7, sp, #64	@ 0x40
    uint8_t cmd_buff[2] = {CMD_HEADER, CMD_STATUS};
 8001e5a:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8001e5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uart_transmit(cmd_buff, 2);
 8001e62:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <lidar_query_status+0x160>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4798      	blx	r3
    uart_poll_receive(g_status_data, INFO_BUFF_SIZE);
 8001e70:	4b51      	ldr	r3, [pc, #324]	@ (8001fb8 <lidar_query_status+0x164>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	211b      	movs	r1, #27
 8001e76:	4851      	ldr	r0, [pc, #324]	@ (8001fbc <lidar_query_status+0x168>)
 8001e78:	4798      	blx	r3

    // Format et affiche les informations reçues
    printf("Start sign : %x\r\n", (g_status_data[0]<<8) | g_status_data[1]);
 8001e7a:	4b50      	ldr	r3, [pc, #320]	@ (8001fbc <lidar_query_status+0x168>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4a4e      	ldr	r2, [pc, #312]	@ (8001fbc <lidar_query_status+0x168>)
 8001e82:	7852      	ldrb	r2, [r2, #1]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	484d      	ldr	r0, [pc, #308]	@ (8001fc0 <lidar_query_status+0x16c>)
 8001e8a:	f00d f85f 	bl	800ef4c <iprintf>
    printf("Length : %ld\r\n", (uint32_t)(g_status_data[2] | (g_status_data[3]<<8) | (g_status_data[4]<<16)));
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <lidar_query_status+0x168>)
 8001e90:	789b      	ldrb	r3, [r3, #2]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <lidar_query_status+0x168>)
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <lidar_query_status+0x168>)
 8001e9e:	791b      	ldrb	r3, [r3, #4]
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4847      	ldr	r0, [pc, #284]	@ (8001fc4 <lidar_query_status+0x170>)
 8001ea8:	f00d f850 	bl	800ef4c <iprintf>
    printf("Mode : %x\r\n", g_status_data[5]);
 8001eac:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <lidar_query_status+0x168>)
 8001eae:	795b      	ldrb	r3, [r3, #5]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4845      	ldr	r0, [pc, #276]	@ (8001fc8 <lidar_query_status+0x174>)
 8001eb4:	f00d f84a 	bl	800ef4c <iprintf>
    printf("Type code : %x\r\n", g_status_data[6]);
 8001eb8:	4b40      	ldr	r3, [pc, #256]	@ (8001fbc <lidar_query_status+0x168>)
 8001eba:	799b      	ldrb	r3, [r3, #6]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4843      	ldr	r0, [pc, #268]	@ (8001fcc <lidar_query_status+0x178>)
 8001ec0:	f00d f844 	bl	800ef4c <iprintf>
    printf("Model : %x\r\n", g_status_data[7]);
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fbc <lidar_query_status+0x168>)
 8001ec6:	79db      	ldrb	r3, [r3, #7]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4841      	ldr	r0, [pc, #260]	@ (8001fd0 <lidar_query_status+0x17c>)
 8001ecc:	f00d f83e 	bl	800ef4c <iprintf>

    // Format version firmware
    char firmware[6];
    snprintf(firmware, 6, "%d.%d", g_status_data[8], g_status_data[9]);
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <lidar_query_status+0x168>)
 8001ed2:	7a1b      	ldrb	r3, [r3, #8]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b39      	ldr	r3, [pc, #228]	@ (8001fbc <lidar_query_status+0x168>)
 8001ed8:	7a5b      	ldrb	r3, [r3, #9]
 8001eda:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fd4 <lidar_query_status+0x180>)
 8001ee4:	2106      	movs	r1, #6
 8001ee6:	f00d f8a1 	bl	800f02c <sniprintf>
    printf("Firmware version : %s\r\n", firmware);
 8001eea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4839      	ldr	r0, [pc, #228]	@ (8001fd8 <lidar_query_status+0x184>)
 8001ef2:	f00d f82b 	bl	800ef4c <iprintf>
    printf("Hardware version : %d\r\n", g_status_data[10]);
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <lidar_query_status+0x168>)
 8001ef8:	7a9b      	ldrb	r3, [r3, #10]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4837      	ldr	r0, [pc, #220]	@ (8001fdc <lidar_query_status+0x188>)
 8001efe:	f00d f825 	bl	800ef4c <iprintf>

    // Format numéro de série
    char serial[17];
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
             g_status_data[11], g_status_data[12], g_status_data[13],
 8001f02:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <lidar_query_status+0x168>)
 8001f04:	7adb      	ldrb	r3, [r3, #11]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f06:	469c      	mov	ip, r3
             g_status_data[11], g_status_data[12], g_status_data[13],
 8001f08:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <lidar_query_status+0x168>)
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f0c:	461c      	mov	r4, r3
             g_status_data[11], g_status_data[12], g_status_data[13],
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <lidar_query_status+0x168>)
 8001f10:	7b5b      	ldrb	r3, [r3, #13]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f12:	461d      	mov	r5, r3
             g_status_data[14], g_status_data[15], g_status_data[16],
 8001f14:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <lidar_query_status+0x168>)
 8001f16:	7b9b      	ldrb	r3, [r3, #14]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f18:	461e      	mov	r6, r3
             g_status_data[14], g_status_data[15], g_status_data[16],
 8001f1a:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <lidar_query_status+0x168>)
 8001f1c:	7bdb      	ldrb	r3, [r3, #15]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
             g_status_data[14], g_status_data[15], g_status_data[16],
 8001f20:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <lidar_query_status+0x168>)
 8001f22:	7c1b      	ldrb	r3, [r3, #16]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f24:	623b      	str	r3, [r7, #32]
             g_status_data[17], g_status_data[18], g_status_data[19],
 8001f26:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <lidar_query_status+0x168>)
 8001f28:	7c5b      	ldrb	r3, [r3, #17]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f2a:	61fb      	str	r3, [r7, #28]
             g_status_data[17], g_status_data[18], g_status_data[19],
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <lidar_query_status+0x168>)
 8001f2e:	7c9b      	ldrb	r3, [r3, #18]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f30:	61bb      	str	r3, [r7, #24]
             g_status_data[17], g_status_data[18], g_status_data[19],
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <lidar_query_status+0x168>)
 8001f34:	7cdb      	ldrb	r3, [r3, #19]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f36:	617b      	str	r3, [r7, #20]
             g_status_data[20], g_status_data[21], g_status_data[22],
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <lidar_query_status+0x168>)
 8001f3a:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f3c:	613b      	str	r3, [r7, #16]
             g_status_data[20], g_status_data[21], g_status_data[22],
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <lidar_query_status+0x168>)
 8001f40:	7d5b      	ldrb	r3, [r3, #21]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f42:	60fb      	str	r3, [r7, #12]
             g_status_data[20], g_status_data[21], g_status_data[22],
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <lidar_query_status+0x168>)
 8001f46:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f48:	60bb      	str	r3, [r7, #8]
             g_status_data[23], g_status_data[24], g_status_data[25],
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <lidar_query_status+0x168>)
 8001f4c:	7ddb      	ldrb	r3, [r3, #23]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f4e:	607b      	str	r3, [r7, #4]
             g_status_data[23], g_status_data[24], g_status_data[25],
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <lidar_query_status+0x168>)
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f54:	4619      	mov	r1, r3
             g_status_data[23], g_status_data[24], g_status_data[25],
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <lidar_query_status+0x168>)
 8001f58:	7e5b      	ldrb	r3, [r3, #25]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f5a:	461a      	mov	r2, r3
             g_status_data[26]);
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <lidar_query_status+0x168>)
 8001f5e:	7e9b      	ldrb	r3, [r3, #26]
    snprintf(serial, 17, "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",
 8001f60:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f64:	930e      	str	r3, [sp, #56]	@ 0x38
 8001f66:	920d      	str	r2, [sp, #52]	@ 0x34
 8001f68:	910c      	str	r1, [sp, #48]	@ 0x30
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	920a      	str	r2, [sp, #40]	@ 0x28
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	9208      	str	r2, [sp, #32]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	9207      	str	r2, [sp, #28]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	9206      	str	r2, [sp, #24]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	9205      	str	r2, [sp, #20]
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	9204      	str	r2, [sp, #16]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9602      	str	r6, [sp, #8]
 8001f90:	9501      	str	r5, [sp, #4]
 8001f92:	9400      	str	r4, [sp, #0]
 8001f94:	4663      	mov	r3, ip
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <lidar_query_status+0x18c>)
 8001f98:	2111      	movs	r1, #17
 8001f9a:	f00d f847 	bl	800f02c <sniprintf>
    printf("Serial number : %s\r\n", serial);
 8001f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480f      	ldr	r0, [pc, #60]	@ (8001fe4 <lidar_query_status+0x190>)
 8001fa6:	f00c ffd1 	bl	800ef4c <iprintf>

    return 0;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	374c      	adds	r7, #76	@ 0x4c
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb4:	20001a5c 	.word	0x20001a5c
 8001fb8:	20001a68 	.word	0x20001a68
 8001fbc:	200009d8 	.word	0x200009d8
 8001fc0:	080117cc 	.word	0x080117cc
 8001fc4:	080117e0 	.word	0x080117e0
 8001fc8:	080117f0 	.word	0x080117f0
 8001fcc:	080117fc 	.word	0x080117fc
 8001fd0:	08011810 	.word	0x08011810
 8001fd4:	08011820 	.word	0x08011820
 8001fd8:	08011828 	.word	0x08011828
 8001fdc:	08011840 	.word	0x08011840
 8001fe0:	08011858 	.word	0x08011858
 8001fe4:	0801187c 	.word	0x0801187c

08001fe8 <lidar_check_health>:

/**
 * @brief Vérifie l'état de santé du LIDAR
 * @return 0 si succès
 */
int lidar_check_health() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
    uint8_t cmd_buff[2] = {CMD_HEADER, CMD_DIAG};
 8001fee:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8001ff2:	80bb      	strh	r3, [r7, #4]
    uart_transmit(cmd_buff, 2);
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <lidar_check_health+0x98>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1d3a      	adds	r2, r7, #4
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4798      	blx	r3
    uart_poll_receive(g_diag_data, HEALTH_BUFF_SIZE);
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <lidar_check_health+0x9c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	210a      	movs	r1, #10
 8002006:	4820      	ldr	r0, [pc, #128]	@ (8002088 <lidar_check_health+0xa0>)
 8002008:	4798      	blx	r3

    // Affiche les données de diagnostic
    printf("Start sign : %x\r\n", (g_diag_data[0]<<8) | g_diag_data[1]);
 800200a:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <lidar_check_health+0xa0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <lidar_check_health+0xa0>)
 8002012:	7852      	ldrb	r2, [r2, #1]
 8002014:	4313      	orrs	r3, r2
 8002016:	4619      	mov	r1, r3
 8002018:	481c      	ldr	r0, [pc, #112]	@ (800208c <lidar_check_health+0xa4>)
 800201a:	f00c ff97 	bl	800ef4c <iprintf>
    printf("Length : %ld\r\n", (uint32_t)(g_diag_data[2] | (g_diag_data[3]<<8) | (g_diag_data[4]<<16)));
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <lidar_check_health+0xa0>)
 8002020:	789b      	ldrb	r3, [r3, #2]
 8002022:	461a      	mov	r2, r3
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <lidar_check_health+0xa0>)
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	431a      	orrs	r2, r3
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <lidar_check_health+0xa0>)
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4313      	orrs	r3, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4816      	ldr	r0, [pc, #88]	@ (8002090 <lidar_check_health+0xa8>)
 8002038:	f00c ff88 	bl	800ef4c <iprintf>
    printf("Mode : %x\r\n", g_diag_data[5]);
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <lidar_check_health+0xa0>)
 800203e:	795b      	ldrb	r3, [r3, #5]
 8002040:	4619      	mov	r1, r3
 8002042:	4814      	ldr	r0, [pc, #80]	@ (8002094 <lidar_check_health+0xac>)
 8002044:	f00c ff82 	bl	800ef4c <iprintf>
    printf("Type code : %x\r\n", g_diag_data[6]);
 8002048:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <lidar_check_health+0xa0>)
 800204a:	799b      	ldrb	r3, [r3, #6]
 800204c:	4619      	mov	r1, r3
 800204e:	4812      	ldr	r0, [pc, #72]	@ (8002098 <lidar_check_health+0xb0>)
 8002050:	f00c ff7c 	bl	800ef4c <iprintf>
    printf("Status code : %x\r\n", g_diag_data[7]);
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <lidar_check_health+0xa0>)
 8002056:	79db      	ldrb	r3, [r3, #7]
 8002058:	4619      	mov	r1, r3
 800205a:	4810      	ldr	r0, [pc, #64]	@ (800209c <lidar_check_health+0xb4>)
 800205c:	f00c ff76 	bl	800ef4c <iprintf>
    printf("Error code : %x\r\n", g_diag_data[8] | (g_diag_data[9]<<8));
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <lidar_check_health+0xa0>)
 8002062:	7a1b      	ldrb	r3, [r3, #8]
 8002064:	461a      	mov	r2, r3
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <lidar_check_health+0xa0>)
 8002068:	7a5b      	ldrb	r3, [r3, #9]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	4313      	orrs	r3, r2
 800206e:	4619      	mov	r1, r3
 8002070:	480b      	ldr	r0, [pc, #44]	@ (80020a0 <lidar_check_health+0xb8>)
 8002072:	f00c ff6b 	bl	800ef4c <iprintf>

    return 0;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20001a5c 	.word	0x20001a5c
 8002084:	20001a68 	.word	0x20001a68
 8002088:	200009f4 	.word	0x200009f4
 800208c:	080117cc 	.word	0x080117cc
 8002090:	080117e0 	.word	0x080117e0
 8002094:	080117f0 	.word	0x080117f0
 8002098:	080117fc 	.word	0x080117fc
 800209c:	08011894 	.word	0x08011894
 80020a0:	080118a8 	.word	0x080118a8

080020a4 <lidar_parse_data>:
}

/**
 * @brief Parse les données brutes en distances et angles
 */
void lidar_parse_data() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
    uint16_t signal;
    int distance;
    int angle;
    int angle_start = (g_start_angle >> 1);
 80020aa:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <lidar_parse_data+0xd4>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	61bb      	str	r3, [r7, #24]
    int angle_end = (g_end_angle >> 1);
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <lidar_parse_data+0xd8>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	617b      	str	r3, [r7, #20]
    int index;

    for(int i = 0; i < g_current_idx/2; i++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e04a      	b.n	800215a <lidar_parse_data+0xb6>
        // Reconstruction du signal 16 bits
        signal = g_packet_data[2*i] | (g_packet_data[2*i+1] << 8);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <lidar_parse_data+0xdc>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	3301      	adds	r3, #1
 80020d4:	492a      	ldr	r1, [pc, #168]	@ (8002180 <lidar_parse_data+0xdc>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	827b      	strh	r3, [r7, #18]
        distance = signal/4;  // Conversion en distance
 80020e2:	8a7b      	ldrh	r3, [r7, #18]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	60fb      	str	r3, [r7, #12]

        // Calcul de l'angle interpolé
        angle = angle_start/64 + i*(angle_end-angle_start)/64/(g_frame_type-1);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da00      	bge.n	80020f2 <lidar_parse_data+0x4e>
 80020f0:	333f      	adds	r3, #63	@ 0x3f
 80020f2:	119b      	asrs	r3, r3, #6
 80020f4:	4619      	mov	r1, r3
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	da00      	bge.n	8002108 <lidar_parse_data+0x64>
 8002106:	333f      	adds	r3, #63	@ 0x3f
 8002108:	119b      	asrs	r3, r3, #6
 800210a:	461a      	mov	r2, r3
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <lidar_parse_data+0xe0>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	fb92 f3f3 	sdiv	r3, r2, r3
 8002116:	440b      	add	r3, r1
 8002118:	60bb      	str	r3, [r7, #8]
        index = round(angle);
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	f7fe fa2a 	bl	8000574 <__aeabi_i2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fd3e 	bl	8000ba8 <__aeabi_d2iz>
 800212c:	4603      	mov	r3, r0
 800212e:	607b      	str	r3, [r7, #4]

        // Filtrage des distances invalides
        if(distance > 2000 || distance < 100) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002136:	dc02      	bgt.n	800213e <lidar_parse_data+0x9a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b63      	cmp	r3, #99	@ 0x63
 800213c:	dc05      	bgt.n	800214a <lidar_parse_data+0xa6>
            g_scan_data[index] = 0;
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <lidar_parse_data+0xe4>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2100      	movs	r1, #0
 8002144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002148:	e004      	b.n	8002154 <lidar_parse_data+0xb0>
        } else {
            g_scan_data[index] = distance;
 800214a:	490f      	ldr	r1, [pc, #60]	@ (8002188 <lidar_parse_data+0xe4>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < g_current_idx/2; i++) {
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <lidar_parse_data+0xe8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0fda      	lsrs	r2, r3, #31
 8002160:	4413      	add	r3, r2
 8002162:	105b      	asrs	r3, r3, #1
 8002164:	461a      	mov	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4293      	cmp	r3, r2
 800216a:	dbab      	blt.n	80020c4 <lidar_parse_data+0x20>
        }
    }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001a56 	.word	0x20001a56
 800217c:	20001a58 	.word	0x20001a58
 8002180:	20000a00 	.word	0x20000a00
 8002184:	20001a54 	.word	0x20001a54
 8002188:	20000a5c 	.word	0x20000a5c
 800218c:	2000159c 	.word	0x2000159c

08002190 <calc_avg_dist>:

/**
 * @brief Calcule la distance moyenne sur un segment
 */
int calc_avg_dist(int debut, int fin) {
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    int somme = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
    for(int i = debut; i <= fin; i++) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	e009      	b.n	80021b8 <calc_avg_dist+0x28>
        somme += g_clean_data[i];
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <calc_avg_dist+0x4c>)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
    for(int i = debut; i <= fin; i++) {
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	ddf1      	ble.n	80021a4 <calc_avg_dist+0x14>
    }
    return somme / (fin - debut + 1);
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000ffc 	.word	0x20000ffc

080021e0 <smooth_data>:

/**
 * @brief Lisse les données par filtrage adaptatif
 */
void smooth_data() {
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	f5ad 6dbe 	sub.w	sp, sp, #1520	@ 0x5f0
 80021e6:	af00      	add	r7, sp, #0
    float temp_buffer[NB_DEGRES];
    const float gaussian_weights[5] = {0.06, 0.24, 0.4, 0.24, 0.06};
 80021e8:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80021ec:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 80021f0:	4ad3      	ldr	r2, [pc, #844]	@ (8002540 <smooth_data+0x360>)
 80021f2:	461c      	mov	r4, r3
 80021f4:	4615      	mov	r5, r2
 80021f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fa:	682b      	ldr	r3, [r5, #0]
 80021fc:	6023      	str	r3, [r4, #0]
    const int half_window = 2;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4

    for(int i = 0; i < NB_DEGRES; i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 800220a:	e18f      	b.n	800252c <smooth_data+0x34c>
        float sum = 0;
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f507 62bd 	add.w	r2, r7, #1512	@ 0x5e8
 8002214:	6013      	str	r3, [r2, #0]
        float weight_sum = 0;
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f207 52e4 	addw	r2, r7, #1508	@ 0x5e4
 800221e:	6013      	str	r3, [r2, #0]
        float local_mean = 0;
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	f507 62bc 	add.w	r2, r7, #1504	@ 0x5e0
 8002228:	6013      	str	r3, [r2, #0]
        float local_std = 0;
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f207 52dc 	addw	r2, r7, #1500	@ 0x5dc
 8002232:	6013      	str	r3, [r2, #0]
        int valid_samples = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8

        // Calcul moyenne locale
        for(int j = -half_window; j <= half_window; j++) {
 800223a:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 800223e:	425b      	negs	r3, r3
 8002240:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 8002244:	e033      	b.n	80022ae <smooth_data+0xce>
            int idx = i + j;
 8002246:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 800224a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 800224e:	4413      	add	r3, r2
 8002250:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
            if(idx >= 0 && idx < NB_DEGRES && g_scan_data[idx] > 0) {
 8002254:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 8002258:	2b00      	cmp	r3, #0
 800225a:	db23      	blt.n	80022a4 <smooth_data+0xc4>
 800225c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 8002260:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002264:	da1e      	bge.n	80022a4 <smooth_data+0xc4>
 8002266:	4ab7      	ldr	r2, [pc, #732]	@ (8002544 <smooth_data+0x364>)
 8002268:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	dd17      	ble.n	80022a4 <smooth_data+0xc4>
                local_mean += g_scan_data[idx];
 8002274:	4ab3      	ldr	r2, [pc, #716]	@ (8002544 <smooth_data+0x364>)
 8002276:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002286:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8002296:	edc3 7a00 	vstr	s15, [r3]
                valid_samples++;
 800229a:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
        for(int j = -half_window; j <= half_window; j++) {
 80022a4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80022ae:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 80022b2:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80022b6:	429a      	cmp	r2, r3
 80022b8:	ddc5      	ble.n	8002246 <smooth_data+0x66>
            }
        }
        if(valid_samples > 0) {
 80022ba:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dd0f      	ble.n	80022e2 <smooth_data+0x102>
            local_mean /= valid_samples;
 80022c2:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ce:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80022d2:	edd3 6a00 	vldr	s13, [r3]
 80022d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022da:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80022de:	edc3 7a00 	vstr	s15, [r3]
        }

        // Calcul écart-type local
        valid_samples = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
        for(int j = -half_window; j <= half_window; j++) {
 80022e8:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80022ec:	425b      	negs	r3, r3
 80022ee:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 80022f2:	e04a      	b.n	800238a <smooth_data+0x1aa>
            int idx = i + j;
 80022f4:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 80022f8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80022fc:	4413      	add	r3, r2
 80022fe:	f8c7 35b8 	str.w	r3, [r7, #1464]	@ 0x5b8
            if(idx >= 0 && idx < NB_DEGRES && g_scan_data[idx] > 0) {
 8002302:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 8002306:	2b00      	cmp	r3, #0
 8002308:	db3a      	blt.n	8002380 <smooth_data+0x1a0>
 800230a:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 800230e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002312:	da35      	bge.n	8002380 <smooth_data+0x1a0>
 8002314:	4a8b      	ldr	r2, [pc, #556]	@ (8002544 <smooth_data+0x364>)
 8002316:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dd2e      	ble.n	8002380 <smooth_data+0x1a0>
                local_std += (g_scan_data[idx] - local_mean) * (g_scan_data[idx] - local_mean);
 8002322:	4a88      	ldr	r2, [pc, #544]	@ (8002544 <smooth_data+0x364>)
 8002324:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002334:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002340:	4a80      	ldr	r2, [pc, #512]	@ (8002544 <smooth_data+0x364>)
 8002342:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002352:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002362:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8002372:	edc3 7a00 	vstr	s15, [r3]
                valid_samples++;
 8002376:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800237a:	3301      	adds	r3, #1
 800237c:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
        for(int j = -half_window; j <= half_window; j++) {
 8002380:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 8002384:	3301      	adds	r3, #1
 8002386:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 800238a:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 800238e:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 8002392:	429a      	cmp	r2, r3
 8002394:	ddae      	ble.n	80022f4 <smooth_data+0x114>
            }
        }
        if(valid_samples > 1) {
 8002396:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 800239a:	2b01      	cmp	r3, #1
 800239c:	dd20      	ble.n	80023e0 <smooth_data+0x200>
            local_std = sqrt(local_std / (valid_samples - 1));
 800239e:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80023a2:	3b01      	subs	r3, #1
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ac:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023b8:	ee16 0a90 	vmov	r0, s13
 80023bc:	f7fe f8ec 	bl	8000598 <__aeabi_f2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	ec43 2b10 	vmov	d0, r2, r3
 80023c8:	f00e ff72 	bl	80112b0 <sqrt>
 80023cc:	ec53 2b10 	vmov	r2, r3, d0
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fc30 	bl	8000c38 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	f207 52dc 	addw	r2, r7, #1500	@ 0x5dc
 80023de:	6013      	str	r3, [r2, #0]
        }

        // Application du filtre
        for(int j = -half_window; j <= half_window; j++) {
 80023e0:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80023e4:	425b      	negs	r3, r3
 80023e6:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80023ea:	e06d      	b.n	80024c8 <smooth_data+0x2e8>
            int idx = i + j;
 80023ec:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 80023f0:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80023f4:	4413      	add	r3, r2
 80023f6:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
            if(idx >= 0 && idx < NB_DEGRES) {
 80023fa:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db5d      	blt.n	80024be <smooth_data+0x2de>
 8002402:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8002406:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800240a:	da58      	bge.n	80024be <smooth_data+0x2de>
                float weight = gaussian_weights[j + half_window];
 800240c:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	@ 0x5cc
 8002410:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 8002414:	4413      	add	r3, r2
 8002416:	f507 62be 	add.w	r2, r7, #1520	@ 0x5f0
 800241a:	f5a2 62be 	sub.w	r2, r2, #1520	@ 0x5f0
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f207 52bc 	addw	r2, r7, #1468	@ 0x5bc
 8002428:	6013      	str	r3, [r2, #0]
                if(g_scan_data[idx] > 0 && fabs(g_scan_data[idx] - local_mean) < 2 * local_std) {
 800242a:	4a46      	ldr	r2, [pc, #280]	@ (8002544 <smooth_data+0x364>)
 800242c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	2b00      	cmp	r3, #0
 8002436:	dd42      	ble.n	80024be <smooth_data+0x2de>
 8002438:	4a42      	ldr	r2, [pc, #264]	@ (8002544 <smooth_data+0x364>)
 800243a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244a:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002456:	eeb0 7ae7 	vabs.f32	s14, s15
 800245a:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	d526      	bpl.n	80024be <smooth_data+0x2de>
                    sum += g_scan_data[idx] * weight;
 8002470:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <smooth_data+0x364>)
 8002472:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002482:	f207 53bc 	addw	r3, r7, #1468	@ 0x5bc
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8002492:	ed93 7a00 	vldr	s14, [r3]
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 800249e:	edc3 7a00 	vstr	s15, [r3]
                    weight_sum += weight;
 80024a2:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80024a6:	ed93 7a00 	vldr	s14, [r3]
 80024aa:	f207 53bc 	addw	r3, r7, #1468	@ 0x5bc
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80024ba:	edc3 7a00 	vstr	s15, [r3]
        for(int j = -half_window; j <= half_window; j++) {
 80024be:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80024c2:	3301      	adds	r3, #1
 80024c4:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80024c8:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	@ 0x5cc
 80024cc:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dd8b      	ble.n	80023ec <smooth_data+0x20c>
                }
            }
        }

        temp_buffer[i] = (weight_sum > 0) ? sum / weight_sum : g_scan_data[i];
 80024d4:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	dd0a      	ble.n	80024fc <smooth_data+0x31c>
 80024e6:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 80024ea:	edd3 6a00 	vldr	s13, [r3]
 80024ee:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fa:	e008      	b.n	800250e <smooth_data+0x32e>
 80024fc:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <smooth_data+0x364>)
 80024fe:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250e:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8002512:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8002516:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < NB_DEGRES; i++) {
 8002522:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8002526:	3301      	adds	r3, #1
 8002528:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 800252c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	@ 0x5ec
 8002530:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002534:	f6ff ae6a 	blt.w	800220c <smooth_data+0x2c>
    }

    // Copie des résultats
    for(int i = 0; i < NB_DEGRES; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 800253e:	e026      	b.n	800258e <smooth_data+0x3ae>
 8002540:	080118bc 	.word	0x080118bc
 8002544:	20000a5c 	.word	0x20000a5c
        g_clean_data[i] = (int)round(temp_buffer[i]);
 8002548:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 800254c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8002550:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe f81c 	bl	8000598 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	ec43 2b10 	vmov	d0, r2, r3
 8002568:	f00e ffa8 	bl	80114bc <round>
 800256c:	ec53 2b10 	vmov	r2, r3, d0
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb18 	bl	8000ba8 <__aeabi_d2iz>
 8002578:	4602      	mov	r2, r0
 800257a:	490a      	ldr	r1, [pc, #40]	@ (80025a4 <smooth_data+0x3c4>)
 800257c:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NB_DEGRES; i++) {
 8002584:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 800258e:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8002592:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002596:	dbd7      	blt.n	8002548 <smooth_data+0x368>
    }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	f507 67be 	add.w	r7, r7, #1520	@ 0x5f0
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	20000ffc 	.word	0x20000ffc

080025a8 <detect_objects>:

/**
 * @brief Détecte les objets dans le scan
 */
void detect_objects() {
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
    g_object_count = 0;
 80025ae:	4b46      	ldr	r3, [pc, #280]	@ (80026c8 <detect_objects+0x120>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    int debut_cluster = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

    // Parcours des points du scan
    for(int i = 1; i < NB_DEGRES; i++) {
 80025b8:	2301      	movs	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e04c      	b.n	8002658 <detect_objects+0xb0>
        // Détection discontinuité
        if(fabs(g_clean_data[i] - g_clean_data[i-1]) > DETECT_THRESHOLD) {
 80025be:	4a43      	ldr	r2, [pc, #268]	@ (80026cc <detect_objects+0x124>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4940      	ldr	r1, [pc, #256]	@ (80026cc <detect_objects+0x124>)
 80025cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffce 	bl	8000574 <__aeabi_i2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4614      	mov	r4, r2
 80025de:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80025e2:	a337      	add	r3, pc, #220	@ (adr r3, 80026c0 <detect_objects+0x118>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	4620      	mov	r0, r4
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7fe fabc 	bl	8000b68 <__aeabi_dcmpgt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02d      	beq.n	8002652 <detect_objects+0xaa>
            // Calcul caractéristiques cluster
            int dist_moy = calc_avg_dist(debut_cluster, i-1);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	4619      	mov	r1, r3
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7ff fdc7 	bl	8002190 <calc_avg_dist>
 8002602:	6078      	str	r0, [r7, #4]
            int angle_moy = (debut_cluster + i-1) / 2;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	3b01      	subs	r3, #1
 800260c:	0fda      	lsrs	r2, r3, #31
 800260e:	4413      	add	r3, r2
 8002610:	105b      	asrs	r3, r3, #1
 8002612:	603b      	str	r3, [r7, #0]

            // Sauvegarde objet détecté
            if(g_object_count < MAX_OBJECTS) {
 8002614:	4b2c      	ldr	r3, [pc, #176]	@ (80026c8 <detect_objects+0x120>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b63      	cmp	r3, #99	@ 0x63
 800261a:	dc18      	bgt.n	800264e <detect_objects+0xa6>
                g_object_angles[g_object_count] = angle_moy;
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <detect_objects+0x120>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	492b      	ldr	r1, [pc, #172]	@ (80026d0 <detect_objects+0x128>)
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                g_object_distances[g_object_count] = dist_moy;
 8002628:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <detect_objects+0x120>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4929      	ldr	r1, [pc, #164]	@ (80026d4 <detect_objects+0x12c>)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                g_object_points[g_object_count] = i - debut_cluster;
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <detect_objects+0x120>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6939      	ldr	r1, [r7, #16]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	1a8a      	subs	r2, r1, r2
 800263e:	4926      	ldr	r1, [pc, #152]	@ (80026d8 <detect_objects+0x130>)
 8002640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                g_object_count++;
 8002644:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <detect_objects+0x120>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <detect_objects+0x120>)
 800264c:	6013      	str	r3, [r2, #0]
            }

            debut_cluster = i;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	617b      	str	r3, [r7, #20]
    for(int i = 1; i < NB_DEGRES; i++) {
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3301      	adds	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800265e:	dbae      	blt.n	80025be <detect_objects+0x16>
        }
    }

    // Traitement dernier cluster
    if(g_object_count < MAX_OBJECTS) {
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <detect_objects+0x120>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b63      	cmp	r3, #99	@ 0x63
 8002666:	dc25      	bgt.n	80026b4 <detect_objects+0x10c>
        int dist_moy = calc_avg_dist(debut_cluster, NB_DEGRES-1);
 8002668:	f240 1167 	movw	r1, #359	@ 0x167
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f7ff fd8f 	bl	8002190 <calc_avg_dist>
 8002672:	60f8      	str	r0, [r7, #12]
        int angle_moy = (debut_cluster + NB_DEGRES-1) / 2;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f203 1367 	addw	r3, r3, #359	@ 0x167
 800267a:	0fda      	lsrs	r2, r3, #31
 800267c:	4413      	add	r3, r2
 800267e:	105b      	asrs	r3, r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
        g_object_angles[g_object_count] = angle_moy;
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <detect_objects+0x120>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4912      	ldr	r1, [pc, #72]	@ (80026d0 <detect_objects+0x128>)
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_object_distances[g_object_count] = dist_moy;
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <detect_objects+0x120>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4910      	ldr	r1, [pc, #64]	@ (80026d4 <detect_objects+0x12c>)
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_object_points[g_object_count] = NB_DEGRES - debut_cluster;
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <detect_objects+0x120>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	f5c2 72b4 	rsb	r2, r2, #360	@ 0x168
 80026a4:	490c      	ldr	r1, [pc, #48]	@ (80026d8 <detect_objects+0x130>)
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_object_count++;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <detect_objects+0x120>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <detect_objects+0x120>)
 80026b2:	6013      	str	r3, [r2, #0]
    }
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bdb0      	pop	{r4, r5, r7, pc}
 80026bc:	f3af 8000 	nop.w
 80026c0:	00000000 	.word	0x00000000
 80026c4:	4062c000 	.word	0x4062c000
 80026c8:	20001a50 	.word	0x20001a50
 80026cc:	20000ffc 	.word	0x20000ffc
 80026d0:	200015a0 	.word	0x200015a0
 80026d4:	20001730 	.word	0x20001730
 80026d8:	200018c0 	.word	0x200018c0

080026dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <MX_GPIO_Init+0x164>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	4a52      	ldr	r2, [pc, #328]	@ (8002840 <MX_GPIO_Init+0x164>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fe:	4b50      	ldr	r3, [pc, #320]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800270a:	4b4d      	ldr	r3, [pc, #308]	@ (8002840 <MX_GPIO_Init+0x164>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	4a4c      	ldr	r2, [pc, #304]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002716:	4b4a      	ldr	r3, [pc, #296]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	4a46      	ldr	r2, [pc, #280]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <MX_GPIO_Init+0x164>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	4a40      	ldr	r2, [pc, #256]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <MX_GPIO_Init+0x164>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f248 0112 	movw	r1, #32786	@ 0x8012
 8002758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275c:	f002 fcd2 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2110      	movs	r1, #16
 8002764:	4837      	ldr	r0, [pc, #220]	@ (8002844 <MX_GPIO_Init+0x168>)
 8002766:	f002 fccd 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin|Status_Red_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002770:	4835      	ldr	r0, [pc, #212]	@ (8002848 <MX_GPIO_Init+0x16c>)
 8002772:	f002 fcc7 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_TOF2_Pin;
 8002776:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800277a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800277c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_TOF2_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	482d      	ldr	r0, [pc, #180]	@ (8002844 <MX_GPIO_Init+0x168>)
 800278e:	f002 fb37 	bl	8004e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin;
 8002792:	f248 0312 	movw	r3, #32786	@ 0x8012
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ae:	f002 fb27 	bl	8004e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80027b2:	2310      	movs	r3, #16
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	481e      	ldr	r0, [pc, #120]	@ (8002844 <MX_GPIO_Init+0x168>)
 80027ca:	f002 fb19 	bl	8004e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB15 */
  GPIO_InitStruct.Pin = INT1_ADX_Pin|INT2_ADX_Pin|GPIO_PIN_15;
 80027ce:	f248 0306 	movw	r3, #32774	@ 0x8006
 80027d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4818      	ldr	r0, [pc, #96]	@ (8002848 <MX_GPIO_Init+0x16c>)
 80027e6:	f002 fb0b 	bl	8004e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Status_Blue_Pin|Status_Red_Pin;
 80027ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4811      	ldr	r0, [pc, #68]	@ (8002848 <MX_GPIO_Init+0x16c>)
 8002804:	f002 fafc 	bl	8004e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2105      	movs	r1, #5
 800280c:	2007      	movs	r0, #7
 800280e:	f001 ff9d 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002812:	2007      	movs	r0, #7
 8002814:	f001 ffb4 	bl	8004780 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	2008      	movs	r0, #8
 800281e:	f001 ff95 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002822:	2008      	movs	r0, #8
 8002824:	f001 ffac 	bl	8004780 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2105      	movs	r1, #5
 800282c:	2028      	movs	r0, #40	@ 0x28
 800282e:	f001 ff8d 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002832:	2028      	movs	r0, #40	@ 0x28
 8002834:	f001 ffa4 	bl	8004780 <HAL_NVIC_EnableIRQ>

}
 8002838:	bf00      	nop
 800283a:	3728      	adds	r7, #40	@ 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	48000800 	.word	0x48000800
 8002848:	48000400 	.word	0x48000400

0800284c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002852:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <MX_I2C1_Init+0x78>)
 8002854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002858:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <MX_I2C1_Init+0x7c>)
 800285a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800285c:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <MX_I2C1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002864:	2201      	movs	r2, #1
 8002866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <MX_I2C1_Init+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <MX_I2C1_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002886:	480e      	ldr	r0, [pc, #56]	@ (80028c0 <MX_I2C1_Init+0x74>)
 8002888:	f002 fc6c 	bl	8005164 <HAL_I2C_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002892:	f000 fc57 	bl	8003144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002896:	2100      	movs	r1, #0
 8002898:	4809      	ldr	r0, [pc, #36]	@ (80028c0 <MX_I2C1_Init+0x74>)
 800289a:	f003 f9ef 	bl	8005c7c <HAL_I2CEx_ConfigAnalogFilter>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028a4:	f000 fc4e 	bl	8003144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028a8:	2100      	movs	r1, #0
 80028aa:	4805      	ldr	r0, [pc, #20]	@ (80028c0 <MX_I2C1_Init+0x74>)
 80028ac:	f003 fa31 	bl	8005d12 <HAL_I2CEx_ConfigDigitalFilter>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028b6:	f000 fc45 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20001a7c 	.word	0x20001a7c
 80028c4:	40005400 	.word	0x40005400
 80028c8:	40b285c2 	.word	0x40b285c2

080028cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09a      	sub	sp, #104	@ 0x68
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	2244      	movs	r2, #68	@ 0x44
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00c fca9 	bl	800f244 <memset>
  if(i2cHandle->Instance==I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_I2C_MspInit+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d136      	bne.n	800296a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028fc:	2340      	movs	r3, #64	@ 0x40
 80028fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4618      	mov	r0, r3
 800290a:	f004 f85f 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002914:	f000 fc16 	bl	8003144 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002918:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_TOF_Pin|SDA_TOF_Pin;
 8002930:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002934:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002936:	2312      	movs	r3, #18
 8002938:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002942:	2304      	movs	r3, #4
 8002944:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800294a:	4619      	mov	r1, r3
 800294c:	480b      	ldr	r0, [pc, #44]	@ (800297c <HAL_I2C_MspInit+0xb0>)
 800294e:	f002 fa57 	bl	8004e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 8002958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800295c:	6593      	str	r3, [r2, #88]	@ 0x58
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_I2C_MspInit+0xac>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800296a:	bf00      	nop
 800296c:	3768      	adds	r7, #104	@ 0x68
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40005400 	.word	0x40005400
 8002978:	40021000 	.word	0x40021000
 800297c:	48000400 	.word	0x48000400

08002980 <_write>:
 * @param file: Unused parameter for file descriptor.
 * @param ptr: Pointer to the buffer containing the data to send.
 * @param len: Length of the data to send.
 * @return The number of characters sent.
 */
int _write(int file, char *ptr, int len) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	b29a      	uxth	r2, r3
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <_write+0x28>)
 8002998:	f006 ffdf 	bl	800995a <HAL_UART_Transmit>
	return len;
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20001d20 	.word	0x20001d20

080029ac <uart_it_transmit_local>:
/**
 * @brief Initializes FreeRTOS objects.
 */
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int uart_it_transmit_local(uint8_t *p_data, uint16_t size) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit_IT(&huart4, p_data, size);
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	461a      	mov	r2, r3
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4804      	ldr	r0, [pc, #16]	@ (80029d0 <uart_it_transmit_local+0x24>)
 80029c0:	f007 f922 	bl	8009c08 <HAL_UART_Transmit_IT>
    return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20001c8c 	.word	0x20001c8c

080029d4 <uart_dma_transmit_local>:

int uart_dma_transmit_local(uint8_t *p_data, uint16_t size) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit_DMA(&huart4, p_data, size);
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4804      	ldr	r0, [pc, #16]	@ (80029f8 <uart_dma_transmit_local+0x24>)
 80029e8:	f007 f9ee 	bl	8009dc8 <HAL_UART_Transmit_DMA>
    return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20001c8c 	.word	0x20001c8c

080029fc <uart_poll_receive_local>:

int uart_poll_receive_local(uint8_t *p_data, uint16_t size) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
    HAL_UART_Receive(&huart4, p_data, size, HAL_MAX_DELAY);
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4803      	ldr	r0, [pc, #12]	@ (8002a20 <uart_poll_receive_local+0x24>)
 8002a12:	f007 f830 	bl	8009a76 <HAL_UART_Receive>
    return 0;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20001c8c 	.word	0x20001c8c

08002a24 <uart_it_receive_local>:

int uart_it_receive_local(uint8_t *p_data, uint16_t size) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
    HAL_UART_Receive_IT(&huart4, p_data, size);
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	461a      	mov	r2, r3
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <uart_it_receive_local+0x24>)
 8002a38:	f007 f97a 	bl	8009d30 <HAL_UART_Receive_IT>
    return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20001c8c 	.word	0x20001c8c

08002a4c <vTaskADX>:
/**
 * @brief Task to manage the ADXL343 accelerometer.
 * @param argument: Pointer to the task arguments (if any).
 */
void vTaskADX(void *argument)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
	// Initialisation de l'accéléromètre
	ADXL343_initialization(&hspi1, &accelerometer);
 8002a54:	492f      	ldr	r1, [pc, #188]	@ (8002b14 <vTaskADX+0xc8>)
 8002a56:	4830      	ldr	r0, [pc, #192]	@ (8002b18 <vTaskADX+0xcc>)
 8002a58:	f7fe fab6 	bl	8000fc8 <ADXL343_initialization>
	ADXL343_EnableTapInterrupts(&accelerometer);
 8002a5c:	482d      	ldr	r0, [pc, #180]	@ (8002b14 <vTaskADX+0xc8>)
 8002a5e:	f7fe fc1b 	bl	8001298 <ADXL343_EnableTapInterrupts>
	ADXL343_set_tap_parameters(&accelerometer, 20, 1, 80, 200);
 8002a62:	23c8      	movs	r3, #200	@ 0xc8
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2350      	movs	r3, #80	@ 0x50
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2114      	movs	r1, #20
 8002a6c:	4829      	ldr	r0, [pc, #164]	@ (8002b14 <vTaskADX+0xc8>)
 8002a6e:	f7fe fb8f 	bl	8001190 <ADXL343_set_tap_parameters>
	ADXL343_SetDataFormat(&hspi1, 0x03); // Configurer en ±16g
 8002a72:	2103      	movs	r1, #3
 8002a74:	4828      	ldr	r0, [pc, #160]	@ (8002b18 <vTaskADX+0xcc>)
 8002a76:	f7fe fc6f 	bl	8001358 <ADXL343_SetDataFormat>

	// Variables pour suivre l'état des LEDs et le mode moteur
	uint8_t led_state = 0;    // 0 = rouge, 1 = bleu
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
	uint8_t motor_mode = 0;  // 0 = souris, 1 = prédateur
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73bb      	strb	r3, [r7, #14]

	printf("Tâche ADXL343 démarrée. Attente des tapotements...\n");
 8002a82:	4826      	ldr	r0, [pc, #152]	@ (8002b1c <vTaskADX+0xd0>)
 8002a84:	f00c faca 	bl	800f01c <puts>

	while (1)
	{
		// Attente de détection de tap
		vTaskDelay(pdMS_TO_TICKS(500));
 8002a88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a8c:	f00a fb5c 	bl	800d148 <vTaskDelay>

		// Si un tap est détecté
		if (ADXL343_check_tap(&accelerometer)) {
 8002a90:	4820      	ldr	r0, [pc, #128]	@ (8002b14 <vTaskADX+0xc8>)
 8002a92:	f7fe fc3b 	bl	800130c <ADXL343_check_tap>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f5      	beq.n	8002a88 <vTaskADX+0x3c>
			// Alterner les LEDs
			if (led_state == 0) {
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <vTaskADX+0x74>
				HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_SET);    // LED rouge ON
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aa8:	481d      	ldr	r0, [pc, #116]	@ (8002b20 <vTaskADX+0xd4>)
 8002aaa:	f002 fb2b 	bl	8005104 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_RESET); // LED bleue OFF
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ab4:	481a      	ldr	r0, [pc, #104]	@ (8002b20 <vTaskADX+0xd4>)
 8002ab6:	f002 fb25 	bl	8005104 <HAL_GPIO_WritePin>
				led_state = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e00d      	b.n	8002adc <vTaskADX+0x90>
			} else {
				HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_RESET); // LED rouge OFF
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ac6:	4816      	ldr	r0, [pc, #88]	@ (8002b20 <vTaskADX+0xd4>)
 8002ac8:	f002 fb1c 	bl	8005104 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_SET);  // LED bleue ON
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad2:	4813      	ldr	r0, [pc, #76]	@ (8002b20 <vTaskADX+0xd4>)
 8002ad4:	f002 fb16 	bl	8005104 <HAL_GPIO_WritePin>
				led_state = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
			}

			// Alterner le mode moteur
			if (motor_mode == 0)
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <vTaskADX+0xae>
			{
				vTaskDelay(pdMS_TO_TICKS(1000));
 8002ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae6:	f00a fb2f 	bl	800d148 <vTaskDelay>
				printf("Mode Prédateur activé.\n");
 8002aea:	480e      	ldr	r0, [pc, #56]	@ (8002b24 <vTaskADX+0xd8>)
 8002aec:	f00c fa96 	bl	800f01c <puts>
				motorcontrol_predateur(); // Activer le mode prédateur
 8002af0:	f000 fca4 	bl	800343c <motorcontrol_predateur>
				motor_mode = 1;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73bb      	strb	r3, [r7, #14]
 8002af8:	e7c6      	b.n	8002a88 <vTaskADX+0x3c>
			}
			else
			{
				vTaskDelay(pdMS_TO_TICKS(1000));
 8002afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002afe:	f00a fb23 	bl	800d148 <vTaskDelay>
				printf("Mode Souris activé.\n");
 8002b02:	4809      	ldr	r0, [pc, #36]	@ (8002b28 <vTaskADX+0xdc>)
 8002b04:	f00c fa8a 	bl	800f01c <puts>
				motorcontrol_souris(); // Activer le mode souris
 8002b08:	f000 fc2c 	bl	8003364 <motorcontrol_souris>
				motor_mode = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73bb      	strb	r3, [r7, #14]
		vTaskDelay(pdMS_TO_TICKS(500));
 8002b10:	e7ba      	b.n	8002a88 <vTaskADX+0x3c>
 8002b12:	bf00      	nop
 8002b14:	20001ad0 	.word	0x20001ad0
 8002b18:	20001af4 	.word	0x20001af4
 8002b1c:	080118d0 	.word	0x080118d0
 8002b20:	48000400 	.word	0x48000400
 8002b24:	08011908 	.word	0x08011908
 8002b28:	08011924 	.word	0x08011924

08002b2c <vTaskToF>:
/**
 * @brief Task for the VL53L1X ToF sensor.
 * @param argument: Pointer to the task arguments (if any).
 */

void vTaskToF(void *argument) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	uint16_t distance;
	uint8_t range_status;

	while (1) {
		// Vérifier la disponibilité des données
		VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 8002b34:	f107 030d 	add.w	r3, r7, #13
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2052      	movs	r0, #82	@ 0x52
 8002b3c:	f7fe fd48 	bl	80015d0 <VL53L1X_CheckForDataReady>
		if (range_status == 0) {
 8002b40:	7b7b      	ldrb	r3, [r7, #13]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <vTaskToF+0x3a>
			VL53L1X_GetDistance(TOF_ADDR, &distance);
 8002b46:	f107 030e 	add.w	r3, r7, #14
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2052      	movs	r0, #82	@ 0x52
 8002b4e:	f7ff f817 	bl	8001b80 <VL53L1X_GetDistance>
			printf("Distance mesurée : %d mm\n", distance);
 8002b52:	89fb      	ldrh	r3, [r7, #14]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	@ (8002b70 <vTaskToF+0x44>)
 8002b58:	f00c f9f8 	bl	800ef4c <iprintf>

			if (distance > 250) {
 8002b5c:	89fb      	ldrh	r3, [r7, #14]
 8002b5e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002b60:	d901      	bls.n	8002b66 <vTaskToF+0x3a>
				pivot(); // Effectuer un pivot
 8002b62:	f000 fcd7 	bl	8003514 <pivot>
			}
		}
		vTaskDelay(pdMS_TO_TICKS(500)); // Vérification rapide
 8002b66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b6a:	f00a faed 	bl	800d148 <vTaskDelay>
		VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 8002b6e:	e7e1      	b.n	8002b34 <vTaskToF+0x8>
 8002b70:	0801193c 	.word	0x0801193c

08002b74 <TaskLIDAR>:


/**
 * @brief Tâche pour gérer le LIDAR et les moteurs.
 */
void TaskLIDAR(void * pvParameters) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
//	int16_t erreur_angle = 0;         // Erreur en angle
//	int16_t correction = 0;           // Correction à appliquer
//	const uint8_t cat = 1;            // 1 = mode chat, 0 = mode souris

	// Variables de traitement de trame
	int frame_start = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
	int frame_end = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
	int dist_min = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
	int idx_min = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]

	// Initialisation des moteurs
//	DRV_MOT_Init(&motor_left, MTR1_CHANNEL);
//	DRV_MOT_Init(&motor_right, MTR2_CHANNEL);

	printf("Démarrage de la tâche d'asservissement sur LIDAR\r\n");
 8002b8c:	488f      	ldr	r0, [pc, #572]	@ (8002dcc <TaskLIDAR+0x258>)
 8002b8e:	f00c fa45 	bl	800f01c <puts>

	for(;;) {
		// Attente du signal de demi-buffer DMA rempli
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8002b92:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd0 <TaskLIDAR+0x25c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00a f810 	bl	800cbc0 <xQueueSemaphoreTake>

		// Parcours du buffer complet
		for(int i=0; i<BUFFER_SIZE; i++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e0fa      	b.n	8002d9c <TaskLIDAR+0x228>
			// Attente seconde moitié buffer
			if(i == BUFFER_SIZE/2) {
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bac:	d106      	bne.n	8002bbc <TaskLIDAR+0x48>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 8002bae:	4b89      	ldr	r3, [pc, #548]	@ (8002dd4 <TaskLIDAR+0x260>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00a f802 	bl	800cbc0 <xQueueSemaphoreTake>
			}

			// Détection en-tête de trame
			if(i == 0) {
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d136      	bne.n	8002c30 <TaskLIDAR+0xbc>
				if((g_raw_data[i] == 0xA5) && (g_raw_data[i+1] == 0x5A) &&
 8002bc2:	4a85      	ldr	r2, [pc, #532]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2ba5      	cmp	r3, #165	@ 0xa5
 8002bcc:	d130      	bne.n	8002c30 <TaskLIDAR+0xbc>
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a81      	ldr	r2, [pc, #516]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	2b5a      	cmp	r3, #90	@ 0x5a
 8002bd8:	d12a      	bne.n	8002c30 <TaskLIDAR+0xbc>
						(g_raw_data[i+2] == 0x05) && (g_raw_data[i+3] == 0x00) &&
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
				if((g_raw_data[i] == 0xA5) && (g_raw_data[i+1] == 0x5A) &&
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d124      	bne.n	8002c30 <TaskLIDAR+0xbc>
						(g_raw_data[i+2] == 0x05) && (g_raw_data[i+3] == 0x00) &&
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3303      	adds	r3, #3
 8002bea:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11e      	bne.n	8002c30 <TaskLIDAR+0xbc>
						(g_raw_data[i+4] == 0x00) && (g_raw_data[i+5] == 0x40) &&
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	4a78      	ldr	r2, [pc, #480]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
						(g_raw_data[i+2] == 0x05) && (g_raw_data[i+3] == 0x00) &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <TaskLIDAR+0xbc>
						(g_raw_data[i+4] == 0x00) && (g_raw_data[i+5] == 0x40) &&
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	3305      	adds	r3, #5
 8002c02:	4a75      	ldr	r2, [pc, #468]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	2b40      	cmp	r3, #64	@ 0x40
 8002c08:	d112      	bne.n	8002c30 <TaskLIDAR+0xbc>
						(g_raw_data[i+6] == 0x81)) {
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	3306      	adds	r3, #6
 8002c0e:	4a72      	ldr	r2, [pc, #456]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
						(g_raw_data[i+4] == 0x00) && (g_raw_data[i+5] == 0x40) &&
 8002c12:	2b81      	cmp	r3, #129	@ 0x81
 8002c14:	d10c      	bne.n	8002c30 <TaskLIDAR+0xbc>
					printf("Device Response Received\r\n");
 8002c16:	4871      	ldr	r0, [pc, #452]	@ (8002ddc <TaskLIDAR+0x268>)
 8002c18:	f00c fa00 	bl	800f01c <puts>
					g_current_idx = 0;
 8002c1c:	4b70      	ldr	r3, [pc, #448]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
					i = 6;
 8002c22:	2306      	movs	r3, #6
 8002c24:	613b      	str	r3, [r7, #16]
					frame_start = 7;
 8002c26:	2307      	movs	r3, #7
 8002c28:	61fb      	str	r3, [r7, #28]
					frame_end = frame_start + 4;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	61bb      	str	r3, [r7, #24]
				}
			}

			// Machine à états pour le parsing
			if(i == frame_start) {
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <TaskLIDAR+0xd4>
				g_PH = g_raw_data[i];  // Octet bas PH
 8002c38:	4a67      	ldr	r2, [pc, #412]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b68      	ldr	r3, [pc, #416]	@ (8002de4 <TaskLIDAR+0x270>)
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	e0a6      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 1) {
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10e      	bne.n	8002c70 <TaskLIDAR+0xfc>
				g_PH |= (g_raw_data[i] << 8);  // Octet haut PH
 8002c52:	4a61      	ldr	r2, [pc, #388]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <TaskLIDAR+0x270>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002de4 <TaskLIDAR+0x270>)
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e092      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 2) {
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3302      	adds	r3, #2
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d106      	bne.n	8002c88 <TaskLIDAR+0x114>
				g_CT = g_raw_data[i];  // Type de paquet
 8002c7a:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <TaskLIDAR+0x274>)
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e086      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 3) {
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3303      	adds	r3, #3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d110      	bne.n	8002cb4 <TaskLIDAR+0x140>
				frame_end = frame_start + 9 + 2*g_raw_data[i];
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f103 0209 	add.w	r2, r3, #9
 8002c98:	494f      	ldr	r1, [pc, #316]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	440b      	add	r3, r1
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
				g_LSN = g_raw_data[i];  // Nombre d'échantillons
 8002ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	4b4f      	ldr	r3, [pc, #316]	@ (8002dec <TaskLIDAR+0x278>)
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e070      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 4) {
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d107      	bne.n	8002cce <TaskLIDAR+0x15a>
				g_start_angle = g_raw_data[i];  // Angle début bas
 8002cbe:	4a46      	ldr	r2, [pc, #280]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <TaskLIDAR+0x27c>)
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	e063      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 5) {
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3305      	adds	r3, #5
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10e      	bne.n	8002cf6 <TaskLIDAR+0x182>
				g_start_angle |= (g_raw_data[i] << 8);  // Angle début haut
 8002cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	b21a      	sxth	r2, r3
 8002ce4:	4b42      	ldr	r3, [pc, #264]	@ (8002df0 <TaskLIDAR+0x27c>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002df0 <TaskLIDAR+0x27c>)
 8002cf2:	801a      	strh	r2, [r3, #0]
 8002cf4:	e04f      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 6) {
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3306      	adds	r3, #6
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <TaskLIDAR+0x19c>
				g_end_angle = g_raw_data[i];  // Angle fin bas
 8002d00:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <TaskLIDAR+0x280>)
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	e042      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_start + 7) {
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3307      	adds	r3, #7
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10e      	bne.n	8002d38 <TaskLIDAR+0x1c4>
				g_end_angle |= (g_raw_data[i] << 8);  // Angle fin haut
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <TaskLIDAR+0x280>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <TaskLIDAR+0x280>)
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	e02e      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else if(i == frame_end) {
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d11f      	bne.n	8002d80 <TaskLIDAR+0x20c>
				g_packet_data[g_current_idx++] = g_raw_data[i];
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	4926      	ldr	r1, [pc, #152]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002d48:	600a      	str	r2, [r1, #0]
 8002d4a:	4923      	ldr	r1, [pc, #140]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	440a      	add	r2, r1
 8002d50:	7811      	ldrb	r1, [r2, #0]
 8002d52:	4a29      	ldr	r2, [pc, #164]	@ (8002df8 <TaskLIDAR+0x284>)
 8002d54:	54d1      	strb	r1, [r2, r3]

				// Traitement trame complète
				if(frame_end - frame_start > 11) {
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b0b      	cmp	r3, #11
 8002d5e:	dd05      	ble.n	8002d6c <TaskLIDAR+0x1f8>
					lidar_parse_data();
 8002d60:	f7ff f9a0 	bl	80020a4 <lidar_parse_data>
					smooth_data();
 8002d64:	f7ff fa3c 	bl	80021e0 <smooth_data>
					detect_objects();
 8002d68:	f7ff fc1e 	bl	80025a8 <detect_objects>
				}

				// Préparation prochaine trame
				g_current_idx = 0;
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
				frame_start = frame_end + 1;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
				frame_end = frame_start + 4;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e00a      	b.n	8002d96 <TaskLIDAR+0x222>
			}
			else {
				// Stockage données intermédiaires
				g_packet_data[g_current_idx++] = g_raw_data[i];
 8002d80:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4916      	ldr	r1, [pc, #88]	@ (8002de0 <TaskLIDAR+0x26c>)
 8002d88:	600a      	str	r2, [r1, #0]
 8002d8a:	4913      	ldr	r1, [pc, #76]	@ (8002dd8 <TaskLIDAR+0x264>)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	440a      	add	r2, r1
 8002d90:	7811      	ldrb	r1, [r2, #0]
 8002d92:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <TaskLIDAR+0x284>)
 8002d94:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<BUFFER_SIZE; i++) {
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002da2:	f6ff af00 	blt.w	8002ba6 <TaskLIDAR+0x32>
			}
		}

		// Ajustement indices pour prochain cycle
		frame_start -= BUFFER_SIZE;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002dac:	61fb      	str	r3, [r7, #28]
		frame_end -= BUFFER_SIZE;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002db4:	61bb      	str	r3, [r7, #24]

		// Recherche objet le plus proche
		printf("#\r\n");
 8002db6:	4811      	ldr	r0, [pc, #68]	@ (8002dfc <TaskLIDAR+0x288>)
 8002db8:	f00c f930 	bl	800f01c <puts>
		dist_min = 2000;
 8002dbc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002dc0:	617b      	str	r3, [r7, #20]
		idx_min = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

		for(int i=0; i < g_obj_count; i++) {
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e03c      	b.n	8002e46 <TaskLIDAR+0x2d2>
 8002dcc:	08011958 	.word	0x08011958
 8002dd0:	20001ae8 	.word	0x20001ae8
 8002dd4:	20001aec 	.word	0x20001aec
 8002dd8:	20000208 	.word	0x20000208
 8002ddc:	0801198c 	.word	0x0801198c
 8002de0:	2000159c 	.word	0x2000159c
 8002de4:	20001a74 	.word	0x20001a74
 8002de8:	20001a76 	.word	0x20001a76
 8002dec:	20001a77 	.word	0x20001a77
 8002df0:	20001a56 	.word	0x20001a56
 8002df4:	20001a58 	.word	0x20001a58
 8002df8:	20000a00 	.word	0x20000a00
 8002dfc:	080119a8 	.word	0x080119a8
			printf("%d,%d\r\n", g_object_angles[i], g_object_distances[i]);
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <TaskLIDAR+0x2e0>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e08:	4a13      	ldr	r2, [pc, #76]	@ (8002e58 <TaskLIDAR+0x2e4>)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4812      	ldr	r0, [pc, #72]	@ (8002e5c <TaskLIDAR+0x2e8>)
 8002e14:	f00c f89a 	bl	800ef4c <iprintf>

			if(g_object_distances[i] < dist_min && g_object_distances[i] != 0) {
 8002e18:	4a0f      	ldr	r2, [pc, #60]	@ (8002e58 <TaskLIDAR+0x2e4>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dd0c      	ble.n	8002e40 <TaskLIDAR+0x2cc>
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <TaskLIDAR+0x2e4>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <TaskLIDAR+0x2cc>
				dist_min = g_object_distances[i];
 8002e32:	4a09      	ldr	r2, [pc, #36]	@ (8002e58 <TaskLIDAR+0x2e4>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	617b      	str	r3, [r7, #20]
				idx_min = i;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	60bb      	str	r3, [r7, #8]
		for(int i=0; i < g_obj_count; i++) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <TaskLIDAR+0x2ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbd7      	blt.n	8002e00 <TaskLIDAR+0x28c>
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8002e50:	e69f      	b.n	8002b92 <TaskLIDAR+0x1e>
 8002e52:	bf00      	nop
 8002e54:	200015a0 	.word	0x200015a0
 8002e58:	20001730 	.word	0x20001730
 8002e5c:	080119ac 	.word	0x080119ac
 8002e60:	20001a78 	.word	0x20001a78

08002e64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandleSensor = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002e6e:	f001 fb5c 	bl	800452a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002e72:	f000 f8b1 	bl	8002fd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e76:	f7ff fc31 	bl	80026dc <MX_GPIO_Init>
	MX_DMA_Init();
 8002e7a:	f7fe ff8f 	bl	8001d9c <MX_DMA_Init>
	MX_I2C1_Init();
 8002e7e:	f7ff fce5 	bl	800284c <MX_I2C1_Init>
	MX_SPI1_Init();
 8002e82:	f000 fb81 	bl	8003588 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8002e86:	f001 f83f 	bl	8003f08 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002e8a:	f000 fdad 	bl	80039e8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002e8e:	f000 fe77 	bl	8003b80 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002e92:	f000 fecb 	bl	8003c2c <MX_TIM4_Init>
	MX_UART4_Init();
 8002e96:	f000 ffeb 	bl	8003e70 <MX_UART4_Init>
	extern int (*uart_dma_receive)(uint8_t *p_data, uint16_t size);
	extern int (*uart_it_transmit)(uint8_t *p_data, uint16_t size);
	extern int (*uart_dma_transmit)(uint8_t *p_data, uint16_t size);

	// Initialisation des pointeurs
	uart_it_transmit = uart_it_transmit_local;
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f88 <main+0x124>)
 8002e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f8c <main+0x128>)
 8002e9e:	601a      	str	r2, [r3, #0]
	uart_dma_transmit = uart_dma_transmit_local;
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <main+0x12c>)
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8002f94 <main+0x130>)
 8002ea4:	601a      	str	r2, [r3, #0]
	uart_poll_receive = uart_poll_receive_local;
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8002f98 <main+0x134>)
 8002ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8002f9c <main+0x138>)
 8002eaa:	601a      	str	r2, [r3, #0]
	uart_it_receive = uart_it_receive_local;
 8002eac:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <main+0x13c>)
 8002eae:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa4 <main+0x140>)
 8002eb0:	601a      	str	r2, [r3, #0]

	// Démarrage du LIDAR et configuration DMA
	lidar_begin();
 8002eb2:	f7fe ff9d 	bl	8001df0 <lidar_begin>
	HAL_UART_Receive_DMA(&huart4, g_raw_data, BUFFER_SIZE);
 8002eb6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002eba:	493b      	ldr	r1, [pc, #236]	@ (8002fa8 <main+0x144>)
 8002ebc:	483b      	ldr	r0, [pc, #236]	@ (8002fac <main+0x148>)
 8002ebe:	f007 f803 	bl	8009ec8 <HAL_UART_Receive_DMA>

	// Initialisation du LIDAR
	lidar_end();
 8002ec2:	f7fe ffb3 	bl	8001e2c <lidar_end>
	lidar_query_status();
 8002ec6:	f7fe ffc5 	bl	8001e54 <lidar_query_status>
	lidar_check_health();
 8002eca:	f7ff f88d 	bl	8001fe8 <lidar_check_health>


	// Création de la tâche LIDAR
	ret = xTaskCreate(TaskLIDAR, "TaskLIDAR", STACK_SIZE,
 8002ece:	463b      	mov	r3, r7
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002edc:	4934      	ldr	r1, [pc, #208]	@ (8002fb0 <main+0x14c>)
 8002ede:	4835      	ldr	r0, [pc, #212]	@ (8002fb4 <main+0x150>)
 8002ee0:	f009 fffe 	bl	800cee0 <xTaskCreate>
 8002ee4:	6078      	str	r0, [r7, #4]
			(void *) NULL, 1, &xHandleSensor);// Tache Neutralisée car asser en angle pas fonctionnel
	if (ret != pdPASS)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d004      	beq.n	8002ef6 <main+0x92>
	{
		printf("Error creating TaskSensor\r\n");
 8002eec:	4832      	ldr	r0, [pc, #200]	@ (8002fb8 <main+0x154>)
 8002eee:	f00c f895 	bl	800f01c <puts>
		Error_Handler();
 8002ef2:	f000 f927 	bl	8003144 <Error_Handler>
	}


	// Création des sémaphores pour la synchronisation DMA
	SemHalfCallBack = xSemaphoreCreateBinary();
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2001      	movs	r0, #1
 8002efc:	f009 fd7a 	bl	800c9f4 <xQueueGenericCreate>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4a2e      	ldr	r2, [pc, #184]	@ (8002fbc <main+0x158>)
 8002f04:	6013      	str	r3, [r2, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 8002f06:	2203      	movs	r2, #3
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f009 fd72 	bl	800c9f4 <xQueueGenericCreate>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc0 <main+0x15c>)
 8002f14:	6013      	str	r3, [r2, #0]
	init_motors();
 8002f16:	f000 f91b 	bl	8003150 <init_motors>

	//I2C_Scan();


	VL53L1__Init();
 8002f1a:	f001 f9f7 	bl	800430c <VL53L1__Init>
	printf("Initialisation du système STM32 terminée.\n");
 8002f1e:	4829      	ldr	r0, [pc, #164]	@ (8002fc4 <main+0x160>)
 8002f20:	f00c f87c 	bl	800f01c <puts>

	VL53L1X_StartRanging(TOF_ADDR); // Démarrer le capteur
 8002f24:	2052      	movs	r0, #82	@ 0x52
 8002f26:	f7fe fb23 	bl	8001570 <VL53L1X_StartRanging>
	VL53L1X_SetDistanceThreshold(TOF_ADDR, 10, 250, 1, 0); // Définir le seuil de distance
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	22fa      	movs	r2, #250	@ 0xfa
 8002f32:	210a      	movs	r1, #10
 8002f34:	2052      	movs	r0, #82	@ 0x52
 8002f36:	f7fe feb1 	bl	8001c9c <VL53L1X_SetDistanceThreshold>
	VL53L1X_SetInterruptPolarity(TOF_ADDR, 1); // Configurer la polarité de l'interruption
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2052      	movs	r0, #82	@ 0x52
 8002f3e:	f7fe fab5 	bl	80014ac <VL53L1X_SetInterruptPolarity>
	VL53L1X_ClearInterrupt(TOF_ADDR); // Effacer les interruptions en attente
 8002f42:	2052      	movs	r0, #82	@ 0x52
 8002f44:	f7fe fa9a 	bl	800147c <VL53L1X_ClearInterrupt>


	// Créer les tâches FreeRTOS
	xTaskCreate(vTaskADX, "TaskADX", 256, NULL, 2, NULL);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2300      	movs	r3, #0
 8002f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f56:	491c      	ldr	r1, [pc, #112]	@ (8002fc8 <main+0x164>)
 8002f58:	481c      	ldr	r0, [pc, #112]	@ (8002fcc <main+0x168>)
 8002f5a:	f009 ffc1 	bl	800cee0 <xTaskCreate>
	xTaskCreate(vTaskToF, "TaskToF", 256, NULL, 5, NULL);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2305      	movs	r3, #5
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f6c:	4918      	ldr	r1, [pc, #96]	@ (8002fd0 <main+0x16c>)
 8002f6e:	4819      	ldr	r0, [pc, #100]	@ (8002fd4 <main+0x170>)
 8002f70:	f009 ffb6 	bl	800cee0 <xTaskCreate>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8002f74:	f7fe fef0 	bl	8001d58 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002f78:	f009 fbdc 	bl	800c734 <osKernelStart>
		   printf("Erreur lors de la mesure.\n");
		   }*/

		//VL53L1__test();

		HAL_Delay(500);
 8002f7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f80:	f001 fb0a 	bl	8004598 <HAL_Delay>
 8002f84:	e7fa      	b.n	8002f7c <main+0x118>
 8002f86:	bf00      	nop
 8002f88:	20001a60 	.word	0x20001a60
 8002f8c:	080029ad 	.word	0x080029ad
 8002f90:	20001a64 	.word	0x20001a64
 8002f94:	080029d5 	.word	0x080029d5
 8002f98:	20001a68 	.word	0x20001a68
 8002f9c:	080029fd 	.word	0x080029fd
 8002fa0:	20001a6c 	.word	0x20001a6c
 8002fa4:	08002a25 	.word	0x08002a25
 8002fa8:	20000208 	.word	0x20000208
 8002fac:	20001c8c 	.word	0x20001c8c
 8002fb0:	080119b4 	.word	0x080119b4
 8002fb4:	08002b75 	.word	0x08002b75
 8002fb8:	080119c0 	.word	0x080119c0
 8002fbc:	20001ae8 	.word	0x20001ae8
 8002fc0:	20001aec 	.word	0x20001aec
 8002fc4:	080119dc 	.word	0x080119dc
 8002fc8:	08011a08 	.word	0x08011a08
 8002fcc:	08002a4d 	.word	0x08002a4d
 8002fd0:	08011a10 	.word	0x08011a10
 8002fd4:	08002b2d 	.word	0x08002b2d

08002fd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b094      	sub	sp, #80	@ 0x50
 8002fdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fde:	f107 0318 	add.w	r3, r7, #24
 8002fe2:	2238      	movs	r2, #56	@ 0x38
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f00c f92c 	bl	800f244 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f002 fed6 	bl	8005dac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003000:	2301      	movs	r3, #1
 8003002:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003008:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800300a:	2302      	movs	r3, #2
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800300e:	2303      	movs	r3, #3
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003012:	2304      	movs	r3, #4
 8003014:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003016:	2355      	movs	r3, #85	@ 0x55
 8003018:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800301a:	2302      	movs	r3, #2
 800301c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800301e:	2302      	movs	r3, #2
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003022:	2302      	movs	r3, #2
 8003024:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	4618      	mov	r0, r3
 800302c:	f002 ff72 	bl	8005f14 <HAL_RCC_OscConfig>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8003036:	f000 f885 	bl	8003144 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800303a:	230f      	movs	r3, #15
 800303c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303e:	2303      	movs	r3, #3
 8003040:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2104      	movs	r1, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fa70 	bl	8006538 <HAL_RCC_ClockConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800305e:	f000 f871 	bl	8003144 <Error_Handler>
	}
}
 8003062:	bf00      	nop
 8003064:	3750      	adds	r7, #80	@ 0x50
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack, &xHigherPriorityTaskWoken);
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_UART_RxHalfCpltCallback+0x3c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f009 fd0c 	bl	800caa0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_UART_RxHalfCpltCallback+0x32>
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <HAL_UART_RxHalfCpltCallback+0x40>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20001ae8 	.word	0x20001ae8
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack, &xHigherPriorityTaskWoken);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_UART_RxCpltCallback+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f107 020c 	add.w	r2, r7, #12
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f009 fcea 	bl	800caa0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_UART_RxCpltCallback+0x32>
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_UART_RxCpltCallback+0x40>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20001aec 	.word	0x20001aec
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_TOF2_Pin) {
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003104:	d105      	bne.n	8003112 <HAL_GPIO_EXTI_Callback+0x1e>
		printf("Interruption détectée sur le capteur TOF.\n");
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <HAL_GPIO_EXTI_Callback+0x28>)
 8003108:	f00b ff88 	bl	800f01c <puts>

		// Effacer l'interruption immédiatement
		VL53L1X_ClearInterrupt(TOF_ADDR);
 800310c:	2052      	movs	r0, #82	@ 0x52
 800310e:	f7fe f9b5 	bl	800147c <VL53L1X_ClearInterrupt>
	}
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	08011a18 	.word	0x08011a18

08003120 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003132:	f001 fa13 	bl	800455c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40001000 	.word	0x40001000

08003144 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <Error_Handler+0x8>

08003150 <init_motors>:


/**
 * @brief Initialisation des moteurs (PWM et encodeurs).
 */
void init_motors(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	// Initialisation des PWM pour les moteurs
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 8003154:	2100      	movs	r1, #0
 8003156:	4810      	ldr	r0, [pc, #64]	@ (8003198 <init_motors+0x48>)
 8003158:	f004 fe80 	bl	8007e5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 800315c:	2104      	movs	r1, #4
 800315e:	480e      	ldr	r0, [pc, #56]	@ (8003198 <init_motors+0x48>)
 8003160:	f004 fe7c 	bl	8007e5c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003164:	2100      	movs	r1, #0
 8003166:	480c      	ldr	r0, [pc, #48]	@ (8003198 <init_motors+0x48>)
 8003168:	f006 f91c 	bl	80093a4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800316c:	2104      	movs	r1, #4
 800316e:	480a      	ldr	r0, [pc, #40]	@ (8003198 <init_motors+0x48>)
 8003170:	f006 f918 	bl	80093a4 <HAL_TIMEx_PWMN_Start>

	// Initialisation des encodeurs
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Moteur 1 (encodeur sur TIM3)
 8003174:	213c      	movs	r1, #60	@ 0x3c
 8003176:	4809      	ldr	r0, [pc, #36]	@ (800319c <init_motors+0x4c>)
 8003178:	f005 f8ac 	bl	80082d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Moteur 2 (encodeur sur TIM4)
 800317c:	213c      	movs	r1, #60	@ 0x3c
 800317e:	4808      	ldr	r0, [pc, #32]	@ (80031a0 <init_motors+0x50>)
 8003180:	f005 f8a8 	bl	80082d4 <HAL_TIM_Encoder_Start>

	// Réinitialisation des compteurs d'encodeurs
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <init_motors+0x4c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <init_motors+0x50>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20001ba8 	.word	0x20001ba8
 800319c:	20001bf4 	.word	0x20001bf4
 80031a0:	20001c40 	.word	0x20001c40

080031a4 <forward_r>:

/**
 * @brief Avance le moteur droit.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void forward_r(uint16_t alpha) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);  // TIM1_CH1
 80031ae:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <forward_r+0x2c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 80031b6:	2100      	movs	r1, #0
 80031b8:	4805      	ldr	r0, [pc, #20]	@ (80031d0 <forward_r+0x2c>)
 80031ba:	f004 fe4f 	bl	8007e5c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80031be:	2100      	movs	r1, #0
 80031c0:	4803      	ldr	r0, [pc, #12]	@ (80031d0 <forward_r+0x2c>)
 80031c2:	f006 f9a3 	bl	800950c <HAL_TIMEx_PWMN_Stop>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001ba8 	.word	0x20001ba8

080031d4 <forward_l>:

/**
 * @brief Avance le moteur gauche.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void forward_l(uint16_t alpha) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha);  // TIM1_CH2
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <forward_l+0x2c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
 80031e6:	2104      	movs	r1, #4
 80031e8:	4805      	ldr	r0, [pc, #20]	@ (8003200 <forward_l+0x2c>)
 80031ea:	f004 ff37 	bl	800805c <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80031ee:	2104      	movs	r1, #4
 80031f0:	4803      	ldr	r0, [pc, #12]	@ (8003200 <forward_l+0x2c>)
 80031f2:	f006 f8d7 	bl	80093a4 <HAL_TIMEx_PWMN_Start>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20001ba8 	.word	0x20001ba8

08003204 <reverse_r>:

/**
 * @brief Recule le moteur droit.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void reverse_r(uint16_t alpha) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha); // TIM1_CH2N
 800320e:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <reverse_r+0x2c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
	//    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2
 8003216:	2100      	movs	r1, #0
 8003218:	4805      	ldr	r0, [pc, #20]	@ (8003230 <reverse_r+0x2c>)
 800321a:	f004 ff1f 	bl	800805c <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800321e:	2100      	movs	r1, #0
 8003220:	4803      	ldr	r0, [pc, #12]	@ (8003230 <reverse_r+0x2c>)
 8003222:	f006 f8bf 	bl	80093a4 <HAL_TIMEx_PWMN_Start>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);

}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20001ba8 	.word	0x20001ba8

08003234 <reverse_l>:

/**
 * @brief Recule le moteur gauche.
 * @param alpha: Valeur du rapport cyclique (0-100%).
 */
void reverse_l(uint16_t alpha) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha); // TIM1_CH1N
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <reverse_l+0x2c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34
	// __HAL_TIM_SET_COMPARE(&htim1, TIM_CH0ANNEL_2, 0);      // TIM1_CH2
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 8003246:	2104      	movs	r1, #4
 8003248:	4805      	ldr	r0, [pc, #20]	@ (8003260 <reverse_l+0x2c>)
 800324a:	f004 fe07 	bl	8007e5c <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800324e:	2104      	movs	r1, #4
 8003250:	4803      	ldr	r0, [pc, #12]	@ (8003260 <reverse_l+0x2c>)
 8003252:	f006 f95b 	bl	800950c <HAL_TIMEx_PWMN_Stop>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20001ba8 	.word	0x20001ba8

08003264 <stop_r>:

/**
 * @brief Arrête le moteur droit.
 */
void stop_r(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <stop_r+0x18>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	635a      	str	r2, [r3, #52]	@ 0x34
	//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
 8003270:	2100      	movs	r1, #0
 8003272:	4802      	ldr	r0, [pc, #8]	@ (800327c <stop_r+0x18>)
 8003274:	f004 fef2 	bl	800805c <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20001ba8 	.word	0x20001ba8

08003280 <stop_l>:

/**
 * @brief Arrête le moteur gauche.
 */
void stop_l(void) {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);      // TIM1_CH2
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <stop_l+0x18>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2200      	movs	r2, #0
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 800328c:	2104      	movs	r1, #4
 800328e:	4802      	ldr	r0, [pc, #8]	@ (8003298 <stop_l+0x18>)
 8003290:	f004 fee4 	bl	800805c <HAL_TIM_PWM_Stop>
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20001ba8 	.word	0x20001ba8

0800329c <calculate_motor_speed>:
 * @param motor: Identifiant du moteur (MOTOR_LEFT ou MOTOR_RIGHT).
 * @param delta_time_ms: Intervalle de temps en ms.
 * @param encoder_resolution: Résolution de l'encodeur (pulsations par tour).
 * @return Vitesse en tours par seconde.
 */
float calculate_motor_speed(uint8_t motor, uint32_t delta_time_ms, uint16_t encoder_resolution) {
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	4613      	mov	r3, r2
 80032aa:	80bb      	strh	r3, [r7, #4]
	static int16_t last_position_motor1 = 0;
	static int16_t last_position_motor2 = 0;

	int16_t current_position = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	81bb      	strh	r3, [r7, #12]
	int16_t delta_position = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	81fb      	strh	r3, [r7, #14]

	if (motor == MOTOR_LEFT) { // Moteur gauche
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <calculate_motor_speed+0x3e>
		current_position = __HAL_TIM_GET_COUNTER(&htim3); // TIM3 pour moteur gauche
 80032ba:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <calculate_motor_speed+0xb4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor1;
 80032c2:	89ba      	ldrh	r2, [r7, #12]
 80032c4:	4b23      	ldr	r3, [pc, #140]	@ (8003354 <calculate_motor_speed+0xb8>)
 80032c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	81fb      	strh	r3, [r7, #14]
		last_position_motor1 = current_position;
 80032d2:	4a20      	ldr	r2, [pc, #128]	@ (8003354 <calculate_motor_speed+0xb8>)
 80032d4:	89bb      	ldrh	r3, [r7, #12]
 80032d6:	8013      	strh	r3, [r2, #0]
 80032d8:	e011      	b.n	80032fe <calculate_motor_speed+0x62>
	} else if (motor == MOTOR_RIGHT) { // Moteur droit
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10e      	bne.n	80032fe <calculate_motor_speed+0x62>
		current_position = __HAL_TIM_GET_COUNTER(&htim4); // TIM4 pour moteur droit
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <calculate_motor_speed+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor2;
 80032e8:	89ba      	ldrh	r2, [r7, #12]
 80032ea:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <calculate_motor_speed+0xc0>)
 80032ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	81fb      	strh	r3, [r7, #14]
		last_position_motor2 = current_position;
 80032f8:	4a18      	ldr	r2, [pc, #96]	@ (800335c <calculate_motor_speed+0xc0>)
 80032fa:	89bb      	ldrh	r3, [r7, #12]
 80032fc:	8013      	strh	r3, [r2, #0]
	}

	// Calculer la vitesse en tours par seconde
	float speed = (float)delta_position / encoder_resolution; // Tours par intervalle
 80032fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800330a:	88bb      	ldrh	r3, [r7, #4]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003318:	edc7 7a02 	vstr	s15, [r7, #8]
	speed *= (1000.0f / delta_time_ms); // Convertir en tours par seconde
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003326:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003360 <calculate_motor_speed+0xc4>
 800332a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a02 	vstr	s15, [r7, #8]

	return speed;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	ee07 3a90 	vmov	s15, r3
}
 8003340:	eeb0 0a67 	vmov.f32	s0, s15
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20001bf4 	.word	0x20001bf4
 8003354:	20001af0 	.word	0x20001af0
 8003358:	20001c40 	.word	0x20001c40
 800335c:	20001af2 	.word	0x20001af2
 8003360:	447a0000 	.word	0x447a0000

08003364 <motorcontrol_souris>:
}

/**
 * @brief Mode "Souris" pour un déplacement normal.
 */
void motorcontrol_souris(void) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 40% de 8500
 800336a:	f640 5348 	movw	r3, #3400	@ 0xd48
 800336e:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 8003370:	2300      	movs	r3, #0
 8003372:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 8003374:	2332      	movs	r3, #50	@ 0x32
 8003376:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 8003378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800337c:	81fb      	strh	r3, [r7, #14]

	printf("Mode Souris : moteurs avancent à vitesse normale.\n");
 800337e:	4827      	ldr	r0, [pc, #156]	@ (800341c <motorcontrol_souris+0xb8>)
 8003380:	f00b fe4c 	bl	800f01c <puts>
	forward_r(alpha + 450);
 8003384:	8afb      	ldrh	r3, [r7, #22]
 8003386:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 800338a:	b29b      	uxth	r3, r3
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff09 	bl	80031a4 <forward_r>
	forward_l(alpha + 10);
 8003392:	8afb      	ldrh	r3, [r7, #22]
 8003394:	330a      	adds	r3, #10
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff1b 	bl	80031d4 <forward_l>

	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 800339e:	89fb      	ldrh	r3, [r7, #14]
 80033a0:	461a      	mov	r2, r3
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff ff79 	bl	800329c <calculate_motor_speed>
 80033aa:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6939      	ldr	r1, [r7, #16]
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7ff ff71 	bl	800329c <calculate_motor_speed>
 80033ba:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 80033be:	68b8      	ldr	r0, [r7, #8]
 80033c0:	f7fd f8ea 	bl	8000598 <__aeabi_f2d>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4815      	ldr	r0, [pc, #84]	@ (8003420 <motorcontrol_souris+0xbc>)
 80033ca:	f00b fdbf 	bl	800ef4c <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd f8e2 	bl	8000598 <__aeabi_f2d>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4812      	ldr	r0, [pc, #72]	@ (8003424 <motorcontrol_souris+0xc0>)
 80033da:	f00b fdb7 	bl	800ef4c <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <motorcontrol_souris+0xc4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	4811      	ldr	r0, [pc, #68]	@ (800342c <motorcontrol_souris+0xc8>)
 80033e8:	f00b fdb0 	bl	800ef4c <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <motorcontrol_souris+0xcc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	4619      	mov	r1, r3
 80033f4:	480f      	ldr	r0, [pc, #60]	@ (8003434 <motorcontrol_souris+0xd0>)
 80033f6:	f00b fda9 	bl	800ef4c <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	4a0c      	ldr	r2, [pc, #48]	@ (8003438 <motorcontrol_souris+0xd4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	4618      	mov	r0, r3
 800340e:	f009 fe9b 	bl	800d148 <vTaskDelay>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08011a44 	.word	0x08011a44
 8003420:	08011a78 	.word	0x08011a78
 8003424:	08011aa0 	.word	0x08011aa0
 8003428:	20001bf4 	.word	0x20001bf4
 800342c:	08011ac8 	.word	0x08011ac8
 8003430:	20001c40 	.word	0x20001c40
 8003434:	08011ae8 	.word	0x08011ae8
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <motorcontrol_predateur>:


/**
 * @brief Mode "Prédateur" pour un déplacement rapide.
 */
void motorcontrol_predateur(void) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 30% de 8500
 8003442:	f640 5348 	movw	r3, #3400	@ 0xd48
 8003446:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 8003448:	2300      	movs	r3, #0
 800344a:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 800344c:	2332      	movs	r3, #50	@ 0x32
 800344e:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 8003450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003454:	81fb      	strh	r3, [r7, #14]

	printf("Mode Prédateur : moteurs avancent à grande vitesse.\n");
 8003456:	4827      	ldr	r0, [pc, #156]	@ (80034f4 <motorcontrol_predateur+0xb8>)
 8003458:	f00b fde0 	bl	800f01c <puts>
	forward_r(alpha + 1850);
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	f203 733a 	addw	r3, r3, #1850	@ 0x73a
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe9d 	bl	80031a4 <forward_r>
	forward_l(alpha+ 50);
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	3332      	adds	r3, #50	@ 0x32
 800346e:	b29b      	uxth	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff feaf 	bl	80031d4 <forward_l>


	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	461a      	mov	r2, r3
 800347a:	6939      	ldr	r1, [r7, #16]
 800347c:	2000      	movs	r0, #0
 800347e:	f7ff ff0d 	bl	800329c <calculate_motor_speed>
 8003482:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 8003486:	89fb      	ldrh	r3, [r7, #14]
 8003488:	461a      	mov	r2, r3
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	2001      	movs	r0, #1
 800348e:	f7ff ff05 	bl	800329c <calculate_motor_speed>
 8003492:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 8003496:	68b8      	ldr	r0, [r7, #8]
 8003498:	f7fd f87e 	bl	8000598 <__aeabi_f2d>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4815      	ldr	r0, [pc, #84]	@ (80034f8 <motorcontrol_predateur+0xbc>)
 80034a2:	f00b fd53 	bl	800ef4c <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd f876 	bl	8000598 <__aeabi_f2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4812      	ldr	r0, [pc, #72]	@ (80034fc <motorcontrol_predateur+0xc0>)
 80034b2:	f00b fd4b 	bl	800ef4c <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <motorcontrol_predateur+0xc4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	4811      	ldr	r0, [pc, #68]	@ (8003504 <motorcontrol_predateur+0xc8>)
 80034c0:	f00b fd44 	bl	800ef4c <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 80034c4:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <motorcontrol_predateur+0xcc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	480f      	ldr	r0, [pc, #60]	@ (800350c <motorcontrol_predateur+0xd0>)
 80034ce:	f00b fd3d 	bl	800ef4c <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <motorcontrol_predateur+0xd4>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	4618      	mov	r0, r3
 80034e6:	f009 fe2f 	bl	800d148 <vTaskDelay>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	08011b04 	.word	0x08011b04
 80034f8:	08011a78 	.word	0x08011a78
 80034fc:	08011aa0 	.word	0x08011aa0
 8003500:	20001bf4 	.word	0x20001bf4
 8003504:	08011ac8 	.word	0x08011ac8
 8003508:	20001c40 	.word	0x20001c40
 800350c:	08011ae8 	.word	0x08011ae8
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <pivot>:

/**
 * @brief Effectue un pivot arrière en cas d'obstacle.
 */
void pivot(void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
	uint16_t alpha = 1200;  // 30% de 8500
 800351a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800351e:	80fb      	strh	r3, [r7, #6]

	// Arrêter les moteurs
	stop_r();
 8003520:	f7ff fea0 	bl	8003264 <stop_r>
	stop_l();
 8003524:	f7ff feac 	bl	8003280 <stop_l>
	printf("Danger détecté : moteur arrêté. Pivot arrière en cours...\n");
 8003528:	4815      	ldr	r0, [pc, #84]	@ (8003580 <pivot+0x6c>)
 800352a:	f00b fd77 	bl	800f01c <puts>

	// Effectuer un pivot en arrière
	reverse_r(alpha + 3050);       // Moteur droit recule
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	f603 33ea 	addw	r3, r3, #3050	@ 0xbea
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fe64 	bl	8003204 <reverse_r>
	reverse_l(alpha );   // Moteur gauche recule plus lentement pour pivoter
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fe78 	bl	8003234 <reverse_l>
	vTaskDelay(pdMS_TO_TICKS(600)); // Pivot pendant 1,5 seconde
 8003544:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003548:	f009 fdfe 	bl	800d148 <vTaskDelay>

	// Arrêter les moteurs après le pivot
	stop_r();
 800354c:	f7ff fe8a 	bl	8003264 <stop_r>
	stop_l();
 8003550:	f7ff fe96 	bl	8003280 <stop_l>

	vTaskDelay(pdMS_TO_TICKS(200));
 8003554:	20c8      	movs	r0, #200	@ 0xc8
 8003556:	f009 fdf7 	bl	800d148 <vTaskDelay>

	forward_r(alpha+ 2450);
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 8003560:	b29b      	uxth	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fe1e 	bl	80031a4 <forward_r>

	vTaskDelay(pdMS_TO_TICKS(320));
 8003568:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800356c:	f009 fdec 	bl	800d148 <vTaskDelay>

	printf("Pivot terminé, moteurs arrêtés.\n");
 8003570:	4804      	ldr	r0, [pc, #16]	@ (8003584 <pivot+0x70>)
 8003572:	f00b fd53 	bl	800f01c <puts>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	08011b3c 	.word	0x08011b3c
 8003584:	08011b7c 	.word	0x08011b7c

08003588 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800358c:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <MX_SPI1_Init+0x74>)
 800358e:	4a1c      	ldr	r2, [pc, #112]	@ (8003600 <MX_SPI1_Init+0x78>)
 8003590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003592:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <MX_SPI1_Init+0x74>)
 8003594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <MX_SPI1_Init+0x74>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035a0:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035aa:	2202      	movs	r2, #2
 80035ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035ae:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035be:	2220      	movs	r2, #32
 80035c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035d6:	2207      	movs	r2, #7
 80035d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035da:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80035e0:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035e6:	4805      	ldr	r0, [pc, #20]	@ (80035fc <MX_SPI1_Init+0x74>)
 80035e8:	f003 fbe0 	bl	8006dac <HAL_SPI_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035f2:	f7ff fda7 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20001af4 	.word	0x20001af4
 8003600:	40013000 	.word	0x40013000

08003604 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_SPI_MspInit+0x7c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d128      	bne.n	8003678 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003626:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 800362c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003630:	6613      	str	r3, [r2, #96]	@ 0x60
 8003632:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	4a10      	ldr	r2, [pc, #64]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364a:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <HAL_SPI_MspInit+0x80>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003656:	23e0      	movs	r3, #224	@ 0xe0
 8003658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003666:	2305      	movs	r3, #5
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003674:	f001 fbc4 	bl	8004e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013000 	.word	0x40013000
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_MspInit+0x50>)
 8003690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003692:	4a11      	ldr	r2, [pc, #68]	@ (80036d8 <HAL_MspInit+0x50>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6613      	str	r3, [r2, #96]	@ 0x60
 800369a:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <HAL_MspInit+0x50>)
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <HAL_MspInit+0x50>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	4a0b      	ldr	r2, [pc, #44]	@ (80036d8 <HAL_MspInit+0x50>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_MspInit+0x50>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210f      	movs	r1, #15
 80036c2:	f06f 0001 	mvn.w	r0, #1
 80036c6:	f001 f841 	bl	800474c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036ca:	f002 fc13 	bl	8005ef4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	@ 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036ec:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <HAL_InitTick+0xc4>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <HAL_InitTick+0xc4>)
 80036f2:	f043 0310 	orr.w	r3, r3, #16
 80036f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036f8:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <HAL_InitTick+0xc4>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003704:	f107 020c 	add.w	r2, r7, #12
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f003 f8e6 	bl	80068e0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003714:	f003 f8b8 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 8003718:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <HAL_InitTick+0xc8>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0c9b      	lsrs	r3, r3, #18
 8003724:	3b01      	subs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003728:	4b1f      	ldr	r3, [pc, #124]	@ (80037a8 <HAL_InitTick+0xcc>)
 800372a:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <HAL_InitTick+0xd0>)
 800372c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800372e:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <HAL_InitTick+0xcc>)
 8003730:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003734:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003736:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_InitTick+0xcc>)
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800373c:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_InitTick+0xcc>)
 800373e:	2200      	movs	r2, #0
 8003740:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003742:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_InitTick+0xcc>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003748:	4817      	ldr	r0, [pc, #92]	@ (80037a8 <HAL_InitTick+0xcc>)
 800374a:	f004 fa63 	bl	8007c14 <HAL_TIM_Base_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11b      	bne.n	8003794 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800375c:	4812      	ldr	r0, [pc, #72]	@ (80037a8 <HAL_InitTick+0xcc>)
 800375e:	f004 fab1 	bl	8007cc4 <HAL_TIM_Base_Start_IT>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003770:	2036      	movs	r0, #54	@ 0x36
 8003772:	f001 f805 	bl	8004780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d808      	bhi.n	800378e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800377c:	2200      	movs	r2, #0
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	2036      	movs	r0, #54	@ 0x36
 8003782:	f000 ffe3 	bl	800474c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003786:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <HAL_InitTick+0xd4>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e002      	b.n	8003794 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003798:	4618      	mov	r0, r3
 800379a:	3730      	adds	r7, #48	@ 0x30
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	431bde83 	.word	0x431bde83
 80037a8:	20001b58 	.word	0x20001b58
 80037ac:	40001000 	.word	0x40001000
 80037b0:	20000004 	.word	0x20000004

080037b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <NMI_Handler+0x4>

080037bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <HardFault_Handler+0x4>

080037c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <MemManage_Handler+0x4>

080037cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <BusFault_Handler+0x4>

080037d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <UsageFault_Handler+0x4>

080037dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	printf("tap 1") ;
 80037f0:	4803      	ldr	r0, [pc, #12]	@ (8003800 <EXTI1_IRQHandler+0x14>)
 80037f2:	f00b fbab 	bl	800ef4c <iprintf>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ADX_Pin);
 80037f6:	2002      	movs	r0, #2
 80037f8:	f001 fc9c 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	08011ba0 	.word	0x08011ba0

08003804 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	printf("tap 2") ;
 8003808:	4803      	ldr	r0, [pc, #12]	@ (8003818 <EXTI2_IRQHandler+0x14>)
 800380a:	f00b fb9f 	bl	800ef4c <iprintf>

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ADX_Pin);
 800380e:	2004      	movs	r0, #4
 8003810:	f001 fc90 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	08011ba8 	.word	0x08011ba8

0800381c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003820:	4802      	ldr	r0, [pc, #8]	@ (800382c <DMA1_Channel1_IRQHandler+0x10>)
 8003822:	f001 f99e 	bl	8004b62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20001db4 	.word	0x20001db4

08003830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_TOF2_Pin);
 8003834:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003838:	f001 fc7c 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800383c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003840:	f001 fc78 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800384c:	4802      	ldr	r0, [pc, #8]	@ (8003858 <UART4_IRQHandler+0x10>)
 800384e:	f006 fb87 	bl	8009f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20001c8c 	.word	0x20001c8c

0800385c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <TIM6_DAC_IRQHandler+0x10>)
 8003862:	f004 fdc5 	bl	80083f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20001b58 	.word	0x20001b58

08003870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_kill>:

int _kill(int pid, int sig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800388a:	f00b fd2d 	bl	800f2e8 <__errno>
 800388e:	4603      	mov	r3, r0
 8003890:	2216      	movs	r2, #22
 8003892:	601a      	str	r2, [r3, #0]
  return -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_exit>:

void _exit (int status)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffe7 	bl	8003880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <_exit+0x12>

080038b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e00a      	b.n	80038de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038c8:	f3af 8000 	nop.w
 80038cc:	4601      	mov	r1, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	60ba      	str	r2, [r7, #8]
 80038d4:	b2ca      	uxtb	r2, r1
 80038d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	dbf0      	blt.n	80038c8 <_read+0x12>
  }

  return len;
 80038e6:	687b      	ldr	r3, [r7, #4]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003918:	605a      	str	r2, [r3, #4]
  return 0;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <_isatty>:

int _isatty(int file)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003960:	4a14      	ldr	r2, [pc, #80]	@ (80039b4 <_sbrk+0x5c>)
 8003962:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <_sbrk+0x60>)
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <_sbrk+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <_sbrk+0x64>)
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <_sbrk+0x68>)
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d207      	bcs.n	8003998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003988:	f00b fcae 	bl	800f2e8 <__errno>
 800398c:	4603      	mov	r3, r0
 800398e:	220c      	movs	r2, #12
 8003990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003992:	f04f 33ff 	mov.w	r3, #4294967295
 8003996:	e009      	b.n	80039ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003998:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <_sbrk+0x64>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <_sbrk+0x64>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	4a05      	ldr	r2, [pc, #20]	@ (80039bc <_sbrk+0x64>)
 80039a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039aa:	68fb      	ldr	r3, [r7, #12]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20008000 	.word	0x20008000
 80039b8:	00000400 	.word	0x00000400
 80039bc:	20001ba4 	.word	0x20001ba4
 80039c0:	20006ed8 	.word	0x20006ed8

080039c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <SystemInit+0x20>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	4a05      	ldr	r2, [pc, #20]	@ (80039e4 <SystemInit+0x20>)
 80039d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b09c      	sub	sp, #112	@ 0x70
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
 8003a18:	615a      	str	r2, [r3, #20]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	2234      	movs	r2, #52	@ 0x34
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f00b fc0e 	bl	800f244 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a2a:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <MX_TIM1_Init+0x194>)
 8003a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a2e:	4b52      	ldr	r3, [pc, #328]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003a34:	4b50      	ldr	r3, [pc, #320]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a36:	2220      	movs	r2, #32
 8003a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8003a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a3c:	f242 1233 	movw	r2, #8499	@ 0x2133
 8003a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a42:	4b4d      	ldr	r3, [pc, #308]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a48:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a50:	2280      	movs	r2, #128	@ 0x80
 8003a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a54:	4848      	ldr	r0, [pc, #288]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a56:	f004 f8dd 	bl	8007c14 <HAL_TIM_Base_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003a60:	f7ff fb70 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4841      	ldr	r0, [pc, #260]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a72:	f004 ff21 	bl	80088b8 <HAL_TIM_ConfigClockSource>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003a7c:	f7ff fb62 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a80:	483d      	ldr	r0, [pc, #244]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003a82:	f004 f989 	bl	8007d98 <HAL_TIM_PWM_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003a8c:	f7ff fb5a 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a94:	2300      	movs	r3, #0
 8003a96:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4835      	ldr	r0, [pc, #212]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003aa4:	f005 fd90 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003aae:	f7ff fb49 	bl	8003144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab2:	2360      	movs	r3, #96	@ 0x60
 8003ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8003ab6:	f640 5348 	movw	r3, #3400	@ 0xd48
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003abc:	2300      	movs	r3, #0
 8003abe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4827      	ldr	r0, [pc, #156]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003ada:	f004 fdd9 	bl	8008690 <HAL_TIM_PWM_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003ae4:	f7ff fb2e 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ae8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003aec:	2204      	movs	r2, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4821      	ldr	r0, [pc, #132]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003af2:	f004 fdcd 	bl	8008690 <HAL_TIM_PWM_ConfigChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003afc:	f7ff fb22 	bl	8003144 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b08:	2208      	movs	r2, #8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	481a      	ldr	r0, [pc, #104]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003b0e:	f004 fdbf 	bl	8008690 <HAL_TIM_PWM_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003b18:	f7ff fb14 	bl	8003144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4807      	ldr	r0, [pc, #28]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003b5a:	f005 fdb7 	bl	80096cc <HAL_TIMEx_ConfigBreakDeadTime>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8003b64:	f7ff faee 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b68:	4803      	ldr	r0, [pc, #12]	@ (8003b78 <MX_TIM1_Init+0x190>)
 8003b6a:	f000 f949 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 8003b6e:	bf00      	nop
 8003b70:	3770      	adds	r7, #112	@ 0x70
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20001ba8 	.word	0x20001ba8
 8003b7c:	40012c00 	.word	0x40012c00

08003b80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	@ 0x30
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	2224      	movs	r2, #36	@ 0x24
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00b fb58 	bl	800f244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b94:	463b      	mov	r3, r7
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b9e:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003ba0:	4a21      	ldr	r2, [pc, #132]	@ (8003c28 <MX_TIM3_Init+0xa8>)
 8003ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003baa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbe:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	480d      	ldr	r0, [pc, #52]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003bf0:	f004 faca 	bl	8008188 <HAL_TIM_Encoder_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003bfa:	f7ff faa3 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c06:	463b      	mov	r3, r7
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4806      	ldr	r0, [pc, #24]	@ (8003c24 <MX_TIM3_Init+0xa4>)
 8003c0c:	f005 fcdc 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003c16:	f7ff fa95 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c1a:	bf00      	nop
 8003c1c:	3730      	adds	r7, #48	@ 0x30
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20001bf4 	.word	0x20001bf4
 8003c28:	40000400 	.word	0x40000400

08003c2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	2224      	movs	r2, #36	@ 0x24
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f00b fb02 	bl	800f244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c40:	463b      	mov	r3, r7
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c4a:	4b21      	ldr	r3, [pc, #132]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <MX_TIM4_Init+0xa8>)
 8003c4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c50:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c56:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c64:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6a:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480d      	ldr	r0, [pc, #52]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c9c:	f004 fa74 	bl	8008188 <HAL_TIM_Encoder_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003ca6:	f7ff fa4d 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4806      	ldr	r0, [pc, #24]	@ (8003cd0 <MX_TIM4_Init+0xa4>)
 8003cb8:	f005 fc86 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003cc2:	f7ff fa3f 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cc6:	bf00      	nop
 8003cc8:	3730      	adds	r7, #48	@ 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001c40 	.word	0x20001c40
 8003cd4:	40000800 	.word	0x40000800

08003cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <HAL_TIM_Base_MspInit+0x38>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10b      	bne.n	8003d02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_TIM_Base_MspInit+0x3c>)
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	4a09      	ldr	r2, [pc, #36]	@ (8003d14 <HAL_TIM_Base_MspInit+0x3c>)
 8003cf0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cf6:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <HAL_TIM_Base_MspInit+0x3c>)
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	@ 0x30
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 031c 	add.w	r3, r7, #28
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d128      	bne.n	8003d8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d46:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	4b28      	ldr	r3, [pc, #160]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Codeur1_PH1_Pin|Codeur1_PH2_Pin;
 8003d6a:	2330      	movs	r3, #48	@ 0x30
 8003d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	4619      	mov	r1, r3
 8003d84:	481c      	ldr	r0, [pc, #112]	@ (8003df8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d86:	f001 f83b 	bl	8004e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d8a:	e02c      	b.n	8003de6 <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	@ (8003dfc <HAL_TIM_Encoder_MspInit+0xe4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d127      	bne.n	8003de6 <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d96:	4b17      	ldr	r3, [pc, #92]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	4a16      	ldr	r2, [pc, #88]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da2:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db2:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Codeur2_PH1_Pin|Codeur2_PH2_Pin;
 8003dc6:	23c0      	movs	r3, #192	@ 0xc0
 8003dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003de2:	f001 f80d 	bl	8004e00 <HAL_GPIO_Init>
}
 8003de6:	bf00      	nop
 8003de8:	3730      	adds	r7, #48	@ 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40021000 	.word	0x40021000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	40000800 	.word	0x40000800

08003e00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a12      	ldr	r2, [pc, #72]	@ (8003e68 <HAL_TIM_MspPostInit+0x68>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d11d      	bne.n	8003e5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_MOT1_CH1_Pin|PWM_MOT2_CH2_Pin|LIDAR_M_SCTR_Pin|PWM_MOT1_CH1N_Pin
 8003e3a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003e3e:	60fb      	str	r3, [r7, #12]
                          |PWM_MOT2_CH2N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4619      	mov	r1, r3
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5a:	f000 ffd1 	bl	8004e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e5e:	bf00      	nop
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40021000 	.word	0x40021000

08003e70 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003e74:	4b22      	ldr	r3, [pc, #136]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e76:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <MX_UART4_Init+0x94>)
 8003e78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8003e7a:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e7c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8003e80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e94:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e96:	220c      	movs	r2, #12
 8003e98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9a:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003eb8:	4811      	ldr	r0, [pc, #68]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003eba:	f005 fcfe 	bl	80098ba <HAL_UART_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003ec4:	f7ff f93e 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ec8:	2100      	movs	r1, #0
 8003eca:	480d      	ldr	r0, [pc, #52]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003ecc:	f008 fb4f 	bl	800c56e <HAL_UARTEx_SetTxFifoThreshold>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003ed6:	f7ff f935 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eda:	2100      	movs	r1, #0
 8003edc:	4808      	ldr	r0, [pc, #32]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003ede:	f008 fb84 	bl	800c5ea <HAL_UARTEx_SetRxFifoThreshold>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003ee8:	f7ff f92c 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	@ (8003f00 <MX_UART4_Init+0x90>)
 8003eee:	f008 fb05 	bl	800c4fc <HAL_UARTEx_DisableFifoMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003ef8:	f7ff f924 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20001c8c 	.word	0x20001c8c
 8003f04:	40004c00 	.word	0x40004c00

08003f08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f0c:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f0e:	4a23      	ldr	r2, [pc, #140]	@ (8003f9c <MX_USART2_UART_Init+0x94>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f12:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f3e:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f44:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f4a:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f50:	4811      	ldr	r0, [pc, #68]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f52:	f005 fcb2 	bl	80098ba <HAL_UART_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003f5c:	f7ff f8f2 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f60:	2100      	movs	r1, #0
 8003f62:	480d      	ldr	r0, [pc, #52]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f64:	f008 fb03 	bl	800c56e <HAL_UARTEx_SetTxFifoThreshold>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003f6e:	f7ff f8e9 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f72:	2100      	movs	r1, #0
 8003f74:	4808      	ldr	r0, [pc, #32]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f76:	f008 fb38 	bl	800c5ea <HAL_UARTEx_SetRxFifoThreshold>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003f80:	f7ff f8e0 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f84:	4804      	ldr	r0, [pc, #16]	@ (8003f98 <MX_USART2_UART_Init+0x90>)
 8003f86:	f008 fab9 	bl	800c4fc <HAL_UARTEx_DisableFifoMode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003f90:	f7ff f8d8 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20001d20 	.word	0x20001d20
 8003f9c:	40004400 	.word	0x40004400

08003fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b09c      	sub	sp, #112	@ 0x70
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fb8:	f107 0318 	add.w	r3, r7, #24
 8003fbc:	2244      	movs	r2, #68	@ 0x44
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00b f93f 	bl	800f244 <memset>
  if(uartHandle->Instance==UART4)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a57      	ldr	r2, [pc, #348]	@ (8004128 <HAL_UART_MspInit+0x188>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d16a      	bne.n	80040a6 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fd8:	f107 0318 	add.w	r3, r7, #24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fcf5 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fe8:	f7ff f8ac 	bl	8003144 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fec:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <HAL_UART_MspInit+0x18c>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800412c <HAL_UART_MspInit+0x18c>)
 8003ff2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800412c <HAL_UART_MspInit+0x18c>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004004:	4b49      	ldr	r3, [pc, #292]	@ (800412c <HAL_UART_MspInit+0x18c>)
 8004006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004008:	4a48      	ldr	r2, [pc, #288]	@ (800412c <HAL_UART_MspInit+0x18c>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004010:	4b46      	ldr	r3, [pc, #280]	@ (800412c <HAL_UART_MspInit+0x18c>)
 8004012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_LIDAR_Pin|RX_LIDAR_Pin;
 800401c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004020:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	2300      	movs	r3, #0
 800402c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800402e:	2305      	movs	r3, #5
 8004030:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004032:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004036:	4619      	mov	r1, r3
 8004038:	483d      	ldr	r0, [pc, #244]	@ (8004130 <HAL_UART_MspInit+0x190>)
 800403a:	f000 fee1 	bl	8004e00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 800403e:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004040:	4a3d      	ldr	r2, [pc, #244]	@ (8004138 <HAL_UART_MspInit+0x198>)
 8004042:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004046:	221e      	movs	r2, #30
 8004048:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800404a:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_UART_MspInit+0x194>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004050:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004056:	4b37      	ldr	r3, [pc, #220]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004058:	2280      	movs	r2, #128	@ 0x80
 800405a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800405c:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <HAL_UART_MspInit+0x194>)
 800405e:	2200      	movs	r2, #0
 8004060:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004062:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8004068:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_UART_MspInit+0x194>)
 800406a:	2220      	movs	r2, #32
 800406c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800406e:	4b31      	ldr	r3, [pc, #196]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004076:	482f      	ldr	r0, [pc, #188]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004078:	f000 fb90 	bl	800479c <HAL_DMA_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004082:	f7ff f85f 	bl	8003144 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <HAL_UART_MspInit+0x194>)
 800408a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800408e:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <HAL_UART_MspInit+0x194>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2105      	movs	r1, #5
 8004098:	2034      	movs	r0, #52	@ 0x34
 800409a:	f000 fb57 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800409e:	2034      	movs	r0, #52	@ 0x34
 80040a0:	f000 fb6e 	bl	8004780 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040a4:	e03b      	b.n	800411e <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a24      	ldr	r2, [pc, #144]	@ (800413c <HAL_UART_MspInit+0x19c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d136      	bne.n	800411e <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040b0:	2302      	movs	r3, #2
 80040b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b8:	f107 0318 	add.w	r3, r7, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f002 fc85 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_UART_MspInit+0x12c>
      Error_Handler();
 80040c8:	f7ff f83c 	bl	8003144 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040cc:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	4a16      	ldr	r2, [pc, #88]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d8:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e4:	4b11      	ldr	r3, [pc, #68]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e8:	4a10      	ldr	r2, [pc, #64]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <HAL_UART_MspInit+0x18c>)
 80040f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_link_Pin|RX_link_Pin;
 80040fc:	230c      	movs	r3, #12
 80040fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004108:	2300      	movs	r3, #0
 800410a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800410c:	2307      	movs	r3, #7
 800410e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004110:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004114:	4619      	mov	r1, r3
 8004116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800411a:	f000 fe71 	bl	8004e00 <HAL_GPIO_Init>
}
 800411e:	bf00      	nop
 8004120:	3770      	adds	r7, #112	@ 0x70
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40004c00 	.word	0x40004c00
 800412c:	40021000 	.word	0x40021000
 8004130:	48000800 	.word	0x48000800
 8004134:	20001db4 	.word	0x20001db4
 8004138:	40020008 	.word	0x40020008
 800413c:	40004400 	.word	0x40004400

08004140 <VL53L1_RdByte>:
#include "VL53L1X_api.h"

extern I2C_HandleTypeDef TOF_PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af04      	add	r7, sp, #16
 8004146:	4603      	mov	r3, r0
 8004148:	603a      	str	r2, [r7, #0]
 800414a:	80fb      	strh	r3, [r7, #6]
 800414c:	460b      	mov	r3, r1
 800414e:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8004150:	88ba      	ldrh	r2, [r7, #4]
 8004152:	88f9      	ldrh	r1, [r7, #6]
 8004154:	2314      	movs	r3, #20
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	2301      	movs	r3, #1
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2302      	movs	r3, #2
 8004162:	4807      	ldr	r0, [pc, #28]	@ (8004180 <VL53L1_RdByte+0x40>)
 8004164:	f001 f9ae 	bl	80054c4 <HAL_I2C_Mem_Read>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <VL53L1_RdByte+0x34>
		return VL53L1__IO_ERROR;
 800416e:	f06f 030c 	mvn.w	r3, #12
 8004172:	e000      	b.n	8004176 <VL53L1_RdByte+0x36>
	else
		return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001a7c 	.word	0x20001a7c

08004184 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af04      	add	r7, sp, #16
 800418a:	4603      	mov	r3, r0
 800418c:	603a      	str	r2, [r7, #0]
 800418e:	80fb      	strh	r3, [r7, #6]
 8004190:	460b      	mov	r3, r1
 8004192:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8004194:	88ba      	ldrh	r2, [r7, #4]
 8004196:	88f9      	ldrh	r1, [r7, #6]
 8004198:	2314      	movs	r3, #20
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	2302      	movs	r3, #2
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2302      	movs	r3, #2
 80041a6:	480c      	ldr	r0, [pc, #48]	@ (80041d8 <VL53L1_RdWord+0x54>)
 80041a8:	f001 f98c 	bl	80054c4 <HAL_I2C_Mem_Read>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 80041b2:	f06f 030c 	mvn.w	r3, #12
 80041b6:	e00b      	b.n	80041d0 <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b21b      	sxth	r3, r3
 80041be:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	ba5b      	rev16	r3, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	801a      	strh	r2, [r3, #0]
		return 0;
 80041ce:	2300      	movs	r3, #0
	}
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20001a7c 	.word	0x20001a7c

080041dc <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af04      	add	r7, sp, #16
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	4603      	mov	r3, r0
 80041e8:	81fb      	strh	r3, [r7, #14]
 80041ea:	460b      	mov	r3, r1
 80041ec:	81bb      	strh	r3, [r7, #12]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, HAL_MAX_DELAY))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	89ba      	ldrh	r2, [r7, #12]
 80041f4:	89f9      	ldrh	r1, [r7, #14]
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	9002      	str	r0, [sp, #8]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2302      	movs	r3, #2
 8004204:	4806      	ldr	r0, [pc, #24]	@ (8004220 <VL53L1_ReadMulti+0x44>)
 8004206:	f001 f95d 	bl	80054c4 <HAL_I2C_Mem_Read>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <VL53L1_ReadMulti+0x3a>
		return VL53L1__IO_ERROR;
 8004210:	f06f 030c 	mvn.w	r3, #12
 8004214:	e000      	b.n	8004218 <VL53L1_ReadMulti+0x3c>
	else
		return 0;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20001a7c 	.word	0x20001a7c

08004224 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af04      	add	r7, sp, #16
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
 800422e:	460b      	mov	r3, r1
 8004230:	80bb      	strh	r3, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8004236:	88ba      	ldrh	r2, [r7, #4]
 8004238:	88f9      	ldrh	r1, [r7, #6]
 800423a:	2314      	movs	r3, #20
 800423c:	9302      	str	r3, [sp, #8]
 800423e:	2301      	movs	r3, #1
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	1cfb      	adds	r3, r7, #3
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2302      	movs	r3, #2
 8004248:	4806      	ldr	r0, [pc, #24]	@ (8004264 <VL53L1_WrByte+0x40>)
 800424a:	f001 f827 	bl	800529c <HAL_I2C_Mem_Write>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8004254:	f06f 030c 	mvn.w	r3, #12
 8004258:	e000      	b.n	800425c <VL53L1_WrByte+0x38>
	else
		return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20001a7c 	.word	0x20001a7c

08004268 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af04      	add	r7, sp, #16
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
 8004272:	460b      	mov	r3, r1
 8004274:	80bb      	strh	r3, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	b21b      	sxth	r3, r3
 800427e:	81fb      	strh	r3, [r7, #14]
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	ba5b      	rev16	r3, r3
 8004284:	b29b      	uxth	r3, r3
 8004286:	b21b      	sxth	r3, r3
 8004288:	b29b      	uxth	r3, r3
 800428a:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 800428c:	88ba      	ldrh	r2, [r7, #4]
 800428e:	88f9      	ldrh	r1, [r7, #6]
 8004290:	2314      	movs	r3, #20
 8004292:	9302      	str	r3, [sp, #8]
 8004294:	2302      	movs	r3, #2
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	1cbb      	adds	r3, r7, #2
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2302      	movs	r3, #2
 800429e:	4807      	ldr	r0, [pc, #28]	@ (80042bc <VL53L1_WrWord+0x54>)
 80042a0:	f000 fffc 	bl	800529c <HAL_I2C_Mem_Write>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 80042aa:	f06f 030c 	mvn.w	r3, #12
 80042ae:	e000      	b.n	80042b2 <VL53L1_WrWord+0x4a>
	else
		return 0;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20001a7c 	.word	0x20001a7c

080042c0 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	4603      	mov	r3, r0
 80042c8:	603a      	str	r2, [r7, #0]
 80042ca:	80fb      	strh	r3, [r7, #6]
 80042cc:	460b      	mov	r3, r1
 80042ce:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	ba1b      	rev	r3, r3
 80042d8:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 80042da:	88ba      	ldrh	r2, [r7, #4]
 80042dc:	88f9      	ldrh	r1, [r7, #6]
 80042de:	2314      	movs	r3, #20
 80042e0:	9302      	str	r3, [sp, #8]
 80042e2:	2304      	movs	r3, #4
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	463b      	mov	r3, r7
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2302      	movs	r3, #2
 80042ec:	4806      	ldr	r0, [pc, #24]	@ (8004308 <VL53L1_WrDWord+0x48>)
 80042ee:	f000 ffd5 	bl	800529c <HAL_I2C_Mem_Write>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 80042f8:	f06f 030c 	mvn.w	r3, #12
 80042fc:	e000      	b.n	8004300 <VL53L1_WrDWord+0x40>
	else
		return 0;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20001a7c 	.word	0x20001a7c

0800430c <VL53L1__Init>:
 * @brief:		Test VL53L1 presence,
 * 				initialize sensor,
 * 				set it the default Distance Mode, Timing Budget and Intermeasurement
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
	uint8_t refRegs[4] = {0,0,0,0};
 8004312:	2300      	movs	r3, #0
 8004314:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 8004316:	2300      	movs	r3, #0
 8004318:	71fb      	strb	r3, [r7, #7]
	/*status |= VL53L1__Xshut(1);
	if (status)
		return (status);

	HAL_Delay(4);*/
	status = VL53L1_ReadMulti(TOF_ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 800431a:	463a      	mov	r2, r7
 800431c:	2304      	movs	r3, #4
 800431e:	f240 110f 	movw	r1, #271	@ 0x10f
 8004322:	2052      	movs	r0, #82	@ 0x52
 8004324:	f7ff ff5a 	bl	80041dc <VL53L1_ReadMulti>
 8004328:	4603      	mov	r3, r0
 800432a:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <VL53L1__Init+0x34>
		printf("Erreur I2C lors de la lecture des registres : %d\n", status);
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4619      	mov	r1, r3
 8004336:	485c      	ldr	r0, [pc, #368]	@ (80044a8 <VL53L1__Init+0x19c>)
 8004338:	f00a fe08 	bl	800ef4c <iprintf>
		return 1;
 800433c:	2301      	movs	r3, #1
 800433e:	e0ae      	b.n	800449e <VL53L1__Init+0x192>
	}

	printf("Model ID : 0x%02X, Module Type : 0x%02X, Mask Revision : 0x%02X\n", refRegs[0], refRegs[1], refRegs[2]);
 8004340:	783b      	ldrb	r3, [r7, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	461a      	mov	r2, r3
 8004348:	78bb      	ldrb	r3, [r7, #2]
 800434a:	4858      	ldr	r0, [pc, #352]	@ (80044ac <VL53L1__Init+0x1a0>)
 800434c:	f00a fdfe 	bl	800ef4c <iprintf>


	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1

	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 8004350:	783b      	ldrb	r3, [r7, #0]
 8004352:	2bea      	cmp	r3, #234	@ 0xea
 8004354:	d105      	bne.n	8004362 <VL53L1__Init+0x56>
 8004356:	787b      	ldrb	r3, [r7, #1]
 8004358:	2bcc      	cmp	r3, #204	@ 0xcc
 800435a:	d102      	bne.n	8004362 <VL53L1__Init+0x56>
 800435c:	78bb      	ldrb	r3, [r7, #2]
 800435e:	2b10      	cmp	r3, #16
 8004360:	d004      	beq.n	800436c <VL53L1__Init+0x60>
	{
		printf("Valeurs incorrectes des registres. Vérifiez le câblage.\n");
 8004362:	4853      	ldr	r0, [pc, #332]	@ (80044b0 <VL53L1__Init+0x1a4>)
 8004364:	f00a fe5a 	bl	800f01c <puts>
		return (1);
 8004368:	2301      	movs	r3, #1
 800436a:	e098      	b.n	800449e <VL53L1__Init+0x192>
	}

	printf("Capteur détecté avec succès ! \n");
 800436c:	4851      	ldr	r0, [pc, #324]	@ (80044b4 <VL53L1__Init+0x1a8>)
 800436e:	f00a fe55 	bl	800f01c <puts>

	// Initialisation du capteur
	printf("Initialisation du capteur VL53L1X...\n");
 8004372:	4851      	ldr	r0, [pc, #324]	@ (80044b8 <VL53L1__Init+0x1ac>)
 8004374:	f00a fe52 	bl	800f01c <puts>
	status |= VL53L1X_SensorInit(TOF_ADDR);
 8004378:	2052      	movs	r0, #82	@ 0x52
 800437a:	f7fd f813 	bl	80013a4 <VL53L1X_SensorInit>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	4313      	orrs	r3, r2
 8004388:	b25b      	sxtb	r3, r3
 800438a:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <VL53L1__Init+0x9a>
		printf("Échec de l'initialisation du capteur VL53L1X : %d\n", status);
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	4619      	mov	r1, r3
 8004396:	4849      	ldr	r0, [pc, #292]	@ (80044bc <VL53L1__Init+0x1b0>)
 8004398:	f00a fdd8 	bl	800ef4c <iprintf>
		HAL_Delay(50);
 800439c:	2032      	movs	r0, #50	@ 0x32
 800439e:	f000 f8fb 	bl	8004598 <HAL_Delay>
		return 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07b      	b.n	800449e <VL53L1__Init+0x192>
	}

	// Calibration des offsets et xtalk
	printf("Calibration des offsets et xtalk...\n");
 80043a6:	4846      	ldr	r0, [pc, #280]	@ (80044c0 <VL53L1__Init+0x1b4>)
 80043a8:	f00a fe38 	bl	800f01c <puts>
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 80043ac:	f06f 0118 	mvn.w	r1, #24
 80043b0:	2052      	movs	r0, #82	@ 0x52
 80043b2:	f7fd fc02 	bl	8001bba <VL53L1X_SetOffset>
 80043b6:	4603      	mov	r3, r0
 80043b8:	461a      	mov	r2, r3
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	4313      	orrs	r3, r2
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <VL53L1__Init+0xd2>
			printf("Erreur de calibration OFFSET : %d\n", status);
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	4619      	mov	r1, r3
 80043ce:	483d      	ldr	r0, [pc, #244]	@ (80044c4 <VL53L1__Init+0x1b8>)
 80043d0:	f00a fdbc 	bl	800ef4c <iprintf>
			HAL_Delay(50);
 80043d4:	2032      	movs	r0, #50	@ 0x32
 80043d6:	f000 f8df 	bl	8004598 <HAL_Delay>
			return 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	e05f      	b.n	800449e <VL53L1__Init+0x192>
		}
	status |= VL53L1X_SetXtalk(TOF_ADDR, VL53L1__CALIB_XTALK);
 80043de:	2100      	movs	r1, #0
 80043e0:	2052      	movs	r0, #82	@ 0x52
 80043e2:	f7fd fc1f 	bl	8001c24 <VL53L1X_SetXtalk>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <VL53L1__Init+0x102>
			printf("Erreur de calibration XTALK : %d\n", status);
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4832      	ldr	r0, [pc, #200]	@ (80044c8 <VL53L1__Init+0x1bc>)
 8004400:	f00a fda4 	bl	800ef4c <iprintf>
			HAL_Delay(50);
 8004404:	2032      	movs	r0, #50	@ 0x32
 8004406:	f000 f8c7 	bl	8004598 <HAL_Delay>
			return 1;
 800440a:	2301      	movs	r3, #1
 800440c:	e047      	b.n	800449e <VL53L1__Init+0x192>
		}


	// Configuration des paramètres de mesure
	printf("Configuration des paramètres de mesure...\n");
 800440e:	482f      	ldr	r0, [pc, #188]	@ (80044cc <VL53L1__Init+0x1c0>)
 8004410:	f00a fe04 	bl	800f01c <puts>
	// VL53L1X sensor is available
	/* inizializing: default setting  */
	status |= VL53L1X_SensorInit(TOF_ADDR);
 8004414:	2052      	movs	r0, #82	@ 0x52
 8004416:	f7fc ffc5 	bl	80013a4 <VL53L1X_SensorInit>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	4313      	orrs	r3, r2
 8004424:	b25b      	sxtb	r3, r3
 8004426:	71fb      	strb	r3, [r7, #7]
	/* initializing: device settings */
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 8004428:	f06f 0118 	mvn.w	r1, #24
 800442c:	2052      	movs	r0, #82	@ 0x52
 800442e:	f7fd fbc4 	bl	8001bba <VL53L1X_SetOffset>
 8004432:	4603      	mov	r3, r0
 8004434:	461a      	mov	r2, r3
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	4313      	orrs	r3, r2
 800443c:	b25b      	sxtb	r3, r3
 800443e:	71fb      	strb	r3, [r7, #7]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(TOF_ADDR, VL53L1__DISTANCE_MODE);
 8004440:	2102      	movs	r1, #2
 8004442:	2052      	movs	r0, #82	@ 0x52
 8004444:	f7fd fa96 	bl	8001974 <VL53L1X_SetDistanceMode>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004450:	4313      	orrs	r3, r2
 8004452:	b25b      	sxtb	r3, r3
 8004454:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(TOF_ADDR, VL53L1__TIMING_BUDGET);
 8004456:	2114      	movs	r1, #20
 8004458:	2052      	movs	r0, #82	@ 0x52
 800445a:	f7fd f8f0 	bl	800163e <VL53L1X_SetTimingBudgetInMs>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	4313      	orrs	r3, r2
 8004468:	b25b      	sxtb	r3, r3
 800446a:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetInterMeasurementInMs(TOF_ADDR, VL53L1__INTERMEASUREMENT);
 800446c:	2119      	movs	r1, #25
 800446e:	2052      	movs	r0, #82	@ 0x52
 8004470:	f7fd fb4a 	bl	8001b08 <VL53L1X_SetInterMeasurementInMs>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4313      	orrs	r3, r2
 800447e:	b25b      	sxtb	r3, r3
 8004480:	71fb      	strb	r3, [r7, #7]

	if (status != 0) {
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <VL53L1__Init+0x18a>
		printf("Erreur de configuration : %d\n", status);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4619      	mov	r1, r3
 800448c:	4810      	ldr	r0, [pc, #64]	@ (80044d0 <VL53L1__Init+0x1c4>)
 800448e:	f00a fd5d 	bl	800ef4c <iprintf>
		return 1;
 8004492:	2301      	movs	r3, #1
 8004494:	e003      	b.n	800449e <VL53L1__Init+0x192>
	}

	printf("Capteur initialisé avec succès.\n");
 8004496:	480f      	ldr	r0, [pc, #60]	@ (80044d4 <VL53L1__Init+0x1c8>)
 8004498:	f00a fdc0 	bl	800f01c <puts>
	return status;
 800449c:	79fb      	ldrb	r3, [r7, #7]
};
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	08011bb0 	.word	0x08011bb0
 80044ac:	08011be4 	.word	0x08011be4
 80044b0:	08011c28 	.word	0x08011c28
 80044b4:	08011c64 	.word	0x08011c64
 80044b8:	08011c88 	.word	0x08011c88
 80044bc:	08011cb0 	.word	0x08011cb0
 80044c0:	08011ce4 	.word	0x08011ce4
 80044c4:	08011d08 	.word	0x08011d08
 80044c8:	08011d2c 	.word	0x08011d2c
 80044cc:	08011d50 	.word	0x08011d50
 80044d0:	08011d7c 	.word	0x08011d7c
 80044d4:	08011d9c 	.word	0x08011d9c

080044d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044d8:	480d      	ldr	r0, [pc, #52]	@ (8004510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80044dc:	f7ff fa72 	bl	80039c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e0:	480c      	ldr	r0, [pc, #48]	@ (8004514 <LoopForever+0x6>)
  ldr r1, =_edata
 80044e2:	490d      	ldr	r1, [pc, #52]	@ (8004518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <LoopForever+0xe>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004524 <LoopForever+0x16>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004506:	f00a fef5 	bl	800f2f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800450a:	f7fe fcab 	bl	8002e64 <main>

0800450e <LoopForever>:

LoopForever:
    b LoopForever
 800450e:	e7fe      	b.n	800450e <LoopForever>
  ldr   r0, =_estack
 8004510:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004518:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800451c:	080121e8 	.word	0x080121e8
  ldr r2, =_sbss
 8004520:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004524:	20006ed8 	.word	0x20006ed8

08004528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004528:	e7fe      	b.n	8004528 <ADC1_2_IRQHandler>

0800452a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004534:	2003      	movs	r0, #3
 8004536:	f000 f8fe 	bl	8004736 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800453a:	200f      	movs	r0, #15
 800453c:	f7ff f8ce 	bl	80036dc <HAL_InitTick>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	71fb      	strb	r3, [r7, #7]
 800454a:	e001      	b.n	8004550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800454c:	f7ff f89c 	bl	8003688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004550:	79fb      	ldrb	r3, [r7, #7]

}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_IncTick+0x1c>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_IncTick+0x20>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4413      	add	r3, r2
 800456a:	4a03      	ldr	r2, [pc, #12]	@ (8004578 <HAL_IncTick+0x1c>)
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20001e14 	.word	0x20001e14
 800457c:	20000008 	.word	0x20000008

08004580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return uwTick;
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <HAL_GetTick+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20001e14 	.word	0x20001e14

08004598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff ffee 	bl	8004580 <HAL_GetTick>
 80045a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d004      	beq.n	80045bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045b2:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_Delay+0x40>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045bc:	bf00      	nop
 80045be:	f7ff ffdf 	bl	8004580 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f7      	bhi.n	80045be <HAL_Delay+0x26>
  {
  }
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000008 	.word	0x20000008

080045dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	@ (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	db0b      	blt.n	800466a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	4907      	ldr	r1, [pc, #28]	@ (8004678 <__NVIC_EnableIRQ+0x38>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	@ (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	@ (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	@ 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
         );
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	@ 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff4c 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800475a:	f7ff ff63 	bl	8004624 <__NVIC_GetPriorityGrouping>
 800475e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	6978      	ldr	r0, [r7, #20]
 8004766:	f7ff ffb3 	bl	80046d0 <NVIC_EncodePriority>
 800476a:	4602      	mov	r2, r0
 800476c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff ff82 	bl	800467c <__NVIC_SetPriority>
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff56 	bl	8004640 <__NVIC_EnableIRQ>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e08d      	b.n	80048ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b47      	ldr	r3, [pc, #284]	@ (80048d4 <HAL_DMA_Init+0x138>)
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d80f      	bhi.n	80047da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	4b45      	ldr	r3, [pc, #276]	@ (80048d8 <HAL_DMA_Init+0x13c>)
 80047c2:	4413      	add	r3, r2
 80047c4:	4a45      	ldr	r2, [pc, #276]	@ (80048dc <HAL_DMA_Init+0x140>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	009a      	lsls	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a42      	ldr	r2, [pc, #264]	@ (80048e0 <HAL_DMA_Init+0x144>)
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80047d8:	e00e      	b.n	80047f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <HAL_DMA_Init+0x148>)
 80047e2:	4413      	add	r3, r2
 80047e4:	4a3d      	ldr	r2, [pc, #244]	@ (80048dc <HAL_DMA_Init+0x140>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a3c      	ldr	r2, [pc, #240]	@ (80048e8 <HAL_DMA_Init+0x14c>)
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800480e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa76 	bl	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004858:	d102      	bne.n	8004860 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004874:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <HAL_DMA_Init+0x104>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b04      	cmp	r3, #4
 8004884:	d80c      	bhi.n	80048a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa96 	bl	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e008      	b.n	80048b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40020407 	.word	0x40020407
 80048d8:	bffdfff8 	.word	0xbffdfff8
 80048dc:	cccccccd 	.word	0xcccccccd
 80048e0:	40020000 	.word	0x40020000
 80048e4:	bffdfbf8 	.word	0xbffdfbf8
 80048e8:	40020400 	.word	0x40020400

080048ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_DMA_Start_IT+0x20>
 8004908:	2302      	movs	r3, #2
 800490a:	e066      	b.n	80049da <HAL_DMA_Start_IT+0xee>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d155      	bne.n	80049cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f9bb 	bl	8004cc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 020e 	orr.w	r2, r2, #14
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e00f      	b.n	8004984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 020a 	orr.w	r2, r2, #10
 8004982:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e005      	b.n	80049d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d005      	beq.n	8004a06 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e037      	b.n	8004a76 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 020e 	bic.w	r2, r2, #14
 8004a14:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a24:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a52:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00c      	beq.n	8004a76 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a74:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e047      	b.n	8004b58 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020e 	bic.w	r2, r2, #14
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
    }
  }
  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2204      	movs	r2, #4
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d026      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x7a>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d021      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f003 021f 	and.w	r2, r3, #31
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d071      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004bda:	e06c      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2202      	movs	r2, #2
 8004be6:	409a      	lsls	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02e      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d029      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020a 	bic.w	r2, r2, #10
 8004c16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d038      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c4c:	e033      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2208      	movs	r2, #8
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02a      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d025      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 020e 	bic.w	r2, r2, #14
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	f003 021f 	and.w	r2, r3, #31
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
}
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cd6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cee:	f003 021f 	and.w	r2, r3, #31
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d108      	bne.n	8004d20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d1e:	e007      	b.n	8004d30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d802      	bhi.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d50:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e001      	b.n	8004d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d58:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	3b08      	subs	r3, #8
 8004d66:	4a12      	ldr	r2, [pc, #72]	@ (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	009a      	lsls	r2, r3, #2
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a0b      	ldr	r2, [pc, #44]	@ (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2201      	movs	r2, #1
 8004d90:	409a      	lsls	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40020407 	.word	0x40020407
 8004da8:	40020800 	.word	0x40020800
 8004dac:	40020820 	.word	0x40020820
 8004db0:	cccccccd 	.word	0xcccccccd
 8004db4:	40020880 	.word	0x40020880

08004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004dda:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2201      	movs	r2, #1
 8004de6:	409a      	lsls	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	1000823f 	.word	0x1000823f
 8004dfc:	40020940 	.word	0x40020940

08004e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e0e:	e15a      	b.n	80050c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 814c 	beq.w	80050c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d005      	beq.n	8004e40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d130      	bne.n	8004ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e76:	2201      	movs	r2, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 0201 	and.w	r2, r3, #1
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d017      	beq.n	8004ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	2203      	movs	r2, #3
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d123      	bne.n	8004f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3208      	adds	r2, #8
 8004ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	220f      	movs	r2, #15
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	08da      	lsrs	r2, r3, #3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3208      	adds	r2, #8
 8004f2c:	6939      	ldr	r1, [r7, #16]
 8004f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4013      	ands	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0203 	and.w	r2, r3, #3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80a6 	beq.w	80050c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f74:	4b5b      	ldr	r3, [pc, #364]	@ (80050e4 <HAL_GPIO_Init+0x2e4>)
 8004f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f78:	4a5a      	ldr	r2, [pc, #360]	@ (80050e4 <HAL_GPIO_Init+0x2e4>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f80:	4b58      	ldr	r3, [pc, #352]	@ (80050e4 <HAL_GPIO_Init+0x2e4>)
 8004f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f8c:	4a56      	ldr	r2, [pc, #344]	@ (80050e8 <HAL_GPIO_Init+0x2e8>)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	3302      	adds	r3, #2
 8004f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	220f      	movs	r2, #15
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fb6:	d01f      	beq.n	8004ff8 <HAL_GPIO_Init+0x1f8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a4c      	ldr	r2, [pc, #304]	@ (80050ec <HAL_GPIO_Init+0x2ec>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d019      	beq.n	8004ff4 <HAL_GPIO_Init+0x1f4>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a4b      	ldr	r2, [pc, #300]	@ (80050f0 <HAL_GPIO_Init+0x2f0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_GPIO_Init+0x1f0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a4a      	ldr	r2, [pc, #296]	@ (80050f4 <HAL_GPIO_Init+0x2f4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00d      	beq.n	8004fec <HAL_GPIO_Init+0x1ec>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a49      	ldr	r2, [pc, #292]	@ (80050f8 <HAL_GPIO_Init+0x2f8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <HAL_GPIO_Init+0x1e8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a48      	ldr	r2, [pc, #288]	@ (80050fc <HAL_GPIO_Init+0x2fc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_GPIO_Init+0x1e4>
 8004fe0:	2305      	movs	r3, #5
 8004fe2:	e00a      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	e008      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	e006      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004fec:	2303      	movs	r3, #3
 8004fee:	e004      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e002      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_GPIO_Init+0x1fa>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	f002 0203 	and.w	r2, r2, #3
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	4093      	lsls	r3, r2
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500a:	4937      	ldr	r1, [pc, #220]	@ (80050e8 <HAL_GPIO_Init+0x2e8>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005018:	4b39      	ldr	r3, [pc, #228]	@ (8005100 <HAL_GPIO_Init+0x300>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800503c:	4a30      	ldr	r2, [pc, #192]	@ (8005100 <HAL_GPIO_Init+0x300>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005042:	4b2f      	ldr	r3, [pc, #188]	@ (8005100 <HAL_GPIO_Init+0x300>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	43db      	mvns	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005066:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <HAL_GPIO_Init+0x300>)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800506c:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <HAL_GPIO_Init+0x300>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	43db      	mvns	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005090:	4a1b      	ldr	r2, [pc, #108]	@ (8005100 <HAL_GPIO_Init+0x300>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005096:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <HAL_GPIO_Init+0x300>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HAL_GPIO_Init+0x300>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3301      	adds	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f ae9d 	bne.w	8004e10 <HAL_GPIO_Init+0x10>
  }
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40010000 	.word	0x40010000
 80050ec:	48000400 	.word	0x48000400
 80050f0:	48000800 	.word	0x48000800
 80050f4:	48000c00 	.word	0x48000c00
 80050f8:	48001000 	.word	0x48001000
 80050fc:	48001400 	.word	0x48001400
 8005100:	40010400 	.word	0x40010400

08005104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
 8005110:	4613      	mov	r3, r2
 8005112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005114:	787b      	ldrb	r3, [r7, #1]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005120:	e002      	b.n	8005128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005122:	887a      	ldrh	r2, [r7, #2]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514a:	4a05      	ldr	r2, [pc, #20]	@ (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd ffce 	bl	80030f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40010400 	.word	0x40010400

08005164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e08d      	b.n	8005292 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fb9e 	bl	80028cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	e006      	b.n	80051ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d108      	bne.n	8005206 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	e007      	b.n	8005216 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b20      	cmp	r3, #32
 80052c0:	f040 80f9 	bne.w	80054b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_I2C_Mem_Write+0x34>
 80052ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0ed      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Mem_Write+0x4e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0e6      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052f2:	f7ff f945 	bl	8004580 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2319      	movs	r3, #25
 80052fe:	2201      	movs	r2, #1
 8005300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fac3 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0d1      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	@ 0x21
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2240      	movs	r2, #64	@ 0x40
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005334:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800533c:	88f8      	ldrh	r0, [r7, #6]
 800533e:	893a      	ldrh	r2, [r7, #8]
 8005340:	8979      	ldrh	r1, [r7, #10]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4603      	mov	r3, r0
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f9d3 	bl	80056f8 <I2C_RequestMemoryWrite>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0a9      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	2bff      	cmp	r3, #255	@ 0xff
 800536c:	d90e      	bls.n	800538c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	22ff      	movs	r2, #255	@ 0xff
 8005372:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005378:	b2da      	uxtb	r2, r3
 800537a:	8979      	ldrh	r1, [r7, #10]
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fc47 	bl	8005c18 <I2C_TransferConfig>
 800538a:	e00f      	b.n	80053ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539a:	b2da      	uxtb	r2, r3
 800539c:	8979      	ldrh	r1, [r7, #10]
 800539e:	2300      	movs	r3, #0
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fc36 	bl	8005c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fac6 	bl	8005942 <I2C_WaitOnTXISFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e07b      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d034      	beq.n	8005464 <HAL_I2C_Mem_Write+0x1c8>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d130      	bne.n	8005464 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	@ 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fa3f 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e04d      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2bff      	cmp	r3, #255	@ 0xff
 8005424:	d90e      	bls.n	8005444 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	22ff      	movs	r2, #255	@ 0xff
 800542a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005430:	b2da      	uxtb	r2, r3
 8005432:	8979      	ldrh	r1, [r7, #10]
 8005434:	2300      	movs	r3, #0
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fbeb 	bl	8005c18 <I2C_TransferConfig>
 8005442:	e00f      	b.n	8005464 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005452:	b2da      	uxtb	r2, r3
 8005454:	8979      	ldrh	r1, [r7, #10]
 8005456:	2300      	movs	r3, #0
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fbda 	bl	8005c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d19e      	bne.n	80053ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 faac 	bl	80059d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e01a      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2220      	movs	r2, #32
 8005488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_I2C_Mem_Write+0x224>)
 8005496:	400b      	ands	r3, r1
 8005498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	fe00e800 	.word	0xfe00e800

080054c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	817b      	strh	r3, [r7, #10]
 80054d6:	460b      	mov	r3, r1
 80054d8:	813b      	strh	r3, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	f040 80fd 	bne.w	80056e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_I2C_Mem_Read+0x34>
 80054f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0f1      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_I2C_Mem_Read+0x4e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ea      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800551a:	f7ff f831 	bl	8004580 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2319      	movs	r3, #25
 8005526:	2201      	movs	r2, #1
 8005528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f9af 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0d5      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	@ 0x22
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800555c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005564:	88f8      	ldrh	r0, [r7, #6]
 8005566:	893a      	ldrh	r2, [r7, #8]
 8005568:	8979      	ldrh	r1, [r7, #10]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4603      	mov	r3, r0
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f913 	bl	80057a0 <I2C_RequestMemoryRead>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0ad      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2bff      	cmp	r3, #255	@ 0xff
 8005594:	d90e      	bls.n	80055b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	22ff      	movs	r2, #255	@ 0xff
 800559a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	8979      	ldrh	r1, [r7, #10]
 80055a4:	4b52      	ldr	r3, [pc, #328]	@ (80056f0 <HAL_I2C_Mem_Read+0x22c>)
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 fb33 	bl	8005c18 <I2C_TransferConfig>
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	4b4a      	ldr	r3, [pc, #296]	@ (80056f0 <HAL_I2C_Mem_Read+0x22c>)
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fb22 	bl	8005c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	2200      	movs	r2, #0
 80055dc:	2104      	movs	r1, #4
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f956 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07c      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d034      	beq.n	8005694 <HAL_I2C_Mem_Read+0x1d0>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d130      	bne.n	8005694 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	2200      	movs	r2, #0
 800563a:	2180      	movs	r1, #128	@ 0x80
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f927 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e04d      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2bff      	cmp	r3, #255	@ 0xff
 8005654:	d90e      	bls.n	8005674 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22ff      	movs	r2, #255	@ 0xff
 800565a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005660:	b2da      	uxtb	r2, r3
 8005662:	8979      	ldrh	r1, [r7, #10]
 8005664:	2300      	movs	r3, #0
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fad3 	bl	8005c18 <I2C_TransferConfig>
 8005672:	e00f      	b.n	8005694 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005682:	b2da      	uxtb	r2, r3
 8005684:	8979      	ldrh	r1, [r7, #10]
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fac2 	bl	8005c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d19a      	bne.n	80055d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f994 	bl	80059d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e01a      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2220      	movs	r2, #32
 80056b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_I2C_Mem_Read+0x230>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	80002400 	.word	0x80002400
 80056f4:	fe00e800 	.word	0xfe00e800

080056f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	4608      	mov	r0, r1
 8005702:	4611      	mov	r1, r2
 8005704:	461a      	mov	r2, r3
 8005706:	4603      	mov	r3, r0
 8005708:	817b      	strh	r3, [r7, #10]
 800570a:	460b      	mov	r3, r1
 800570c:	813b      	strh	r3, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	8979      	ldrh	r1, [r7, #10]
 8005718:	4b20      	ldr	r3, [pc, #128]	@ (800579c <I2C_RequestMemoryWrite+0xa4>)
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fa79 	bl	8005c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f909 	bl	8005942 <I2C_WaitOnTXISFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e02c      	b.n	8005794 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005740:	893b      	ldrh	r3, [r7, #8]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
 800574a:	e015      	b.n	8005778 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	b29b      	uxth	r3, r3
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f8ef 	bl	8005942 <I2C_WaitOnTXISFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e012      	b.n	8005794 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2200      	movs	r2, #0
 8005780:	2180      	movs	r1, #128	@ 0x80
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f884 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	80002000 	.word	0x80002000

080057a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	817b      	strh	r3, [r7, #10]
 80057b2:	460b      	mov	r3, r1
 80057b4:	813b      	strh	r3, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	8979      	ldrh	r1, [r7, #10]
 80057c0:	4b20      	ldr	r3, [pc, #128]	@ (8005844 <I2C_RequestMemoryRead+0xa4>)
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fa26 	bl	8005c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	69b9      	ldr	r1, [r7, #24]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f8b6 	bl	8005942 <I2C_WaitOnTXISFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e02c      	b.n	800583a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80057f0:	e015      	b.n	800581e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057f2:	893b      	ldrh	r3, [r7, #8]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f89c 	bl	8005942 <I2C_WaitOnTXISFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e012      	b.n	800583a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005814:	893b      	ldrh	r3, [r7, #8]
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2200      	movs	r2, #0
 8005826:	2140      	movs	r1, #64	@ 0x40
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f831 	bl	8005890 <I2C_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	80002000 	.word	0x80002000

08005848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d103      	bne.n	8005866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d007      	beq.n	8005884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	619a      	str	r2, [r3, #24]
  }
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a0:	e03b      	b.n	800591a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8d6 	bl	8005a58 <I2C_IsErrorOccurred>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e041      	b.n	800593a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d02d      	beq.n	800591a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fe fe5f 	bl	8004580 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d122      	bne.n	800591a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d113      	bne.n	800591a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e00f      	b.n	800593a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0b4      	beq.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800594e:	e033      	b.n	80059b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f87f 	bl	8005a58 <I2C_IsErrorOccurred>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e031      	b.n	80059c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d025      	beq.n	80059b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596c:	f7fe fe08 	bl	8004580 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11a      	bne.n	80059b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d013      	beq.n	80059b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e007      	b.n	80059c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d1c4      	bne.n	8005950 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059dc:	e02f      	b.n	8005a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f838 	bl	8005a58 <I2C_IsErrorOccurred>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e02d      	b.n	8005a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f2:	f7fe fdc5 	bl	8004580 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11a      	bne.n	8005a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d013      	beq.n	8005a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e007      	b.n	8005a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d1c8      	bne.n	80059de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d068      	beq.n	8005b56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a8c:	e049      	b.n	8005b22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a94:	d045      	beq.n	8005b22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a96:	f7fe fd73 	bl	8004580 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <I2C_IsErrorOccurred+0x54>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d13a      	bne.n	8005b22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005abe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ace:	d121      	bne.n	8005b14 <I2C_IsErrorOccurred+0xbc>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad6:	d01d      	beq.n	8005b14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d01a      	beq.n	8005b14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005aee:	f7fe fd47 	bl	8004580 <HAL_GetTick>
 8005af2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af4:	e00e      	b.n	8005b14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005af6:	f7fe fd43 	bl	8004580 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b19      	cmp	r3, #25
 8005b02:	d907      	bls.n	8005b14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	f043 0320 	orr.w	r3, r3, #32
 8005b0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b12:	e006      	b.n	8005b22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d1e9      	bne.n	8005af6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d003      	beq.n	8005b38 <I2C_IsErrorOccurred+0xe0>
 8005b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0aa      	beq.n	8005a8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2220      	movs	r2, #32
 8005b46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f043 0308 	orr.w	r3, r3, #8
 8005b90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	f043 0302 	orr.w	r3, r3, #2
 8005bb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01c      	beq.n	8005c06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fe3b 	bl	8005848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6859      	ldr	r1, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <I2C_IsErrorOccurred+0x1bc>)
 8005bde:	400b      	ands	r3, r1
 8005be0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	@ 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	fe00e800 	.word	0xfe00e800

08005c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	817b      	strh	r3, [r7, #10]
 8005c26:	4613      	mov	r3, r2
 8005c28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c2a:	897b      	ldrh	r3, [r7, #10]
 8005c2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c30:	7a7b      	ldrb	r3, [r7, #9]
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	0d5b      	lsrs	r3, r3, #21
 8005c52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c56:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <I2C_TransferConfig+0x60>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	ea02 0103 	and.w	r1, r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	03ff63ff 	.word	0x03ff63ff

08005c7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d138      	bne.n	8005d04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e032      	b.n	8005d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2224      	movs	r2, #36	@ 0x24
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d139      	bne.n	8005d9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e033      	b.n	8005d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2224      	movs	r2, #36	@ 0x24
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d141      	bne.n	8005e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc6:	d131      	bne.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dc8:	4b47      	ldr	r3, [pc, #284]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dce:	4a46      	ldr	r2, [pc, #280]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dd8:	4b43      	ldr	r3, [pc, #268]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005de0:	4a41      	ldr	r2, [pc, #260]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005de8:	4b40      	ldr	r3, [pc, #256]	@ (8005eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2232      	movs	r2, #50	@ 0x32
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	0c9b      	lsrs	r3, r3, #18
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dfe:	e002      	b.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e06:	4b38      	ldr	r3, [pc, #224]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e12:	d102      	bne.n	8005e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f2      	bne.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e26:	d158      	bne.n	8005eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e057      	b.n	8005edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e32:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e3c:	e04d      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e44:	d141      	bne.n	8005eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e46:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d131      	bne.n	8005eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e54:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5a:	4a23      	ldr	r2, [pc, #140]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e64:	4b20      	ldr	r3, [pc, #128]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2232      	movs	r2, #50	@ 0x32
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	0c9b      	lsrs	r3, r3, #18
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e8a:	e002      	b.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e92:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9e:	d102      	bne.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f2      	bne.n	8005e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ea6:	4b10      	ldr	r3, [pc, #64]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb2:	d112      	bne.n	8005eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e011      	b.n	8005edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ec8:	e007      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005eca:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ed8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	431bde83 	.word	0x431bde83

08005ef4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a04      	ldr	r2, [pc, #16]	@ (8005f10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f02:	6093      	str	r3, [r2, #8]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40007000 	.word	0x40007000

08005f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e2fe      	b.n	8006524 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d075      	beq.n	800601e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f32:	4b97      	ldr	r3, [pc, #604]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f3c:	4b94      	ldr	r3, [pc, #592]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b0c      	cmp	r3, #12
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCC_OscConfig+0x3e>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d002      	beq.n	8005f58 <HAL_RCC_OscConfig+0x44>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d10b      	bne.n	8005f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f58:	4b8d      	ldr	r3, [pc, #564]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d05b      	beq.n	800601c <HAL_RCC_OscConfig+0x108>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d157      	bne.n	800601c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e2d9      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x74>
 8005f7a:	4b85      	ldr	r3, [pc, #532]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a84      	ldr	r2, [pc, #528]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e01d      	b.n	8005fc4 <HAL_RCC_OscConfig+0xb0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f90:	d10c      	bne.n	8005fac <HAL_RCC_OscConfig+0x98>
 8005f92:	4b7f      	ldr	r3, [pc, #508]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a7e      	ldr	r2, [pc, #504]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7b      	ldr	r2, [pc, #492]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e00b      	b.n	8005fc4 <HAL_RCC_OscConfig+0xb0>
 8005fac:	4b78      	ldr	r3, [pc, #480]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a77      	ldr	r2, [pc, #476]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b75      	ldr	r3, [pc, #468]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a74      	ldr	r2, [pc, #464]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d013      	beq.n	8005ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fe fad8 	bl	8004580 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7fe fad4 	bl	8004580 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	@ 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e29e      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0xc0>
 8005ff2:	e014      	b.n	800601e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fe fac4 	bl	8004580 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7fe fac0 	bl	8004580 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	@ 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e28a      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800600e:	4b60      	ldr	r3, [pc, #384]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0xe8>
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d075      	beq.n	8006116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602a:	4b59      	ldr	r3, [pc, #356]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006034:	4b56      	ldr	r3, [pc, #344]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d102      	bne.n	800604a <HAL_RCC_OscConfig+0x136>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d002      	beq.n	8006050 <HAL_RCC_OscConfig+0x13c>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d11f      	bne.n	8006090 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006050:	4b4f      	ldr	r3, [pc, #316]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_OscConfig+0x154>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e25d      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	4b49      	ldr	r3, [pc, #292]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	4946      	ldr	r1, [pc, #280]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800607c:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <HAL_RCC_OscConfig+0x280>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7fd fb2b 	bl	80036dc <HAL_InitTick>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d043      	beq.n	8006114 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e249      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d023      	beq.n	80060e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006098:	4b3d      	ldr	r3, [pc, #244]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3c      	ldr	r2, [pc, #240]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800609e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fe fa6c 	bl	8004580 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ac:	f7fe fa68 	bl	8004580 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e232      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060be:	4b34      	ldr	r3, [pc, #208]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ca:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	492d      	ldr	r1, [pc, #180]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
 80060de:	e01a      	b.n	8006116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 80060e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fe fa48 	bl	8004580 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f4:	f7fe fa44 	bl	8004580 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e20e      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006106:	4b22      	ldr	r3, [pc, #136]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x1e0>
 8006112:	e000      	b.n	8006116 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006114:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d041      	beq.n	80061a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01c      	beq.n	8006164 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800612a:	4b19      	ldr	r3, [pc, #100]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800612c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fe fa21 	bl	8004580 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006142:	f7fe fa1d 	bl	8004580 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e1e7      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006154:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ef      	beq.n	8006142 <HAL_RCC_OscConfig+0x22e>
 8006162:	e020      	b.n	80061a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006164:	4b0a      	ldr	r3, [pc, #40]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616a:	4a09      	ldr	r2, [pc, #36]	@ (8006190 <HAL_RCC_OscConfig+0x27c>)
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fe fa04 	bl	8004580 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800617a:	e00d      	b.n	8006198 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800617c:	f7fe fa00 	bl	8004580 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d906      	bls.n	8006198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e1ca      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000
 8006194:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006198:	4b8c      	ldr	r3, [pc, #560]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800619a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ea      	bne.n	800617c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80a6 	beq.w	8006300 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061b8:	4b84      	ldr	r3, [pc, #528]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_RCC_OscConfig+0x2b4>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_RCC_OscConfig+0x2b6>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ce:	4b7f      	ldr	r3, [pc, #508]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80061d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d2:	4a7e      	ldr	r2, [pc, #504]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061da:	4b7c      	ldr	r3, [pc, #496]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80061dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ea:	4b79      	ldr	r3, [pc, #484]	@ (80063d0 <HAL_RCC_OscConfig+0x4bc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d118      	bne.n	8006228 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f6:	4b76      	ldr	r3, [pc, #472]	@ (80063d0 <HAL_RCC_OscConfig+0x4bc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a75      	ldr	r2, [pc, #468]	@ (80063d0 <HAL_RCC_OscConfig+0x4bc>)
 80061fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006202:	f7fe f9bd 	bl	8004580 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620a:	f7fe f9b9 	bl	8004580 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e183      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621c:	4b6c      	ldr	r3, [pc, #432]	@ (80063d0 <HAL_RCC_OscConfig+0x4bc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d108      	bne.n	8006242 <HAL_RCC_OscConfig+0x32e>
 8006230:	4b66      	ldr	r3, [pc, #408]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006236:	4a65      	ldr	r2, [pc, #404]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006240:	e024      	b.n	800628c <HAL_RCC_OscConfig+0x378>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b05      	cmp	r3, #5
 8006248:	d110      	bne.n	800626c <HAL_RCC_OscConfig+0x358>
 800624a:	4b60      	ldr	r3, [pc, #384]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006250:	4a5e      	ldr	r2, [pc, #376]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006252:	f043 0304 	orr.w	r3, r3, #4
 8006256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800625a:	4b5c      	ldr	r3, [pc, #368]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006260:	4a5a      	ldr	r2, [pc, #360]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800626a:	e00f      	b.n	800628c <HAL_RCC_OscConfig+0x378>
 800626c:	4b57      	ldr	r3, [pc, #348]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006272:	4a56      	ldr	r2, [pc, #344]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800627c:	4b53      	ldr	r3, [pc, #332]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006282:	4a52      	ldr	r2, [pc, #328]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006284:	f023 0304 	bic.w	r3, r3, #4
 8006288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d016      	beq.n	80062c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006294:	f7fe f974 	bl	8004580 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800629a:	e00a      	b.n	80062b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629c:	f7fe f970 	bl	8004580 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e138      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062b2:	4b46      	ldr	r3, [pc, #280]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ed      	beq.n	800629c <HAL_RCC_OscConfig+0x388>
 80062c0:	e015      	b.n	80062ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c2:	f7fe f95d 	bl	8004580 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ca:	f7fe f959 	bl	8004580 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e121      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e0:	4b3a      	ldr	r3, [pc, #232]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1ed      	bne.n	80062ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f4:	4b35      	ldr	r3, [pc, #212]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80062f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f8:	4a34      	ldr	r2, [pc, #208]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d03c      	beq.n	8006386 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01c      	beq.n	800634e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006314:	4b2d      	ldr	r3, [pc, #180]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800631a:	4a2c      	ldr	r2, [pc, #176]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fe f92c 	bl	8004580 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800632c:	f7fe f928 	bl	8004580 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e0f2      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800633e:	4b23      	ldr	r3, [pc, #140]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006340:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0ef      	beq.n	800632c <HAL_RCC_OscConfig+0x418>
 800634c:	e01b      	b.n	8006386 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800634e:	4b1f      	ldr	r3, [pc, #124]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006350:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635e:	f7fe f90f 	bl	8004580 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006366:	f7fe f90b 	bl	8004580 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e0d5      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006378:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 800637a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1ef      	bne.n	8006366 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80c9 	beq.w	8006522 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006390:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b0c      	cmp	r3, #12
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d15e      	bne.n	8006464 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <HAL_RCC_OscConfig+0x4b8>)
 80063ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b2:	f7fe f8e5 	bl	8004580 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063b8:	e00c      	b.n	80063d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ba:	f7fe f8e1 	bl	8004580 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d905      	bls.n	80063d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0ab      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
 80063cc:	40021000 	.word	0x40021000
 80063d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d4:	4b55      	ldr	r3, [pc, #340]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1ec      	bne.n	80063ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e0:	4b52      	ldr	r3, [pc, #328]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	4b52      	ldr	r3, [pc, #328]	@ (8006530 <HAL_RCC_OscConfig+0x61c>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6a11      	ldr	r1, [r2, #32]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063f0:	3a01      	subs	r2, #1
 80063f2:	0112      	lsls	r2, r2, #4
 80063f4:	4311      	orrs	r1, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063fa:	0212      	lsls	r2, r2, #8
 80063fc:	4311      	orrs	r1, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006402:	0852      	lsrs	r2, r2, #1
 8006404:	3a01      	subs	r2, #1
 8006406:	0552      	lsls	r2, r2, #21
 8006408:	4311      	orrs	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800640e:	0852      	lsrs	r2, r2, #1
 8006410:	3a01      	subs	r2, #1
 8006412:	0652      	lsls	r2, r2, #25
 8006414:	4311      	orrs	r1, r2
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800641a:	06d2      	lsls	r2, r2, #27
 800641c:	430a      	orrs	r2, r1
 800641e:	4943      	ldr	r1, [pc, #268]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006420:	4313      	orrs	r3, r2
 8006422:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b41      	ldr	r3, [pc, #260]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a40      	ldr	r2, [pc, #256]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 800642a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800642e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006430:	4b3e      	ldr	r3, [pc, #248]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a3d      	ldr	r2, [pc, #244]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800643a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fe f8a0 	bl	8004580 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006444:	f7fe f89c 	bl	8004580 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e066      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006456:	4b35      	ldr	r3, [pc, #212]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0x530>
 8006462:	e05e      	b.n	8006522 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006464:	4b31      	ldr	r3, [pc, #196]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 800646a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800646e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fe f886 	bl	8004580 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006478:	f7fe f882 	bl	8004580 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e04c      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800648a:	4b28      	ldr	r3, [pc, #160]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006496:	4b25      	ldr	r3, [pc, #148]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	4924      	ldr	r1, [pc, #144]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 800649c:	4b25      	ldr	r3, [pc, #148]	@ (8006534 <HAL_RCC_OscConfig+0x620>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
 80064a2:	e03e      	b.n	8006522 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e039      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80064b0:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <HAL_RCC_OscConfig+0x618>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d12c      	bne.n	800651e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	3b01      	subs	r3, #1
 80064d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d123      	bne.n	800651e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11b      	bne.n	800651e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d113      	bne.n	800651e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	3b01      	subs	r3, #1
 8006504:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d109      	bne.n	800651e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	3b01      	subs	r3, #1
 8006518:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d001      	beq.n	8006522 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40021000 	.word	0x40021000
 8006530:	019f800c 	.word	0x019f800c
 8006534:	feeefffc 	.word	0xfeeefffc

08006538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e11e      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b91      	ldr	r3, [pc, #580]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d910      	bls.n	8006580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b8e      	ldr	r3, [pc, #568]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 020f 	bic.w	r2, r3, #15
 8006566:	498c      	ldr	r1, [pc, #560]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b8a      	ldr	r3, [pc, #552]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e106      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d073      	beq.n	8006674 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d129      	bne.n	80065e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006594:	4b81      	ldr	r3, [pc, #516]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0f4      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065a4:	f000 f9ce 	bl	8006944 <RCC_GetSysClockFreqFromPLLSource>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4a7c      	ldr	r2, [pc, #496]	@ (80067a0 <HAL_RCC_ClockConfig+0x268>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d93f      	bls.n	8006632 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065b2:	4b7a      	ldr	r3, [pc, #488]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d033      	beq.n	8006632 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d12f      	bne.n	8006632 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065d2:	4b72      	ldr	r3, [pc, #456]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065da:	4a70      	ldr	r2, [pc, #448]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80065dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e024      	b.n	8006632 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d107      	bne.n	8006600 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065f0:	4b6a      	ldr	r3, [pc, #424]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0c6      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006600:	4b66      	ldr	r3, [pc, #408]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0be      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006610:	f000 f8ce 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8006614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4a61      	ldr	r2, [pc, #388]	@ (80067a0 <HAL_RCC_ClockConfig+0x268>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d909      	bls.n	8006632 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800661e:	4b5f      	ldr	r3, [pc, #380]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006626:	4a5d      	ldr	r2, [pc, #372]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800662e:	2380      	movs	r3, #128	@ 0x80
 8006630:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006632:	4b5a      	ldr	r3, [pc, #360]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f023 0203 	bic.w	r2, r3, #3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4957      	ldr	r1, [pc, #348]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006640:	4313      	orrs	r3, r2
 8006642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006644:	f7fd ff9c 	bl	8004580 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664a:	e00a      	b.n	8006662 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664c:	f7fd ff98 	bl	8004580 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e095      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006662:	4b4e      	ldr	r3, [pc, #312]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 020c 	and.w	r2, r3, #12
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	429a      	cmp	r2, r3
 8006672:	d1eb      	bne.n	800664c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d023      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800668c:	4b43      	ldr	r3, [pc, #268]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a42      	ldr	r2, [pc, #264]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006696:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066a4:	4b3d      	ldr	r3, [pc, #244]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066ac:	4a3b      	ldr	r2, [pc, #236]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b4:	4b39      	ldr	r3, [pc, #228]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	4936      	ldr	r1, [pc, #216]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
 80066c6:	e008      	b.n	80066da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b80      	cmp	r3, #128	@ 0x80
 80066cc:	d105      	bne.n	80066da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80066ce:	4b33      	ldr	r3, [pc, #204]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4a32      	ldr	r2, [pc, #200]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 80066d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066da:	4b2f      	ldr	r3, [pc, #188]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d21d      	bcs.n	8006724 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 020f 	bic.w	r2, r3, #15
 80066f0:	4929      	ldr	r1, [pc, #164]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066f8:	f7fd ff42 	bl	8004580 <HAL_GetTick>
 80066fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006700:	f7fd ff3e 	bl	8004580 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e03b      	b.n	800678e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d1ed      	bne.n	8006700 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006730:	4b1a      	ldr	r3, [pc, #104]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4917      	ldr	r1, [pc, #92]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 800673e:	4313      	orrs	r3, r2
 8006740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800674e:	4b13      	ldr	r3, [pc, #76]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	490f      	ldr	r1, [pc, #60]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 800675e:	4313      	orrs	r3, r2
 8006760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006762:	f000 f825 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8006766:	4602      	mov	r2, r0
 8006768:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <HAL_RCC_ClockConfig+0x264>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	091b      	lsrs	r3, r3, #4
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	490c      	ldr	r1, [pc, #48]	@ (80067a4 <HAL_RCC_ClockConfig+0x26c>)
 8006774:	5ccb      	ldrb	r3, [r1, r3]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	fa22 f303 	lsr.w	r3, r2, r3
 800677e:	4a0a      	ldr	r2, [pc, #40]	@ (80067a8 <HAL_RCC_ClockConfig+0x270>)
 8006780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <HAL_RCC_ClockConfig+0x274>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fc ffa8 	bl	80036dc <HAL_InitTick>
 800678c:	4603      	mov	r3, r0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40022000 	.word	0x40022000
 800679c:	40021000 	.word	0x40021000
 80067a0:	04c4b400 	.word	0x04c4b400
 80067a4:	08011e28 	.word	0x08011e28
 80067a8:	20000000 	.word	0x20000000
 80067ac:	20000004 	.word	0x20000004

080067b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d102      	bne.n	80067c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	e047      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067c8:	4b27      	ldr	r3, [pc, #156]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 030c 	and.w	r3, r3, #12
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d102      	bne.n	80067da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067d4:	4b25      	ldr	r3, [pc, #148]	@ (800686c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	e03e      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067da:	4b23      	ldr	r3, [pc, #140]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b0c      	cmp	r3, #12
 80067e4:	d136      	bne.n	8006854 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	3301      	adds	r3, #1
 80067fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d10c      	bne.n	800681e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006804:	4a19      	ldr	r2, [pc, #100]	@ (800686c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	4a16      	ldr	r2, [pc, #88]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800680e:	68d2      	ldr	r2, [r2, #12]
 8006810:	0a12      	lsrs	r2, r2, #8
 8006812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	617b      	str	r3, [r7, #20]
      break;
 800681c:	e00c      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800681e:	4a13      	ldr	r2, [pc, #76]	@ (800686c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	4a10      	ldr	r2, [pc, #64]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006828:	68d2      	ldr	r2, [r2, #12]
 800682a:	0a12      	lsrs	r2, r2, #8
 800682c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
      break;
 8006836:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006838:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	0e5b      	lsrs	r3, r3, #25
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	3301      	adds	r3, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e001      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006858:	693b      	ldr	r3, [r7, #16]
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40021000 	.word	0x40021000
 800686c:	00f42400 	.word	0x00f42400

08006870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006874:	4b03      	ldr	r3, [pc, #12]	@ (8006884 <HAL_RCC_GetHCLKFreq+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000000 	.word	0x20000000

08006888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800688c:	f7ff fff0 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4904      	ldr	r1, [pc, #16]	@ (80068b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	f003 031f 	and.w	r3, r3, #31
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40021000 	.word	0x40021000
 80068b0:	08011e38 	.word	0x08011e38

080068b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068b8:	f7ff ffda 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0adb      	lsrs	r3, r3, #11
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4904      	ldr	r1, [pc, #16]	@ (80068dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40021000 	.word	0x40021000
 80068dc:	08011e38 	.word	0x08011e38

080068e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	220f      	movs	r2, #15
 80068ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80068f0:	4b12      	ldr	r3, [pc, #72]	@ (800693c <HAL_RCC_GetClockConfig+0x5c>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0203 	and.w	r2, r3, #3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80068fc:	4b0f      	ldr	r3, [pc, #60]	@ (800693c <HAL_RCC_GetClockConfig+0x5c>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006908:	4b0c      	ldr	r3, [pc, #48]	@ (800693c <HAL_RCC_GetClockConfig+0x5c>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006914:	4b09      	ldr	r3, [pc, #36]	@ (800693c <HAL_RCC_GetClockConfig+0x5c>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	08db      	lsrs	r3, r3, #3
 800691a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006922:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <HAL_RCC_GetClockConfig+0x60>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	601a      	str	r2, [r3, #0]
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	40022000 	.word	0x40022000

08006944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800694a:	4b1e      	ldr	r3, [pc, #120]	@ (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006954:	4b1b      	ldr	r3, [pc, #108]	@ (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d10c      	bne.n	8006982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006968:	4a17      	ldr	r2, [pc, #92]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006972:	68d2      	ldr	r2, [r2, #12]
 8006974:	0a12      	lsrs	r2, r2, #8
 8006976:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	617b      	str	r3, [r7, #20]
    break;
 8006980:	e00c      	b.n	800699c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006982:	4a11      	ldr	r2, [pc, #68]	@ (80069c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	4a0e      	ldr	r2, [pc, #56]	@ (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800698c:	68d2      	ldr	r2, [r2, #12]
 800698e:	0a12      	lsrs	r2, r2, #8
 8006990:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006994:	fb02 f303 	mul.w	r3, r2, r3
 8006998:	617b      	str	r3, [r7, #20]
    break;
 800699a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800699c:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	0e5b      	lsrs	r3, r3, #25
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	3301      	adds	r3, #1
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069b6:	687b      	ldr	r3, [r7, #4]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40021000 	.word	0x40021000
 80069c8:	00f42400 	.word	0x00f42400

080069cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069d4:	2300      	movs	r3, #0
 80069d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069d8:	2300      	movs	r3, #0
 80069da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8098 	beq.w	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ea:	2300      	movs	r3, #0
 80069ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ee:	4b43      	ldr	r3, [pc, #268]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10d      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fa:	4b40      	ldr	r3, [pc, #256]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fe:	4a3f      	ldr	r2, [pc, #252]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a06:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a12:	2301      	movs	r3, #1
 8006a14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a16:	4b3a      	ldr	r3, [pc, #232]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a39      	ldr	r2, [pc, #228]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a22:	f7fd fdad 	bl	8004580 <HAL_GetTick>
 8006a26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a28:	e009      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2a:	f7fd fda9 	bl	8004580 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d902      	bls.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8006a3c:	e005      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0ef      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a4a:	7cfb      	ldrb	r3, [r7, #19]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d159      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a50:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01e      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d019      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a6c:	4b23      	ldr	r3, [pc, #140]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a78:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a88:	4b1c      	ldr	r3, [pc, #112]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a98:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aaa:	f7fd fd69 	bl	8004580 <HAL_GetTick>
 8006aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab0:	e00b      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fd fd65 	bl	8004580 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d902      	bls.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8006ac8:	e006      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aca:	4b0c      	ldr	r3, [pc, #48]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0ec      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ad8:	7cfb      	ldrb	r3, [r7, #19]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ade:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	4903      	ldr	r1, [pc, #12]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006af4:	e008      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006af6:	7cfb      	ldrb	r3, [r7, #19]
 8006af8:	74bb      	strb	r3, [r7, #18]
 8006afa:	e005      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b04:	7cfb      	ldrb	r3, [r7, #19]
 8006b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b08:	7c7b      	ldrb	r3, [r7, #17]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d105      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0e:	4ba6      	ldr	r3, [pc, #664]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b12:	4aa5      	ldr	r2, [pc, #660]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b26:	4ba0      	ldr	r3, [pc, #640]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	f023 0203 	bic.w	r2, r3, #3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	499c      	ldr	r1, [pc, #624]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b48:	4b97      	ldr	r3, [pc, #604]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	f023 020c 	bic.w	r2, r3, #12
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	4994      	ldr	r1, [pc, #592]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	498b      	ldr	r1, [pc, #556]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b8c:	4b86      	ldr	r3, [pc, #536]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	4983      	ldr	r1, [pc, #524]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bae:	4b7e      	ldr	r3, [pc, #504]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	497a      	ldr	r1, [pc, #488]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bd0:	4b75      	ldr	r3, [pc, #468]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	4972      	ldr	r1, [pc, #456]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4969      	ldr	r1, [pc, #420]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c14:	4b64      	ldr	r3, [pc, #400]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4961      	ldr	r1, [pc, #388]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b5c      	ldr	r3, [pc, #368]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	4958      	ldr	r1, [pc, #352]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d015      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c58:	4b53      	ldr	r3, [pc, #332]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c66:	4950      	ldr	r1, [pc, #320]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c76:	d105      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c78:	4b4b      	ldr	r3, [pc, #300]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c90:	4b45      	ldr	r3, [pc, #276]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4942      	ldr	r1, [pc, #264]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cae:	d105      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc8:	4b37      	ldr	r3, [pc, #220]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	4934      	ldr	r1, [pc, #208]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce6:	d105      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a2e      	ldr	r2, [pc, #184]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d00:	4b29      	ldr	r3, [pc, #164]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0e:	4926      	ldr	r1, [pc, #152]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d1e:	d105      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d20:	4b21      	ldr	r3, [pc, #132]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a20      	ldr	r2, [pc, #128]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d015      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d38:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d46:	4918      	ldr	r1, [pc, #96]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d56:	d105      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d58:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a12      	ldr	r2, [pc, #72]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d015      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d70:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7e:	490a      	ldr	r1, [pc, #40]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d8e:	d105      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d90:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a04      	ldr	r2, [pc, #16]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40021000 	.word	0x40021000

08006dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e09d      	b.n	8006efa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dce:	d009      	beq.n	8006de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
 8006dd6:	e005      	b.n	8006de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fc fc00 	bl	8003604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e24:	d902      	bls.n	8006e2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e002      	b.n	8006e32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e3a:	d007      	beq.n	8006e4c <HAL_SPI_Init+0xa0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	ea42 0103 	orr.w	r1, r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 0204 	and.w	r2, r3, #4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ec8:	ea42 0103 	orr.w	r1, r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f12:	f7fd fb35 	bl	8004580 <HAL_GetTick>
 8006f16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e15c      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_SPI_Transmit+0x36>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e154      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_SPI_Transmit+0x48>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e14d      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2203      	movs	r2, #3
 8006f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9c:	d10f      	bne.n	8006fbe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d007      	beq.n	8006fdc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fe4:	d952      	bls.n	800708c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_SPI_Transmit+0xf2>
 8006fee:	8b7b      	ldrh	r3, [r7, #26]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d145      	bne.n	8007080 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	881a      	ldrh	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007018:	e032      	b.n	8007080 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b02      	cmp	r3, #2
 8007026:	d112      	bne.n	800704e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	881a      	ldrh	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800704c:	e018      	b.n	8007080 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704e:	f7fd fa97 	bl	8004580 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d803      	bhi.n	8007066 <HAL_SPI_Transmit+0x164>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d102      	bne.n	800706c <HAL_SPI_Transmit+0x16a>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e0b2      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1c7      	bne.n	800701a <HAL_SPI_Transmit+0x118>
 800708a:	e083      	b.n	8007194 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_SPI_Transmit+0x198>
 8007094:	8b7b      	ldrh	r3, [r7, #26]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d177      	bne.n	800718a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d912      	bls.n	80070ca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	881a      	ldrh	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	1c9a      	adds	r2, r3, #2
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b02      	subs	r3, #2
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070c8:	e05f      	b.n	800718a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80070f0:	e04b      	b.n	800718a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d12b      	bne.n	8007158 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	d912      	bls.n	8007130 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711a:	1c9a      	adds	r2, r3, #2
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b02      	subs	r3, #2
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800712e:	e02c      	b.n	800718a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007156:	e018      	b.n	800718a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007158:	f7fd fa12 	bl	8004580 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d803      	bhi.n	8007170 <HAL_SPI_Transmit+0x26e>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d102      	bne.n	8007176 <HAL_SPI_Transmit+0x274>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e02d      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ae      	bne.n	80070f2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fcf5 	bl	8007b88 <SPI_EndRxTxTransaction>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d001      	beq.n	800720e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
 800720c:	e123      	b.n	8007456 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_SPI_Receive+0x2c>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e11b      	b.n	8007456 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007226:	d112      	bne.n	800724e <HAL_SPI_Receive+0x60>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10e      	bne.n	800724e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2204      	movs	r2, #4
 8007234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007238:	88fa      	ldrh	r2, [r7, #6]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f90a 	bl	800745e <HAL_SPI_TransmitReceive>
 800724a:	4603      	mov	r3, r0
 800724c:	e103      	b.n	8007456 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800724e:	f7fd f997 	bl	8004580 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_SPI_Receive+0x74>
 800725e:	2302      	movs	r3, #2
 8007260:	e0f9      	b.n	8007456 <HAL_SPI_Receive+0x268>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2204      	movs	r2, #4
 800726e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072b4:	d908      	bls.n	80072c8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	e007      	b.n	80072d8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072e0:	d10f      	bne.n	8007302 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007300:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	d007      	beq.n	8007320 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800731e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007328:	d875      	bhi.n	8007416 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800732a:	e037      	b.n	800739c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b01      	cmp	r3, #1
 8007338:	d117      	bne.n	800736a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f103 020c 	add.w	r2, r3, #12
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007368:	e018      	b.n	800739c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800736a:	f7fd f909 	bl	8004580 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d803      	bhi.n	8007382 <HAL_SPI_Receive+0x194>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d102      	bne.n	8007388 <HAL_SPI_Receive+0x19a>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e05c      	b.n	8007456 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1c1      	bne.n	800732c <HAL_SPI_Receive+0x13e>
 80073a8:	e03b      	b.n	8007422 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d115      	bne.n	80073e4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	b292      	uxth	r2, r2
 80073c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	1c9a      	adds	r2, r3, #2
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80073e2:	e018      	b.n	8007416 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e4:	f7fd f8cc 	bl	8004580 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d803      	bhi.n	80073fc <HAL_SPI_Receive+0x20e>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d102      	bne.n	8007402 <HAL_SPI_Receive+0x214>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e01f      	b.n	8007456 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1c3      	bne.n	80073aa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fb56 	bl	8007ad8 <SPI_EndRxTransaction>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8007454:	2300      	movs	r3, #0
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08a      	sub	sp, #40	@ 0x28
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800746c:	2301      	movs	r3, #1
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007470:	f7fd f886 	bl	8004580 <HAL_GetTick>
 8007474:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800747c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007484:	887b      	ldrh	r3, [r7, #2]
 8007486:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800748c:	7ffb      	ldrb	r3, [r7, #31]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d00c      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x4e>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007498:	d106      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x4a>
 80074a2:	7ffb      	ldrb	r3, [r7, #31]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d001      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	e1f3      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_SPI_TransmitReceive+0x60>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_SPI_TransmitReceive+0x60>
 80074b8:	887b      	ldrh	r3, [r7, #2]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e1e8      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x72>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e1e1      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d003      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2205      	movs	r2, #5
 80074e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	887a      	ldrh	r2, [r7, #2]
 80074fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	887a      	ldrh	r2, [r7, #2]
 8007504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800752e:	d802      	bhi.n	8007536 <HAL_SPI_TransmitReceive+0xd8>
 8007530:	8abb      	ldrh	r3, [r7, #20]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d908      	bls.n	8007548 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	e007      	b.n	8007558 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007556:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d007      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800757e:	f240 8083 	bls.w	8007688 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_SPI_TransmitReceive+0x132>
 800758a:	8afb      	ldrh	r3, [r7, #22]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d16f      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b4:	e05c      	b.n	8007670 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d11b      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x19e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <HAL_SPI_TransmitReceive+0x19e>
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d113      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b01      	cmp	r3, #1
 8007608:	d11c      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x1e6>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	b292      	uxth	r2, r2
 8007622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007640:	2301      	movs	r3, #1
 8007642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007644:	f7fc ff9c 	bl	8004580 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007650:	429a      	cmp	r2, r3
 8007652:	d80d      	bhi.n	8007670 <HAL_SPI_TransmitReceive+0x212>
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765a:	d009      	beq.n	8007670 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e111      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d19d      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x158>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d197      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x158>
 8007686:	e0e5      	b.n	8007854 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_SPI_TransmitReceive+0x23a>
 8007690:	8afb      	ldrh	r3, [r7, #22]
 8007692:	2b01      	cmp	r3, #1
 8007694:	f040 80d1 	bne.w	800783a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d912      	bls.n	80076c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b02      	subs	r3, #2
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076c6:	e0b8      	b.n	800783a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ee:	e0a4      	b.n	800783a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d134      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x30a>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02f      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x30a>
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	2b01      	cmp	r3, #1
 800770c:	d12c      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	d912      	bls.n	800773e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771c:	881a      	ldrh	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007728:	1c9a      	adds	r2, r3, #2
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b02      	subs	r3, #2
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800773c:	e012      	b.n	8007764 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b01      	cmp	r3, #1
 8007774:	d148      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x3aa>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d042      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d923      	bls.n	80077d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007798:	b292      	uxth	r2, r2
 800779a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a0:	1c9a      	adds	r2, r3, #2
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b02      	subs	r3, #2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d81f      	bhi.n	8007804 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	e016      	b.n	8007804 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f103 020c 	add.w	r2, r3, #12
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007804:	2301      	movs	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007808:	f7fc feba 	bl	8004580 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007814:	429a      	cmp	r2, r3
 8007816:	d803      	bhi.n	8007820 <HAL_SPI_TransmitReceive+0x3c2>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d102      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x3c8>
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e02c      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	f47f af55 	bne.w	80076f0 <HAL_SPI_TransmitReceive+0x292>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f af4e 	bne.w	80076f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f995 	bl	8007b88 <SPI_EndRxTxTransaction>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e00e      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007892:	2300      	movs	r3, #0
  }
}
 8007894:	4618      	mov	r0, r3
 8007896:	3728      	adds	r7, #40	@ 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078ac:	f7fc fe68 	bl	8004580 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4413      	add	r3, r2
 80078ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078bc:	f7fc fe60 	bl	8004580 <HAL_GetTick>
 80078c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078c2:	4b39      	ldr	r3, [pc, #228]	@ (80079a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	015b      	lsls	r3, r3, #5
 80078c8:	0d1b      	lsrs	r3, r3, #20
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078d2:	e054      	b.n	800797e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d050      	beq.n	800797e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078dc:	f7fc fe50 	bl	8004580 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d902      	bls.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d13d      	bne.n	800796e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800790a:	d111      	bne.n	8007930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007914:	d004      	beq.n	8007920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791e:	d107      	bne.n	8007930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007938:	d10f      	bne.n	800795a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e017      	b.n	800799e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3b01      	subs	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4013      	ands	r3, r2
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	429a      	cmp	r2, r3
 800798c:	bf0c      	ite	eq
 800798e:	2301      	moveq	r3, #1
 8007990:	2300      	movne	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	429a      	cmp	r2, r3
 800799a:	d19b      	bne.n	80078d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000000 	.word	0x20000000

080079ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	@ 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079be:	f7fc fddf 	bl	8004580 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4413      	add	r3, r2
 80079cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80079ce:	f7fc fdd7 	bl	8004580 <HAL_GetTick>
 80079d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079dc:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	00da      	lsls	r2, r3, #3
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	0d1b      	lsrs	r3, r3, #20
 80079ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079f4:	e060      	b.n	8007ab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079fc:	d107      	bne.n	8007a0e <SPI_WaitFifoStateUntilTimeout+0x62>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d050      	beq.n	8007ab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a16:	f7fc fdb3 	bl	8004580 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d902      	bls.n	8007a2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d13d      	bne.n	8007aa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a44:	d111      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a4e:	d004      	beq.n	8007a5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a58:	d107      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a72:	d10f      	bne.n	8007a94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e010      	b.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d196      	bne.n	80079f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3728      	adds	r7, #40	@ 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000000 	.word	0x20000000

08007ad8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aec:	d111      	bne.n	8007b12 <SPI_EndRxTransaction+0x3a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af6:	d004      	beq.n	8007b02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b00:	d107      	bne.n	8007b12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2180      	movs	r1, #128	@ 0x80
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff febd 	bl	800789c <SPI_WaitFlagStateUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b2c:	f043 0220 	orr.w	r2, r3, #32
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e023      	b.n	8007b80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b40:	d11d      	bne.n	8007b7e <SPI_EndRxTransaction+0xa6>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b4a:	d004      	beq.n	8007b56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b54:	d113      	bne.n	8007b7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7ff ff22 	bl	80079ac <SPI_WaitFifoStateUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b72:	f043 0220 	orr.w	r2, r3, #32
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e000      	b.n	8007b80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff ff03 	bl	80079ac <SPI_WaitFifoStateUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb0:	f043 0220 	orr.w	r2, r3, #32
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e027      	b.n	8007c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2180      	movs	r1, #128	@ 0x80
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff fe68 	bl	800789c <SPI_WaitFlagStateUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd6:	f043 0220 	orr.w	r2, r3, #32
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e014      	b.n	8007c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff fedc 	bl	80079ac <SPI_WaitFifoStateUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bfe:	f043 0220 	orr.w	r2, r3, #32
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e000      	b.n	8007c0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e049      	b.n	8007cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fc f84c 	bl	8003cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f000 ff52 	bl	8008afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d001      	beq.n	8007cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e04a      	b.n	8007d72 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xbc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x6c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d013      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x6c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d84 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x6c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1c      	ldr	r2, [pc, #112]	@ (8007d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x6c>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1a      	ldr	r2, [pc, #104]	@ (8007d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x6c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a19      	ldr	r2, [pc, #100]	@ (8007d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d115      	bne.n	8007d5c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b17      	ldr	r3, [pc, #92]	@ (8007d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d015      	beq.n	8007d6e <HAL_TIM_Base_Start_IT+0xaa>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d011      	beq.n	8007d6e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e008      	b.n	8007d6e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e000      	b.n	8007d70 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40012c00 	.word	0x40012c00
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40000800 	.word	0x40000800
 8007d8c:	40013400 	.word	0x40013400
 8007d90:	40014000 	.word	0x40014000
 8007d94:	00010007 	.word	0x00010007

08007d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e049      	b.n	8007e3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f841 	bl	8007e46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f000 fe90 	bl	8008afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <HAL_TIM_PWM_Start+0x24>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	bf14      	ite	ne
 8007e78:	2301      	movne	r3, #1
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	e03c      	b.n	8007efa <HAL_TIM_PWM_Start+0x9e>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d109      	bne.n	8007e9a <HAL_TIM_PWM_Start+0x3e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	bf14      	ite	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2300      	moveq	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	e02f      	b.n	8007efa <HAL_TIM_PWM_Start+0x9e>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d109      	bne.n	8007eb4 <HAL_TIM_PWM_Start+0x58>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	e022      	b.n	8007efa <HAL_TIM_PWM_Start+0x9e>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	d109      	bne.n	8007ece <HAL_TIM_PWM_Start+0x72>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	bf14      	ite	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	2300      	moveq	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	e015      	b.n	8007efa <HAL_TIM_PWM_Start+0x9e>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d109      	bne.n	8007ee8 <HAL_TIM_PWM_Start+0x8c>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	e008      	b.n	8007efa <HAL_TIM_PWM_Start+0x9e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	bf14      	ite	ne
 8007ef4:	2301      	movne	r3, #1
 8007ef6:	2300      	moveq	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e097      	b.n	8008032 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <HAL_TIM_PWM_Start+0xb6>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f10:	e023      	b.n	8007f5a <HAL_TIM_PWM_Start+0xfe>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d104      	bne.n	8007f22 <HAL_TIM_PWM_Start+0xc6>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f20:	e01b      	b.n	8007f5a <HAL_TIM_PWM_Start+0xfe>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d104      	bne.n	8007f32 <HAL_TIM_PWM_Start+0xd6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f30:	e013      	b.n	8007f5a <HAL_TIM_PWM_Start+0xfe>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b0c      	cmp	r3, #12
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_PWM_Start+0xe6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f40:	e00b      	b.n	8007f5a <HAL_TIM_PWM_Start+0xfe>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d104      	bne.n	8007f52 <HAL_TIM_PWM_Start+0xf6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f50:	e003      	b.n	8007f5a <HAL_TIM_PWM_Start+0xfe>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f9f8 	bl	8009358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a33      	ldr	r2, [pc, #204]	@ (800803c <HAL_TIM_PWM_Start+0x1e0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <HAL_TIM_PWM_Start+0x13e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a32      	ldr	r2, [pc, #200]	@ (8008040 <HAL_TIM_PWM_Start+0x1e4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <HAL_TIM_PWM_Start+0x13e>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a30      	ldr	r2, [pc, #192]	@ (8008044 <HAL_TIM_PWM_Start+0x1e8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d009      	beq.n	8007f9a <HAL_TIM_PWM_Start+0x13e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8008048 <HAL_TIM_PWM_Start+0x1ec>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <HAL_TIM_PWM_Start+0x13e>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a2d      	ldr	r2, [pc, #180]	@ (800804c <HAL_TIM_PWM_Start+0x1f0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d101      	bne.n	8007f9e <HAL_TIM_PWM_Start+0x142>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <HAL_TIM_PWM_Start+0x144>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a20      	ldr	r2, [pc, #128]	@ (800803c <HAL_TIM_PWM_Start+0x1e0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d018      	beq.n	8007ff0 <HAL_TIM_PWM_Start+0x194>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc6:	d013      	beq.n	8007ff0 <HAL_TIM_PWM_Start+0x194>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a20      	ldr	r2, [pc, #128]	@ (8008050 <HAL_TIM_PWM_Start+0x1f4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIM_PWM_Start+0x194>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8008054 <HAL_TIM_PWM_Start+0x1f8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIM_PWM_Start+0x194>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <HAL_TIM_PWM_Start+0x1e4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <HAL_TIM_PWM_Start+0x194>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <HAL_TIM_PWM_Start+0x1e8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d115      	bne.n	800801c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	4b18      	ldr	r3, [pc, #96]	@ (8008058 <HAL_TIM_PWM_Start+0x1fc>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b06      	cmp	r3, #6
 8008000:	d015      	beq.n	800802e <HAL_TIM_PWM_Start+0x1d2>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008008:	d011      	beq.n	800802e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801a:	e008      	b.n	800802e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e000      	b.n	8008030 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40012c00 	.word	0x40012c00
 8008040:	40013400 	.word	0x40013400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	00010007 	.word	0x00010007

0800805c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f001 f972 	bl	8009358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3e      	ldr	r2, [pc, #248]	@ (8008174 <HAL_TIM_PWM_Stop+0x118>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_TIM_PWM_Stop+0x4a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a3d      	ldr	r2, [pc, #244]	@ (8008178 <HAL_TIM_PWM_Stop+0x11c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIM_PWM_Stop+0x4a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3b      	ldr	r2, [pc, #236]	@ (800817c <HAL_TIM_PWM_Stop+0x120>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIM_PWM_Stop+0x4a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a3a      	ldr	r2, [pc, #232]	@ (8008180 <HAL_TIM_PWM_Stop+0x124>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIM_PWM_Stop+0x4a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a38      	ldr	r2, [pc, #224]	@ (8008184 <HAL_TIM_PWM_Stop+0x128>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_PWM_Stop+0x4e>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <HAL_TIM_PWM_Stop+0x50>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a1a      	ldr	r2, [r3, #32]
 80080b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10f      	bne.n	80080e0 <HAL_TIM_PWM_Stop+0x84>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d107      	bne.n	80080e0 <HAL_TIM_PWM_Stop+0x84>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6a1a      	ldr	r2, [r3, #32]
 80080e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10f      	bne.n	8008110 <HAL_TIM_PWM_Stop+0xb4>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d107      	bne.n	8008110 <HAL_TIM_PWM_Stop+0xb4>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <HAL_TIM_PWM_Stop+0xc4>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800811e:	e023      	b.n	8008168 <HAL_TIM_PWM_Stop+0x10c>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b04      	cmp	r3, #4
 8008124:	d104      	bne.n	8008130 <HAL_TIM_PWM_Stop+0xd4>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800812e:	e01b      	b.n	8008168 <HAL_TIM_PWM_Stop+0x10c>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b08      	cmp	r3, #8
 8008134:	d104      	bne.n	8008140 <HAL_TIM_PWM_Stop+0xe4>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800813e:	e013      	b.n	8008168 <HAL_TIM_PWM_Stop+0x10c>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	d104      	bne.n	8008150 <HAL_TIM_PWM_Stop+0xf4>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800814e:	e00b      	b.n	8008168 <HAL_TIM_PWM_Stop+0x10c>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b10      	cmp	r3, #16
 8008154:	d104      	bne.n	8008160 <HAL_TIM_PWM_Stop+0x104>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800815e:	e003      	b.n	8008168 <HAL_TIM_PWM_Stop+0x10c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40013400 	.word	0x40013400
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e097      	b.n	80082cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7fb fdb1 	bl	8003d18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2202      	movs	r2, #2
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f000 fc8d 	bl	8008afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	4313      	orrs	r3, r2
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008228:	f023 030c 	bic.w	r3, r3, #12
 800822c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	4313      	orrs	r3, r2
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	011a      	lsls	r2, r3, #4
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	031b      	lsls	r3, r3, #12
 8008258:	4313      	orrs	r3, r2
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008266:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800826e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4313      	orrs	r3, r2
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d110      	bne.n	8008326 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d102      	bne.n	8008310 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800830a:	7b7b      	ldrb	r3, [r7, #13]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e069      	b.n	80083e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008324:	e031      	b.n	800838a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b04      	cmp	r3, #4
 800832a:	d110      	bne.n	800834e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d102      	bne.n	8008338 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008332:	7b3b      	ldrb	r3, [r7, #12]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d001      	beq.n	800833c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e055      	b.n	80083e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800834c:	e01d      	b.n	800838a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d108      	bne.n	8008366 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d105      	bne.n	8008366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800835a:	7b7b      	ldrb	r3, [r7, #13]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d102      	bne.n	8008366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008360:	7b3b      	ldrb	r3, [r7, #12]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d001      	beq.n	800836a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e03e      	b.n	80083e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_TIM_Encoder_Start+0xc4>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b04      	cmp	r3, #4
 8008394:	d008      	beq.n	80083a8 <HAL_TIM_Encoder_Start+0xd4>
 8008396:	e00f      	b.n	80083b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2201      	movs	r2, #1
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 ffd9 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 80083a6:	e016      	b.n	80083d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2201      	movs	r2, #1
 80083ae:	2104      	movs	r1, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 ffd1 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 80083b6:	e00e      	b.n	80083d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2201      	movs	r2, #1
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 ffc9 	bl	8009358 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2201      	movs	r2, #1
 80083cc:	2104      	movs	r1, #4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 ffc2 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 80083d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0201 	orr.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d020      	beq.n	8008454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01b      	beq.n	8008454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0202 	mvn.w	r2, #2
 8008424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb40 	bl	8008ac0 <HAL_TIM_IC_CaptureCallback>
 8008440:	e005      	b.n	800844e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fb32 	bl	8008aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb43 	bl	8008ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d020      	beq.n	80084a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0204 	mvn.w	r2, #4
 8008470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb1a 	bl	8008ac0 <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fb0c 	bl	8008aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fb1d 	bl	8008ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d020      	beq.n	80084ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0208 	mvn.w	r2, #8
 80084bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 faf4 	bl	8008ac0 <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fae6 	bl	8008aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 faf7 	bl	8008ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d020      	beq.n	8008538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0210 	mvn.w	r2, #16
 8008508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2208      	movs	r2, #8
 800850e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 face 	bl	8008ac0 <HAL_TIM_IC_CaptureCallback>
 8008524:	e005      	b.n	8008532 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fac0 	bl	8008aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fad1 	bl	8008ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0201 	mvn.w	r2, #1
 8008554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fa fde2 	bl	8003120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00c      	beq.n	800858a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d007      	beq.n	800858a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f937 	bl	80097f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00c      	beq.n	80085ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f92f 	bl	800980c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00c      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fa8b 	bl	8008ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00c      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f06f 0220 	mvn.w	r2, #32
 80085ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f8f7 	bl	80097e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f903 	bl	8009820 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f8fb 	bl	8009834 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d007      	beq.n	8008662 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800865a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f8f3 	bl	8009848 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00c      	beq.n	8008686 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800867e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f8eb 	bl	800985c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008686:	bf00      	nop
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e0ff      	b.n	80088ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b14      	cmp	r3, #20
 80086ba:	f200 80f0 	bhi.w	800889e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086be:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	08008719 	.word	0x08008719
 80086c8:	0800889f 	.word	0x0800889f
 80086cc:	0800889f 	.word	0x0800889f
 80086d0:	0800889f 	.word	0x0800889f
 80086d4:	08008759 	.word	0x08008759
 80086d8:	0800889f 	.word	0x0800889f
 80086dc:	0800889f 	.word	0x0800889f
 80086e0:	0800889f 	.word	0x0800889f
 80086e4:	0800879b 	.word	0x0800879b
 80086e8:	0800889f 	.word	0x0800889f
 80086ec:	0800889f 	.word	0x0800889f
 80086f0:	0800889f 	.word	0x0800889f
 80086f4:	080087db 	.word	0x080087db
 80086f8:	0800889f 	.word	0x0800889f
 80086fc:	0800889f 	.word	0x0800889f
 8008700:	0800889f 	.word	0x0800889f
 8008704:	0800881d 	.word	0x0800881d
 8008708:	0800889f 	.word	0x0800889f
 800870c:	0800889f 	.word	0x0800889f
 8008710:	0800889f 	.word	0x0800889f
 8008714:	0800885d 	.word	0x0800885d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fa88 	bl	8008c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0208 	orr.w	r2, r2, #8
 8008732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0204 	bic.w	r2, r2, #4
 8008742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6999      	ldr	r1, [r3, #24]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	619a      	str	r2, [r3, #24]
      break;
 8008756:	e0a5      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 faf8 	bl	8008d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6999      	ldr	r1, [r3, #24]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	021a      	lsls	r2, r3, #8
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	619a      	str	r2, [r3, #24]
      break;
 8008798:	e084      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fb61 	bl	8008e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0208 	orr.w	r2, r2, #8
 80087b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0204 	bic.w	r2, r2, #4
 80087c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69d9      	ldr	r1, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	61da      	str	r2, [r3, #28]
      break;
 80087d8:	e064      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fbc9 	bl	8008f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69d9      	ldr	r1, [r3, #28]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	61da      	str	r2, [r3, #28]
      break;
 800881a:	e043      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fc32 	bl	800908c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0208 	orr.w	r2, r2, #8
 8008836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0204 	bic.w	r2, r2, #4
 8008846:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800885a:	e023      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fc76 	bl	8009154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008876:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008886:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	021a      	lsls	r2, r3, #8
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800889c:	e002      	b.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
      break;
 80088a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_TIM_ConfigClockSource+0x1c>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e0de      	b.n	8008a92 <HAL_TIM_ConfigClockSource+0x1da>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80088f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80088f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a63      	ldr	r2, [pc, #396]	@ (8008a9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	f000 80a9 	beq.w	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 8008914:	4a61      	ldr	r2, [pc, #388]	@ (8008a9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	f200 80ae 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800891c:	4a60      	ldr	r2, [pc, #384]	@ (8008aa0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	f000 80a1 	beq.w	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 8008924:	4a5e      	ldr	r2, [pc, #376]	@ (8008aa0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008926:	4293      	cmp	r3, r2
 8008928:	f200 80a6 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800892c:	4a5d      	ldr	r2, [pc, #372]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800892e:	4293      	cmp	r3, r2
 8008930:	f000 8099 	beq.w	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 8008934:	4a5b      	ldr	r2, [pc, #364]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008936:	4293      	cmp	r3, r2
 8008938:	f200 809e 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800893c:	4a5a      	ldr	r2, [pc, #360]	@ (8008aa8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	f000 8091 	beq.w	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 8008944:	4a58      	ldr	r2, [pc, #352]	@ (8008aa8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	f200 8096 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800894c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008950:	f000 8089 	beq.w	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 8008954:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008958:	f200 808e 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800895c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008960:	d03e      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0x128>
 8008962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008966:	f200 8087 	bhi.w	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 800896a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800896e:	f000 8086 	beq.w	8008a7e <HAL_TIM_ConfigClockSource+0x1c6>
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	d87f      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 8008978:	2b70      	cmp	r3, #112	@ 0x70
 800897a:	d01a      	beq.n	80089b2 <HAL_TIM_ConfigClockSource+0xfa>
 800897c:	2b70      	cmp	r3, #112	@ 0x70
 800897e:	d87b      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 8008980:	2b60      	cmp	r3, #96	@ 0x60
 8008982:	d050      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x16e>
 8008984:	2b60      	cmp	r3, #96	@ 0x60
 8008986:	d877      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 8008988:	2b50      	cmp	r3, #80	@ 0x50
 800898a:	d03c      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0x14e>
 800898c:	2b50      	cmp	r3, #80	@ 0x50
 800898e:	d873      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 8008990:	2b40      	cmp	r3, #64	@ 0x40
 8008992:	d058      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0x18e>
 8008994:	2b40      	cmp	r3, #64	@ 0x40
 8008996:	d86f      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 8008998:	2b30      	cmp	r3, #48	@ 0x30
 800899a:	d064      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 800899c:	2b30      	cmp	r3, #48	@ 0x30
 800899e:	d86b      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 80089a0:	2b20      	cmp	r3, #32
 80089a2:	d060      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d867      	bhi.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d05c      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 80089ac:	2b10      	cmp	r3, #16
 80089ae:	d05a      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x1ae>
 80089b0:	e062      	b.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089c2:	f000 fca9 	bl	8009318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	609a      	str	r2, [r3, #8]
      break;
 80089de:	e04f      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089f0:	f000 fc92 	bl	8009318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a02:	609a      	str	r2, [r3, #8]
      break;
 8008a04:	e03c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a12:	461a      	mov	r2, r3
 8008a14:	f000 fc04 	bl	8009220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2150      	movs	r1, #80	@ 0x50
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fc5d 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008a24:	e02c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a32:	461a      	mov	r2, r3
 8008a34:	f000 fc23 	bl	800927e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2160      	movs	r1, #96	@ 0x60
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fc4d 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008a44:	e01c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 fbe4 	bl	8009220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2140      	movs	r1, #64	@ 0x40
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fc3d 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008a64:	e00c      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f000 fc34 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8008a76:	e003      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7c:	e000      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	00100070 	.word	0x00100070
 8008aa0:	00100040 	.word	0x00100040
 8008aa4:	00100030 	.word	0x00100030
 8008aa8:	00100020 	.word	0x00100020

08008aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a42      	ldr	r2, [pc, #264]	@ (8008c18 <TIM_Base_SetConfig+0x11c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00f      	beq.n	8008b34 <TIM_Base_SetConfig+0x38>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1a:	d00b      	beq.n	8008b34 <TIM_Base_SetConfig+0x38>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8008c1c <TIM_Base_SetConfig+0x120>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d007      	beq.n	8008b34 <TIM_Base_SetConfig+0x38>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a3e      	ldr	r2, [pc, #248]	@ (8008c20 <TIM_Base_SetConfig+0x124>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d003      	beq.n	8008b34 <TIM_Base_SetConfig+0x38>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008c24 <TIM_Base_SetConfig+0x128>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d108      	bne.n	8008b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a33      	ldr	r2, [pc, #204]	@ (8008c18 <TIM_Base_SetConfig+0x11c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d01b      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b54:	d017      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a30      	ldr	r2, [pc, #192]	@ (8008c1c <TIM_Base_SetConfig+0x120>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a2f      	ldr	r2, [pc, #188]	@ (8008c20 <TIM_Base_SetConfig+0x124>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a2e      	ldr	r2, [pc, #184]	@ (8008c24 <TIM_Base_SetConfig+0x128>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00b      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2d      	ldr	r2, [pc, #180]	@ (8008c28 <TIM_Base_SetConfig+0x12c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d007      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a2c      	ldr	r2, [pc, #176]	@ (8008c2c <TIM_Base_SetConfig+0x130>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_Base_SetConfig+0x8a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2b      	ldr	r2, [pc, #172]	@ (8008c30 <TIM_Base_SetConfig+0x134>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d108      	bne.n	8008b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a16      	ldr	r2, [pc, #88]	@ (8008c18 <TIM_Base_SetConfig+0x11c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00f      	beq.n	8008be4 <TIM_Base_SetConfig+0xe8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a17      	ldr	r2, [pc, #92]	@ (8008c24 <TIM_Base_SetConfig+0x128>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00b      	beq.n	8008be4 <TIM_Base_SetConfig+0xe8>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a16      	ldr	r2, [pc, #88]	@ (8008c28 <TIM_Base_SetConfig+0x12c>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d007      	beq.n	8008be4 <TIM_Base_SetConfig+0xe8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a15      	ldr	r2, [pc, #84]	@ (8008c2c <TIM_Base_SetConfig+0x130>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0xe8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a14      	ldr	r2, [pc, #80]	@ (8008c30 <TIM_Base_SetConfig+0x134>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d103      	bne.n	8008bec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d105      	bne.n	8008c0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f023 0201 	bic.w	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	611a      	str	r2, [r3, #16]
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40000400 	.word	0x40000400
 8008c20:	40000800 	.word	0x40000800
 8008c24:	40013400 	.word	0x40013400
 8008c28:	40014000 	.word	0x40014000
 8008c2c:	40014400 	.word	0x40014400
 8008c30:	40014800 	.word	0x40014800

08008c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	f023 0201 	bic.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f023 0302 	bic.w	r3, r3, #2
 8008c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008d40 <TIM_OC1_SetConfig+0x10c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00f      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x80>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a2b      	ldr	r2, [pc, #172]	@ (8008d44 <TIM_OC1_SetConfig+0x110>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00b      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x80>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d48 <TIM_OC1_SetConfig+0x114>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x80>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a29      	ldr	r2, [pc, #164]	@ (8008d4c <TIM_OC1_SetConfig+0x118>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x80>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a28      	ldr	r2, [pc, #160]	@ (8008d50 <TIM_OC1_SetConfig+0x11c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d10c      	bne.n	8008cce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f023 0308 	bic.w	r3, r3, #8
 8008cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f023 0304 	bic.w	r3, r3, #4
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d40 <TIM_OC1_SetConfig+0x10c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00f      	beq.n	8008cf6 <TIM_OC1_SetConfig+0xc2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d44 <TIM_OC1_SetConfig+0x110>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00b      	beq.n	8008cf6 <TIM_OC1_SetConfig+0xc2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a19      	ldr	r2, [pc, #100]	@ (8008d48 <TIM_OC1_SetConfig+0x114>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d007      	beq.n	8008cf6 <TIM_OC1_SetConfig+0xc2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a18      	ldr	r2, [pc, #96]	@ (8008d4c <TIM_OC1_SetConfig+0x118>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d003      	beq.n	8008cf6 <TIM_OC1_SetConfig+0xc2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a17      	ldr	r2, [pc, #92]	@ (8008d50 <TIM_OC1_SetConfig+0x11c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d111      	bne.n	8008d1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	40012c00 	.word	0x40012c00
 8008d44:	40013400 	.word	0x40013400
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800

08008d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	f023 0210 	bic.w	r2, r3, #16
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f023 0320 	bic.w	r3, r3, #32
 8008da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a28      	ldr	r2, [pc, #160]	@ (8008e54 <TIM_OC2_SetConfig+0x100>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_OC2_SetConfig+0x6c>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a27      	ldr	r2, [pc, #156]	@ (8008e58 <TIM_OC2_SetConfig+0x104>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10d      	bne.n	8008ddc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a1d      	ldr	r2, [pc, #116]	@ (8008e54 <TIM_OC2_SetConfig+0x100>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC2_SetConfig+0xb0>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e58 <TIM_OC2_SetConfig+0x104>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC2_SetConfig+0xb0>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a1b      	ldr	r2, [pc, #108]	@ (8008e5c <TIM_OC2_SetConfig+0x108>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC2_SetConfig+0xb0>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e60 <TIM_OC2_SetConfig+0x10c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC2_SetConfig+0xb0>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a19      	ldr	r2, [pc, #100]	@ (8008e64 <TIM_OC2_SetConfig+0x110>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d113      	bne.n	8008e2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40012c00 	.word	0x40012c00
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a27      	ldr	r2, [pc, #156]	@ (8008f64 <TIM_OC3_SetConfig+0xfc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_OC3_SetConfig+0x6a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a26      	ldr	r2, [pc, #152]	@ (8008f68 <TIM_OC3_SetConfig+0x100>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d10d      	bne.n	8008eee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <TIM_OC3_SetConfig+0xfc>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00f      	beq.n	8008f16 <TIM_OC3_SetConfig+0xae>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8008f68 <TIM_OC3_SetConfig+0x100>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00b      	beq.n	8008f16 <TIM_OC3_SetConfig+0xae>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1a      	ldr	r2, [pc, #104]	@ (8008f6c <TIM_OC3_SetConfig+0x104>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d007      	beq.n	8008f16 <TIM_OC3_SetConfig+0xae>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a19      	ldr	r2, [pc, #100]	@ (8008f70 <TIM_OC3_SetConfig+0x108>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d003      	beq.n	8008f16 <TIM_OC3_SetConfig+0xae>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a18      	ldr	r2, [pc, #96]	@ (8008f74 <TIM_OC3_SetConfig+0x10c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d113      	bne.n	8008f3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40014400 	.word	0x40014400
 8008f74:	40014800 	.word	0x40014800

08008f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a28      	ldr	r2, [pc, #160]	@ (8009078 <TIM_OC4_SetConfig+0x100>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_OC4_SetConfig+0x6c>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a27      	ldr	r2, [pc, #156]	@ (800907c <TIM_OC4_SetConfig+0x104>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d10d      	bne.n	8009000 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	031b      	lsls	r3, r3, #12
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a1d      	ldr	r2, [pc, #116]	@ (8009078 <TIM_OC4_SetConfig+0x100>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00f      	beq.n	8009028 <TIM_OC4_SetConfig+0xb0>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a1c      	ldr	r2, [pc, #112]	@ (800907c <TIM_OC4_SetConfig+0x104>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00b      	beq.n	8009028 <TIM_OC4_SetConfig+0xb0>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a1b      	ldr	r2, [pc, #108]	@ (8009080 <TIM_OC4_SetConfig+0x108>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d007      	beq.n	8009028 <TIM_OC4_SetConfig+0xb0>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a1a      	ldr	r2, [pc, #104]	@ (8009084 <TIM_OC4_SetConfig+0x10c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d003      	beq.n	8009028 <TIM_OC4_SetConfig+0xb0>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <TIM_OC4_SetConfig+0x110>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d113      	bne.n	8009050 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800902e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009036:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	019b      	lsls	r3, r3, #6
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	4313      	orrs	r3, r2
 800904e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	621a      	str	r2, [r3, #32]
}
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40012c00 	.word	0x40012c00
 800907c:	40013400 	.word	0x40013400
 8009080:	40014000 	.word	0x40014000
 8009084:	40014400 	.word	0x40014400
 8009088:	40014800 	.word	0x40014800

0800908c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a17      	ldr	r2, [pc, #92]	@ (8009140 <TIM_OC5_SetConfig+0xb4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00f      	beq.n	8009106 <TIM_OC5_SetConfig+0x7a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a16      	ldr	r2, [pc, #88]	@ (8009144 <TIM_OC5_SetConfig+0xb8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_OC5_SetConfig+0x7a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a15      	ldr	r2, [pc, #84]	@ (8009148 <TIM_OC5_SetConfig+0xbc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_OC5_SetConfig+0x7a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a14      	ldr	r2, [pc, #80]	@ (800914c <TIM_OC5_SetConfig+0xc0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_OC5_SetConfig+0x7a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a13      	ldr	r2, [pc, #76]	@ (8009150 <TIM_OC5_SetConfig+0xc4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d109      	bne.n	800911a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800910c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	621a      	str	r2, [r3, #32]
}
 8009134:	bf00      	nop
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	40012c00 	.word	0x40012c00
 8009144:	40013400 	.word	0x40013400
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800919a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a18      	ldr	r2, [pc, #96]	@ (800920c <TIM_OC6_SetConfig+0xb8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00f      	beq.n	80091d0 <TIM_OC6_SetConfig+0x7c>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a17      	ldr	r2, [pc, #92]	@ (8009210 <TIM_OC6_SetConfig+0xbc>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_OC6_SetConfig+0x7c>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <TIM_OC6_SetConfig+0xc0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_OC6_SetConfig+0x7c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <TIM_OC6_SetConfig+0xc4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_OC6_SetConfig+0x7c>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a14      	ldr	r2, [pc, #80]	@ (800921c <TIM_OC6_SetConfig+0xc8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d109      	bne.n	80091e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	621a      	str	r2, [r3, #32]
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40012c00 	.word	0x40012c00
 8009210:	40013400 	.word	0x40013400
 8009214:	40014000 	.word	0x40014000
 8009218:	40014400 	.word	0x40014400
 800921c:	40014800 	.word	0x40014800

08009220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800924a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f023 030a 	bic.w	r3, r3, #10
 800925c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	f023 0210 	bic.w	r2, r3, #16
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092de:	b480      	push	{r7}
 80092e0:	b085      	sub	sp, #20
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	f043 0307 	orr.w	r3, r3, #7
 8009304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	021a      	lsls	r2, r3, #8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4313      	orrs	r3, r2
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f003 031f 	and.w	r3, r3, #31
 800936a:	2201      	movs	r2, #1
 800936c:	fa02 f303 	lsl.w	r3, r2, r3
 8009370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1a      	ldr	r2, [r3, #32]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	43db      	mvns	r3, r3
 800937a:	401a      	ands	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1a      	ldr	r2, [r3, #32]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	fa01 f303 	lsl.w	r3, r1, r3
 8009390:	431a      	orrs	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	621a      	str	r2, [r3, #32]
}
 8009396:	bf00      	nop
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HAL_TIMEx_PWMN_Start+0x24>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	e022      	b.n	800940e <HAL_TIMEx_PWMN_Start+0x6a>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d109      	bne.n	80093e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	e015      	b.n	800940e <HAL_TIMEx_PWMN_Start+0x6a>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d109      	bne.n	80093fc <HAL_TIMEx_PWMN_Start+0x58>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	e008      	b.n	800940e <HAL_TIMEx_PWMN_Start+0x6a>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e069      	b.n	80094ea <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <HAL_TIMEx_PWMN_Start+0x82>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009424:	e013      	b.n	800944e <HAL_TIMEx_PWMN_Start+0xaa>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b04      	cmp	r3, #4
 800942a:	d104      	bne.n	8009436 <HAL_TIMEx_PWMN_Start+0x92>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009434:	e00b      	b.n	800944e <HAL_TIMEx_PWMN_Start+0xaa>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d104      	bne.n	8009446 <HAL_TIMEx_PWMN_Start+0xa2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009444:	e003      	b.n	800944e <HAL_TIMEx_PWMN_Start+0xaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2202      	movs	r2, #2
 800944a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2204      	movs	r2, #4
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fa0a 	bl	8009870 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800946a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a20      	ldr	r2, [pc, #128]	@ (80094f4 <HAL_TIMEx_PWMN_Start+0x150>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d018      	beq.n	80094a8 <HAL_TIMEx_PWMN_Start+0x104>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800947e:	d013      	beq.n	80094a8 <HAL_TIMEx_PWMN_Start+0x104>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1c      	ldr	r2, [pc, #112]	@ (80094f8 <HAL_TIMEx_PWMN_Start+0x154>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00e      	beq.n	80094a8 <HAL_TIMEx_PWMN_Start+0x104>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1b      	ldr	r2, [pc, #108]	@ (80094fc <HAL_TIMEx_PWMN_Start+0x158>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d009      	beq.n	80094a8 <HAL_TIMEx_PWMN_Start+0x104>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a19      	ldr	r2, [pc, #100]	@ (8009500 <HAL_TIMEx_PWMN_Start+0x15c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <HAL_TIMEx_PWMN_Start+0x104>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a18      	ldr	r2, [pc, #96]	@ (8009504 <HAL_TIMEx_PWMN_Start+0x160>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d115      	bne.n	80094d4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	4b16      	ldr	r3, [pc, #88]	@ (8009508 <HAL_TIMEx_PWMN_Start+0x164>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b06      	cmp	r3, #6
 80094b8:	d015      	beq.n	80094e6 <HAL_TIMEx_PWMN_Start+0x142>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094c0:	d011      	beq.n	80094e6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0201 	orr.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d2:	e008      	b.n	80094e6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e000      	b.n	80094e8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40012c00 	.word	0x40012c00
 80094f8:	40000400 	.word	0x40000400
 80094fc:	40000800 	.word	0x40000800
 8009500:	40013400 	.word	0x40013400
 8009504:	40014000 	.word	0x40014000
 8009508:	00010007 	.word	0x00010007

0800950c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f9a6 	bl	8009870 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6a1a      	ldr	r2, [r3, #32]
 800952a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800952e:	4013      	ands	r3, r2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10f      	bne.n	8009554 <HAL_TIMEx_PWMN_Stop+0x48>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d107      	bne.n	8009554 <HAL_TIMEx_PWMN_Stop+0x48>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009552:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a1a      	ldr	r2, [r3, #32]
 800955a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800955e:	4013      	ands	r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10f      	bne.n	8009584 <HAL_TIMEx_PWMN_Stop+0x78>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a1a      	ldr	r2, [r3, #32]
 800956a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <HAL_TIMEx_PWMN_Stop+0x78>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0201 	bic.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <HAL_TIMEx_PWMN_Stop+0x88>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009592:	e013      	b.n	80095bc <HAL_TIMEx_PWMN_Stop+0xb0>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b04      	cmp	r3, #4
 8009598:	d104      	bne.n	80095a4 <HAL_TIMEx_PWMN_Stop+0x98>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095a2:	e00b      	b.n	80095bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d104      	bne.n	80095b4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095b2:	e003      	b.n	80095bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095dc:	2302      	movs	r3, #2
 80095de:	e065      	b.n	80096ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a2c      	ldr	r2, [pc, #176]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d004      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a2b      	ldr	r2, [pc, #172]	@ (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d108      	bne.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800961a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800962c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1b      	ldr	r2, [pc, #108]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d018      	beq.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009656:	d013      	beq.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a18      	ldr	r2, [pc, #96]	@ (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00e      	beq.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a17      	ldr	r2, [pc, #92]	@ (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d009      	beq.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a12      	ldr	r2, [pc, #72]	@ (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d004      	beq.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a13      	ldr	r2, [pc, #76]	@ (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d10c      	bne.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	4313      	orrs	r3, r2
 8009690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	40012c00 	.word	0x40012c00
 80096bc:	40013400 	.word	0x40013400
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40000800 	.word	0x40000800
 80096c8:	40014000 	.word	0x40014000

080096cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e073      	b.n	80097d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	041b      	lsls	r3, r3, #16
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a19      	ldr	r2, [pc, #100]	@ (80097dc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d11c      	bne.n	80097be <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978e:	051b      	lsls	r3, r3, #20
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400

080097e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f003 030f 	and.w	r3, r3, #15
 8009882:	2204      	movs	r2, #4
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a1a      	ldr	r2, [r3, #32]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	43db      	mvns	r3, r3
 8009892:	401a      	ands	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e042      	b.n	8009952 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fa fb5e 	bl	8003fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2224      	movs	r2, #36	@ 0x24
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 f963 	bl	800abd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fe94 	bl	800a638 <UART_SetConfig>
 8009910:	4603      	mov	r3, r0
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e01b      	b.n	8009952 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009938:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0201 	orr.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 f9e2 	bl	800ad14 <UART_CheckIdleState>
 8009950:	4603      	mov	r3, r0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b08a      	sub	sp, #40	@ 0x28
 800995e:	af02      	add	r7, sp, #8
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009970:	2b20      	cmp	r3, #32
 8009972:	d17b      	bne.n	8009a6c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <HAL_UART_Transmit+0x26>
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e074      	b.n	8009a6e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2221      	movs	r2, #33	@ 0x21
 8009990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009994:	f7fa fdf4 	bl	8004580 <HAL_GetTick>
 8009998:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	88fa      	ldrh	r2, [r7, #6]
 80099a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099b2:	d108      	bne.n	80099c6 <HAL_UART_Transmit+0x6c>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e003      	b.n	80099ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099ce:	e030      	b.n	8009a32 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2200      	movs	r2, #0
 80099d8:	2180      	movs	r1, #128	@ 0x80
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f001 fa44 	bl	800ae68 <UART_WaitOnFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e03d      	b.n	8009a6e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	e007      	b.n	8009a20 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1c8      	bne.n	80099d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	2140      	movs	r1, #64	@ 0x40
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f001 fa0d 	bl	800ae68 <UART_WaitOnFlagUntilTimeout>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e006      	b.n	8009a6e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e000      	b.n	8009a6e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a6c:	2302      	movs	r3, #2
  }
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b08a      	sub	sp, #40	@ 0x28
 8009a7a:	af02      	add	r7, sp, #8
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	f040 80b5 	bne.w	8009bfc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <HAL_UART_Receive+0x28>
 8009a98:	88fb      	ldrh	r3, [r7, #6]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e0ad      	b.n	8009bfe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2222      	movs	r2, #34	@ 0x22
 8009aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ab8:	f7fa fd62 	bl	8004580 <HAL_GetTick>
 8009abc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	88fa      	ldrh	r2, [r7, #6]
 8009ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	88fa      	ldrh	r2, [r7, #6]
 8009aca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad6:	d10e      	bne.n	8009af6 <HAL_UART_Receive+0x80>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d105      	bne.n	8009aec <HAL_UART_Receive+0x76>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009aea:	e02d      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	22ff      	movs	r2, #255	@ 0xff
 8009af0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009af4:	e028      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10d      	bne.n	8009b1a <HAL_UART_Receive+0xa4>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <HAL_UART_Receive+0x9a>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	22ff      	movs	r2, #255	@ 0xff
 8009b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b0e:	e01b      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	227f      	movs	r2, #127	@ 0x7f
 8009b14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b18:	e016      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b22:	d10d      	bne.n	8009b40 <HAL_UART_Receive+0xca>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d104      	bne.n	8009b36 <HAL_UART_Receive+0xc0>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	227f      	movs	r2, #127	@ 0x7f
 8009b30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b34:	e008      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	223f      	movs	r2, #63	@ 0x3f
 8009b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b3e:	e003      	b.n	8009b48 <HAL_UART_Receive+0xd2>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b58:	d108      	bne.n	8009b6c <HAL_UART_Receive+0xf6>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e003      	b.n	8009b74 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009b74:	e036      	b.n	8009be4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2120      	movs	r1, #32
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f001 f971 	bl	800ae68 <UART_WaitOnFlagUntilTimeout>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e032      	b.n	8009bfe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	8a7b      	ldrh	r3, [r7, #18]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	e00c      	b.n	8009bd2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	8a7b      	ldrh	r3, [r7, #18]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1c2      	bne.n	8009b76 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e000      	b.n	8009bfe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009bfc:	2302      	movs	r3, #2
  }
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3720      	adds	r7, #32
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b091      	sub	sp, #68	@ 0x44
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d178      	bne.n	8009d12 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Transmit_IT+0x24>
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e071      	b.n	8009d14 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	88fa      	ldrh	r2, [r7, #6]
 8009c3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	88fa      	ldrh	r2, [r7, #6]
 8009c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2221      	movs	r2, #33	@ 0x21
 8009c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c64:	d12a      	bne.n	8009cbc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c6e:	d107      	bne.n	8009c80 <HAL_UART_Transmit_IT+0x78>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d103      	bne.n	8009c80 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4a29      	ldr	r2, [pc, #164]	@ (8009d20 <HAL_UART_Transmit_IT+0x118>)
 8009c7c:	679a      	str	r2, [r3, #120]	@ 0x78
 8009c7e:	e002      	b.n	8009c86 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4a28      	ldr	r2, [pc, #160]	@ (8009d24 <HAL_UART_Transmit_IT+0x11c>)
 8009c84:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ca6:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e5      	bne.n	8009c86 <HAL_UART_Transmit_IT+0x7e>
 8009cba:	e028      	b.n	8009d0e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cc4:	d107      	bne.n	8009cd6 <HAL_UART_Transmit_IT+0xce>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d103      	bne.n	8009cd6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a15      	ldr	r2, [pc, #84]	@ (8009d28 <HAL_UART_Transmit_IT+0x120>)
 8009cd2:	679a      	str	r2, [r3, #120]	@ 0x78
 8009cd4:	e002      	b.n	8009cdc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	@ (8009d2c <HAL_UART_Transmit_IT+0x124>)
 8009cda:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	69f9      	ldr	r1, [r7, #28]
 8009d00:	6a3a      	ldr	r2, [r7, #32]
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e6      	bne.n	8009cdc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e000      	b.n	8009d14 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009d12:	2302      	movs	r3, #2
  }
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3744      	adds	r7, #68	@ 0x44
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	0800b941 	.word	0x0800b941
 8009d24:	0800b861 	.word	0x0800b861
 8009d28:	0800b79f 	.word	0x0800b79f
 8009d2c:	0800b6e7 	.word	0x0800b6e7

08009d30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d137      	bne.n	8009db8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_UART_Receive_IT+0x24>
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e030      	b.n	8009dba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a18      	ldr	r2, [pc, #96]	@ (8009dc4 <HAL_UART_Receive_IT+0x94>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d01f      	beq.n	8009da8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d018      	beq.n	8009da8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	613b      	str	r3, [r7, #16]
   return(result);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	623b      	str	r3, [r7, #32]
 8009d96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	69f9      	ldr	r1, [r7, #28]
 8009d9a:	6a3a      	ldr	r2, [r7, #32]
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009da8:	88fb      	ldrh	r3, [r7, #6]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f001 f8c8 	bl	800af44 <UART_Start_Receive_IT>
 8009db4:	4603      	mov	r3, r0
 8009db6:	e000      	b.n	8009dba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009db8:	2302      	movs	r3, #2
  }
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3728      	adds	r7, #40	@ 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	40008000 	.word	0x40008000

08009dc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	@ 0x28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d167      	bne.n	8009eb0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_UART_Transmit_DMA+0x24>
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e060      	b.n	8009eb2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	88fa      	ldrh	r2, [r7, #6]
 8009dfa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	88fa      	ldrh	r2, [r7, #6]
 8009e02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2221      	movs	r2, #33	@ 0x21
 8009e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d028      	beq.n	8009e70 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e22:	4a26      	ldr	r2, [pc, #152]	@ (8009ebc <HAL_UART_Transmit_DMA+0xf4>)
 8009e24:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e2a:	4a25      	ldr	r2, [pc, #148]	@ (8009ec0 <HAL_UART_Transmit_DMA+0xf8>)
 8009e2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e32:	4a24      	ldr	r2, [pc, #144]	@ (8009ec4 <HAL_UART_Transmit_DMA+0xfc>)
 8009e34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e46:	4619      	mov	r1, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3328      	adds	r3, #40	@ 0x28
 8009e4e:	461a      	mov	r2, r3
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	f7fa fd4b 	bl	80048ec <HAL_DMA_Start_IT>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2210      	movs	r2, #16
 8009e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e020      	b.n	8009eb2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2240      	movs	r2, #64	@ 0x40
 8009e76:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	613b      	str	r3, [r7, #16]
   return(result);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e98:	623a      	str	r2, [r7, #32]
 8009e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	69f9      	ldr	r1, [r7, #28]
 8009e9e:	6a3a      	ldr	r2, [r7, #32]
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e5      	bne.n	8009e78 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e000      	b.n	8009eb2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009eb0:	2302      	movs	r3, #2
  }
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3728      	adds	r7, #40	@ 0x28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800b423 	.word	0x0800b423
 8009ec0:	0800b4bd 	.word	0x0800b4bd
 8009ec4:	0800b643 	.word	0x0800b643

08009ec8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	@ 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d137      	bne.n	8009f50 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <HAL_UART_Receive_DMA+0x24>
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e030      	b.n	8009f52 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a18      	ldr	r2, [pc, #96]	@ (8009f5c <HAL_UART_Receive_DMA+0x94>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d01f      	beq.n	8009f40 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d018      	beq.n	8009f40 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2c:	623b      	str	r3, [r7, #32]
 8009f2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	69f9      	ldr	r1, [r7, #28]
 8009f32:	6a3a      	ldr	r2, [r7, #32]
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	461a      	mov	r2, r3
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 f91e 	bl	800b188 <UART_Start_Receive_DMA>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	e000      	b.n	8009f52 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
  }
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3728      	adds	r7, #40	@ 0x28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40008000 	.word	0x40008000

08009f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b0ba      	sub	sp, #232	@ 0xe8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f8e:	4013      	ands	r3, r2
 8009f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11b      	bne.n	8009fd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d015      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d105      	bne.n	8009fc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d009      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8300 	beq.w	800a5ca <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
      }
      return;
 8009fd2:	e2fa      	b.n	800a5ca <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8123 	beq.w	800a224 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009fde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009fe2:	4b8d      	ldr	r3, [pc, #564]	@ (800a218 <HAL_UART_IRQHandler+0x2b8>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009fee:	4b8b      	ldr	r3, [pc, #556]	@ (800a21c <HAL_UART_IRQHandler+0x2bc>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 8116 	beq.w	800a224 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d011      	beq.n	800a028 <HAL_UART_IRQHandler+0xc8>
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2201      	movs	r2, #1
 800a016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01e:	f043 0201 	orr.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d011      	beq.n	800a058 <HAL_UART_IRQHandler+0xf8>
 800a034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2202      	movs	r2, #2
 800a046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a04e:	f043 0204 	orr.w	r2, r3, #4
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d011      	beq.n	800a088 <HAL_UART_IRQHandler+0x128>
 800a064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2204      	movs	r2, #4
 800a076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a07e:	f043 0202 	orr.w	r2, r3, #2
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d017      	beq.n	800a0c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d105      	bne.n	800a0ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0a4:	4b5c      	ldr	r3, [pc, #368]	@ (800a218 <HAL_UART_IRQHandler+0x2b8>)
 800a0a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ba:	f043 0208 	orr.w	r2, r3, #8
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d012      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x196>
 800a0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00c      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ec:	f043 0220 	orr.w	r2, r3, #32
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8266 	beq.w	800a5ce <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d013      	beq.n	800a136 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d105      	bne.n	800a126 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a11e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a14a:	2b40      	cmp	r3, #64	@ 0x40
 800a14c:	d005      	beq.n	800a15a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a14e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a152:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a156:	2b00      	cmp	r3, #0
 800a158:	d054      	beq.n	800a204 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 f8fb 	bl	800b356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16a:	2b40      	cmp	r3, #64	@ 0x40
 800a16c:	d146      	bne.n	800a1fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a18c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a19a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a19e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1d9      	bne.n	800a16e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d017      	beq.n	800a1f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ca:	4a15      	ldr	r2, [pc, #84]	@ (800a220 <HAL_UART_IRQHandler+0x2c0>)
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fa fc5d 	bl	8004a94 <HAL_DMA_Abort_IT>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d019      	beq.n	800a214 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f2:	e00f      	b.n	800a214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fa09 	bl	800a60c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1fa:	e00b      	b.n	800a214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fa05 	bl	800a60c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a202:	e007      	b.n	800a214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa01 	bl	800a60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a212:	e1dc      	b.n	800a5ce <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a214:	bf00      	nop
    return;
 800a216:	e1da      	b.n	800a5ce <HAL_UART_IRQHandler+0x66e>
 800a218:	10000001 	.word	0x10000001
 800a21c:	04000120 	.word	0x04000120
 800a220:	0800b6c3 	.word	0x0800b6c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	f040 8170 	bne.w	800a50e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a232:	f003 0310 	and.w	r3, r3, #16
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 8169 	beq.w	800a50e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8162 	beq.w	800a50e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2210      	movs	r2, #16
 800a250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a25c:	2b40      	cmp	r3, #64	@ 0x40
 800a25e:	f040 80d8 	bne.w	800a412 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80af 	beq.w	800a3d8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a284:	429a      	cmp	r2, r3
 800a286:	f080 80a7 	bcs.w	800a3d8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a290:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f040 8087 	bne.w	800a3b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a2bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a2de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a2ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1da      	bne.n	800a2a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a316:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a31a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a31e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e1      	bne.n	800a2f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3308      	adds	r3, #8
 800a34e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a352:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a354:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a358:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e3      	bne.n	800a32e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a384:	f023 0310 	bic.w	r3, r3, #16
 800a388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a396:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a398:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a39c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e4      	bne.n	800a374 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fa fb16 	bl	80049e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f925 	bl	800a620 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a3d6:	e0fc      	b.n	800a5d2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	f040 80f5 	bne.w	800a5d2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	f040 80eb 	bne.w	800a5d2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f908 	bl	800a620 <HAL_UARTEx_RxEventCallback>
      return;
 800a410:	e0df      	b.n	800a5d2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a41e:	b29b      	uxth	r3, r3
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80d1 	beq.w	800a5d6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 80cc 	beq.w	800a5d6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a452:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a460:	647b      	str	r3, [r7, #68]	@ 0x44
 800a462:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e4      	bne.n	800a43e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	623b      	str	r3, [r7, #32]
   return(result);
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a49c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e1      	bne.n	800a474 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f023 0310 	bic.w	r3, r3, #16
 800a4d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4e6:	61fb      	str	r3, [r7, #28]
 800a4e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	69b9      	ldr	r1, [r7, #24]
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e4      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f88a 	bl	800a620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a50c:	e063      	b.n	800a5d6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00e      	beq.n	800a538 <HAL_UART_IRQHandler+0x5d8>
 800a51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a51e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a52e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 ffc5 	bl	800c4c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a536:	e051      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a540:	2b00      	cmp	r3, #0
 800a542:	d014      	beq.n	800a56e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d105      	bne.n	800a55c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d008      	beq.n	800a56e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a560:	2b00      	cmp	r3, #0
 800a562:	d03a      	beq.n	800a5da <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	4798      	blx	r3
    }
    return;
 800a56c:	e035      	b.n	800a5da <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <HAL_UART_IRQHandler+0x62e>
 800a57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 fa4f 	bl	800ba2a <UART_EndTransmit_IT>
    return;
 800a58c:	e026      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <HAL_UART_IRQHandler+0x64e>
 800a59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f001 ff9e 	bl	800c4e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ac:	e016      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d010      	beq.n	800a5dc <HAL_UART_IRQHandler+0x67c>
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da0c      	bge.n	800a5dc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 ff86 	bl	800c4d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5c8:	e008      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
      return;
 800a5ca:	bf00      	nop
 800a5cc:	e006      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
    return;
 800a5ce:	bf00      	nop
 800a5d0:	e004      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
      return;
 800a5d2:	bf00      	nop
 800a5d4:	e002      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
      return;
 800a5d6:	bf00      	nop
 800a5d8:	e000      	b.n	800a5dc <HAL_UART_IRQHandler+0x67c>
    return;
 800a5da:	bf00      	nop
  }
}
 800a5dc:	37e8      	adds	r7, #232	@ 0xe8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop

0800a5e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a63c:	b08c      	sub	sp, #48	@ 0x30
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	431a      	orrs	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	431a      	orrs	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	4bab      	ldr	r3, [pc, #684]	@ (800a914 <UART_SetConfig+0x2dc>)
 800a668:	4013      	ands	r3, r2
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a670:	430b      	orrs	r3, r1
 800a672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4aa0      	ldr	r2, [pc, #640]	@ (800a918 <UART_SetConfig+0x2e0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a6ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c2:	f023 010f 	bic.w	r1, r3, #15
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a91      	ldr	r2, [pc, #580]	@ (800a91c <UART_SetConfig+0x2e4>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d125      	bne.n	800a728 <UART_SetConfig+0xf0>
 800a6dc:	4b90      	ldr	r3, [pc, #576]	@ (800a920 <UART_SetConfig+0x2e8>)
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d81a      	bhi.n	800a720 <UART_SetConfig+0xe8>
 800a6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <UART_SetConfig+0xb8>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a701 	.word	0x0800a701
 800a6f4:	0800a711 	.word	0x0800a711
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a719 	.word	0x0800a719
 800a700:	2301      	movs	r3, #1
 800a702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a706:	e0d6      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a708:	2302      	movs	r3, #2
 800a70a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a70e:	e0d2      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a710:	2304      	movs	r3, #4
 800a712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a716:	e0ce      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a71e:	e0ca      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a720:	2310      	movs	r3, #16
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a726:	e0c6      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a7d      	ldr	r2, [pc, #500]	@ (800a924 <UART_SetConfig+0x2ec>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d138      	bne.n	800a7a4 <UART_SetConfig+0x16c>
 800a732:	4b7b      	ldr	r3, [pc, #492]	@ (800a920 <UART_SetConfig+0x2e8>)
 800a734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a738:	f003 030c 	and.w	r3, r3, #12
 800a73c:	2b0c      	cmp	r3, #12
 800a73e:	d82d      	bhi.n	800a79c <UART_SetConfig+0x164>
 800a740:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <UART_SetConfig+0x110>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a77d 	.word	0x0800a77d
 800a74c:	0800a79d 	.word	0x0800a79d
 800a750:	0800a79d 	.word	0x0800a79d
 800a754:	0800a79d 	.word	0x0800a79d
 800a758:	0800a78d 	.word	0x0800a78d
 800a75c:	0800a79d 	.word	0x0800a79d
 800a760:	0800a79d 	.word	0x0800a79d
 800a764:	0800a79d 	.word	0x0800a79d
 800a768:	0800a785 	.word	0x0800a785
 800a76c:	0800a79d 	.word	0x0800a79d
 800a770:	0800a79d 	.word	0x0800a79d
 800a774:	0800a79d 	.word	0x0800a79d
 800a778:	0800a795 	.word	0x0800a795
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a782:	e098      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a784:	2302      	movs	r3, #2
 800a786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78a:	e094      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a78c:	2304      	movs	r3, #4
 800a78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a792:	e090      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a794:	2308      	movs	r3, #8
 800a796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79a:	e08c      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a79c:	2310      	movs	r3, #16
 800a79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7a2:	e088      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a5f      	ldr	r2, [pc, #380]	@ (800a928 <UART_SetConfig+0x2f0>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d125      	bne.n	800a7fa <UART_SetConfig+0x1c2>
 800a7ae:	4b5c      	ldr	r3, [pc, #368]	@ (800a920 <UART_SetConfig+0x2e8>)
 800a7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a7b8:	2b30      	cmp	r3, #48	@ 0x30
 800a7ba:	d016      	beq.n	800a7ea <UART_SetConfig+0x1b2>
 800a7bc:	2b30      	cmp	r3, #48	@ 0x30
 800a7be:	d818      	bhi.n	800a7f2 <UART_SetConfig+0x1ba>
 800a7c0:	2b20      	cmp	r3, #32
 800a7c2:	d00a      	beq.n	800a7da <UART_SetConfig+0x1a2>
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d814      	bhi.n	800a7f2 <UART_SetConfig+0x1ba>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <UART_SetConfig+0x19a>
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d008      	beq.n	800a7e2 <UART_SetConfig+0x1aa>
 800a7d0:	e00f      	b.n	800a7f2 <UART_SetConfig+0x1ba>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d8:	e06d      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e0:	e069      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e8:	e065      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f0:	e061      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7f2:	2310      	movs	r3, #16
 800a7f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f8:	e05d      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a4b      	ldr	r2, [pc, #300]	@ (800a92c <UART_SetConfig+0x2f4>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d125      	bne.n	800a850 <UART_SetConfig+0x218>
 800a804:	4b46      	ldr	r3, [pc, #280]	@ (800a920 <UART_SetConfig+0x2e8>)
 800a806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a80a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a80e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a810:	d016      	beq.n	800a840 <UART_SetConfig+0x208>
 800a812:	2bc0      	cmp	r3, #192	@ 0xc0
 800a814:	d818      	bhi.n	800a848 <UART_SetConfig+0x210>
 800a816:	2b80      	cmp	r3, #128	@ 0x80
 800a818:	d00a      	beq.n	800a830 <UART_SetConfig+0x1f8>
 800a81a:	2b80      	cmp	r3, #128	@ 0x80
 800a81c:	d814      	bhi.n	800a848 <UART_SetConfig+0x210>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <UART_SetConfig+0x1f0>
 800a822:	2b40      	cmp	r3, #64	@ 0x40
 800a824:	d008      	beq.n	800a838 <UART_SetConfig+0x200>
 800a826:	e00f      	b.n	800a848 <UART_SetConfig+0x210>
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82e:	e042      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a830:	2302      	movs	r3, #2
 800a832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a836:	e03e      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a838:	2304      	movs	r3, #4
 800a83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83e:	e03a      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a840:	2308      	movs	r3, #8
 800a842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a846:	e036      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a848:	2310      	movs	r3, #16
 800a84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a84e:	e032      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a30      	ldr	r2, [pc, #192]	@ (800a918 <UART_SetConfig+0x2e0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d12a      	bne.n	800a8b0 <UART_SetConfig+0x278>
 800a85a:	4b31      	ldr	r3, [pc, #196]	@ (800a920 <UART_SetConfig+0x2e8>)
 800a85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a868:	d01a      	beq.n	800a8a0 <UART_SetConfig+0x268>
 800a86a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a86e:	d81b      	bhi.n	800a8a8 <UART_SetConfig+0x270>
 800a870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a874:	d00c      	beq.n	800a890 <UART_SetConfig+0x258>
 800a876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a87a:	d815      	bhi.n	800a8a8 <UART_SetConfig+0x270>
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <UART_SetConfig+0x250>
 800a880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a884:	d008      	beq.n	800a898 <UART_SetConfig+0x260>
 800a886:	e00f      	b.n	800a8a8 <UART_SetConfig+0x270>
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88e:	e012      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a890:	2302      	movs	r3, #2
 800a892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a896:	e00e      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a898:	2304      	movs	r3, #4
 800a89a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89e:	e00a      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8a6:	e006      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ae:	e002      	b.n	800a8b6 <UART_SetConfig+0x27e>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a17      	ldr	r2, [pc, #92]	@ (800a918 <UART_SetConfig+0x2e0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	f040 80a8 	bne.w	800aa12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d834      	bhi.n	800a934 <UART_SetConfig+0x2fc>
 800a8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <UART_SetConfig+0x298>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a935 	.word	0x0800a935
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a935 	.word	0x0800a935
 800a8e0:	0800a903 	.word	0x0800a903
 800a8e4:	0800a935 	.word	0x0800a935
 800a8e8:	0800a935 	.word	0x0800a935
 800a8ec:	0800a935 	.word	0x0800a935
 800a8f0:	0800a90b 	.word	0x0800a90b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8f4:	f7fb ffc8 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800a8f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8fa:	e021      	b.n	800a940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <UART_SetConfig+0x2f8>)
 800a8fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a900:	e01e      	b.n	800a940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a902:	f7fb ff55 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800a906:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a908:	e01a      	b.n	800a940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a910:	e016      	b.n	800a940 <UART_SetConfig+0x308>
 800a912:	bf00      	nop
 800a914:	cfff69f3 	.word	0xcfff69f3
 800a918:	40008000 	.word	0x40008000
 800a91c:	40013800 	.word	0x40013800
 800a920:	40021000 	.word	0x40021000
 800a924:	40004400 	.word	0x40004400
 800a928:	40004800 	.word	0x40004800
 800a92c:	40004c00 	.word	0x40004c00
 800a930:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a93e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 812a 	beq.w	800ab9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	4a9e      	ldr	r2, [pc, #632]	@ (800abc8 <UART_SetConfig+0x590>)
 800a94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a952:	461a      	mov	r2, r3
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	fbb3 f3f2 	udiv	r3, r3, r2
 800a95a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	4613      	mov	r3, r2
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	4413      	add	r3, r2
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d305      	bcc.n	800a978 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	429a      	cmp	r2, r3
 800a976:	d903      	bls.n	800a980 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a97e:	e10d      	b.n	800ab9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	2200      	movs	r2, #0
 800a984:	60bb      	str	r3, [r7, #8]
 800a986:	60fa      	str	r2, [r7, #12]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	4a8e      	ldr	r2, [pc, #568]	@ (800abc8 <UART_SetConfig+0x590>)
 800a98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a992:	b29b      	uxth	r3, r3
 800a994:	2200      	movs	r2, #0
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a99e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9a2:	f7f6 f999 	bl	8000cd8 <__aeabi_uldivmod>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	020b      	lsls	r3, r1, #8
 800a9b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9bc:	0202      	lsls	r2, r0, #8
 800a9be:	6979      	ldr	r1, [r7, #20]
 800a9c0:	6849      	ldr	r1, [r1, #4]
 800a9c2:	0849      	lsrs	r1, r1, #1
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	eb12 0804 	adds.w	r8, r2, r4
 800a9ce:	eb43 0905 	adc.w	r9, r3, r5
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	469a      	mov	sl, r3
 800a9da:	4693      	mov	fp, r2
 800a9dc:	4652      	mov	r2, sl
 800a9de:	465b      	mov	r3, fp
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f6 f978 	bl	8000cd8 <__aeabi_uldivmod>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9f6:	d308      	bcc.n	800aa0a <UART_SetConfig+0x3d2>
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9fe:	d204      	bcs.n	800aa0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6a3a      	ldr	r2, [r7, #32]
 800aa06:	60da      	str	r2, [r3, #12]
 800aa08:	e0c8      	b.n	800ab9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa10:	e0c4      	b.n	800ab9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa1a:	d167      	bne.n	800aaec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800aa1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa20:	2b08      	cmp	r3, #8
 800aa22:	d828      	bhi.n	800aa76 <UART_SetConfig+0x43e>
 800aa24:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <UART_SetConfig+0x3f4>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa51 	.word	0x0800aa51
 800aa30:	0800aa59 	.word	0x0800aa59
 800aa34:	0800aa61 	.word	0x0800aa61
 800aa38:	0800aa77 	.word	0x0800aa77
 800aa3c:	0800aa67 	.word	0x0800aa67
 800aa40:	0800aa77 	.word	0x0800aa77
 800aa44:	0800aa77 	.word	0x0800aa77
 800aa48:	0800aa77 	.word	0x0800aa77
 800aa4c:	0800aa6f 	.word	0x0800aa6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa50:	f7fb ff1a 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800aa54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa56:	e014      	b.n	800aa82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa58:	f7fb ff2c 	bl	80068b4 <HAL_RCC_GetPCLK2Freq>
 800aa5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa5e:	e010      	b.n	800aa82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa60:	4b5a      	ldr	r3, [pc, #360]	@ (800abcc <UART_SetConfig+0x594>)
 800aa62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa64:	e00d      	b.n	800aa82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa66:	f7fb fea3 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800aa6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa6c:	e009      	b.n	800aa82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa74:	e005      	b.n	800aa82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8089 	beq.w	800ab9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8e:	4a4e      	ldr	r2, [pc, #312]	@ (800abc8 <UART_SetConfig+0x590>)
 800aa90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa9c:	005a      	lsls	r2, r3, #1
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	085b      	lsrs	r3, r3, #1
 800aaa4:	441a      	add	r2, r3
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	2b0f      	cmp	r3, #15
 800aab4:	d916      	bls.n	800aae4 <UART_SetConfig+0x4ac>
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aabc:	d212      	bcs.n	800aae4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f023 030f 	bic.w	r3, r3, #15
 800aac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	085b      	lsrs	r3, r3, #1
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	8bfb      	ldrh	r3, [r7, #30]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	8bfa      	ldrh	r2, [r7, #30]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	e05b      	b.n	800ab9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aaea:	e057      	b.n	800ab9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d828      	bhi.n	800ab46 <UART_SetConfig+0x50e>
 800aaf4:	a201      	add	r2, pc, #4	@ (adr r2, 800aafc <UART_SetConfig+0x4c4>)
 800aaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafa:	bf00      	nop
 800aafc:	0800ab21 	.word	0x0800ab21
 800ab00:	0800ab29 	.word	0x0800ab29
 800ab04:	0800ab31 	.word	0x0800ab31
 800ab08:	0800ab47 	.word	0x0800ab47
 800ab0c:	0800ab37 	.word	0x0800ab37
 800ab10:	0800ab47 	.word	0x0800ab47
 800ab14:	0800ab47 	.word	0x0800ab47
 800ab18:	0800ab47 	.word	0x0800ab47
 800ab1c:	0800ab3f 	.word	0x0800ab3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab20:	f7fb feb2 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800ab24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab26:	e014      	b.n	800ab52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab28:	f7fb fec4 	bl	80068b4 <HAL_RCC_GetPCLK2Freq>
 800ab2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab2e:	e010      	b.n	800ab52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab30:	4b26      	ldr	r3, [pc, #152]	@ (800abcc <UART_SetConfig+0x594>)
 800ab32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab34:	e00d      	b.n	800ab52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab36:	f7fb fe3b 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800ab3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab3c:	e009      	b.n	800ab52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab44:	e005      	b.n	800ab52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab50:	bf00      	nop
    }

    if (pclk != 0U)
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d021      	beq.n	800ab9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5c:	4a1a      	ldr	r2, [pc, #104]	@ (800abc8 <UART_SetConfig+0x590>)
 800ab5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab62:	461a      	mov	r2, r3
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	441a      	add	r2, r3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	2b0f      	cmp	r3, #15
 800ab80:	d909      	bls.n	800ab96 <UART_SetConfig+0x55e>
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab88:	d205      	bcs.n	800ab96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60da      	str	r2, [r3, #12]
 800ab94:	e002      	b.n	800ab9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2200      	movs	r2, #0
 800abb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2200      	movs	r2, #0
 800abb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800abb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3730      	adds	r7, #48	@ 0x30
 800abc0:	46bd      	mov	sp, r7
 800abc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abc6:	bf00      	nop
 800abc8:	08011e40 	.word	0x08011e40
 800abcc:	00f42400 	.word	0x00f42400

0800abd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	f003 0308 	and.w	r3, r3, #8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00a      	beq.n	800ac3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac42:	f003 0304 	and.w	r3, r3, #4
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac64:	f003 0310 	and.w	r3, r3, #16
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00a      	beq.n	800ac82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01a      	beq.n	800ace6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acce:	d10a      	bne.n	800ace6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	605a      	str	r2, [r3, #4]
  }
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b098      	sub	sp, #96	@ 0x60
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad24:	f7f9 fc2c 	bl	8004580 <HAL_GetTick>
 800ad28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0308 	and.w	r3, r3, #8
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d12f      	bne.n	800ad98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad40:	2200      	movs	r2, #0
 800ad42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f88e 	bl	800ae68 <UART_WaitOnFlagUntilTimeout>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d022      	beq.n	800ad98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad70:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e6      	bne.n	800ad52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2220      	movs	r2, #32
 800ad88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e063      	b.n	800ae60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d149      	bne.n	800ae3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ada6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adae:	2200      	movs	r2, #0
 800adb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f857 	bl	800ae68 <UART_WaitOnFlagUntilTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d03c      	beq.n	800ae3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	e853 3f00 	ldrex	r3, [r3]
 800adcc:	623b      	str	r3, [r7, #32]
   return(result);
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adde:	633b      	str	r3, [r7, #48]	@ 0x30
 800ade0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1e6      	bne.n	800adc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3308      	adds	r3, #8
 800adf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f023 0301 	bic.w	r3, r3, #1
 800ae08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae12:	61fa      	str	r2, [r7, #28]
 800ae14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	69b9      	ldr	r1, [r7, #24]
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e5      	bne.n	800adf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e012      	b.n	800ae60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3758      	adds	r7, #88	@ 0x58
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	4613      	mov	r3, r2
 800ae76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae78:	e04f      	b.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d04b      	beq.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae82:	f7f9 fb7d 	bl	8004580 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d302      	bcc.n	800ae98 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e04e      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d037      	beq.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b80      	cmp	r3, #128	@ 0x80
 800aeae:	d034      	beq.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b40      	cmp	r3, #64	@ 0x40
 800aeb4:	d031      	beq.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	69db      	ldr	r3, [r3, #28]
 800aebc:	f003 0308 	and.w	r3, r3, #8
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d110      	bne.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2208      	movs	r2, #8
 800aeca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fa42 	bl	800b356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2208      	movs	r2, #8
 800aed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e029      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef4:	d111      	bne.n	800af1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aefe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fa28 	bl	800b356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2220      	movs	r2, #32
 800af0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e00f      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69da      	ldr	r2, [r3, #28]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4013      	ands	r3, r2
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	429a      	cmp	r2, r3
 800af28:	bf0c      	ite	eq
 800af2a:	2301      	moveq	r3, #1
 800af2c:	2300      	movne	r3, #0
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	429a      	cmp	r2, r3
 800af36:	d0a0      	beq.n	800ae7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af44:	b480      	push	{r7}
 800af46:	b0a3      	sub	sp, #140	@ 0x8c
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	88fa      	ldrh	r2, [r7, #6]
 800af64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af76:	d10e      	bne.n	800af96 <UART_Start_Receive_IT+0x52>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d105      	bne.n	800af8c <UART_Start_Receive_IT+0x48>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800af86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af8a:	e02d      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	22ff      	movs	r2, #255	@ 0xff
 800af90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af94:	e028      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10d      	bne.n	800afba <UART_Start_Receive_IT+0x76>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <UART_Start_Receive_IT+0x6c>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	22ff      	movs	r2, #255	@ 0xff
 800afaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afae:	e01b      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	227f      	movs	r2, #127	@ 0x7f
 800afb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afb8:	e016      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afc2:	d10d      	bne.n	800afe0 <UART_Start_Receive_IT+0x9c>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <UART_Start_Receive_IT+0x92>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	227f      	movs	r2, #127	@ 0x7f
 800afd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afd4:	e008      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	223f      	movs	r2, #63	@ 0x3f
 800afda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afde:	e003      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2222      	movs	r2, #34	@ 0x22
 800aff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3308      	adds	r3, #8
 800affe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b00a:	f043 0301 	orr.w	r3, r3, #1
 800b00e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b01c:	673a      	str	r2, [r7, #112]	@ 0x70
 800b01e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b022:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b02a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e3      	bne.n	800aff8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b038:	d14f      	bne.n	800b0da <UART_Start_Receive_IT+0x196>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	429a      	cmp	r2, r3
 800b044:	d349      	bcc.n	800b0da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b04e:	d107      	bne.n	800b060 <UART_Start_Receive_IT+0x11c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4a47      	ldr	r2, [pc, #284]	@ (800b178 <UART_Start_Receive_IT+0x234>)
 800b05c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b05e:	e002      	b.n	800b066 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4a46      	ldr	r2, [pc, #280]	@ (800b17c <UART_Start_Receive_IT+0x238>)
 800b064:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d01a      	beq.n	800b0a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b07c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b07e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b090:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b092:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b096:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b09e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e4      	bne.n	800b06e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ae:	e853 3f00 	ldrex	r3, [r3]
 800b0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b0c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b0c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0cc:	e841 2300 	strex	r3, r2, [r1]
 800b0d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e5      	bne.n	800b0a4 <UART_Start_Receive_IT+0x160>
 800b0d8:	e046      	b.n	800b168 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0e2:	d107      	bne.n	800b0f4 <UART_Start_Receive_IT+0x1b0>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d103      	bne.n	800b0f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4a24      	ldr	r2, [pc, #144]	@ (800b180 <UART_Start_Receive_IT+0x23c>)
 800b0f0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b0f2:	e002      	b.n	800b0fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4a23      	ldr	r2, [pc, #140]	@ (800b184 <UART_Start_Receive_IT+0x240>)
 800b0f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d019      	beq.n	800b136 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b116:	677b      	str	r3, [r7, #116]	@ 0x74
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b120:	637b      	str	r3, [r7, #52]	@ 0x34
 800b122:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e6      	bne.n	800b102 <UART_Start_Receive_IT+0x1be>
 800b134:	e018      	b.n	800b168 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	613b      	str	r3, [r7, #16]
   return(result);
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f043 0320 	orr.w	r3, r3, #32
 800b14a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b154:	623b      	str	r3, [r7, #32]
 800b156:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	69f9      	ldr	r1, [r7, #28]
 800b15a:	6a3a      	ldr	r2, [r7, #32]
 800b15c:	e841 2300 	strex	r3, r2, [r1]
 800b160:	61bb      	str	r3, [r7, #24]
   return(result);
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e6      	bne.n	800b136 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	378c      	adds	r7, #140	@ 0x8c
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	0800c155 	.word	0x0800c155
 800b17c:	0800bdf1 	.word	0x0800bdf1
 800b180:	0800bc39 	.word	0x0800bc39
 800b184:	0800ba81 	.word	0x0800ba81

0800b188 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b096      	sub	sp, #88	@ 0x58
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	4613      	mov	r3, r2
 800b194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2222      	movs	r2, #34	@ 0x22
 800b1b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d02d      	beq.n	800b21a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c4:	4a40      	ldr	r2, [pc, #256]	@ (800b2c8 <UART_Start_Receive_DMA+0x140>)
 800b1c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ce:	4a3f      	ldr	r2, [pc, #252]	@ (800b2cc <UART_Start_Receive_DMA+0x144>)
 800b1d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d8:	4a3d      	ldr	r2, [pc, #244]	@ (800b2d0 <UART_Start_Receive_DMA+0x148>)
 800b1da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3324      	adds	r3, #36	@ 0x24
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	f7f9 fb76 	bl	80048ec <HAL_DMA_Start_IT>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2210      	movs	r2, #16
 800b20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e051      	b.n	800b2be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d018      	beq.n	800b254 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b236:	657b      	str	r3, [r7, #84]	@ 0x54
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b240:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b242:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b248:	e841 2300 	strex	r3, r2, [r1]
 800b24c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b24e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e6      	bne.n	800b222 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3308      	adds	r3, #8
 800b25a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b274:	637a      	str	r2, [r7, #52]	@ 0x34
 800b276:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b27a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3308      	adds	r3, #8
 800b28e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	e853 3f00 	ldrex	r3, [r3]
 800b296:	613b      	str	r3, [r7, #16]
   return(result);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2a8:	623a      	str	r2, [r7, #32]
 800b2aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	69f9      	ldr	r1, [r7, #28]
 800b2ae:	6a3a      	ldr	r2, [r7, #32]
 800b2b0:	e841 2300 	strex	r3, r2, [r1]
 800b2b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e5      	bne.n	800b288 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3758      	adds	r7, #88	@ 0x58
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0800b4d9 	.word	0x0800b4d9
 800b2cc:	0800b605 	.word	0x0800b605
 800b2d0:	0800b643 	.word	0x0800b643

0800b2d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b08f      	sub	sp, #60	@ 0x3c
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e6      	bne.n	800b2dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b324:	633b      	str	r3, [r7, #48]	@ 0x30
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b32e:	61ba      	str	r2, [r7, #24]
 800b330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6979      	ldr	r1, [r7, #20]
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	613b      	str	r3, [r7, #16]
   return(result);
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2220      	movs	r2, #32
 800b346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b34a:	bf00      	nop
 800b34c:	373c      	adds	r7, #60	@ 0x3c
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b356:	b480      	push	{r7}
 800b358:	b095      	sub	sp, #84	@ 0x54
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b37c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b37e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3a6:	f023 0301 	bic.w	r3, r3, #1
 800b3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e3      	bne.n	800b390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d118      	bne.n	800b402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f023 0310 	bic.w	r3, r3, #16
 800b3e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e6      	bne.n	800b3d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b416:	bf00      	nop
 800b418:	3754      	adds	r7, #84	@ 0x54
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b090      	sub	sp, #64	@ 0x40
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0320 	and.w	r3, r3, #32
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d137      	bne.n	800b4ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b440:	2200      	movs	r2, #0
 800b442:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3308      	adds	r3, #8
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	623b      	str	r3, [r7, #32]
   return(result);
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b45c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3308      	adds	r3, #8
 800b464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b466:	633a      	str	r2, [r7, #48]	@ 0x30
 800b468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b46c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e5      	bne.n	800b446 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	60fb      	str	r3, [r7, #12]
   return(result);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	461a      	mov	r2, r3
 800b496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49c:	69b9      	ldr	r1, [r7, #24]
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e6      	bne.n	800b47a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4ac:	e002      	b.n	800b4b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b4ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b4b0:	f7ff f898 	bl	800a5e4 <HAL_UART_TxCpltCallback>
}
 800b4b4:	bf00      	nop
 800b4b6:	3740      	adds	r7, #64	@ 0x40
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff f894 	bl	800a5f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4d0:	bf00      	nop
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b09c      	sub	sp, #112	@ 0x70
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d171      	bne.n	800b5d8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b50a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b50c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b510:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b51a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b51c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e6      	bne.n	800b4fc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3308      	adds	r3, #8
 800b534:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b540:	f023 0301 	bic.w	r3, r3, #1
 800b544:	667b      	str	r3, [r7, #100]	@ 0x64
 800b546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b54e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b55c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e5      	bne.n	800b52e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3308      	adds	r3, #8
 800b568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	623b      	str	r3, [r7, #32]
   return(result);
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b578:	663b      	str	r3, [r7, #96]	@ 0x60
 800b57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b582:	633a      	str	r2, [r7, #48]	@ 0x30
 800b584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e5      	bne.n	800b562 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b598:	2220      	movs	r2, #32
 800b59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d118      	bne.n	800b5d8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5c4:	61fb      	str	r3, [r7, #28]
 800b5c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	69b9      	ldr	r1, [r7, #24]
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e6      	bne.n	800b5a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5da:	2200      	movs	r2, #0
 800b5dc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d107      	bne.n	800b5f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5f0:	f7ff f816 	bl	800a620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5f4:	e002      	b.n	800b5fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b5f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5f8:	f7f7 fd5a 	bl	80030b0 <HAL_UART_RxCpltCallback>
}
 800b5fc:	bf00      	nop
 800b5fe:	3770      	adds	r7, #112	@ 0x70
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b610:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d109      	bne.n	800b634 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b626:	085b      	lsrs	r3, r3, #1
 800b628:	b29b      	uxth	r3, r3
 800b62a:	4619      	mov	r1, r3
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7fe fff7 	bl	800a620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b632:	e002      	b.n	800b63a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7f7 fd19 	bl	800306c <HAL_UART_RxHalfCpltCallback>
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b086      	sub	sp, #24
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b656:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b66a:	2b80      	cmp	r3, #128	@ 0x80
 800b66c:	d109      	bne.n	800b682 <UART_DMAError+0x40>
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b21      	cmp	r3, #33	@ 0x21
 800b672:	d106      	bne.n	800b682 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b67c:	6978      	ldr	r0, [r7, #20]
 800b67e:	f7ff fe29 	bl	800b2d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68c:	2b40      	cmp	r3, #64	@ 0x40
 800b68e:	d109      	bne.n	800b6a4 <UART_DMAError+0x62>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b22      	cmp	r3, #34	@ 0x22
 800b694:	d106      	bne.n	800b6a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b69e:	6978      	ldr	r0, [r7, #20]
 800b6a0:	f7ff fe59 	bl	800b356 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6aa:	f043 0210 	orr.w	r2, r3, #16
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6b4:	6978      	ldr	r0, [r7, #20]
 800b6b6:	f7fe ffa9 	bl	800a60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ba:	bf00      	nop
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7fe ff97 	bl	800a60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b08f      	sub	sp, #60	@ 0x3c
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6f4:	2b21      	cmp	r3, #33	@ 0x21
 800b6f6:	d14c      	bne.n	800b792 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d132      	bne.n	800b76a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	61fb      	str	r3, [r7, #28]
   return(result);
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b724:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b72a:	e841 2300 	strex	r3, r2, [r1]
 800b72e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e6      	bne.n	800b704 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	e853 3f00 	ldrex	r3, [r3]
 800b742:	60bb      	str	r3, [r7, #8]
   return(result);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	461a      	mov	r2, r3
 800b752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	6979      	ldr	r1, [r7, #20]
 800b75a:	69ba      	ldr	r2, [r7, #24]
 800b75c:	e841 2300 	strex	r3, r2, [r1]
 800b760:	613b      	str	r3, [r7, #16]
   return(result);
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e6      	bne.n	800b736 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b768:	e013      	b.n	800b792 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b786:	b29b      	uxth	r3, r3
 800b788:	3b01      	subs	r3, #1
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b792:	bf00      	nop
 800b794:	373c      	adds	r7, #60	@ 0x3c
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b091      	sub	sp, #68	@ 0x44
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7ac:	2b21      	cmp	r3, #33	@ 0x21
 800b7ae:	d151      	bne.n	800b854 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d132      	bne.n	800b822 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e6      	bne.n	800b7bc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b802:	637b      	str	r3, [r7, #52]	@ 0x34
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	69b9      	ldr	r1, [r7, #24]
 800b812:	69fa      	ldr	r2, [r7, #28]
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	617b      	str	r3, [r7, #20]
   return(result);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e6      	bne.n	800b7ee <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b820:	e018      	b.n	800b854 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b826:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b836:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b83c:	1c9a      	adds	r2, r3, #2
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b854:	bf00      	nop
 800b856:	3744      	adds	r7, #68	@ 0x44
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b860:	b480      	push	{r7}
 800b862:	b091      	sub	sp, #68	@ 0x44
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b86e:	2b21      	cmp	r3, #33	@ 0x21
 800b870:	d160      	bne.n	800b934 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b878:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b87a:	e057      	b.n	800b92c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d133      	bne.n	800b8f0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	623b      	str	r3, [r7, #32]
   return(result);
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b89e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e5      	bne.n	800b888 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	69b9      	ldr	r1, [r7, #24]
 800b8e0:	69fa      	ldr	r2, [r7, #28]
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e6      	bne.n	800b8bc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b8ee:	e021      	b.n	800b934 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d013      	beq.n	800b926 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b902:	781a      	ldrb	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	3b01      	subs	r3, #1
 800b91e:	b29a      	uxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b926:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b928:	3b01      	subs	r3, #1
 800b92a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b92c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1a4      	bne.n	800b87c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b932:	e7ff      	b.n	800b934 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b934:	bf00      	nop
 800b936:	3744      	adds	r7, #68	@ 0x44
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b091      	sub	sp, #68	@ 0x44
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b94e:	2b21      	cmp	r3, #33	@ 0x21
 800b950:	d165      	bne.n	800ba1e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b958:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b95a:	e05c      	b.n	800ba16 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d133      	bne.n	800b9d0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3308      	adds	r3, #8
 800b96e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	61fb      	str	r3, [r7, #28]
   return(result);
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3308      	adds	r3, #8
 800b986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b988:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b98a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b98e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e5      	bne.n	800b968 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	61bb      	str	r3, [r7, #24]
 800b9bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	6979      	ldr	r1, [r7, #20]
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	e841 2300 	strex	r3, r2, [r1]
 800b9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1e6      	bne.n	800b99c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b9ce:	e026      	b.n	800ba1e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d018      	beq.n	800ba10 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9f2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9f8:	1c9a      	adds	r2, r3, #2
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	3b01      	subs	r3, #1
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ba12:	3b01      	subs	r3, #1
 800ba14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ba16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d19f      	bne.n	800b95c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba1c:	e7ff      	b.n	800ba1e <UART_TxISR_16BIT_FIFOEN+0xde>
 800ba1e:	bf00      	nop
 800ba20:	3744      	adds	r7, #68	@ 0x44
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b088      	sub	sp, #32
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	61bb      	str	r3, [r7, #24]
 800ba52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6979      	ldr	r1, [r7, #20]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e6      	bne.n	800ba32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fe fdb6 	bl	800a5e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba78:	bf00      	nop
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b09c      	sub	sp, #112	@ 0x70
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba98:	2b22      	cmp	r3, #34	@ 0x22
 800ba9a:	f040 80be 	bne.w	800bc1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800baa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800baac:	b2d9      	uxtb	r1, r3
 800baae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bab8:	400a      	ands	r2, r1
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bace:	b29b      	uxth	r3, r3
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f040 80a1 	bne.w	800bc2a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800baf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bafc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1e6      	bne.n	800bae8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2c:	f023 0301 	bic.w	r3, r3, #1
 800bb30:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bb3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800bb3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e5      	bne.n	800bb1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a33      	ldr	r2, [pc, #204]	@ (800bc34 <UART_RxISR_8BIT+0x1b4>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d01f      	beq.n	800bbac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d018      	beq.n	800bbac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	623b      	str	r3, [r7, #32]
   return(result);
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb98:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e6      	bne.n	800bb7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d12e      	bne.n	800bc12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	e853 3f00 	ldrex	r3, [r3]
 800bbc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f023 0310 	bic.w	r3, r3, #16
 800bbce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbd8:	61fb      	str	r3, [r7, #28]
 800bbda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	69b9      	ldr	r1, [r7, #24]
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	e841 2300 	strex	r3, r2, [r1]
 800bbe4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1e6      	bne.n	800bbba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	f003 0310 	and.w	r3, r3, #16
 800bbf6:	2b10      	cmp	r3, #16
 800bbf8:	d103      	bne.n	800bc02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2210      	movs	r2, #16
 800bc00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe fd08 	bl	800a620 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc10:	e00b      	b.n	800bc2a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f7 fa4c 	bl	80030b0 <HAL_UART_RxCpltCallback>
}
 800bc18:	e007      	b.n	800bc2a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f042 0208 	orr.w	r2, r2, #8
 800bc28:	619a      	str	r2, [r3, #24]
}
 800bc2a:	bf00      	nop
 800bc2c:	3770      	adds	r7, #112	@ 0x70
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	40008000 	.word	0x40008000

0800bc38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b09c      	sub	sp, #112	@ 0x70
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc50:	2b22      	cmp	r3, #34	@ 0x22
 800bc52:	f040 80be 	bne.w	800bdd2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800bc6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bc6e:	4013      	ands	r3, r2
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc7a:	1c9a      	adds	r2, r3, #2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 80a1 	bne.w	800bde2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bcae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcbe:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bcc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e6      	bne.n	800bca0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce4:	f023 0301 	bic.w	r3, r3, #1
 800bce8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3308      	adds	r3, #8
 800bcf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bcf2:	643a      	str	r2, [r7, #64]	@ 0x40
 800bcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bcf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcfa:	e841 2300 	strex	r3, r2, [r1]
 800bcfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1e5      	bne.n	800bcd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a33      	ldr	r2, [pc, #204]	@ (800bdec <UART_RxISR_16BIT+0x1b4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d01f      	beq.n	800bd64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d018      	beq.n	800bd64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e6      	bne.n	800bd32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d12e      	bne.n	800bdca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f023 0310 	bic.w	r3, r3, #16
 800bd86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd90:	61bb      	str	r3, [r7, #24]
 800bd92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6979      	ldr	r1, [r7, #20]
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e6      	bne.n	800bd72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	f003 0310 	and.w	r3, r3, #16
 800bdae:	2b10      	cmp	r3, #16
 800bdb0:	d103      	bne.n	800bdba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2210      	movs	r2, #16
 800bdb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7fe fc2c 	bl	800a620 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdc8:	e00b      	b.n	800bde2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7f7 f970 	bl	80030b0 <HAL_UART_RxCpltCallback>
}
 800bdd0:	e007      	b.n	800bde2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0208 	orr.w	r2, r2, #8
 800bde0:	619a      	str	r2, [r3, #24]
}
 800bde2:	bf00      	nop
 800bde4:	3770      	adds	r7, #112	@ 0x70
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	40008000 	.word	0x40008000

0800bdf0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b0ac      	sub	sp, #176	@ 0xb0
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bdfe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be26:	2b22      	cmp	r3, #34	@ 0x22
 800be28:	f040 8183 	bne.w	800c132 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be36:	e126      	b.n	800c086 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be3e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800be46:	b2d9      	uxtb	r1, r3
 800be48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be52:	400a      	ands	r2, r1
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d053      	beq.n	800bf32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d011      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xca>
 800be96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2201      	movs	r2, #1
 800bea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beb0:	f043 0201 	orr.w	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bebe:	f003 0302 	and.w	r3, r3, #2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d011      	beq.n	800beea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00b      	beq.n	800beea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2202      	movs	r2, #2
 800bed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bee0:	f043 0204 	orr.w	r2, r3, #4
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beee:	f003 0304 	and.w	r3, r3, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d011      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00b      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2204      	movs	r2, #4
 800bf08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf10:	f043 0202 	orr.w	r2, r3, #2
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7fe fb71 	bl	800a60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f040 80a3 	bne.w	800c086 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bf4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf64:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bf68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bf6a:	e841 2300 	strex	r3, r2, [r1]
 800bf6e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bf70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e4      	bne.n	800bf40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bf86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf8c:	f023 0301 	bic.w	r3, r3, #1
 800bf90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3308      	adds	r3, #8
 800bf9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bf9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bfa0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bfa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfa6:	e841 2300 	strex	r3, r2, [r1]
 800bfaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bfac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1e1      	bne.n	800bf76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a60      	ldr	r2, [pc, #384]	@ (800c14c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d021      	beq.n	800c014 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d01a      	beq.n	800c014 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfe6:	e853 3f00 	ldrex	r3, [r3]
 800bfea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bfec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c000:	657b      	str	r3, [r7, #84]	@ 0x54
 800c002:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c004:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c006:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e4      	bne.n	800bfde <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d130      	bne.n	800c07e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c032:	f023 0310 	bic.w	r3, r3, #16
 800c036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c044:	643b      	str	r3, [r7, #64]	@ 0x40
 800c046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04c:	e841 2300 	strex	r3, r2, [r1]
 800c050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e4      	bne.n	800c022 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	f003 0310 	and.w	r3, r3, #16
 800c062:	2b10      	cmp	r3, #16
 800c064:	d103      	bne.n	800c06e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2210      	movs	r2, #16
 800c06c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7fe fad2 	bl	800a620 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c07c:	e00e      	b.n	800c09c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7f7 f816 	bl	80030b0 <HAL_UART_RxCpltCallback>
        break;
 800c084:	e00a      	b.n	800c09c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c086:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800c08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	f47f aece 	bne.w	800be38 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d049      	beq.n	800c142 <UART_RxISR_8BIT_FIFOEN+0x352>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0b4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d242      	bcs.n	800c142 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	e853 3f00 	ldrex	r3, [r3]
 800c0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c0e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0e8:	e841 2300 	strex	r3, r2, [r1]
 800c0ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e3      	bne.n	800c0bc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a16      	ldr	r2, [pc, #88]	@ (800c150 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c0f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	60bb      	str	r3, [r7, #8]
   return(result);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f043 0320 	orr.w	r3, r3, #32
 800c10e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	6979      	ldr	r1, [r7, #20]
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	e841 2300 	strex	r3, r2, [r1]
 800c128:	613b      	str	r3, [r7, #16]
   return(result);
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e4      	bne.n	800c0fa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c130:	e007      	b.n	800c142 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	699a      	ldr	r2, [r3, #24]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f042 0208 	orr.w	r2, r2, #8
 800c140:	619a      	str	r2, [r3, #24]
}
 800c142:	bf00      	nop
 800c144:	37b0      	adds	r7, #176	@ 0xb0
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	40008000 	.word	0x40008000
 800c150:	0800ba81 	.word	0x0800ba81

0800c154 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b0ae      	sub	sp, #184	@ 0xb8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c162:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c18a:	2b22      	cmp	r3, #34	@ 0x22
 800c18c:	f040 8187 	bne.w	800c49e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c196:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c19a:	e12a      	b.n	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c1ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c1b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c1be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1c4:	1c9a      	adds	r2, r3, #2
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d053      	beq.n	800c29a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d011      	beq.n	800c222 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c1fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00b      	beq.n	800c222 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2201      	movs	r2, #1
 800c210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c218:	f043 0201 	orr.w	r2, r3, #1
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d011      	beq.n	800c252 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c22e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00b      	beq.n	800c252 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2202      	movs	r2, #2
 800c240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c248:	f043 0204 	orr.w	r2, r3, #4
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c256:	f003 0304 	and.w	r3, r3, #4
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d011      	beq.n	800c282 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c25e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2204      	movs	r2, #4
 800c270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c278:	f043 0202 	orr.w	r2, r3, #2
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d006      	beq.n	800c29a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7fe f9bd 	bl	800a60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f040 80a5 	bne.w	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c2b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c2ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c2d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c2dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e2      	bne.n	800c2a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c2f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2f8:	f023 0301 	bic.w	r3, r3, #1
 800c2fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3308      	adds	r3, #8
 800c306:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c30a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c30c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c312:	e841 2300 	strex	r3, r2, [r1]
 800c316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e1      	bne.n	800c2e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2220      	movs	r2, #32
 800c322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a60      	ldr	r2, [pc, #384]	@ (800c4b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d021      	beq.n	800c380 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01a      	beq.n	800c380 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c35a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c35e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c36c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c36e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e4      	bne.n	800c34a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c384:	2b01      	cmp	r3, #1
 800c386:	d130      	bne.n	800c3ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	e853 3f00 	ldrex	r3, [r3]
 800c39a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c39e:	f023 0310 	bic.w	r3, r3, #16
 800c3a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e4      	bne.n	800c38e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	f003 0310 	and.w	r3, r3, #16
 800c3ce:	2b10      	cmp	r3, #16
 800c3d0:	d103      	bne.n	800c3da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2210      	movs	r2, #16
 800c3d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7fe f91c 	bl	800a620 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c3e8:	e00e      	b.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7f6 fe60 	bl	80030b0 <HAL_UART_RxCpltCallback>
        break;
 800c3f0:	e00a      	b.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d006      	beq.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c3fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3fe:	f003 0320 	and.w	r3, r3, #32
 800c402:	2b00      	cmp	r3, #0
 800c404:	f47f aeca 	bne.w	800c19c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c40e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c412:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c416:	2b00      	cmp	r3, #0
 800c418:	d049      	beq.n	800c4ae <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c420:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c424:	429a      	cmp	r2, r3
 800c426:	d242      	bcs.n	800c4ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3308      	adds	r3, #8
 800c42e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	e853 3f00 	ldrex	r3, [r3]
 800c436:	623b      	str	r3, [r7, #32]
   return(result);
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c43e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c44c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e3      	bne.n	800c428 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a16      	ldr	r2, [pc, #88]	@ (800c4bc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c464:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	60fb      	str	r3, [r7, #12]
   return(result);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f043 0320 	orr.w	r3, r3, #32
 800c47a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	69b9      	ldr	r1, [r7, #24]
 800c48e:	69fa      	ldr	r2, [r7, #28]
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	617b      	str	r3, [r7, #20]
   return(result);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e4      	bne.n	800c466 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c49c:	e007      	b.n	800c4ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	699a      	ldr	r2, [r3, #24]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f042 0208 	orr.w	r2, r2, #8
 800c4ac:	619a      	str	r2, [r3, #24]
}
 800c4ae:	bf00      	nop
 800c4b0:	37b8      	adds	r7, #184	@ 0xb8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40008000 	.word	0x40008000
 800c4bc:	0800bc39 	.word	0x0800bc39

0800c4c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d101      	bne.n	800c512 <HAL_UARTEx_DisableFifoMode+0x16>
 800c50e:	2302      	movs	r3, #2
 800c510:	e027      	b.n	800c562 <HAL_UARTEx_DisableFifoMode+0x66>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2224      	movs	r2, #36	@ 0x24
 800c51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 0201 	bic.w	r2, r2, #1
 800c538:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c582:	2302      	movs	r3, #2
 800c584:	e02d      	b.n	800c5e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2224      	movs	r2, #36	@ 0x24
 800c592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 0201 	bic.w	r2, r2, #1
 800c5ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	430a      	orrs	r2, r1
 800c5c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f850 	bl	800c668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d101      	bne.n	800c602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5fe:	2302      	movs	r3, #2
 800c600:	e02d      	b.n	800c65e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2224      	movs	r2, #36	@ 0x24
 800c60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f022 0201 	bic.w	r2, r2, #1
 800c628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	430a      	orrs	r2, r1
 800c63c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f812 	bl	800c668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2220      	movs	r2, #32
 800c650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c674:	2b00      	cmp	r3, #0
 800c676:	d108      	bne.n	800c68a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c688:	e031      	b.n	800c6ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c68a:	2308      	movs	r3, #8
 800c68c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c68e:	2308      	movs	r3, #8
 800c690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	0e5b      	lsrs	r3, r3, #25
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	f003 0307 	and.w	r3, r3, #7
 800c6a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	0f5b      	lsrs	r3, r3, #29
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 0307 	and.w	r3, r3, #7
 800c6b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6b2:	7bbb      	ldrb	r3, [r7, #14]
 800c6b4:	7b3a      	ldrb	r2, [r7, #12]
 800c6b6:	4911      	ldr	r1, [pc, #68]	@ (800c6fc <UARTEx_SetNbDataToProcess+0x94>)
 800c6b8:	5c8a      	ldrb	r2, [r1, r2]
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6be:	7b3a      	ldrb	r2, [r7, #12]
 800c6c0:	490f      	ldr	r1, [pc, #60]	@ (800c700 <UARTEx_SetNbDataToProcess+0x98>)
 800c6c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	7b7a      	ldrb	r2, [r7, #13]
 800c6d4:	4909      	ldr	r1, [pc, #36]	@ (800c6fc <UARTEx_SetNbDataToProcess+0x94>)
 800c6d6:	5c8a      	ldrb	r2, [r1, r2]
 800c6d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6dc:	7b7a      	ldrb	r2, [r7, #13]
 800c6de:	4908      	ldr	r1, [pc, #32]	@ (800c700 <UARTEx_SetNbDataToProcess+0x98>)
 800c6e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c6ee:	bf00      	nop
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	08011e58 	.word	0x08011e58
 800c700:	08011e60 	.word	0x08011e60

0800c704 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c716:	2b84      	cmp	r3, #132	@ 0x84
 800c718:	d005      	beq.n	800c726 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c71a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	3303      	adds	r3, #3
 800c724:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c726:	68fb      	ldr	r3, [r7, #12]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c738:	f000 fd3c 	bl	800d1b4 <vTaskStartScheduler>
  
  return osOK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	bd80      	pop	{r7, pc}

0800c742 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c744:	b087      	sub	sp, #28
 800c746:	af02      	add	r7, sp, #8
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685c      	ldr	r4, [r3, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c758:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff ffcf 	bl	800c704 <makeFreeRtosPriority>
 800c766:	4602      	mov	r2, r0
 800c768:	f107 030c 	add.w	r3, r7, #12
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	9200      	str	r2, [sp, #0]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	4632      	mov	r2, r6
 800c774:	4629      	mov	r1, r5
 800c776:	4620      	mov	r0, r4
 800c778:	f000 fbb2 	bl	800cee0 <xTaskCreate>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d001      	beq.n	800c786 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c782:	2300      	movs	r3, #0
 800c784:	e000      	b.n	800c788 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c790 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <osDelay+0x16>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	e000      	b.n	800c7a8 <osDelay+0x18>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fccd 	bl	800d148 <vTaskDelay>
  
  return osOK;
 800c7ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f103 0208 	add.w	r2, r3, #8
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f103 0208 	add.w	r2, r3, #8
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f103 0208 	add.w	r2, r3, #8
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c806:	bf00      	nop
 800c808:	370c      	adds	r7, #12
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	601a      	str	r2, [r3, #0]
}
 800c84e:	bf00      	nop
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c85a:	b480      	push	{r7}
 800c85c:	b085      	sub	sp, #20
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c870:	d103      	bne.n	800c87a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	e00c      	b.n	800c894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3308      	adds	r3, #8
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e002      	b.n	800c888 <vListInsert+0x2e>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	429a      	cmp	r2, r3
 800c892:	d2f6      	bcs.n	800c882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	601a      	str	r2, [r3, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	6892      	ldr	r2, [r2, #8]
 800c8e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	6852      	ldr	r2, [r2, #4]
 800c8ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d103      	bne.n	800c900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1e5a      	subs	r2, r3, #1
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10b      	bne.n	800c94c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c946:	bf00      	nop
 800c948:	bf00      	nop
 800c94a:	e7fd      	b.n	800c948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c94c:	f001 fad4 	bl	800def8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c958:	68f9      	ldr	r1, [r7, #12]
 800c95a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c95c:	fb01 f303 	mul.w	r3, r1, r3
 800c960:	441a      	add	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c97c:	3b01      	subs	r3, #1
 800c97e:	68f9      	ldr	r1, [r7, #12]
 800c980:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c982:	fb01 f303 	mul.w	r3, r1, r3
 800c986:	441a      	add	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	22ff      	movs	r2, #255	@ 0xff
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	22ff      	movs	r2, #255	@ 0xff
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d114      	bne.n	800c9cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d01a      	beq.n	800c9e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3310      	adds	r3, #16
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fe30 	bl	800d614 <xTaskRemoveFromEventList>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d012      	beq.n	800c9e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f0 <xQueueGenericReset+0xd0>)
 800c9bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	e009      	b.n	800c9e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3310      	adds	r3, #16
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7ff fef1 	bl	800c7b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	3324      	adds	r3, #36	@ 0x24
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff feec 	bl	800c7b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9e0:	f001 fabc 	bl	800df5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9e4:	2301      	movs	r3, #1
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08a      	sub	sp, #40	@ 0x28
 800c9f8:	af02      	add	r7, sp, #8
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	613b      	str	r3, [r7, #16]
}
 800ca1a:	bf00      	nop
 800ca1c:	bf00      	nop
 800ca1e:	e7fd      	b.n	800ca1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	fb02 f303 	mul.w	r3, r2, r3
 800ca28:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	3348      	adds	r3, #72	@ 0x48
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f001 fb84 	bl	800e13c <pvPortMalloc>
 800ca34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00d      	beq.n	800ca58 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	3348      	adds	r3, #72	@ 0x48
 800ca44:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca46:	79fa      	ldrb	r2, [r7, #7]
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	68b9      	ldr	r1, [r7, #8]
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f000 f805 	bl	800ca62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca58:	69bb      	ldr	r3, [r7, #24]
	}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
 800ca6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	69ba      	ldr	r2, [r7, #24]
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	e002      	b.n	800ca84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca90:	2101      	movs	r1, #1
 800ca92:	69b8      	ldr	r0, [r7, #24]
 800ca94:	f7ff ff44 	bl	800c920 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca98:	bf00      	nop
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08e      	sub	sp, #56	@ 0x38
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10b      	bne.n	800cacc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	623b      	str	r3, [r7, #32]
}
 800cac6:	bf00      	nop
 800cac8:	bf00      	nop
 800caca:	e7fd      	b.n	800cac8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	61fb      	str	r3, [r7, #28]
}
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	e7fd      	b.n	800cae8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d103      	bne.n	800cafc <xQueueGiveFromISR+0x5c>
 800caf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <xQueueGiveFromISR+0x60>
 800cafc:	2301      	movs	r3, #1
 800cafe:	e000      	b.n	800cb02 <xQueueGiveFromISR+0x62>
 800cb00:	2300      	movs	r3, #0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10b      	bne.n	800cb1e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	61bb      	str	r3, [r7, #24]
}
 800cb18:	bf00      	nop
 800cb1a:	bf00      	nop
 800cb1c:	e7fd      	b.n	800cb1a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb1e:	f001 facb 	bl	800e0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb22:	f3ef 8211 	mrs	r2, BASEPRI
 800cb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	617a      	str	r2, [r7, #20]
 800cb38:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d22b      	bcs.n	800cba6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb68:	d112      	bne.n	800cb90 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d016      	beq.n	800cba0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb74:	3324      	adds	r3, #36	@ 0x24
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fd4c 	bl	800d614 <xTaskRemoveFromEventList>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00e      	beq.n	800cba0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	e007      	b.n	800cba0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb94:	3301      	adds	r3, #1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	b25a      	sxtb	r2, r3
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cba0:	2301      	movs	r3, #1
 800cba2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba4:	e001      	b.n	800cbaa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cbb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3738      	adds	r7, #56	@ 0x38
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08e      	sub	sp, #56	@ 0x38
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10b      	bne.n	800cbf4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	623b      	str	r3, [r7, #32]
}
 800cbee:	bf00      	nop
 800cbf0:	bf00      	nop
 800cbf2:	e7fd      	b.n	800cbf0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	61fb      	str	r3, [r7, #28]
}
 800cc0e:	bf00      	nop
 800cc10:	bf00      	nop
 800cc12:	e7fd      	b.n	800cc10 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc14:	f000 fe9e 	bl	800d954 <xTaskGetSchedulerState>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <xQueueSemaphoreTake+0x64>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <xQueueSemaphoreTake+0x68>
 800cc24:	2301      	movs	r3, #1
 800cc26:	e000      	b.n	800cc2a <xQueueSemaphoreTake+0x6a>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10b      	bne.n	800cc46 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	61bb      	str	r3, [r7, #24]
}
 800cc40:	bf00      	nop
 800cc42:	bf00      	nop
 800cc44:	e7fd      	b.n	800cc42 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc46:	f001 f957 	bl	800def8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc4e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d024      	beq.n	800cca0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cc66:	f000 ff99 	bl	800db9c <pvTaskIncrementMutexHeldCount>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00f      	beq.n	800cc98 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7a:	3310      	adds	r3, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fcc9 	bl	800d614 <xTaskRemoveFromEventList>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d007      	beq.n	800cc98 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc88:	4b54      	ldr	r3, [pc, #336]	@ (800cddc <xQueueSemaphoreTake+0x21c>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc98:	f001 f960 	bl	800df5c <vPortExitCritical>
				return pdPASS;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e098      	b.n	800cdd2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d112      	bne.n	800cccc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00b      	beq.n	800ccc4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	617b      	str	r3, [r7, #20]
}
 800ccbe:	bf00      	nop
 800ccc0:	bf00      	nop
 800ccc2:	e7fd      	b.n	800ccc0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ccc4:	f001 f94a 	bl	800df5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e082      	b.n	800cdd2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccd2:	f107 030c 	add.w	r3, r7, #12
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 fd00 	bl	800d6dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cce0:	f001 f93c 	bl	800df5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cce4:	f000 faae 	bl	800d244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cce8:	f001 f906 	bl	800def8 <vPortEnterCritical>
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccf2:	b25b      	sxtb	r3, r3
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d103      	bne.n	800cd02 <xQueueSemaphoreTake+0x142>
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd08:	b25b      	sxtb	r3, r3
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d103      	bne.n	800cd18 <xQueueSemaphoreTake+0x158>
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd18:	f001 f920 	bl	800df5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd1c:	463a      	mov	r2, r7
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4611      	mov	r1, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 fcef 	bl	800d708 <xTaskCheckForTimeOut>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d132      	bne.n	800cd96 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd32:	f000 f8bf 	bl	800ceb4 <prvIsQueueEmpty>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d026      	beq.n	800cd8a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cd44:	f001 f8d8 	bl	800def8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fe1f 	bl	800d990 <xTaskPriorityInherit>
 800cd52:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cd54:	f001 f902 	bl	800df5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	3324      	adds	r3, #36	@ 0x24
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fc31 	bl	800d5c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd68:	f000 f852 	bl	800ce10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd6c:	f000 fa78 	bl	800d260 <xTaskResumeAll>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f47f af67 	bne.w	800cc46 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cd78:	4b18      	ldr	r3, [pc, #96]	@ (800cddc <xQueueSemaphoreTake+0x21c>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	e75d      	b.n	800cc46 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd8c:	f000 f840 	bl	800ce10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd90:	f000 fa66 	bl	800d260 <xTaskResumeAll>
 800cd94:	e757      	b.n	800cc46 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd98:	f000 f83a 	bl	800ce10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd9c:	f000 fa60 	bl	800d260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cda0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cda2:	f000 f887 	bl	800ceb4 <prvIsQueueEmpty>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f43f af4c 	beq.w	800cc46 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cdb4:	f001 f8a0 	bl	800def8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cdb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdba:	f000 f811 	bl	800cde0 <prvGetDisinheritPriorityAfterTimeout>
 800cdbe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fe58 	bl	800da7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cdcc:	f001 f8c6 	bl	800df5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3738      	adds	r7, #56	@ 0x38
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	e000ed04 	.word	0xe000ed04

0800cde0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d006      	beq.n	800cdfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f1c3 0307 	rsb	r3, r3, #7
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	e001      	b.n	800ce02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce02:	68fb      	ldr	r3, [r7, #12]
	}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce18:	f001 f86e 	bl	800def8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce24:	e011      	b.n	800ce4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d012      	beq.n	800ce54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3324      	adds	r3, #36	@ 0x24
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 fbee 	bl	800d614 <xTaskRemoveFromEventList>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce3e:	f000 fcc7 	bl	800d7d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	dce9      	bgt.n	800ce26 <prvUnlockQueue+0x16>
 800ce52:	e000      	b.n	800ce56 <prvUnlockQueue+0x46>
					break;
 800ce54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	22ff      	movs	r2, #255	@ 0xff
 800ce5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ce5e:	f001 f87d 	bl	800df5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce62:	f001 f849 	bl	800def8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce6e:	e011      	b.n	800ce94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d012      	beq.n	800ce9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3310      	adds	r3, #16
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 fbc9 	bl	800d614 <xTaskRemoveFromEventList>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce88:	f000 fca2 	bl	800d7d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dce9      	bgt.n	800ce70 <prvUnlockQueue+0x60>
 800ce9c:	e000      	b.n	800cea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	22ff      	movs	r2, #255	@ 0xff
 800cea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cea8:	f001 f858 	bl	800df5c <vPortExitCritical>
}
 800ceac:	bf00      	nop
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cebc:	f001 f81c 	bl	800def8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cec8:	2301      	movs	r3, #1
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	e001      	b.n	800ced2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cece:	2300      	movs	r3, #0
 800ced0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ced2:	f001 f843 	bl	800df5c <vPortExitCritical>

	return xReturn;
 800ced6:	68fb      	ldr	r3, [r7, #12]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b08c      	sub	sp, #48	@ 0x30
 800cee4:	af04      	add	r7, sp, #16
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4613      	mov	r3, r2
 800ceee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cef0:	88fb      	ldrh	r3, [r7, #6]
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f001 f921 	bl	800e13c <pvPortMalloc>
 800cefa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00e      	beq.n	800cf20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf02:	2054      	movs	r0, #84	@ 0x54
 800cf04:	f001 f91a 	bl	800e13c <pvPortMalloc>
 800cf08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d003      	beq.n	800cf18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf16:	e005      	b.n	800cf24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	f001 f9dd 	bl	800e2d8 <vPortFree>
 800cf1e:	e001      	b.n	800cf24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d013      	beq.n	800cf52 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf2a:	88fa      	ldrh	r2, [r7, #6]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	9302      	str	r3, [sp, #8]
 800cf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3a:	9300      	str	r3, [sp, #0]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 f80e 	bl	800cf62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf46:	69f8      	ldr	r0, [r7, #28]
 800cf48:	f000 f894 	bl	800d074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	61bb      	str	r3, [r7, #24]
 800cf50:	e002      	b.n	800cf58 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf52:	f04f 33ff 	mov.w	r3, #4294967295
 800cf56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf58:	69bb      	ldr	r3, [r7, #24]
	}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b088      	sub	sp, #32
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
 800cf6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4413      	add	r3, r2
 800cf80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	f023 0307 	bic.w	r3, r3, #7
 800cf88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	f003 0307 	and.w	r3, r3, #7
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00b      	beq.n	800cfac <prvInitialiseNewTask+0x4a>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	617b      	str	r3, [r7, #20]
}
 800cfa6:	bf00      	nop
 800cfa8:	bf00      	nop
 800cfaa:	e7fd      	b.n	800cfa8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d01f      	beq.n	800cff2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61fb      	str	r3, [r7, #28]
 800cfb6:	e012      	b.n	800cfde <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	7819      	ldrb	r1, [r3, #0]
 800cfc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	3334      	adds	r3, #52	@ 0x34
 800cfc8:	460a      	mov	r2, r1
 800cfca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d006      	beq.n	800cfe6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	61fb      	str	r3, [r7, #28]
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	2b0f      	cmp	r3, #15
 800cfe2:	d9e9      	bls.n	800cfb8 <prvInitialiseNewTask+0x56>
 800cfe4:	e000      	b.n	800cfe8 <prvInitialiseNewTask+0x86>
			{
				break;
 800cfe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cff0:	e003      	b.n	800cffa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffc:	2b06      	cmp	r3, #6
 800cffe:	d901      	bls.n	800d004 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d000:	2306      	movs	r3, #6
 800d002:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d008:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d00e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d012:	2200      	movs	r2, #0
 800d014:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	3304      	adds	r3, #4
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff fbec 	bl	800c7f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d022:	3318      	adds	r3, #24
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff fbe7 	bl	800c7f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d02e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d032:	f1c3 0207 	rsb	r2, r3, #7
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d03e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d042:	2200      	movs	r2, #0
 800d044:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	68f9      	ldr	r1, [r7, #12]
 800d052:	69b8      	ldr	r0, [r7, #24]
 800d054:	f000 fe1c 	bl	800dc90 <pxPortInitialiseStack>
 800d058:	4602      	mov	r2, r0
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d06a:	bf00      	nop
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d07c:	f000 ff3c 	bl	800def8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d080:	4b2a      	ldr	r3, [pc, #168]	@ (800d12c <prvAddNewTaskToReadyList+0xb8>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3301      	adds	r3, #1
 800d086:	4a29      	ldr	r2, [pc, #164]	@ (800d12c <prvAddNewTaskToReadyList+0xb8>)
 800d088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d08a:	4b29      	ldr	r3, [pc, #164]	@ (800d130 <prvAddNewTaskToReadyList+0xbc>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d109      	bne.n	800d0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d092:	4a27      	ldr	r2, [pc, #156]	@ (800d130 <prvAddNewTaskToReadyList+0xbc>)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d098:	4b24      	ldr	r3, [pc, #144]	@ (800d12c <prvAddNewTaskToReadyList+0xb8>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d110      	bne.n	800d0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0a0:	f000 fbba 	bl	800d818 <prvInitialiseTaskLists>
 800d0a4:	e00d      	b.n	800d0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0a6:	4b23      	ldr	r3, [pc, #140]	@ (800d134 <prvAddNewTaskToReadyList+0xc0>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d109      	bne.n	800d0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0ae:	4b20      	ldr	r3, [pc, #128]	@ (800d130 <prvAddNewTaskToReadyList+0xbc>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d802      	bhi.n	800d0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0bc:	4a1c      	ldr	r2, [pc, #112]	@ (800d130 <prvAddNewTaskToReadyList+0xbc>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d138 <prvAddNewTaskToReadyList+0xc4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d138 <prvAddNewTaskToReadyList+0xc4>)
 800d0ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	409a      	lsls	r2, r3
 800d0d4:	4b19      	ldr	r3, [pc, #100]	@ (800d13c <prvAddNewTaskToReadyList+0xc8>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	4a18      	ldr	r2, [pc, #96]	@ (800d13c <prvAddNewTaskToReadyList+0xc8>)
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4a15      	ldr	r2, [pc, #84]	@ (800d140 <prvAddNewTaskToReadyList+0xcc>)
 800d0ec:	441a      	add	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f7ff fb8c 	bl	800c812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d0fa:	f000 ff2f 	bl	800df5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d134 <prvAddNewTaskToReadyList+0xc0>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00e      	beq.n	800d124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d106:	4b0a      	ldr	r3, [pc, #40]	@ (800d130 <prvAddNewTaskToReadyList+0xbc>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d110:	429a      	cmp	r2, r3
 800d112:	d207      	bcs.n	800d124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d114:	4b0b      	ldr	r3, [pc, #44]	@ (800d144 <prvAddNewTaskToReadyList+0xd0>)
 800d116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	20001f18 	.word	0x20001f18
 800d130:	20001e18 	.word	0x20001e18
 800d134:	20001f24 	.word	0x20001f24
 800d138:	20001f34 	.word	0x20001f34
 800d13c:	20001f20 	.word	0x20001f20
 800d140:	20001e1c 	.word	0x20001e1c
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d150:	2300      	movs	r3, #0
 800d152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d018      	beq.n	800d18c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d15a:	4b14      	ldr	r3, [pc, #80]	@ (800d1ac <vTaskDelay+0x64>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00b      	beq.n	800d17a <vTaskDelay+0x32>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60bb      	str	r3, [r7, #8]
}
 800d174:	bf00      	nop
 800d176:	bf00      	nop
 800d178:	e7fd      	b.n	800d176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d17a:	f000 f863 	bl	800d244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d17e:	2100      	movs	r1, #0
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fd1f 	bl	800dbc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d186:	f000 f86b 	bl	800d260 <xTaskResumeAll>
 800d18a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d192:	4b07      	ldr	r3, [pc, #28]	@ (800d1b0 <vTaskDelay+0x68>)
 800d194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20001f40 	.word	0x20001f40
 800d1b0:	e000ed04 	.word	0xe000ed04

0800d1b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d22c <vTaskStartScheduler+0x78>)
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2280      	movs	r2, #128	@ 0x80
 800d1c6:	491a      	ldr	r1, [pc, #104]	@ (800d230 <vTaskStartScheduler+0x7c>)
 800d1c8:	481a      	ldr	r0, [pc, #104]	@ (800d234 <vTaskStartScheduler+0x80>)
 800d1ca:	f7ff fe89 	bl	800cee0 <xTaskCreate>
 800d1ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d116      	bne.n	800d204 <vTaskStartScheduler+0x50>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	60bb      	str	r3, [r7, #8]
}
 800d1e8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1ea:	4b13      	ldr	r3, [pc, #76]	@ (800d238 <vTaskStartScheduler+0x84>)
 800d1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1f2:	4b12      	ldr	r3, [pc, #72]	@ (800d23c <vTaskStartScheduler+0x88>)
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1f8:	4b11      	ldr	r3, [pc, #68]	@ (800d240 <vTaskStartScheduler+0x8c>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1fe:	f000 fdd7 	bl	800ddb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d202:	e00f      	b.n	800d224 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20a:	d10b      	bne.n	800d224 <vTaskStartScheduler+0x70>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	607b      	str	r3, [r7, #4]
}
 800d21e:	bf00      	nop
 800d220:	bf00      	nop
 800d222:	e7fd      	b.n	800d220 <vTaskStartScheduler+0x6c>
}
 800d224:	bf00      	nop
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	20001f3c 	.word	0x20001f3c
 800d230:	08011dc0 	.word	0x08011dc0
 800d234:	0800d7e9 	.word	0x0800d7e9
 800d238:	20001f38 	.word	0x20001f38
 800d23c:	20001f24 	.word	0x20001f24
 800d240:	20001f1c 	.word	0x20001f1c

0800d244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d248:	4b04      	ldr	r3, [pc, #16]	@ (800d25c <vTaskSuspendAll+0x18>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3301      	adds	r3, #1
 800d24e:	4a03      	ldr	r2, [pc, #12]	@ (800d25c <vTaskSuspendAll+0x18>)
 800d250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d252:	bf00      	nop
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	20001f40 	.word	0x20001f40

0800d260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d26a:	2300      	movs	r3, #0
 800d26c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d26e:	4b42      	ldr	r3, [pc, #264]	@ (800d378 <xTaskResumeAll+0x118>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10b      	bne.n	800d28e <xTaskResumeAll+0x2e>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	603b      	str	r3, [r7, #0]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d28e:	f000 fe33 	bl	800def8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d292:	4b39      	ldr	r3, [pc, #228]	@ (800d378 <xTaskResumeAll+0x118>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3b01      	subs	r3, #1
 800d298:	4a37      	ldr	r2, [pc, #220]	@ (800d378 <xTaskResumeAll+0x118>)
 800d29a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29c:	4b36      	ldr	r3, [pc, #216]	@ (800d378 <xTaskResumeAll+0x118>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d161      	bne.n	800d368 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2a4:	4b35      	ldr	r3, [pc, #212]	@ (800d37c <xTaskResumeAll+0x11c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d05d      	beq.n	800d368 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ac:	e02e      	b.n	800d30c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ae:	4b34      	ldr	r3, [pc, #208]	@ (800d380 <xTaskResumeAll+0x120>)
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3318      	adds	r3, #24
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fb06 	bl	800c8cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff fb01 	bl	800c8cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	409a      	lsls	r2, r3
 800d2d2:	4b2c      	ldr	r3, [pc, #176]	@ (800d384 <xTaskResumeAll+0x124>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	4a2a      	ldr	r2, [pc, #168]	@ (800d384 <xTaskResumeAll+0x124>)
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4413      	add	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4a27      	ldr	r2, [pc, #156]	@ (800d388 <xTaskResumeAll+0x128>)
 800d2ea:	441a      	add	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	f7ff fa8d 	bl	800c812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2fc:	4b23      	ldr	r3, [pc, #140]	@ (800d38c <xTaskResumeAll+0x12c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d302:	429a      	cmp	r2, r3
 800d304:	d302      	bcc.n	800d30c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d306:	4b22      	ldr	r3, [pc, #136]	@ (800d390 <xTaskResumeAll+0x130>)
 800d308:	2201      	movs	r2, #1
 800d30a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d30c:	4b1c      	ldr	r3, [pc, #112]	@ (800d380 <xTaskResumeAll+0x120>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1cc      	bne.n	800d2ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d31a:	f000 fafb 	bl	800d914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d31e:	4b1d      	ldr	r3, [pc, #116]	@ (800d394 <xTaskResumeAll+0x134>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d010      	beq.n	800d34c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d32a:	f000 f837 	bl	800d39c <xTaskIncrementTick>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d334:	4b16      	ldr	r3, [pc, #88]	@ (800d390 <xTaskResumeAll+0x130>)
 800d336:	2201      	movs	r2, #1
 800d338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1f1      	bne.n	800d32a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d346:	4b13      	ldr	r3, [pc, #76]	@ (800d394 <xTaskResumeAll+0x134>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d34c:	4b10      	ldr	r3, [pc, #64]	@ (800d390 <xTaskResumeAll+0x130>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d009      	beq.n	800d368 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d358:	4b0f      	ldr	r3, [pc, #60]	@ (800d398 <xTaskResumeAll+0x138>)
 800d35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d368:	f000 fdf8 	bl	800df5c <vPortExitCritical>

	return xAlreadyYielded;
 800d36c:	68bb      	ldr	r3, [r7, #8]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20001f40 	.word	0x20001f40
 800d37c:	20001f18 	.word	0x20001f18
 800d380:	20001ed8 	.word	0x20001ed8
 800d384:	20001f20 	.word	0x20001f20
 800d388:	20001e1c 	.word	0x20001e1c
 800d38c:	20001e18 	.word	0x20001e18
 800d390:	20001f2c 	.word	0x20001f2c
 800d394:	20001f28 	.word	0x20001f28
 800d398:	e000ed04 	.word	0xe000ed04

0800d39c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3a6:	4b4f      	ldr	r3, [pc, #316]	@ (800d4e4 <xTaskIncrementTick+0x148>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 808f 	bne.w	800d4ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d3b0:	4b4d      	ldr	r3, [pc, #308]	@ (800d4e8 <xTaskIncrementTick+0x14c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d3b8:	4a4b      	ldr	r2, [pc, #300]	@ (800d4e8 <xTaskIncrementTick+0x14c>)
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d121      	bne.n	800d408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d3c4:	4b49      	ldr	r3, [pc, #292]	@ (800d4ec <xTaskIncrementTick+0x150>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	603b      	str	r3, [r7, #0]
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	e7fd      	b.n	800d3e2 <xTaskIncrementTick+0x46>
 800d3e6:	4b41      	ldr	r3, [pc, #260]	@ (800d4ec <xTaskIncrementTick+0x150>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	4b40      	ldr	r3, [pc, #256]	@ (800d4f0 <xTaskIncrementTick+0x154>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a3e      	ldr	r2, [pc, #248]	@ (800d4ec <xTaskIncrementTick+0x150>)
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	4a3e      	ldr	r2, [pc, #248]	@ (800d4f0 <xTaskIncrementTick+0x154>)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800d4f4 <xTaskIncrementTick+0x158>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	4a3c      	ldr	r2, [pc, #240]	@ (800d4f4 <xTaskIncrementTick+0x158>)
 800d402:	6013      	str	r3, [r2, #0]
 800d404:	f000 fa86 	bl	800d914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d408:	4b3b      	ldr	r3, [pc, #236]	@ (800d4f8 <xTaskIncrementTick+0x15c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d348      	bcc.n	800d4a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d412:	4b36      	ldr	r3, [pc, #216]	@ (800d4ec <xTaskIncrementTick+0x150>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41c:	4b36      	ldr	r3, [pc, #216]	@ (800d4f8 <xTaskIncrementTick+0x15c>)
 800d41e:	f04f 32ff 	mov.w	r2, #4294967295
 800d422:	601a      	str	r2, [r3, #0]
					break;
 800d424:	e03e      	b.n	800d4a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d426:	4b31      	ldr	r3, [pc, #196]	@ (800d4ec <xTaskIncrementTick+0x150>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d203      	bcs.n	800d446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d43e:	4a2e      	ldr	r2, [pc, #184]	@ (800d4f8 <xTaskIncrementTick+0x15c>)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d444:	e02e      	b.n	800d4a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	3304      	adds	r3, #4
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fa3e 	bl	800c8cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	3318      	adds	r3, #24
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff fa35 	bl	800c8cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d466:	2201      	movs	r2, #1
 800d468:	409a      	lsls	r2, r3
 800d46a:	4b24      	ldr	r3, [pc, #144]	@ (800d4fc <xTaskIncrementTick+0x160>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4313      	orrs	r3, r2
 800d470:	4a22      	ldr	r2, [pc, #136]	@ (800d4fc <xTaskIncrementTick+0x160>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d478:	4613      	mov	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4a1f      	ldr	r2, [pc, #124]	@ (800d500 <xTaskIncrementTick+0x164>)
 800d482:	441a      	add	r2, r3
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	3304      	adds	r3, #4
 800d488:	4619      	mov	r1, r3
 800d48a:	4610      	mov	r0, r2
 800d48c:	f7ff f9c1 	bl	800c812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d494:	4b1b      	ldr	r3, [pc, #108]	@ (800d504 <xTaskIncrementTick+0x168>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d3b9      	bcc.n	800d412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4a2:	e7b6      	b.n	800d412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d4a4:	4b17      	ldr	r3, [pc, #92]	@ (800d504 <xTaskIncrementTick+0x168>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4aa:	4915      	ldr	r1, [pc, #84]	@ (800d500 <xTaskIncrementTick+0x164>)
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	440b      	add	r3, r1
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d901      	bls.n	800d4c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d4c0:	4b11      	ldr	r3, [pc, #68]	@ (800d508 <xTaskIncrementTick+0x16c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d007      	beq.n	800d4d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	e004      	b.n	800d4d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d50c <xTaskIncrementTick+0x170>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d50c <xTaskIncrementTick+0x170>)
 800d4d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d4d8:	697b      	ldr	r3, [r7, #20]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20001f40 	.word	0x20001f40
 800d4e8:	20001f1c 	.word	0x20001f1c
 800d4ec:	20001ed0 	.word	0x20001ed0
 800d4f0:	20001ed4 	.word	0x20001ed4
 800d4f4:	20001f30 	.word	0x20001f30
 800d4f8:	20001f38 	.word	0x20001f38
 800d4fc:	20001f20 	.word	0x20001f20
 800d500:	20001e1c 	.word	0x20001e1c
 800d504:	20001e18 	.word	0x20001e18
 800d508:	20001f2c 	.word	0x20001f2c
 800d50c:	20001f28 	.word	0x20001f28

0800d510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d516:	4b27      	ldr	r3, [pc, #156]	@ (800d5b4 <vTaskSwitchContext+0xa4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d51e:	4b26      	ldr	r3, [pc, #152]	@ (800d5b8 <vTaskSwitchContext+0xa8>)
 800d520:	2201      	movs	r2, #1
 800d522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d524:	e040      	b.n	800d5a8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d526:	4b24      	ldr	r3, [pc, #144]	@ (800d5b8 <vTaskSwitchContext+0xa8>)
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52c:	4b23      	ldr	r3, [pc, #140]	@ (800d5bc <vTaskSwitchContext+0xac>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	fab3 f383 	clz	r3, r3
 800d538:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d53a:	7afb      	ldrb	r3, [r7, #11]
 800d53c:	f1c3 031f 	rsb	r3, r3, #31
 800d540:	617b      	str	r3, [r7, #20]
 800d542:	491f      	ldr	r1, [pc, #124]	@ (800d5c0 <vTaskSwitchContext+0xb0>)
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	440b      	add	r3, r1
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10b      	bne.n	800d56e <vTaskSwitchContext+0x5e>
	__asm volatile
 800d556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	607b      	str	r3, [r7, #4]
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	e7fd      	b.n	800d56a <vTaskSwitchContext+0x5a>
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	4613      	mov	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4413      	add	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4a11      	ldr	r2, [pc, #68]	@ (800d5c0 <vTaskSwitchContext+0xb0>)
 800d57a:	4413      	add	r3, r2
 800d57c:	613b      	str	r3, [r7, #16]
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	605a      	str	r2, [r3, #4]
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3308      	adds	r3, #8
 800d590:	429a      	cmp	r2, r3
 800d592:	d104      	bne.n	800d59e <vTaskSwitchContext+0x8e>
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	605a      	str	r2, [r3, #4]
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	4a07      	ldr	r2, [pc, #28]	@ (800d5c4 <vTaskSwitchContext+0xb4>)
 800d5a6:	6013      	str	r3, [r2, #0]
}
 800d5a8:	bf00      	nop
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	20001f40 	.word	0x20001f40
 800d5b8:	20001f2c 	.word	0x20001f2c
 800d5bc:	20001f20 	.word	0x20001f20
 800d5c0:	20001e1c 	.word	0x20001e1c
 800d5c4:	20001e18 	.word	0x20001e18

0800d5c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10b      	bne.n	800d5f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	60fb      	str	r3, [r7, #12]
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	e7fd      	b.n	800d5ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5f0:	4b07      	ldr	r3, [pc, #28]	@ (800d610 <vTaskPlaceOnEventList+0x48>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3318      	adds	r3, #24
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff f92e 	bl	800c85a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5fe:	2101      	movs	r1, #1
 800d600:	6838      	ldr	r0, [r7, #0]
 800d602:	f000 fadf 	bl	800dbc4 <prvAddCurrentTaskToDelayedList>
}
 800d606:	bf00      	nop
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20001e18 	.word	0x20001e18

0800d614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	60fb      	str	r3, [r7, #12]
}
 800d63c:	bf00      	nop
 800d63e:	bf00      	nop
 800d640:	e7fd      	b.n	800d63e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3318      	adds	r3, #24
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff f940 	bl	800c8cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d64c:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c4 <xTaskRemoveFromEventList+0xb0>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11c      	bne.n	800d68e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	3304      	adds	r3, #4
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff f937 	bl	800c8cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d662:	2201      	movs	r2, #1
 800d664:	409a      	lsls	r2, r3
 800d666:	4b18      	ldr	r3, [pc, #96]	@ (800d6c8 <xTaskRemoveFromEventList+0xb4>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	4a16      	ldr	r2, [pc, #88]	@ (800d6c8 <xTaskRemoveFromEventList+0xb4>)
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d674:	4613      	mov	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4a13      	ldr	r2, [pc, #76]	@ (800d6cc <xTaskRemoveFromEventList+0xb8>)
 800d67e:	441a      	add	r2, r3
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	3304      	adds	r3, #4
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f7ff f8c3 	bl	800c812 <vListInsertEnd>
 800d68c:	e005      	b.n	800d69a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3318      	adds	r3, #24
 800d692:	4619      	mov	r1, r3
 800d694:	480e      	ldr	r0, [pc, #56]	@ (800d6d0 <xTaskRemoveFromEventList+0xbc>)
 800d696:	f7ff f8bc 	bl	800c812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d69e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d4 <xTaskRemoveFromEventList+0xc0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d905      	bls.n	800d6b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d8 <xTaskRemoveFromEventList+0xc4>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	e001      	b.n	800d6b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6b8:	697b      	ldr	r3, [r7, #20]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20001f40 	.word	0x20001f40
 800d6c8:	20001f20 	.word	0x20001f20
 800d6cc:	20001e1c 	.word	0x20001e1c
 800d6d0:	20001ed8 	.word	0x20001ed8
 800d6d4:	20001e18 	.word	0x20001e18
 800d6d8:	20001f2c 	.word	0x20001f2c

0800d6dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6e4:	4b06      	ldr	r3, [pc, #24]	@ (800d700 <vTaskInternalSetTimeOutState+0x24>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6ec:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <vTaskInternalSetTimeOutState+0x28>)
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	605a      	str	r2, [r3, #4]
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	20001f30 	.word	0x20001f30
 800d704:	20001f1c 	.word	0x20001f1c

0800d708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10b      	bne.n	800d730 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	613b      	str	r3, [r7, #16]
}
 800d72a:	bf00      	nop
 800d72c:	bf00      	nop
 800d72e:	e7fd      	b.n	800d72c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10b      	bne.n	800d74e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	60fb      	str	r3, [r7, #12]
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	e7fd      	b.n	800d74a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d74e:	f000 fbd3 	bl	800def8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d752:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c8 <xTaskCheckForTimeOut+0xc0>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	69ba      	ldr	r2, [r7, #24]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d102      	bne.n	800d772 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d76c:	2300      	movs	r3, #0
 800d76e:	61fb      	str	r3, [r7, #28]
 800d770:	e023      	b.n	800d7ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	4b15      	ldr	r3, [pc, #84]	@ (800d7cc <xTaskCheckForTimeOut+0xc4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d007      	beq.n	800d78e <xTaskCheckForTimeOut+0x86>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	429a      	cmp	r2, r3
 800d786:	d302      	bcc.n	800d78e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d788:	2301      	movs	r3, #1
 800d78a:	61fb      	str	r3, [r7, #28]
 800d78c:	e015      	b.n	800d7ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	429a      	cmp	r2, r3
 800d796:	d20b      	bcs.n	800d7b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff ff99 	bl	800d6dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	61fb      	str	r3, [r7, #28]
 800d7ae:	e004      	b.n	800d7ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7ba:	f000 fbcf 	bl	800df5c <vPortExitCritical>

	return xReturn;
 800d7be:	69fb      	ldr	r3, [r7, #28]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3720      	adds	r7, #32
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20001f1c 	.word	0x20001f1c
 800d7cc:	20001f30 	.word	0x20001f30

0800d7d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7d4:	4b03      	ldr	r3, [pc, #12]	@ (800d7e4 <vTaskMissedYield+0x14>)
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	601a      	str	r2, [r3, #0]
}
 800d7da:	bf00      	nop
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	20001f2c 	.word	0x20001f2c

0800d7e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7f0:	f000 f852 	bl	800d898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7f4:	4b06      	ldr	r3, [pc, #24]	@ (800d810 <prvIdleTask+0x28>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d9f9      	bls.n	800d7f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d7fc:	4b05      	ldr	r3, [pc, #20]	@ (800d814 <prvIdleTask+0x2c>)
 800d7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d80c:	e7f0      	b.n	800d7f0 <prvIdleTask+0x8>
 800d80e:	bf00      	nop
 800d810:	20001e1c 	.word	0x20001e1c
 800d814:	e000ed04 	.word	0xe000ed04

0800d818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d81e:	2300      	movs	r3, #0
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	e00c      	b.n	800d83e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4a12      	ldr	r2, [pc, #72]	@ (800d878 <prvInitialiseTaskLists+0x60>)
 800d830:	4413      	add	r3, r2
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe ffc0 	bl	800c7b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3301      	adds	r3, #1
 800d83c:	607b      	str	r3, [r7, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b06      	cmp	r3, #6
 800d842:	d9ef      	bls.n	800d824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d844:	480d      	ldr	r0, [pc, #52]	@ (800d87c <prvInitialiseTaskLists+0x64>)
 800d846:	f7fe ffb7 	bl	800c7b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d84a:	480d      	ldr	r0, [pc, #52]	@ (800d880 <prvInitialiseTaskLists+0x68>)
 800d84c:	f7fe ffb4 	bl	800c7b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d850:	480c      	ldr	r0, [pc, #48]	@ (800d884 <prvInitialiseTaskLists+0x6c>)
 800d852:	f7fe ffb1 	bl	800c7b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d856:	480c      	ldr	r0, [pc, #48]	@ (800d888 <prvInitialiseTaskLists+0x70>)
 800d858:	f7fe ffae 	bl	800c7b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d85c:	480b      	ldr	r0, [pc, #44]	@ (800d88c <prvInitialiseTaskLists+0x74>)
 800d85e:	f7fe ffab 	bl	800c7b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d862:	4b0b      	ldr	r3, [pc, #44]	@ (800d890 <prvInitialiseTaskLists+0x78>)
 800d864:	4a05      	ldr	r2, [pc, #20]	@ (800d87c <prvInitialiseTaskLists+0x64>)
 800d866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <prvInitialiseTaskLists+0x7c>)
 800d86a:	4a05      	ldr	r2, [pc, #20]	@ (800d880 <prvInitialiseTaskLists+0x68>)
 800d86c:	601a      	str	r2, [r3, #0]
}
 800d86e:	bf00      	nop
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	20001e1c 	.word	0x20001e1c
 800d87c:	20001ea8 	.word	0x20001ea8
 800d880:	20001ebc 	.word	0x20001ebc
 800d884:	20001ed8 	.word	0x20001ed8
 800d888:	20001eec 	.word	0x20001eec
 800d88c:	20001f04 	.word	0x20001f04
 800d890:	20001ed0 	.word	0x20001ed0
 800d894:	20001ed4 	.word	0x20001ed4

0800d898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d89e:	e019      	b.n	800d8d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8a0:	f000 fb2a 	bl	800def8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a4:	4b10      	ldr	r3, [pc, #64]	@ (800d8e8 <prvCheckTasksWaitingTermination+0x50>)
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff f80b 	bl	800c8cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8ec <prvCheckTasksWaitingTermination+0x54>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	4a0b      	ldr	r2, [pc, #44]	@ (800d8ec <prvCheckTasksWaitingTermination+0x54>)
 800d8be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f0 <prvCheckTasksWaitingTermination+0x58>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d8f0 <prvCheckTasksWaitingTermination+0x58>)
 800d8c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8ca:	f000 fb47 	bl	800df5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 f810 	bl	800d8f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8d4:	4b06      	ldr	r3, [pc, #24]	@ (800d8f0 <prvCheckTasksWaitingTermination+0x58>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1e1      	bne.n	800d8a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8dc:	bf00      	nop
 800d8de:	bf00      	nop
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20001eec 	.word	0x20001eec
 800d8ec:	20001f18 	.word	0x20001f18
 800d8f0:	20001f00 	.word	0x20001f00

0800d8f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fce9 	bl	800e2d8 <vPortFree>
			vPortFree( pxTCB );
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fce6 	bl	800e2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d91a:	4b0c      	ldr	r3, [pc, #48]	@ (800d94c <prvResetNextTaskUnblockTime+0x38>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d104      	bne.n	800d92e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d924:	4b0a      	ldr	r3, [pc, #40]	@ (800d950 <prvResetNextTaskUnblockTime+0x3c>)
 800d926:	f04f 32ff 	mov.w	r2, #4294967295
 800d92a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d92c:	e008      	b.n	800d940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d92e:	4b07      	ldr	r3, [pc, #28]	@ (800d94c <prvResetNextTaskUnblockTime+0x38>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	4a04      	ldr	r2, [pc, #16]	@ (800d950 <prvResetNextTaskUnblockTime+0x3c>)
 800d93e:	6013      	str	r3, [r2, #0]
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	20001ed0 	.word	0x20001ed0
 800d950:	20001f38 	.word	0x20001f38

0800d954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d95a:	4b0b      	ldr	r3, [pc, #44]	@ (800d988 <xTaskGetSchedulerState+0x34>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d102      	bne.n	800d968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d962:	2301      	movs	r3, #1
 800d964:	607b      	str	r3, [r7, #4]
 800d966:	e008      	b.n	800d97a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d968:	4b08      	ldr	r3, [pc, #32]	@ (800d98c <xTaskGetSchedulerState+0x38>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d102      	bne.n	800d976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d970:	2302      	movs	r3, #2
 800d972:	607b      	str	r3, [r7, #4]
 800d974:	e001      	b.n	800d97a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d976:	2300      	movs	r3, #0
 800d978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d97a:	687b      	ldr	r3, [r7, #4]
	}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	20001f24 	.word	0x20001f24
 800d98c:	20001f40 	.word	0x20001f40

0800d990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d99c:	2300      	movs	r3, #0
 800d99e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d05e      	beq.n	800da64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	4b31      	ldr	r3, [pc, #196]	@ (800da70 <xTaskPriorityInherit+0xe0>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d24e      	bcs.n	800da52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	db06      	blt.n	800d9ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9bc:	4b2c      	ldr	r3, [pc, #176]	@ (800da70 <xTaskPriorityInherit+0xe0>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c2:	f1c3 0207 	rsb	r2, r3, #7
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	6959      	ldr	r1, [r3, #20]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4413      	add	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4a26      	ldr	r2, [pc, #152]	@ (800da74 <xTaskPriorityInherit+0xe4>)
 800d9dc:	4413      	add	r3, r2
 800d9de:	4299      	cmp	r1, r3
 800d9e0:	d12f      	bne.n	800da42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe ff70 	bl	800c8cc <uxListRemove>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10a      	bne.n	800da08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9fc:	43da      	mvns	r2, r3
 800d9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800da78 <xTaskPriorityInherit+0xe8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4013      	ands	r3, r2
 800da04:	4a1c      	ldr	r2, [pc, #112]	@ (800da78 <xTaskPriorityInherit+0xe8>)
 800da06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da08:	4b19      	ldr	r3, [pc, #100]	@ (800da70 <xTaskPriorityInherit+0xe0>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da16:	2201      	movs	r2, #1
 800da18:	409a      	lsls	r2, r3
 800da1a:	4b17      	ldr	r3, [pc, #92]	@ (800da78 <xTaskPriorityInherit+0xe8>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4313      	orrs	r3, r2
 800da20:	4a15      	ldr	r2, [pc, #84]	@ (800da78 <xTaskPriorityInherit+0xe8>)
 800da22:	6013      	str	r3, [r2, #0]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da28:	4613      	mov	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	4a10      	ldr	r2, [pc, #64]	@ (800da74 <xTaskPriorityInherit+0xe4>)
 800da32:	441a      	add	r2, r3
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	3304      	adds	r3, #4
 800da38:	4619      	mov	r1, r3
 800da3a:	4610      	mov	r0, r2
 800da3c:	f7fe fee9 	bl	800c812 <vListInsertEnd>
 800da40:	e004      	b.n	800da4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da42:	4b0b      	ldr	r3, [pc, #44]	@ (800da70 <xTaskPriorityInherit+0xe0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	60fb      	str	r3, [r7, #12]
 800da50:	e008      	b.n	800da64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da56:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <xTaskPriorityInherit+0xe0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d201      	bcs.n	800da64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da64:	68fb      	ldr	r3, [r7, #12]
	}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20001e18 	.word	0x20001e18
 800da74:	20001e1c 	.word	0x20001e1c
 800da78:	20001f20 	.word	0x20001f20

0800da7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d079      	beq.n	800db88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10b      	bne.n	800dab4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	60fb      	str	r3, [r7, #12]
}
 800daae:	bf00      	nop
 800dab0:	bf00      	nop
 800dab2:	e7fd      	b.n	800dab0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d902      	bls.n	800dac4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	61fb      	str	r3, [r7, #28]
 800dac2:	e002      	b.n	800daca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dac8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dace:	69fa      	ldr	r2, [r7, #28]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d059      	beq.n	800db88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dad8:	697a      	ldr	r2, [r7, #20]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d154      	bne.n	800db88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dade:	4b2c      	ldr	r3, [pc, #176]	@ (800db90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d10b      	bne.n	800db00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	60bb      	str	r3, [r7, #8]
}
 800dafa:	bf00      	nop
 800dafc:	bf00      	nop
 800dafe:	e7fd      	b.n	800dafc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	69fa      	ldr	r2, [r7, #28]
 800db0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	db04      	blt.n	800db1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	f1c3 0207 	rsb	r2, r3, #7
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	6959      	ldr	r1, [r3, #20]
 800db22:	693a      	ldr	r2, [r7, #16]
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4a19      	ldr	r2, [pc, #100]	@ (800db94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db2e:	4413      	add	r3, r2
 800db30:	4299      	cmp	r1, r3
 800db32:	d129      	bne.n	800db88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3304      	adds	r3, #4
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe fec7 	bl	800c8cc <uxListRemove>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db48:	2201      	movs	r2, #1
 800db4a:	fa02 f303 	lsl.w	r3, r2, r3
 800db4e:	43da      	mvns	r2, r3
 800db50:	4b11      	ldr	r3, [pc, #68]	@ (800db98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4013      	ands	r3, r2
 800db56:	4a10      	ldr	r2, [pc, #64]	@ (800db98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800db58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5e:	2201      	movs	r2, #1
 800db60:	409a      	lsls	r2, r3
 800db62:	4b0d      	ldr	r3, [pc, #52]	@ (800db98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4313      	orrs	r3, r2
 800db68:	4a0b      	ldr	r2, [pc, #44]	@ (800db98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4a06      	ldr	r2, [pc, #24]	@ (800db94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db7a:	441a      	add	r2, r3
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	3304      	adds	r3, #4
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f7fe fe45 	bl	800c812 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db88:	bf00      	nop
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20001e18 	.word	0x20001e18
 800db94:	20001e1c 	.word	0x20001e1c
 800db98:	20001f20 	.word	0x20001f20

0800db9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dba0:	4b07      	ldr	r3, [pc, #28]	@ (800dbc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d004      	beq.n	800dbb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dba8:	4b05      	ldr	r3, [pc, #20]	@ (800dbc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dbae:	3201      	adds	r2, #1
 800dbb0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800dbb2:	4b03      	ldr	r3, [pc, #12]	@ (800dbc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
	}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	20001e18 	.word	0x20001e18

0800dbc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbce:	4b29      	ldr	r3, [pc, #164]	@ (800dc74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd4:	4b28      	ldr	r3, [pc, #160]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe fe76 	bl	800c8cc <uxListRemove>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10b      	bne.n	800dbfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbe6:	4b24      	ldr	r3, [pc, #144]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbec:	2201      	movs	r2, #1
 800dbee:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf2:	43da      	mvns	r2, r3
 800dbf4:	4b21      	ldr	r3, [pc, #132]	@ (800dc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	4a20      	ldr	r2, [pc, #128]	@ (800dc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d10a      	bne.n	800dc1c <prvAddCurrentTaskToDelayedList+0x58>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d007      	beq.n	800dc1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4619      	mov	r1, r3
 800dc14:	481a      	ldr	r0, [pc, #104]	@ (800dc80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc16:	f7fe fdfc 	bl	800c812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc1a:	e026      	b.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4413      	add	r3, r2
 800dc22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc24:	4b14      	ldr	r3, [pc, #80]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d209      	bcs.n	800dc48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc34:	4b13      	ldr	r3, [pc, #76]	@ (800dc84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	4b0f      	ldr	r3, [pc, #60]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4610      	mov	r0, r2
 800dc42:	f7fe fe0a 	bl	800c85a <vListInsert>
}
 800dc46:	e010      	b.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc48:	4b0f      	ldr	r3, [pc, #60]	@ (800dc88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f7fe fe00 	bl	800c85a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d202      	bcs.n	800dc6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc64:	4a09      	ldr	r2, [pc, #36]	@ (800dc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6013      	str	r3, [r2, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	20001f1c 	.word	0x20001f1c
 800dc78:	20001e18 	.word	0x20001e18
 800dc7c:	20001f20 	.word	0x20001f20
 800dc80:	20001f04 	.word	0x20001f04
 800dc84:	20001ed4 	.word	0x20001ed4
 800dc88:	20001ed0 	.word	0x20001ed0
 800dc8c:	20001f38 	.word	0x20001f38

0800dc90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3b04      	subs	r3, #4
 800dca0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3b04      	subs	r3, #4
 800dcae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f023 0201 	bic.w	r2, r3, #1
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcc0:	4a0c      	ldr	r2, [pc, #48]	@ (800dcf4 <pxPortInitialiseStack+0x64>)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3b14      	subs	r3, #20
 800dcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f06f 0202 	mvn.w	r2, #2
 800dcde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3b20      	subs	r3, #32
 800dce4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dce6:	68fb      	ldr	r3, [r7, #12]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3714      	adds	r7, #20
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	0800dcf9 	.word	0x0800dcf9

0800dcf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd02:	4b13      	ldr	r3, [pc, #76]	@ (800dd50 <prvTaskExitError+0x58>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0a:	d00b      	beq.n	800dd24 <prvTaskExitError+0x2c>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	60fb      	str	r3, [r7, #12]
}
 800dd1e:	bf00      	nop
 800dd20:	bf00      	nop
 800dd22:	e7fd      	b.n	800dd20 <prvTaskExitError+0x28>
	__asm volatile
 800dd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	60bb      	str	r3, [r7, #8]
}
 800dd36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd38:	bf00      	nop
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d0fc      	beq.n	800dd3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	2000000c 	.word	0x2000000c
	...

0800dd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd60:	4b07      	ldr	r3, [pc, #28]	@ (800dd80 <pxCurrentTCBConst2>)
 800dd62:	6819      	ldr	r1, [r3, #0]
 800dd64:	6808      	ldr	r0, [r1, #0]
 800dd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6a:	f380 8809 	msr	PSP, r0
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8811 	msr	BASEPRI, r0
 800dd7a:	4770      	bx	lr
 800dd7c:	f3af 8000 	nop.w

0800dd80 <pxCurrentTCBConst2>:
 800dd80:	20001e18 	.word	0x20001e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop

0800dd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd88:	4808      	ldr	r0, [pc, #32]	@ (800ddac <prvPortStartFirstTask+0x24>)
 800dd8a:	6800      	ldr	r0, [r0, #0]
 800dd8c:	6800      	ldr	r0, [r0, #0]
 800dd8e:	f380 8808 	msr	MSP, r0
 800dd92:	f04f 0000 	mov.w	r0, #0
 800dd96:	f380 8814 	msr	CONTROL, r0
 800dd9a:	b662      	cpsie	i
 800dd9c:	b661      	cpsie	f
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	df00      	svc	0
 800dda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddaa:	bf00      	nop
 800ddac:	e000ed08 	.word	0xe000ed08

0800ddb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddb6:	4b47      	ldr	r3, [pc, #284]	@ (800ded4 <xPortStartScheduler+0x124>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a47      	ldr	r2, [pc, #284]	@ (800ded8 <xPortStartScheduler+0x128>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10b      	bne.n	800ddd8 <xPortStartScheduler+0x28>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	613b      	str	r3, [r7, #16]
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	e7fd      	b.n	800ddd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddd8:	4b3e      	ldr	r3, [pc, #248]	@ (800ded4 <xPortStartScheduler+0x124>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a3f      	ldr	r2, [pc, #252]	@ (800dedc <xPortStartScheduler+0x12c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d10b      	bne.n	800ddfa <xPortStartScheduler+0x4a>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde6:	f383 8811 	msr	BASEPRI, r3
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	f3bf 8f4f 	dsb	sy
 800ddf2:	60fb      	str	r3, [r7, #12]
}
 800ddf4:	bf00      	nop
 800ddf6:	bf00      	nop
 800ddf8:	e7fd      	b.n	800ddf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddfa:	4b39      	ldr	r3, [pc, #228]	@ (800dee0 <xPortStartScheduler+0x130>)
 800ddfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	b2db      	uxtb	r3, r3
 800de04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	22ff      	movs	r2, #255	@ 0xff
 800de0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	b2db      	uxtb	r3, r3
 800de12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de14:	78fb      	ldrb	r3, [r7, #3]
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	4b31      	ldr	r3, [pc, #196]	@ (800dee4 <xPortStartScheduler+0x134>)
 800de20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de22:	4b31      	ldr	r3, [pc, #196]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de24:	2207      	movs	r2, #7
 800de26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de28:	e009      	b.n	800de3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de2a:	4b2f      	ldr	r3, [pc, #188]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3b01      	subs	r3, #1
 800de30:	4a2d      	ldr	r2, [pc, #180]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de34:	78fb      	ldrb	r3, [r7, #3]
 800de36:	b2db      	uxtb	r3, r3
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de3e:	78fb      	ldrb	r3, [r7, #3]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de46:	2b80      	cmp	r3, #128	@ 0x80
 800de48:	d0ef      	beq.n	800de2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de4a:	4b27      	ldr	r3, [pc, #156]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f1c3 0307 	rsb	r3, r3, #7
 800de52:	2b04      	cmp	r3, #4
 800de54:	d00b      	beq.n	800de6e <xPortStartScheduler+0xbe>
	__asm volatile
 800de56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	60bb      	str	r3, [r7, #8]
}
 800de68:	bf00      	nop
 800de6a:	bf00      	nop
 800de6c:	e7fd      	b.n	800de6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de6e:	4b1e      	ldr	r3, [pc, #120]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	021b      	lsls	r3, r3, #8
 800de74:	4a1c      	ldr	r2, [pc, #112]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de78:	4b1b      	ldr	r3, [pc, #108]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de80:	4a19      	ldr	r2, [pc, #100]	@ (800dee8 <xPortStartScheduler+0x138>)
 800de82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	b2da      	uxtb	r2, r3
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de8c:	4b17      	ldr	r3, [pc, #92]	@ (800deec <xPortStartScheduler+0x13c>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a16      	ldr	r2, [pc, #88]	@ (800deec <xPortStartScheduler+0x13c>)
 800de92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800de96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de98:	4b14      	ldr	r3, [pc, #80]	@ (800deec <xPortStartScheduler+0x13c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a13      	ldr	r2, [pc, #76]	@ (800deec <xPortStartScheduler+0x13c>)
 800de9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dea4:	f000 f8da 	bl	800e05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dea8:	4b11      	ldr	r3, [pc, #68]	@ (800def0 <xPortStartScheduler+0x140>)
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800deae:	f000 f8f9 	bl	800e0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deb2:	4b10      	ldr	r3, [pc, #64]	@ (800def4 <xPortStartScheduler+0x144>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a0f      	ldr	r2, [pc, #60]	@ (800def4 <xPortStartScheduler+0x144>)
 800deb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800debc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800debe:	f7ff ff63 	bl	800dd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dec2:	f7ff fb25 	bl	800d510 <vTaskSwitchContext>
	prvTaskExitError();
 800dec6:	f7ff ff17 	bl	800dcf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	e000ed00 	.word	0xe000ed00
 800ded8:	410fc271 	.word	0x410fc271
 800dedc:	410fc270 	.word	0x410fc270
 800dee0:	e000e400 	.word	0xe000e400
 800dee4:	20001f44 	.word	0x20001f44
 800dee8:	20001f48 	.word	0x20001f48
 800deec:	e000ed20 	.word	0xe000ed20
 800def0:	2000000c 	.word	0x2000000c
 800def4:	e000ef34 	.word	0xe000ef34

0800def8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	607b      	str	r3, [r7, #4]
}
 800df10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df12:	4b10      	ldr	r3, [pc, #64]	@ (800df54 <vPortEnterCritical+0x5c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	4a0e      	ldr	r2, [pc, #56]	@ (800df54 <vPortEnterCritical+0x5c>)
 800df1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df1c:	4b0d      	ldr	r3, [pc, #52]	@ (800df54 <vPortEnterCritical+0x5c>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d110      	bne.n	800df46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df24:	4b0c      	ldr	r3, [pc, #48]	@ (800df58 <vPortEnterCritical+0x60>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00b      	beq.n	800df46 <vPortEnterCritical+0x4e>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	603b      	str	r3, [r7, #0]
}
 800df40:	bf00      	nop
 800df42:	bf00      	nop
 800df44:	e7fd      	b.n	800df42 <vPortEnterCritical+0x4a>
	}
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	2000000c 	.word	0x2000000c
 800df58:	e000ed04 	.word	0xe000ed04

0800df5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df62:	4b12      	ldr	r3, [pc, #72]	@ (800dfac <vPortExitCritical+0x50>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10b      	bne.n	800df82 <vPortExitCritical+0x26>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	607b      	str	r3, [r7, #4]
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df82:	4b0a      	ldr	r3, [pc, #40]	@ (800dfac <vPortExitCritical+0x50>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3b01      	subs	r3, #1
 800df88:	4a08      	ldr	r2, [pc, #32]	@ (800dfac <vPortExitCritical+0x50>)
 800df8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df8c:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <vPortExitCritical+0x50>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d105      	bne.n	800dfa0 <vPortExitCritical+0x44>
 800df94:	2300      	movs	r3, #0
 800df96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	f383 8811 	msr	BASEPRI, r3
}
 800df9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	2000000c 	.word	0x2000000c

0800dfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfb0:	f3ef 8009 	mrs	r0, PSP
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4b15      	ldr	r3, [pc, #84]	@ (800e010 <pxCurrentTCBConst>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	f01e 0f10 	tst.w	lr, #16
 800dfc0:	bf08      	it	eq
 800dfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	6010      	str	r0, [r2, #0]
 800dfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dfd4:	f380 8811 	msr	BASEPRI, r0
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f7ff fa96 	bl	800d510 <vTaskSwitchContext>
 800dfe4:	f04f 0000 	mov.w	r0, #0
 800dfe8:	f380 8811 	msr	BASEPRI, r0
 800dfec:	bc09      	pop	{r0, r3}
 800dfee:	6819      	ldr	r1, [r3, #0]
 800dff0:	6808      	ldr	r0, [r1, #0]
 800dff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff6:	f01e 0f10 	tst.w	lr, #16
 800dffa:	bf08      	it	eq
 800dffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e000:	f380 8809 	msr	PSP, r0
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w

0800e010 <pxCurrentTCBConst>:
 800e010:	20001e18 	.word	0x20001e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop

0800e018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	607b      	str	r3, [r7, #4]
}
 800e030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e032:	f7ff f9b3 	bl	800d39c <xTaskIncrementTick>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e03c:	4b06      	ldr	r3, [pc, #24]	@ (800e058 <SysTick_Handler+0x40>)
 800e03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	2300      	movs	r3, #0
 800e046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f383 8811 	msr	BASEPRI, r3
}
 800e04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	e000ed04 	.word	0xe000ed04

0800e05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e05c:	b480      	push	{r7}
 800e05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e060:	4b0b      	ldr	r3, [pc, #44]	@ (800e090 <vPortSetupTimerInterrupt+0x34>)
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e066:	4b0b      	ldr	r3, [pc, #44]	@ (800e094 <vPortSetupTimerInterrupt+0x38>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e06c:	4b0a      	ldr	r3, [pc, #40]	@ (800e098 <vPortSetupTimerInterrupt+0x3c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a0a      	ldr	r2, [pc, #40]	@ (800e09c <vPortSetupTimerInterrupt+0x40>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	099b      	lsrs	r3, r3, #6
 800e078:	4a09      	ldr	r2, [pc, #36]	@ (800e0a0 <vPortSetupTimerInterrupt+0x44>)
 800e07a:	3b01      	subs	r3, #1
 800e07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e07e:	4b04      	ldr	r3, [pc, #16]	@ (800e090 <vPortSetupTimerInterrupt+0x34>)
 800e080:	2207      	movs	r2, #7
 800e082:	601a      	str	r2, [r3, #0]
}
 800e084:	bf00      	nop
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	e000e010 	.word	0xe000e010
 800e094:	e000e018 	.word	0xe000e018
 800e098:	20000000 	.word	0x20000000
 800e09c:	10624dd3 	.word	0x10624dd3
 800e0a0:	e000e014 	.word	0xe000e014

0800e0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e0b4 <vPortEnableVFP+0x10>
 800e0a8:	6801      	ldr	r1, [r0, #0]
 800e0aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e0ae:	6001      	str	r1, [r0, #0]
 800e0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0b2:	bf00      	nop
 800e0b4:	e000ed88 	.word	0xe000ed88

0800e0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0be:	f3ef 8305 	mrs	r3, IPSR
 800e0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b0f      	cmp	r3, #15
 800e0c8:	d915      	bls.n	800e0f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0ca:	4a18      	ldr	r2, [pc, #96]	@ (800e12c <vPortValidateInterruptPriority+0x74>)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0d4:	4b16      	ldr	r3, [pc, #88]	@ (800e130 <vPortValidateInterruptPriority+0x78>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	7afa      	ldrb	r2, [r7, #11]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d20b      	bcs.n	800e0f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	607b      	str	r3, [r7, #4]
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	e7fd      	b.n	800e0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e134 <vPortValidateInterruptPriority+0x7c>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e138 <vPortValidateInterruptPriority+0x80>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	429a      	cmp	r2, r3
 800e104:	d90b      	bls.n	800e11e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	603b      	str	r3, [r7, #0]
}
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	e7fd      	b.n	800e11a <vPortValidateInterruptPriority+0x62>
	}
 800e11e:	bf00      	nop
 800e120:	3714      	adds	r7, #20
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	e000e3f0 	.word	0xe000e3f0
 800e130:	20001f44 	.word	0x20001f44
 800e134:	e000ed0c 	.word	0xe000ed0c
 800e138:	20001f48 	.word	0x20001f48

0800e13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08a      	sub	sp, #40	@ 0x28
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e144:	2300      	movs	r3, #0
 800e146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e148:	f7ff f87c 	bl	800d244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e14c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2c0 <pvPortMalloc+0x184>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e154:	f000 f924 	bl	800e3a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e158:	4b5a      	ldr	r3, [pc, #360]	@ (800e2c4 <pvPortMalloc+0x188>)
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4013      	ands	r3, r2
 800e160:	2b00      	cmp	r3, #0
 800e162:	f040 8095 	bne.w	800e290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01e      	beq.n	800e1aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e16c:	2208      	movs	r2, #8
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4413      	add	r3, r2
 800e172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f003 0307 	and.w	r3, r3, #7
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d015      	beq.n	800e1aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f023 0307 	bic.w	r3, r3, #7
 800e184:	3308      	adds	r3, #8
 800e186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <pvPortMalloc+0x6e>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	617b      	str	r3, [r7, #20]
}
 800e1a4:	bf00      	nop
 800e1a6:	bf00      	nop
 800e1a8:	e7fd      	b.n	800e1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d06f      	beq.n	800e290 <pvPortMalloc+0x154>
 800e1b0:	4b45      	ldr	r3, [pc, #276]	@ (800e2c8 <pvPortMalloc+0x18c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d86a      	bhi.n	800e290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1ba:	4b44      	ldr	r3, [pc, #272]	@ (800e2cc <pvPortMalloc+0x190>)
 800e1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1be:	4b43      	ldr	r3, [pc, #268]	@ (800e2cc <pvPortMalloc+0x190>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1c4:	e004      	b.n	800e1d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d903      	bls.n	800e1e2 <pvPortMalloc+0xa6>
 800e1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1f1      	bne.n	800e1c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1e2:	4b37      	ldr	r3, [pc, #220]	@ (800e2c0 <pvPortMalloc+0x184>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d051      	beq.n	800e290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2208      	movs	r2, #8
 800e1f2:	4413      	add	r3, r2
 800e1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	685a      	ldr	r2, [r3, #4]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	1ad2      	subs	r2, r2, r3
 800e206:	2308      	movs	r3, #8
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d920      	bls.n	800e250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4413      	add	r3, r2
 800e214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	f003 0307 	and.w	r3, r3, #7
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <pvPortMalloc+0xfc>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	613b      	str	r3, [r7, #16]
}
 800e232:	bf00      	nop
 800e234:	bf00      	nop
 800e236:	e7fd      	b.n	800e234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	1ad2      	subs	r2, r2, r3
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e24a:	69b8      	ldr	r0, [r7, #24]
 800e24c:	f000 f90a 	bl	800e464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e250:	4b1d      	ldr	r3, [pc, #116]	@ (800e2c8 <pvPortMalloc+0x18c>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	4a1b      	ldr	r2, [pc, #108]	@ (800e2c8 <pvPortMalloc+0x18c>)
 800e25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e25e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2c8 <pvPortMalloc+0x18c>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	4b1b      	ldr	r3, [pc, #108]	@ (800e2d0 <pvPortMalloc+0x194>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	429a      	cmp	r2, r3
 800e268:	d203      	bcs.n	800e272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e26a:	4b17      	ldr	r3, [pc, #92]	@ (800e2c8 <pvPortMalloc+0x18c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a18      	ldr	r2, [pc, #96]	@ (800e2d0 <pvPortMalloc+0x194>)
 800e270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	4b13      	ldr	r3, [pc, #76]	@ (800e2c4 <pvPortMalloc+0x188>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	431a      	orrs	r2, r3
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e286:	4b13      	ldr	r3, [pc, #76]	@ (800e2d4 <pvPortMalloc+0x198>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3301      	adds	r3, #1
 800e28c:	4a11      	ldr	r2, [pc, #68]	@ (800e2d4 <pvPortMalloc+0x198>)
 800e28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e290:	f7fe ffe6 	bl	800d260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	f003 0307 	and.w	r3, r3, #7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00b      	beq.n	800e2b6 <pvPortMalloc+0x17a>
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	60fb      	str	r3, [r7, #12]
}
 800e2b0:	bf00      	nop
 800e2b2:	bf00      	nop
 800e2b4:	e7fd      	b.n	800e2b2 <pvPortMalloc+0x176>
	return pvReturn;
 800e2b6:	69fb      	ldr	r3, [r7, #28]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3728      	adds	r7, #40	@ 0x28
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20006d74 	.word	0x20006d74
 800e2c4:	20006d88 	.word	0x20006d88
 800e2c8:	20006d78 	.word	0x20006d78
 800e2cc:	20006d6c 	.word	0x20006d6c
 800e2d0:	20006d7c 	.word	0x20006d7c
 800e2d4:	20006d80 	.word	0x20006d80

0800e2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d04f      	beq.n	800e38a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2ea:	2308      	movs	r3, #8
 800e2ec:	425b      	negs	r3, r3
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	4b25      	ldr	r3, [pc, #148]	@ (800e394 <vPortFree+0xbc>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4013      	ands	r3, r2
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10b      	bne.n	800e31e <vPortFree+0x46>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	60fb      	str	r3, [r7, #12]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00b      	beq.n	800e33e <vPortFree+0x66>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60bb      	str	r3, [r7, #8]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	4b14      	ldr	r3, [pc, #80]	@ (800e394 <vPortFree+0xbc>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4013      	ands	r3, r2
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d01e      	beq.n	800e38a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d11a      	bne.n	800e38a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	685a      	ldr	r2, [r3, #4]
 800e358:	4b0e      	ldr	r3, [pc, #56]	@ (800e394 <vPortFree+0xbc>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	43db      	mvns	r3, r3
 800e35e:	401a      	ands	r2, r3
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e364:	f7fe ff6e 	bl	800d244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	685a      	ldr	r2, [r3, #4]
 800e36c:	4b0a      	ldr	r3, [pc, #40]	@ (800e398 <vPortFree+0xc0>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4413      	add	r3, r2
 800e372:	4a09      	ldr	r2, [pc, #36]	@ (800e398 <vPortFree+0xc0>)
 800e374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e376:	6938      	ldr	r0, [r7, #16]
 800e378:	f000 f874 	bl	800e464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e37c:	4b07      	ldr	r3, [pc, #28]	@ (800e39c <vPortFree+0xc4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	4a06      	ldr	r2, [pc, #24]	@ (800e39c <vPortFree+0xc4>)
 800e384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e386:	f7fe ff6b 	bl	800d260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e38a:	bf00      	nop
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20006d88 	.word	0x20006d88
 800e398:	20006d78 	.word	0x20006d78
 800e39c:	20006d84 	.word	0x20006d84

0800e3a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800e3aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3ac:	4b27      	ldr	r3, [pc, #156]	@ (800e44c <prvHeapInit+0xac>)
 800e3ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f003 0307 	and.w	r3, r3, #7
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00c      	beq.n	800e3d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3307      	adds	r3, #7
 800e3be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f023 0307 	bic.w	r3, r3, #7
 800e3c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e44c <prvHeapInit+0xac>)
 800e3d0:	4413      	add	r3, r2
 800e3d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e450 <prvHeapInit+0xb0>)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3de:	4b1c      	ldr	r3, [pc, #112]	@ (800e450 <prvHeapInit+0xb0>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3ec:	2208      	movs	r2, #8
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	1a9b      	subs	r3, r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f023 0307 	bic.w	r3, r3, #7
 800e3fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	4a15      	ldr	r2, [pc, #84]	@ (800e454 <prvHeapInit+0xb4>)
 800e400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e402:	4b14      	ldr	r3, [pc, #80]	@ (800e454 <prvHeapInit+0xb4>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2200      	movs	r2, #0
 800e408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e40a:	4b12      	ldr	r3, [pc, #72]	@ (800e454 <prvHeapInit+0xb4>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2200      	movs	r2, #0
 800e410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	1ad2      	subs	r2, r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e420:	4b0c      	ldr	r3, [pc, #48]	@ (800e454 <prvHeapInit+0xb4>)
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	4a0a      	ldr	r2, [pc, #40]	@ (800e458 <prvHeapInit+0xb8>)
 800e42e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	4a09      	ldr	r2, [pc, #36]	@ (800e45c <prvHeapInit+0xbc>)
 800e436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e438:	4b09      	ldr	r3, [pc, #36]	@ (800e460 <prvHeapInit+0xc0>)
 800e43a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e43e:	601a      	str	r2, [r3, #0]
}
 800e440:	bf00      	nop
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	20001f4c 	.word	0x20001f4c
 800e450:	20006d6c 	.word	0x20006d6c
 800e454:	20006d74 	.word	0x20006d74
 800e458:	20006d7c 	.word	0x20006d7c
 800e45c:	20006d78 	.word	0x20006d78
 800e460:	20006d88 	.word	0x20006d88

0800e464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e46c:	4b28      	ldr	r3, [pc, #160]	@ (800e510 <prvInsertBlockIntoFreeList+0xac>)
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	e002      	b.n	800e478 <prvInsertBlockIntoFreeList+0x14>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d8f7      	bhi.n	800e472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	68ba      	ldr	r2, [r7, #8]
 800e48c:	4413      	add	r3, r2
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d108      	bne.n	800e4a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	441a      	add	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	441a      	add	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d118      	bne.n	800e4ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	4b15      	ldr	r3, [pc, #84]	@ (800e514 <prvInsertBlockIntoFreeList+0xb0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d00d      	beq.n	800e4e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685a      	ldr	r2, [r3, #4]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	441a      	add	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	e008      	b.n	800e4f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e514 <prvInsertBlockIntoFreeList+0xb0>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	601a      	str	r2, [r3, #0]
 800e4ea:	e003      	b.n	800e4f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d002      	beq.n	800e502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e502:	bf00      	nop
 800e504:	3714      	adds	r7, #20
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	20006d6c 	.word	0x20006d6c
 800e514:	20006d74 	.word	0x20006d74

0800e518 <__cvt>:
 800e518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e51c:	ec57 6b10 	vmov	r6, r7, d0
 800e520:	2f00      	cmp	r7, #0
 800e522:	460c      	mov	r4, r1
 800e524:	4619      	mov	r1, r3
 800e526:	463b      	mov	r3, r7
 800e528:	bfbb      	ittet	lt
 800e52a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e52e:	461f      	movlt	r7, r3
 800e530:	2300      	movge	r3, #0
 800e532:	232d      	movlt	r3, #45	@ 0x2d
 800e534:	700b      	strb	r3, [r1, #0]
 800e536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e538:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e53c:	4691      	mov	r9, r2
 800e53e:	f023 0820 	bic.w	r8, r3, #32
 800e542:	bfbc      	itt	lt
 800e544:	4632      	movlt	r2, r6
 800e546:	4616      	movlt	r6, r2
 800e548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e54c:	d005      	beq.n	800e55a <__cvt+0x42>
 800e54e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e552:	d100      	bne.n	800e556 <__cvt+0x3e>
 800e554:	3401      	adds	r4, #1
 800e556:	2102      	movs	r1, #2
 800e558:	e000      	b.n	800e55c <__cvt+0x44>
 800e55a:	2103      	movs	r1, #3
 800e55c:	ab03      	add	r3, sp, #12
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	ab02      	add	r3, sp, #8
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	ec47 6b10 	vmov	d0, r6, r7
 800e568:	4653      	mov	r3, sl
 800e56a:	4622      	mov	r2, r4
 800e56c:	f000 ff80 	bl	800f470 <_dtoa_r>
 800e570:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e574:	4605      	mov	r5, r0
 800e576:	d119      	bne.n	800e5ac <__cvt+0x94>
 800e578:	f019 0f01 	tst.w	r9, #1
 800e57c:	d00e      	beq.n	800e59c <__cvt+0x84>
 800e57e:	eb00 0904 	add.w	r9, r0, r4
 800e582:	2200      	movs	r2, #0
 800e584:	2300      	movs	r3, #0
 800e586:	4630      	mov	r0, r6
 800e588:	4639      	mov	r1, r7
 800e58a:	f7f2 fac5 	bl	8000b18 <__aeabi_dcmpeq>
 800e58e:	b108      	cbz	r0, 800e594 <__cvt+0x7c>
 800e590:	f8cd 900c 	str.w	r9, [sp, #12]
 800e594:	2230      	movs	r2, #48	@ 0x30
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	454b      	cmp	r3, r9
 800e59a:	d31e      	bcc.n	800e5da <__cvt+0xc2>
 800e59c:	9b03      	ldr	r3, [sp, #12]
 800e59e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5a0:	1b5b      	subs	r3, r3, r5
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	6013      	str	r3, [r2, #0]
 800e5a6:	b004      	add	sp, #16
 800e5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5b0:	eb00 0904 	add.w	r9, r0, r4
 800e5b4:	d1e5      	bne.n	800e582 <__cvt+0x6a>
 800e5b6:	7803      	ldrb	r3, [r0, #0]
 800e5b8:	2b30      	cmp	r3, #48	@ 0x30
 800e5ba:	d10a      	bne.n	800e5d2 <__cvt+0xba>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2300      	movs	r3, #0
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	f7f2 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800e5c8:	b918      	cbnz	r0, 800e5d2 <__cvt+0xba>
 800e5ca:	f1c4 0401 	rsb	r4, r4, #1
 800e5ce:	f8ca 4000 	str.w	r4, [sl]
 800e5d2:	f8da 3000 	ldr.w	r3, [sl]
 800e5d6:	4499      	add	r9, r3
 800e5d8:	e7d3      	b.n	800e582 <__cvt+0x6a>
 800e5da:	1c59      	adds	r1, r3, #1
 800e5dc:	9103      	str	r1, [sp, #12]
 800e5de:	701a      	strb	r2, [r3, #0]
 800e5e0:	e7d9      	b.n	800e596 <__cvt+0x7e>

0800e5e2 <__exponent>:
 800e5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5e4:	2900      	cmp	r1, #0
 800e5e6:	bfba      	itte	lt
 800e5e8:	4249      	neglt	r1, r1
 800e5ea:	232d      	movlt	r3, #45	@ 0x2d
 800e5ec:	232b      	movge	r3, #43	@ 0x2b
 800e5ee:	2909      	cmp	r1, #9
 800e5f0:	7002      	strb	r2, [r0, #0]
 800e5f2:	7043      	strb	r3, [r0, #1]
 800e5f4:	dd29      	ble.n	800e64a <__exponent+0x68>
 800e5f6:	f10d 0307 	add.w	r3, sp, #7
 800e5fa:	461d      	mov	r5, r3
 800e5fc:	270a      	movs	r7, #10
 800e5fe:	461a      	mov	r2, r3
 800e600:	fbb1 f6f7 	udiv	r6, r1, r7
 800e604:	fb07 1416 	mls	r4, r7, r6, r1
 800e608:	3430      	adds	r4, #48	@ 0x30
 800e60a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e60e:	460c      	mov	r4, r1
 800e610:	2c63      	cmp	r4, #99	@ 0x63
 800e612:	f103 33ff 	add.w	r3, r3, #4294967295
 800e616:	4631      	mov	r1, r6
 800e618:	dcf1      	bgt.n	800e5fe <__exponent+0x1c>
 800e61a:	3130      	adds	r1, #48	@ 0x30
 800e61c:	1e94      	subs	r4, r2, #2
 800e61e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e622:	1c41      	adds	r1, r0, #1
 800e624:	4623      	mov	r3, r4
 800e626:	42ab      	cmp	r3, r5
 800e628:	d30a      	bcc.n	800e640 <__exponent+0x5e>
 800e62a:	f10d 0309 	add.w	r3, sp, #9
 800e62e:	1a9b      	subs	r3, r3, r2
 800e630:	42ac      	cmp	r4, r5
 800e632:	bf88      	it	hi
 800e634:	2300      	movhi	r3, #0
 800e636:	3302      	adds	r3, #2
 800e638:	4403      	add	r3, r0
 800e63a:	1a18      	subs	r0, r3, r0
 800e63c:	b003      	add	sp, #12
 800e63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e640:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e644:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e648:	e7ed      	b.n	800e626 <__exponent+0x44>
 800e64a:	2330      	movs	r3, #48	@ 0x30
 800e64c:	3130      	adds	r1, #48	@ 0x30
 800e64e:	7083      	strb	r3, [r0, #2]
 800e650:	70c1      	strb	r1, [r0, #3]
 800e652:	1d03      	adds	r3, r0, #4
 800e654:	e7f1      	b.n	800e63a <__exponent+0x58>
	...

0800e658 <_printf_float>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	b08d      	sub	sp, #52	@ 0x34
 800e65e:	460c      	mov	r4, r1
 800e660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e664:	4616      	mov	r6, r2
 800e666:	461f      	mov	r7, r3
 800e668:	4605      	mov	r5, r0
 800e66a:	f000 fdf3 	bl	800f254 <_localeconv_r>
 800e66e:	6803      	ldr	r3, [r0, #0]
 800e670:	9304      	str	r3, [sp, #16]
 800e672:	4618      	mov	r0, r3
 800e674:	f7f1 fe24 	bl	80002c0 <strlen>
 800e678:	2300      	movs	r3, #0
 800e67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e67c:	f8d8 3000 	ldr.w	r3, [r8]
 800e680:	9005      	str	r0, [sp, #20]
 800e682:	3307      	adds	r3, #7
 800e684:	f023 0307 	bic.w	r3, r3, #7
 800e688:	f103 0208 	add.w	r2, r3, #8
 800e68c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e690:	f8d4 b000 	ldr.w	fp, [r4]
 800e694:	f8c8 2000 	str.w	r2, [r8]
 800e698:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e69c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e6a0:	9307      	str	r3, [sp, #28]
 800e6a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e6aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6ae:	4b9c      	ldr	r3, [pc, #624]	@ (800e920 <_printf_float+0x2c8>)
 800e6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b4:	f7f2 fa62 	bl	8000b7c <__aeabi_dcmpun>
 800e6b8:	bb70      	cbnz	r0, 800e718 <_printf_float+0xc0>
 800e6ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6be:	4b98      	ldr	r3, [pc, #608]	@ (800e920 <_printf_float+0x2c8>)
 800e6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c4:	f7f2 fa3c 	bl	8000b40 <__aeabi_dcmple>
 800e6c8:	bb30      	cbnz	r0, 800e718 <_printf_float+0xc0>
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	4649      	mov	r1, r9
 800e6d2:	f7f2 fa2b 	bl	8000b2c <__aeabi_dcmplt>
 800e6d6:	b110      	cbz	r0, 800e6de <_printf_float+0x86>
 800e6d8:	232d      	movs	r3, #45	@ 0x2d
 800e6da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6de:	4a91      	ldr	r2, [pc, #580]	@ (800e924 <_printf_float+0x2cc>)
 800e6e0:	4b91      	ldr	r3, [pc, #580]	@ (800e928 <_printf_float+0x2d0>)
 800e6e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6e6:	bf94      	ite	ls
 800e6e8:	4690      	movls	r8, r2
 800e6ea:	4698      	movhi	r8, r3
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	6123      	str	r3, [r4, #16]
 800e6f0:	f02b 0304 	bic.w	r3, fp, #4
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	f04f 0900 	mov.w	r9, #0
 800e6fa:	9700      	str	r7, [sp, #0]
 800e6fc:	4633      	mov	r3, r6
 800e6fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e700:	4621      	mov	r1, r4
 800e702:	4628      	mov	r0, r5
 800e704:	f000 f9d2 	bl	800eaac <_printf_common>
 800e708:	3001      	adds	r0, #1
 800e70a:	f040 808d 	bne.w	800e828 <_printf_float+0x1d0>
 800e70e:	f04f 30ff 	mov.w	r0, #4294967295
 800e712:	b00d      	add	sp, #52	@ 0x34
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	4642      	mov	r2, r8
 800e71a:	464b      	mov	r3, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	4649      	mov	r1, r9
 800e720:	f7f2 fa2c 	bl	8000b7c <__aeabi_dcmpun>
 800e724:	b140      	cbz	r0, 800e738 <_printf_float+0xe0>
 800e726:	464b      	mov	r3, r9
 800e728:	2b00      	cmp	r3, #0
 800e72a:	bfbc      	itt	lt
 800e72c:	232d      	movlt	r3, #45	@ 0x2d
 800e72e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e732:	4a7e      	ldr	r2, [pc, #504]	@ (800e92c <_printf_float+0x2d4>)
 800e734:	4b7e      	ldr	r3, [pc, #504]	@ (800e930 <_printf_float+0x2d8>)
 800e736:	e7d4      	b.n	800e6e2 <_printf_float+0x8a>
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e73e:	9206      	str	r2, [sp, #24]
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	d13b      	bne.n	800e7bc <_printf_float+0x164>
 800e744:	2306      	movs	r3, #6
 800e746:	6063      	str	r3, [r4, #4]
 800e748:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e74c:	2300      	movs	r3, #0
 800e74e:	6022      	str	r2, [r4, #0]
 800e750:	9303      	str	r3, [sp, #12]
 800e752:	ab0a      	add	r3, sp, #40	@ 0x28
 800e754:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e758:	ab09      	add	r3, sp, #36	@ 0x24
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	6861      	ldr	r1, [r4, #4]
 800e75e:	ec49 8b10 	vmov	d0, r8, r9
 800e762:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e766:	4628      	mov	r0, r5
 800e768:	f7ff fed6 	bl	800e518 <__cvt>
 800e76c:	9b06      	ldr	r3, [sp, #24]
 800e76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e770:	2b47      	cmp	r3, #71	@ 0x47
 800e772:	4680      	mov	r8, r0
 800e774:	d129      	bne.n	800e7ca <_printf_float+0x172>
 800e776:	1cc8      	adds	r0, r1, #3
 800e778:	db02      	blt.n	800e780 <_printf_float+0x128>
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	4299      	cmp	r1, r3
 800e77e:	dd41      	ble.n	800e804 <_printf_float+0x1ac>
 800e780:	f1aa 0a02 	sub.w	sl, sl, #2
 800e784:	fa5f fa8a 	uxtb.w	sl, sl
 800e788:	3901      	subs	r1, #1
 800e78a:	4652      	mov	r2, sl
 800e78c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e790:	9109      	str	r1, [sp, #36]	@ 0x24
 800e792:	f7ff ff26 	bl	800e5e2 <__exponent>
 800e796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e798:	1813      	adds	r3, r2, r0
 800e79a:	2a01      	cmp	r2, #1
 800e79c:	4681      	mov	r9, r0
 800e79e:	6123      	str	r3, [r4, #16]
 800e7a0:	dc02      	bgt.n	800e7a8 <_printf_float+0x150>
 800e7a2:	6822      	ldr	r2, [r4, #0]
 800e7a4:	07d2      	lsls	r2, r2, #31
 800e7a6:	d501      	bpl.n	800e7ac <_printf_float+0x154>
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	6123      	str	r3, [r4, #16]
 800e7ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0a2      	beq.n	800e6fa <_printf_float+0xa2>
 800e7b4:	232d      	movs	r3, #45	@ 0x2d
 800e7b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ba:	e79e      	b.n	800e6fa <_printf_float+0xa2>
 800e7bc:	9a06      	ldr	r2, [sp, #24]
 800e7be:	2a47      	cmp	r2, #71	@ 0x47
 800e7c0:	d1c2      	bne.n	800e748 <_printf_float+0xf0>
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1c0      	bne.n	800e748 <_printf_float+0xf0>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e7bd      	b.n	800e746 <_printf_float+0xee>
 800e7ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7ce:	d9db      	bls.n	800e788 <_printf_float+0x130>
 800e7d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e7d4:	d118      	bne.n	800e808 <_printf_float+0x1b0>
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	6863      	ldr	r3, [r4, #4]
 800e7da:	dd0b      	ble.n	800e7f4 <_printf_float+0x19c>
 800e7dc:	6121      	str	r1, [r4, #16]
 800e7de:	b913      	cbnz	r3, 800e7e6 <_printf_float+0x18e>
 800e7e0:	6822      	ldr	r2, [r4, #0]
 800e7e2:	07d0      	lsls	r0, r2, #31
 800e7e4:	d502      	bpl.n	800e7ec <_printf_float+0x194>
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	440b      	add	r3, r1
 800e7ea:	6123      	str	r3, [r4, #16]
 800e7ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e7ee:	f04f 0900 	mov.w	r9, #0
 800e7f2:	e7db      	b.n	800e7ac <_printf_float+0x154>
 800e7f4:	b913      	cbnz	r3, 800e7fc <_printf_float+0x1a4>
 800e7f6:	6822      	ldr	r2, [r4, #0]
 800e7f8:	07d2      	lsls	r2, r2, #31
 800e7fa:	d501      	bpl.n	800e800 <_printf_float+0x1a8>
 800e7fc:	3302      	adds	r3, #2
 800e7fe:	e7f4      	b.n	800e7ea <_printf_float+0x192>
 800e800:	2301      	movs	r3, #1
 800e802:	e7f2      	b.n	800e7ea <_printf_float+0x192>
 800e804:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e80a:	4299      	cmp	r1, r3
 800e80c:	db05      	blt.n	800e81a <_printf_float+0x1c2>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	6121      	str	r1, [r4, #16]
 800e812:	07d8      	lsls	r0, r3, #31
 800e814:	d5ea      	bpl.n	800e7ec <_printf_float+0x194>
 800e816:	1c4b      	adds	r3, r1, #1
 800e818:	e7e7      	b.n	800e7ea <_printf_float+0x192>
 800e81a:	2900      	cmp	r1, #0
 800e81c:	bfd4      	ite	le
 800e81e:	f1c1 0202 	rsble	r2, r1, #2
 800e822:	2201      	movgt	r2, #1
 800e824:	4413      	add	r3, r2
 800e826:	e7e0      	b.n	800e7ea <_printf_float+0x192>
 800e828:	6823      	ldr	r3, [r4, #0]
 800e82a:	055a      	lsls	r2, r3, #21
 800e82c:	d407      	bmi.n	800e83e <_printf_float+0x1e6>
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	4642      	mov	r2, r8
 800e832:	4631      	mov	r1, r6
 800e834:	4628      	mov	r0, r5
 800e836:	47b8      	blx	r7
 800e838:	3001      	adds	r0, #1
 800e83a:	d12b      	bne.n	800e894 <_printf_float+0x23c>
 800e83c:	e767      	b.n	800e70e <_printf_float+0xb6>
 800e83e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e842:	f240 80dd 	bls.w	800ea00 <_printf_float+0x3a8>
 800e846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e84a:	2200      	movs	r2, #0
 800e84c:	2300      	movs	r3, #0
 800e84e:	f7f2 f963 	bl	8000b18 <__aeabi_dcmpeq>
 800e852:	2800      	cmp	r0, #0
 800e854:	d033      	beq.n	800e8be <_printf_float+0x266>
 800e856:	4a37      	ldr	r2, [pc, #220]	@ (800e934 <_printf_float+0x2dc>)
 800e858:	2301      	movs	r3, #1
 800e85a:	4631      	mov	r1, r6
 800e85c:	4628      	mov	r0, r5
 800e85e:	47b8      	blx	r7
 800e860:	3001      	adds	r0, #1
 800e862:	f43f af54 	beq.w	800e70e <_printf_float+0xb6>
 800e866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e86a:	4543      	cmp	r3, r8
 800e86c:	db02      	blt.n	800e874 <_printf_float+0x21c>
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	07d8      	lsls	r0, r3, #31
 800e872:	d50f      	bpl.n	800e894 <_printf_float+0x23c>
 800e874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e878:	4631      	mov	r1, r6
 800e87a:	4628      	mov	r0, r5
 800e87c:	47b8      	blx	r7
 800e87e:	3001      	adds	r0, #1
 800e880:	f43f af45 	beq.w	800e70e <_printf_float+0xb6>
 800e884:	f04f 0900 	mov.w	r9, #0
 800e888:	f108 38ff 	add.w	r8, r8, #4294967295
 800e88c:	f104 0a1a 	add.w	sl, r4, #26
 800e890:	45c8      	cmp	r8, r9
 800e892:	dc09      	bgt.n	800e8a8 <_printf_float+0x250>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	079b      	lsls	r3, r3, #30
 800e898:	f100 8103 	bmi.w	800eaa2 <_printf_float+0x44a>
 800e89c:	68e0      	ldr	r0, [r4, #12]
 800e89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8a0:	4298      	cmp	r0, r3
 800e8a2:	bfb8      	it	lt
 800e8a4:	4618      	movlt	r0, r3
 800e8a6:	e734      	b.n	800e712 <_printf_float+0xba>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f43f af2b 	beq.w	800e70e <_printf_float+0xb6>
 800e8b8:	f109 0901 	add.w	r9, r9, #1
 800e8bc:	e7e8      	b.n	800e890 <_printf_float+0x238>
 800e8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dc39      	bgt.n	800e938 <_printf_float+0x2e0>
 800e8c4:	4a1b      	ldr	r2, [pc, #108]	@ (800e934 <_printf_float+0x2dc>)
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47b8      	blx	r7
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f43f af1d 	beq.w	800e70e <_printf_float+0xb6>
 800e8d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e8d8:	ea59 0303 	orrs.w	r3, r9, r3
 800e8dc:	d102      	bne.n	800e8e4 <_printf_float+0x28c>
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	07d9      	lsls	r1, r3, #31
 800e8e2:	d5d7      	bpl.n	800e894 <_printf_float+0x23c>
 800e8e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	47b8      	blx	r7
 800e8ee:	3001      	adds	r0, #1
 800e8f0:	f43f af0d 	beq.w	800e70e <_printf_float+0xb6>
 800e8f4:	f04f 0a00 	mov.w	sl, #0
 800e8f8:	f104 0b1a 	add.w	fp, r4, #26
 800e8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fe:	425b      	negs	r3, r3
 800e900:	4553      	cmp	r3, sl
 800e902:	dc01      	bgt.n	800e908 <_printf_float+0x2b0>
 800e904:	464b      	mov	r3, r9
 800e906:	e793      	b.n	800e830 <_printf_float+0x1d8>
 800e908:	2301      	movs	r3, #1
 800e90a:	465a      	mov	r2, fp
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	f43f aefb 	beq.w	800e70e <_printf_float+0xb6>
 800e918:	f10a 0a01 	add.w	sl, sl, #1
 800e91c:	e7ee      	b.n	800e8fc <_printf_float+0x2a4>
 800e91e:	bf00      	nop
 800e920:	7fefffff 	.word	0x7fefffff
 800e924:	08011e68 	.word	0x08011e68
 800e928:	08011e6c 	.word	0x08011e6c
 800e92c:	08011e70 	.word	0x08011e70
 800e930:	08011e74 	.word	0x08011e74
 800e934:	08011e78 	.word	0x08011e78
 800e938:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e93a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e93e:	4553      	cmp	r3, sl
 800e940:	bfa8      	it	ge
 800e942:	4653      	movge	r3, sl
 800e944:	2b00      	cmp	r3, #0
 800e946:	4699      	mov	r9, r3
 800e948:	dc36      	bgt.n	800e9b8 <_printf_float+0x360>
 800e94a:	f04f 0b00 	mov.w	fp, #0
 800e94e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e952:	f104 021a 	add.w	r2, r4, #26
 800e956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e958:	9306      	str	r3, [sp, #24]
 800e95a:	eba3 0309 	sub.w	r3, r3, r9
 800e95e:	455b      	cmp	r3, fp
 800e960:	dc31      	bgt.n	800e9c6 <_printf_float+0x36e>
 800e962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e964:	459a      	cmp	sl, r3
 800e966:	dc3a      	bgt.n	800e9de <_printf_float+0x386>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	07da      	lsls	r2, r3, #31
 800e96c:	d437      	bmi.n	800e9de <_printf_float+0x386>
 800e96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e970:	ebaa 0903 	sub.w	r9, sl, r3
 800e974:	9b06      	ldr	r3, [sp, #24]
 800e976:	ebaa 0303 	sub.w	r3, sl, r3
 800e97a:	4599      	cmp	r9, r3
 800e97c:	bfa8      	it	ge
 800e97e:	4699      	movge	r9, r3
 800e980:	f1b9 0f00 	cmp.w	r9, #0
 800e984:	dc33      	bgt.n	800e9ee <_printf_float+0x396>
 800e986:	f04f 0800 	mov.w	r8, #0
 800e98a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e98e:	f104 0b1a 	add.w	fp, r4, #26
 800e992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e994:	ebaa 0303 	sub.w	r3, sl, r3
 800e998:	eba3 0309 	sub.w	r3, r3, r9
 800e99c:	4543      	cmp	r3, r8
 800e99e:	f77f af79 	ble.w	800e894 <_printf_float+0x23c>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	465a      	mov	r2, fp
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	47b8      	blx	r7
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	f43f aeae 	beq.w	800e70e <_printf_float+0xb6>
 800e9b2:	f108 0801 	add.w	r8, r8, #1
 800e9b6:	e7ec      	b.n	800e992 <_printf_float+0x33a>
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	4631      	mov	r1, r6
 800e9bc:	4628      	mov	r0, r5
 800e9be:	47b8      	blx	r7
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d1c2      	bne.n	800e94a <_printf_float+0x2f2>
 800e9c4:	e6a3      	b.n	800e70e <_printf_float+0xb6>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	4631      	mov	r1, r6
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	9206      	str	r2, [sp, #24]
 800e9ce:	47b8      	blx	r7
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	f43f ae9c 	beq.w	800e70e <_printf_float+0xb6>
 800e9d6:	9a06      	ldr	r2, [sp, #24]
 800e9d8:	f10b 0b01 	add.w	fp, fp, #1
 800e9dc:	e7bb      	b.n	800e956 <_printf_float+0x2fe>
 800e9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9e2:	4631      	mov	r1, r6
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	47b8      	blx	r7
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	d1c0      	bne.n	800e96e <_printf_float+0x316>
 800e9ec:	e68f      	b.n	800e70e <_printf_float+0xb6>
 800e9ee:	9a06      	ldr	r2, [sp, #24]
 800e9f0:	464b      	mov	r3, r9
 800e9f2:	4442      	add	r2, r8
 800e9f4:	4631      	mov	r1, r6
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	47b8      	blx	r7
 800e9fa:	3001      	adds	r0, #1
 800e9fc:	d1c3      	bne.n	800e986 <_printf_float+0x32e>
 800e9fe:	e686      	b.n	800e70e <_printf_float+0xb6>
 800ea00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea04:	f1ba 0f01 	cmp.w	sl, #1
 800ea08:	dc01      	bgt.n	800ea0e <_printf_float+0x3b6>
 800ea0a:	07db      	lsls	r3, r3, #31
 800ea0c:	d536      	bpl.n	800ea7c <_printf_float+0x424>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	4642      	mov	r2, r8
 800ea12:	4631      	mov	r1, r6
 800ea14:	4628      	mov	r0, r5
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	f43f ae78 	beq.w	800e70e <_printf_float+0xb6>
 800ea1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea22:	4631      	mov	r1, r6
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b8      	blx	r7
 800ea28:	3001      	adds	r0, #1
 800ea2a:	f43f ae70 	beq.w	800e70e <_printf_float+0xb6>
 800ea2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea32:	2200      	movs	r2, #0
 800ea34:	2300      	movs	r3, #0
 800ea36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea3a:	f7f2 f86d 	bl	8000b18 <__aeabi_dcmpeq>
 800ea3e:	b9c0      	cbnz	r0, 800ea72 <_printf_float+0x41a>
 800ea40:	4653      	mov	r3, sl
 800ea42:	f108 0201 	add.w	r2, r8, #1
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	47b8      	blx	r7
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	d10c      	bne.n	800ea6a <_printf_float+0x412>
 800ea50:	e65d      	b.n	800e70e <_printf_float+0xb6>
 800ea52:	2301      	movs	r3, #1
 800ea54:	465a      	mov	r2, fp
 800ea56:	4631      	mov	r1, r6
 800ea58:	4628      	mov	r0, r5
 800ea5a:	47b8      	blx	r7
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	f43f ae56 	beq.w	800e70e <_printf_float+0xb6>
 800ea62:	f108 0801 	add.w	r8, r8, #1
 800ea66:	45d0      	cmp	r8, sl
 800ea68:	dbf3      	blt.n	800ea52 <_printf_float+0x3fa>
 800ea6a:	464b      	mov	r3, r9
 800ea6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ea70:	e6df      	b.n	800e832 <_printf_float+0x1da>
 800ea72:	f04f 0800 	mov.w	r8, #0
 800ea76:	f104 0b1a 	add.w	fp, r4, #26
 800ea7a:	e7f4      	b.n	800ea66 <_printf_float+0x40e>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4642      	mov	r2, r8
 800ea80:	e7e1      	b.n	800ea46 <_printf_float+0x3ee>
 800ea82:	2301      	movs	r3, #1
 800ea84:	464a      	mov	r2, r9
 800ea86:	4631      	mov	r1, r6
 800ea88:	4628      	mov	r0, r5
 800ea8a:	47b8      	blx	r7
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	f43f ae3e 	beq.w	800e70e <_printf_float+0xb6>
 800ea92:	f108 0801 	add.w	r8, r8, #1
 800ea96:	68e3      	ldr	r3, [r4, #12]
 800ea98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea9a:	1a5b      	subs	r3, r3, r1
 800ea9c:	4543      	cmp	r3, r8
 800ea9e:	dcf0      	bgt.n	800ea82 <_printf_float+0x42a>
 800eaa0:	e6fc      	b.n	800e89c <_printf_float+0x244>
 800eaa2:	f04f 0800 	mov.w	r8, #0
 800eaa6:	f104 0919 	add.w	r9, r4, #25
 800eaaa:	e7f4      	b.n	800ea96 <_printf_float+0x43e>

0800eaac <_printf_common>:
 800eaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab0:	4616      	mov	r6, r2
 800eab2:	4698      	mov	r8, r3
 800eab4:	688a      	ldr	r2, [r1, #8]
 800eab6:	690b      	ldr	r3, [r1, #16]
 800eab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eabc:	4293      	cmp	r3, r2
 800eabe:	bfb8      	it	lt
 800eac0:	4613      	movlt	r3, r2
 800eac2:	6033      	str	r3, [r6, #0]
 800eac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eac8:	4607      	mov	r7, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	b10a      	cbz	r2, 800ead2 <_printf_common+0x26>
 800eace:	3301      	adds	r3, #1
 800ead0:	6033      	str	r3, [r6, #0]
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	0699      	lsls	r1, r3, #26
 800ead6:	bf42      	ittt	mi
 800ead8:	6833      	ldrmi	r3, [r6, #0]
 800eada:	3302      	addmi	r3, #2
 800eadc:	6033      	strmi	r3, [r6, #0]
 800eade:	6825      	ldr	r5, [r4, #0]
 800eae0:	f015 0506 	ands.w	r5, r5, #6
 800eae4:	d106      	bne.n	800eaf4 <_printf_common+0x48>
 800eae6:	f104 0a19 	add.w	sl, r4, #25
 800eaea:	68e3      	ldr	r3, [r4, #12]
 800eaec:	6832      	ldr	r2, [r6, #0]
 800eaee:	1a9b      	subs	r3, r3, r2
 800eaf0:	42ab      	cmp	r3, r5
 800eaf2:	dc26      	bgt.n	800eb42 <_printf_common+0x96>
 800eaf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eaf8:	6822      	ldr	r2, [r4, #0]
 800eafa:	3b00      	subs	r3, #0
 800eafc:	bf18      	it	ne
 800eafe:	2301      	movne	r3, #1
 800eb00:	0692      	lsls	r2, r2, #26
 800eb02:	d42b      	bmi.n	800eb5c <_printf_common+0xb0>
 800eb04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb08:	4641      	mov	r1, r8
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	47c8      	blx	r9
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d01e      	beq.n	800eb50 <_printf_common+0xa4>
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	6922      	ldr	r2, [r4, #16]
 800eb16:	f003 0306 	and.w	r3, r3, #6
 800eb1a:	2b04      	cmp	r3, #4
 800eb1c:	bf02      	ittt	eq
 800eb1e:	68e5      	ldreq	r5, [r4, #12]
 800eb20:	6833      	ldreq	r3, [r6, #0]
 800eb22:	1aed      	subeq	r5, r5, r3
 800eb24:	68a3      	ldr	r3, [r4, #8]
 800eb26:	bf0c      	ite	eq
 800eb28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb2c:	2500      	movne	r5, #0
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	bfc4      	itt	gt
 800eb32:	1a9b      	subgt	r3, r3, r2
 800eb34:	18ed      	addgt	r5, r5, r3
 800eb36:	2600      	movs	r6, #0
 800eb38:	341a      	adds	r4, #26
 800eb3a:	42b5      	cmp	r5, r6
 800eb3c:	d11a      	bne.n	800eb74 <_printf_common+0xc8>
 800eb3e:	2000      	movs	r0, #0
 800eb40:	e008      	b.n	800eb54 <_printf_common+0xa8>
 800eb42:	2301      	movs	r3, #1
 800eb44:	4652      	mov	r2, sl
 800eb46:	4641      	mov	r1, r8
 800eb48:	4638      	mov	r0, r7
 800eb4a:	47c8      	blx	r9
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	d103      	bne.n	800eb58 <_printf_common+0xac>
 800eb50:	f04f 30ff 	mov.w	r0, #4294967295
 800eb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb58:	3501      	adds	r5, #1
 800eb5a:	e7c6      	b.n	800eaea <_printf_common+0x3e>
 800eb5c:	18e1      	adds	r1, r4, r3
 800eb5e:	1c5a      	adds	r2, r3, #1
 800eb60:	2030      	movs	r0, #48	@ 0x30
 800eb62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb66:	4422      	add	r2, r4
 800eb68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb70:	3302      	adds	r3, #2
 800eb72:	e7c7      	b.n	800eb04 <_printf_common+0x58>
 800eb74:	2301      	movs	r3, #1
 800eb76:	4622      	mov	r2, r4
 800eb78:	4641      	mov	r1, r8
 800eb7a:	4638      	mov	r0, r7
 800eb7c:	47c8      	blx	r9
 800eb7e:	3001      	adds	r0, #1
 800eb80:	d0e6      	beq.n	800eb50 <_printf_common+0xa4>
 800eb82:	3601      	adds	r6, #1
 800eb84:	e7d9      	b.n	800eb3a <_printf_common+0x8e>
	...

0800eb88 <_printf_i>:
 800eb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb8c:	7e0f      	ldrb	r7, [r1, #24]
 800eb8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb90:	2f78      	cmp	r7, #120	@ 0x78
 800eb92:	4691      	mov	r9, r2
 800eb94:	4680      	mov	r8, r0
 800eb96:	460c      	mov	r4, r1
 800eb98:	469a      	mov	sl, r3
 800eb9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb9e:	d807      	bhi.n	800ebb0 <_printf_i+0x28>
 800eba0:	2f62      	cmp	r7, #98	@ 0x62
 800eba2:	d80a      	bhi.n	800ebba <_printf_i+0x32>
 800eba4:	2f00      	cmp	r7, #0
 800eba6:	f000 80d2 	beq.w	800ed4e <_printf_i+0x1c6>
 800ebaa:	2f58      	cmp	r7, #88	@ 0x58
 800ebac:	f000 80b9 	beq.w	800ed22 <_printf_i+0x19a>
 800ebb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebb8:	e03a      	b.n	800ec30 <_printf_i+0xa8>
 800ebba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebbe:	2b15      	cmp	r3, #21
 800ebc0:	d8f6      	bhi.n	800ebb0 <_printf_i+0x28>
 800ebc2:	a101      	add	r1, pc, #4	@ (adr r1, 800ebc8 <_printf_i+0x40>)
 800ebc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebc8:	0800ec21 	.word	0x0800ec21
 800ebcc:	0800ec35 	.word	0x0800ec35
 800ebd0:	0800ebb1 	.word	0x0800ebb1
 800ebd4:	0800ebb1 	.word	0x0800ebb1
 800ebd8:	0800ebb1 	.word	0x0800ebb1
 800ebdc:	0800ebb1 	.word	0x0800ebb1
 800ebe0:	0800ec35 	.word	0x0800ec35
 800ebe4:	0800ebb1 	.word	0x0800ebb1
 800ebe8:	0800ebb1 	.word	0x0800ebb1
 800ebec:	0800ebb1 	.word	0x0800ebb1
 800ebf0:	0800ebb1 	.word	0x0800ebb1
 800ebf4:	0800ed35 	.word	0x0800ed35
 800ebf8:	0800ec5f 	.word	0x0800ec5f
 800ebfc:	0800ecef 	.word	0x0800ecef
 800ec00:	0800ebb1 	.word	0x0800ebb1
 800ec04:	0800ebb1 	.word	0x0800ebb1
 800ec08:	0800ed57 	.word	0x0800ed57
 800ec0c:	0800ebb1 	.word	0x0800ebb1
 800ec10:	0800ec5f 	.word	0x0800ec5f
 800ec14:	0800ebb1 	.word	0x0800ebb1
 800ec18:	0800ebb1 	.word	0x0800ebb1
 800ec1c:	0800ecf7 	.word	0x0800ecf7
 800ec20:	6833      	ldr	r3, [r6, #0]
 800ec22:	1d1a      	adds	r2, r3, #4
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6032      	str	r2, [r6, #0]
 800ec28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec30:	2301      	movs	r3, #1
 800ec32:	e09d      	b.n	800ed70 <_printf_i+0x1e8>
 800ec34:	6833      	ldr	r3, [r6, #0]
 800ec36:	6820      	ldr	r0, [r4, #0]
 800ec38:	1d19      	adds	r1, r3, #4
 800ec3a:	6031      	str	r1, [r6, #0]
 800ec3c:	0606      	lsls	r6, r0, #24
 800ec3e:	d501      	bpl.n	800ec44 <_printf_i+0xbc>
 800ec40:	681d      	ldr	r5, [r3, #0]
 800ec42:	e003      	b.n	800ec4c <_printf_i+0xc4>
 800ec44:	0645      	lsls	r5, r0, #25
 800ec46:	d5fb      	bpl.n	800ec40 <_printf_i+0xb8>
 800ec48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec4c:	2d00      	cmp	r5, #0
 800ec4e:	da03      	bge.n	800ec58 <_printf_i+0xd0>
 800ec50:	232d      	movs	r3, #45	@ 0x2d
 800ec52:	426d      	negs	r5, r5
 800ec54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec58:	4859      	ldr	r0, [pc, #356]	@ (800edc0 <_printf_i+0x238>)
 800ec5a:	230a      	movs	r3, #10
 800ec5c:	e011      	b.n	800ec82 <_printf_i+0xfa>
 800ec5e:	6821      	ldr	r1, [r4, #0]
 800ec60:	6833      	ldr	r3, [r6, #0]
 800ec62:	0608      	lsls	r0, r1, #24
 800ec64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec68:	d402      	bmi.n	800ec70 <_printf_i+0xe8>
 800ec6a:	0649      	lsls	r1, r1, #25
 800ec6c:	bf48      	it	mi
 800ec6e:	b2ad      	uxthmi	r5, r5
 800ec70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec72:	4853      	ldr	r0, [pc, #332]	@ (800edc0 <_printf_i+0x238>)
 800ec74:	6033      	str	r3, [r6, #0]
 800ec76:	bf14      	ite	ne
 800ec78:	230a      	movne	r3, #10
 800ec7a:	2308      	moveq	r3, #8
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec82:	6866      	ldr	r6, [r4, #4]
 800ec84:	60a6      	str	r6, [r4, #8]
 800ec86:	2e00      	cmp	r6, #0
 800ec88:	bfa2      	ittt	ge
 800ec8a:	6821      	ldrge	r1, [r4, #0]
 800ec8c:	f021 0104 	bicge.w	r1, r1, #4
 800ec90:	6021      	strge	r1, [r4, #0]
 800ec92:	b90d      	cbnz	r5, 800ec98 <_printf_i+0x110>
 800ec94:	2e00      	cmp	r6, #0
 800ec96:	d04b      	beq.n	800ed30 <_printf_i+0x1a8>
 800ec98:	4616      	mov	r6, r2
 800ec9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec9e:	fb03 5711 	mls	r7, r3, r1, r5
 800eca2:	5dc7      	ldrb	r7, [r0, r7]
 800eca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eca8:	462f      	mov	r7, r5
 800ecaa:	42bb      	cmp	r3, r7
 800ecac:	460d      	mov	r5, r1
 800ecae:	d9f4      	bls.n	800ec9a <_printf_i+0x112>
 800ecb0:	2b08      	cmp	r3, #8
 800ecb2:	d10b      	bne.n	800eccc <_printf_i+0x144>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	07df      	lsls	r7, r3, #31
 800ecb8:	d508      	bpl.n	800eccc <_printf_i+0x144>
 800ecba:	6923      	ldr	r3, [r4, #16]
 800ecbc:	6861      	ldr	r1, [r4, #4]
 800ecbe:	4299      	cmp	r1, r3
 800ecc0:	bfde      	ittt	le
 800ecc2:	2330      	movle	r3, #48	@ 0x30
 800ecc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eccc:	1b92      	subs	r2, r2, r6
 800ecce:	6122      	str	r2, [r4, #16]
 800ecd0:	f8cd a000 	str.w	sl, [sp]
 800ecd4:	464b      	mov	r3, r9
 800ecd6:	aa03      	add	r2, sp, #12
 800ecd8:	4621      	mov	r1, r4
 800ecda:	4640      	mov	r0, r8
 800ecdc:	f7ff fee6 	bl	800eaac <_printf_common>
 800ece0:	3001      	adds	r0, #1
 800ece2:	d14a      	bne.n	800ed7a <_printf_i+0x1f2>
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	b004      	add	sp, #16
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	f043 0320 	orr.w	r3, r3, #32
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	4833      	ldr	r0, [pc, #204]	@ (800edc4 <_printf_i+0x23c>)
 800ecf8:	2778      	movs	r7, #120	@ 0x78
 800ecfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	6831      	ldr	r1, [r6, #0]
 800ed02:	061f      	lsls	r7, r3, #24
 800ed04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed08:	d402      	bmi.n	800ed10 <_printf_i+0x188>
 800ed0a:	065f      	lsls	r7, r3, #25
 800ed0c:	bf48      	it	mi
 800ed0e:	b2ad      	uxthmi	r5, r5
 800ed10:	6031      	str	r1, [r6, #0]
 800ed12:	07d9      	lsls	r1, r3, #31
 800ed14:	bf44      	itt	mi
 800ed16:	f043 0320 	orrmi.w	r3, r3, #32
 800ed1a:	6023      	strmi	r3, [r4, #0]
 800ed1c:	b11d      	cbz	r5, 800ed26 <_printf_i+0x19e>
 800ed1e:	2310      	movs	r3, #16
 800ed20:	e7ac      	b.n	800ec7c <_printf_i+0xf4>
 800ed22:	4827      	ldr	r0, [pc, #156]	@ (800edc0 <_printf_i+0x238>)
 800ed24:	e7e9      	b.n	800ecfa <_printf_i+0x172>
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	f023 0320 	bic.w	r3, r3, #32
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	e7f6      	b.n	800ed1e <_printf_i+0x196>
 800ed30:	4616      	mov	r6, r2
 800ed32:	e7bd      	b.n	800ecb0 <_printf_i+0x128>
 800ed34:	6833      	ldr	r3, [r6, #0]
 800ed36:	6825      	ldr	r5, [r4, #0]
 800ed38:	6961      	ldr	r1, [r4, #20]
 800ed3a:	1d18      	adds	r0, r3, #4
 800ed3c:	6030      	str	r0, [r6, #0]
 800ed3e:	062e      	lsls	r6, r5, #24
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	d501      	bpl.n	800ed48 <_printf_i+0x1c0>
 800ed44:	6019      	str	r1, [r3, #0]
 800ed46:	e002      	b.n	800ed4e <_printf_i+0x1c6>
 800ed48:	0668      	lsls	r0, r5, #25
 800ed4a:	d5fb      	bpl.n	800ed44 <_printf_i+0x1bc>
 800ed4c:	8019      	strh	r1, [r3, #0]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	6123      	str	r3, [r4, #16]
 800ed52:	4616      	mov	r6, r2
 800ed54:	e7bc      	b.n	800ecd0 <_printf_i+0x148>
 800ed56:	6833      	ldr	r3, [r6, #0]
 800ed58:	1d1a      	adds	r2, r3, #4
 800ed5a:	6032      	str	r2, [r6, #0]
 800ed5c:	681e      	ldr	r6, [r3, #0]
 800ed5e:	6862      	ldr	r2, [r4, #4]
 800ed60:	2100      	movs	r1, #0
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7f1 fa5c 	bl	8000220 <memchr>
 800ed68:	b108      	cbz	r0, 800ed6e <_printf_i+0x1e6>
 800ed6a:	1b80      	subs	r0, r0, r6
 800ed6c:	6060      	str	r0, [r4, #4]
 800ed6e:	6863      	ldr	r3, [r4, #4]
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	2300      	movs	r3, #0
 800ed74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed78:	e7aa      	b.n	800ecd0 <_printf_i+0x148>
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	4632      	mov	r2, r6
 800ed7e:	4649      	mov	r1, r9
 800ed80:	4640      	mov	r0, r8
 800ed82:	47d0      	blx	sl
 800ed84:	3001      	adds	r0, #1
 800ed86:	d0ad      	beq.n	800ece4 <_printf_i+0x15c>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	079b      	lsls	r3, r3, #30
 800ed8c:	d413      	bmi.n	800edb6 <_printf_i+0x22e>
 800ed8e:	68e0      	ldr	r0, [r4, #12]
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	4298      	cmp	r0, r3
 800ed94:	bfb8      	it	lt
 800ed96:	4618      	movlt	r0, r3
 800ed98:	e7a6      	b.n	800ece8 <_printf_i+0x160>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4640      	mov	r0, r8
 800eda2:	47d0      	blx	sl
 800eda4:	3001      	adds	r0, #1
 800eda6:	d09d      	beq.n	800ece4 <_printf_i+0x15c>
 800eda8:	3501      	adds	r5, #1
 800edaa:	68e3      	ldr	r3, [r4, #12]
 800edac:	9903      	ldr	r1, [sp, #12]
 800edae:	1a5b      	subs	r3, r3, r1
 800edb0:	42ab      	cmp	r3, r5
 800edb2:	dcf2      	bgt.n	800ed9a <_printf_i+0x212>
 800edb4:	e7eb      	b.n	800ed8e <_printf_i+0x206>
 800edb6:	2500      	movs	r5, #0
 800edb8:	f104 0619 	add.w	r6, r4, #25
 800edbc:	e7f5      	b.n	800edaa <_printf_i+0x222>
 800edbe:	bf00      	nop
 800edc0:	08011e7a 	.word	0x08011e7a
 800edc4:	08011e8b 	.word	0x08011e8b

0800edc8 <std>:
 800edc8:	2300      	movs	r3, #0
 800edca:	b510      	push	{r4, lr}
 800edcc:	4604      	mov	r4, r0
 800edce:	e9c0 3300 	strd	r3, r3, [r0]
 800edd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edd6:	6083      	str	r3, [r0, #8]
 800edd8:	8181      	strh	r1, [r0, #12]
 800edda:	6643      	str	r3, [r0, #100]	@ 0x64
 800eddc:	81c2      	strh	r2, [r0, #14]
 800edde:	6183      	str	r3, [r0, #24]
 800ede0:	4619      	mov	r1, r3
 800ede2:	2208      	movs	r2, #8
 800ede4:	305c      	adds	r0, #92	@ 0x5c
 800ede6:	f000 fa2d 	bl	800f244 <memset>
 800edea:	4b0d      	ldr	r3, [pc, #52]	@ (800ee20 <std+0x58>)
 800edec:	6263      	str	r3, [r4, #36]	@ 0x24
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <std+0x5c>)
 800edf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800edf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee28 <std+0x60>)
 800edf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800edf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ee2c <std+0x64>)
 800edf8:	6323      	str	r3, [r4, #48]	@ 0x30
 800edfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ee30 <std+0x68>)
 800edfc:	6224      	str	r4, [r4, #32]
 800edfe:	429c      	cmp	r4, r3
 800ee00:	d006      	beq.n	800ee10 <std+0x48>
 800ee02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee06:	4294      	cmp	r4, r2
 800ee08:	d002      	beq.n	800ee10 <std+0x48>
 800ee0a:	33d0      	adds	r3, #208	@ 0xd0
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d105      	bne.n	800ee1c <std+0x54>
 800ee10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee18:	f000 ba90 	b.w	800f33c <__retarget_lock_init_recursive>
 800ee1c:	bd10      	pop	{r4, pc}
 800ee1e:	bf00      	nop
 800ee20:	0800f095 	.word	0x0800f095
 800ee24:	0800f0b7 	.word	0x0800f0b7
 800ee28:	0800f0ef 	.word	0x0800f0ef
 800ee2c:	0800f113 	.word	0x0800f113
 800ee30:	20006d8c 	.word	0x20006d8c

0800ee34 <stdio_exit_handler>:
 800ee34:	4a02      	ldr	r2, [pc, #8]	@ (800ee40 <stdio_exit_handler+0xc>)
 800ee36:	4903      	ldr	r1, [pc, #12]	@ (800ee44 <stdio_exit_handler+0x10>)
 800ee38:	4803      	ldr	r0, [pc, #12]	@ (800ee48 <stdio_exit_handler+0x14>)
 800ee3a:	f000 b869 	b.w	800ef10 <_fwalk_sglue>
 800ee3e:	bf00      	nop
 800ee40:	20000010 	.word	0x20000010
 800ee44:	08010f39 	.word	0x08010f39
 800ee48:	20000020 	.word	0x20000020

0800ee4c <cleanup_stdio>:
 800ee4c:	6841      	ldr	r1, [r0, #4]
 800ee4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee80 <cleanup_stdio+0x34>)
 800ee50:	4299      	cmp	r1, r3
 800ee52:	b510      	push	{r4, lr}
 800ee54:	4604      	mov	r4, r0
 800ee56:	d001      	beq.n	800ee5c <cleanup_stdio+0x10>
 800ee58:	f002 f86e 	bl	8010f38 <_fflush_r>
 800ee5c:	68a1      	ldr	r1, [r4, #8]
 800ee5e:	4b09      	ldr	r3, [pc, #36]	@ (800ee84 <cleanup_stdio+0x38>)
 800ee60:	4299      	cmp	r1, r3
 800ee62:	d002      	beq.n	800ee6a <cleanup_stdio+0x1e>
 800ee64:	4620      	mov	r0, r4
 800ee66:	f002 f867 	bl	8010f38 <_fflush_r>
 800ee6a:	68e1      	ldr	r1, [r4, #12]
 800ee6c:	4b06      	ldr	r3, [pc, #24]	@ (800ee88 <cleanup_stdio+0x3c>)
 800ee6e:	4299      	cmp	r1, r3
 800ee70:	d004      	beq.n	800ee7c <cleanup_stdio+0x30>
 800ee72:	4620      	mov	r0, r4
 800ee74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee78:	f002 b85e 	b.w	8010f38 <_fflush_r>
 800ee7c:	bd10      	pop	{r4, pc}
 800ee7e:	bf00      	nop
 800ee80:	20006d8c 	.word	0x20006d8c
 800ee84:	20006df4 	.word	0x20006df4
 800ee88:	20006e5c 	.word	0x20006e5c

0800ee8c <global_stdio_init.part.0>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	4b0b      	ldr	r3, [pc, #44]	@ (800eebc <global_stdio_init.part.0+0x30>)
 800ee90:	4c0b      	ldr	r4, [pc, #44]	@ (800eec0 <global_stdio_init.part.0+0x34>)
 800ee92:	4a0c      	ldr	r2, [pc, #48]	@ (800eec4 <global_stdio_init.part.0+0x38>)
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	4620      	mov	r0, r4
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2104      	movs	r1, #4
 800ee9c:	f7ff ff94 	bl	800edc8 <std>
 800eea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eea4:	2201      	movs	r2, #1
 800eea6:	2109      	movs	r1, #9
 800eea8:	f7ff ff8e 	bl	800edc8 <std>
 800eeac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eeb0:	2202      	movs	r2, #2
 800eeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeb6:	2112      	movs	r1, #18
 800eeb8:	f7ff bf86 	b.w	800edc8 <std>
 800eebc:	20006ec4 	.word	0x20006ec4
 800eec0:	20006d8c 	.word	0x20006d8c
 800eec4:	0800ee35 	.word	0x0800ee35

0800eec8 <__sfp_lock_acquire>:
 800eec8:	4801      	ldr	r0, [pc, #4]	@ (800eed0 <__sfp_lock_acquire+0x8>)
 800eeca:	f000 ba38 	b.w	800f33e <__retarget_lock_acquire_recursive>
 800eece:	bf00      	nop
 800eed0:	20006ecd 	.word	0x20006ecd

0800eed4 <__sfp_lock_release>:
 800eed4:	4801      	ldr	r0, [pc, #4]	@ (800eedc <__sfp_lock_release+0x8>)
 800eed6:	f000 ba33 	b.w	800f340 <__retarget_lock_release_recursive>
 800eeda:	bf00      	nop
 800eedc:	20006ecd 	.word	0x20006ecd

0800eee0 <__sinit>:
 800eee0:	b510      	push	{r4, lr}
 800eee2:	4604      	mov	r4, r0
 800eee4:	f7ff fff0 	bl	800eec8 <__sfp_lock_acquire>
 800eee8:	6a23      	ldr	r3, [r4, #32]
 800eeea:	b11b      	cbz	r3, 800eef4 <__sinit+0x14>
 800eeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eef0:	f7ff bff0 	b.w	800eed4 <__sfp_lock_release>
 800eef4:	4b04      	ldr	r3, [pc, #16]	@ (800ef08 <__sinit+0x28>)
 800eef6:	6223      	str	r3, [r4, #32]
 800eef8:	4b04      	ldr	r3, [pc, #16]	@ (800ef0c <__sinit+0x2c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1f5      	bne.n	800eeec <__sinit+0xc>
 800ef00:	f7ff ffc4 	bl	800ee8c <global_stdio_init.part.0>
 800ef04:	e7f2      	b.n	800eeec <__sinit+0xc>
 800ef06:	bf00      	nop
 800ef08:	0800ee4d 	.word	0x0800ee4d
 800ef0c:	20006ec4 	.word	0x20006ec4

0800ef10 <_fwalk_sglue>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4607      	mov	r7, r0
 800ef16:	4688      	mov	r8, r1
 800ef18:	4614      	mov	r4, r2
 800ef1a:	2600      	movs	r6, #0
 800ef1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef20:	f1b9 0901 	subs.w	r9, r9, #1
 800ef24:	d505      	bpl.n	800ef32 <_fwalk_sglue+0x22>
 800ef26:	6824      	ldr	r4, [r4, #0]
 800ef28:	2c00      	cmp	r4, #0
 800ef2a:	d1f7      	bne.n	800ef1c <_fwalk_sglue+0xc>
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef32:	89ab      	ldrh	r3, [r5, #12]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d907      	bls.n	800ef48 <_fwalk_sglue+0x38>
 800ef38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	d003      	beq.n	800ef48 <_fwalk_sglue+0x38>
 800ef40:	4629      	mov	r1, r5
 800ef42:	4638      	mov	r0, r7
 800ef44:	47c0      	blx	r8
 800ef46:	4306      	orrs	r6, r0
 800ef48:	3568      	adds	r5, #104	@ 0x68
 800ef4a:	e7e9      	b.n	800ef20 <_fwalk_sglue+0x10>

0800ef4c <iprintf>:
 800ef4c:	b40f      	push	{r0, r1, r2, r3}
 800ef4e:	b507      	push	{r0, r1, r2, lr}
 800ef50:	4906      	ldr	r1, [pc, #24]	@ (800ef6c <iprintf+0x20>)
 800ef52:	ab04      	add	r3, sp, #16
 800ef54:	6808      	ldr	r0, [r1, #0]
 800ef56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef5a:	6881      	ldr	r1, [r0, #8]
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	f001 fe4f 	bl	8010c00 <_vfiprintf_r>
 800ef62:	b003      	add	sp, #12
 800ef64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef68:	b004      	add	sp, #16
 800ef6a:	4770      	bx	lr
 800ef6c:	2000001c 	.word	0x2000001c

0800ef70 <_puts_r>:
 800ef70:	6a03      	ldr	r3, [r0, #32]
 800ef72:	b570      	push	{r4, r5, r6, lr}
 800ef74:	6884      	ldr	r4, [r0, #8]
 800ef76:	4605      	mov	r5, r0
 800ef78:	460e      	mov	r6, r1
 800ef7a:	b90b      	cbnz	r3, 800ef80 <_puts_r+0x10>
 800ef7c:	f7ff ffb0 	bl	800eee0 <__sinit>
 800ef80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef82:	07db      	lsls	r3, r3, #31
 800ef84:	d405      	bmi.n	800ef92 <_puts_r+0x22>
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	0598      	lsls	r0, r3, #22
 800ef8a:	d402      	bmi.n	800ef92 <_puts_r+0x22>
 800ef8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef8e:	f000 f9d6 	bl	800f33e <__retarget_lock_acquire_recursive>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	0719      	lsls	r1, r3, #28
 800ef96:	d502      	bpl.n	800ef9e <_puts_r+0x2e>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d135      	bne.n	800f00a <_puts_r+0x9a>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 f8f9 	bl	800f198 <__swsetup_r>
 800efa6:	b380      	cbz	r0, 800f00a <_puts_r+0x9a>
 800efa8:	f04f 35ff 	mov.w	r5, #4294967295
 800efac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efae:	07da      	lsls	r2, r3, #31
 800efb0:	d405      	bmi.n	800efbe <_puts_r+0x4e>
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	059b      	lsls	r3, r3, #22
 800efb6:	d402      	bmi.n	800efbe <_puts_r+0x4e>
 800efb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efba:	f000 f9c1 	bl	800f340 <__retarget_lock_release_recursive>
 800efbe:	4628      	mov	r0, r5
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	da04      	bge.n	800efd0 <_puts_r+0x60>
 800efc6:	69a2      	ldr	r2, [r4, #24]
 800efc8:	429a      	cmp	r2, r3
 800efca:	dc17      	bgt.n	800effc <_puts_r+0x8c>
 800efcc:	290a      	cmp	r1, #10
 800efce:	d015      	beq.n	800effc <_puts_r+0x8c>
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	7019      	strb	r1, [r3, #0]
 800efd8:	68a3      	ldr	r3, [r4, #8]
 800efda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800efde:	3b01      	subs	r3, #1
 800efe0:	60a3      	str	r3, [r4, #8]
 800efe2:	2900      	cmp	r1, #0
 800efe4:	d1ed      	bne.n	800efc2 <_puts_r+0x52>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	da11      	bge.n	800f00e <_puts_r+0x9e>
 800efea:	4622      	mov	r2, r4
 800efec:	210a      	movs	r1, #10
 800efee:	4628      	mov	r0, r5
 800eff0:	f000 f893 	bl	800f11a <__swbuf_r>
 800eff4:	3001      	adds	r0, #1
 800eff6:	d0d7      	beq.n	800efa8 <_puts_r+0x38>
 800eff8:	250a      	movs	r5, #10
 800effa:	e7d7      	b.n	800efac <_puts_r+0x3c>
 800effc:	4622      	mov	r2, r4
 800effe:	4628      	mov	r0, r5
 800f000:	f000 f88b 	bl	800f11a <__swbuf_r>
 800f004:	3001      	adds	r0, #1
 800f006:	d1e7      	bne.n	800efd8 <_puts_r+0x68>
 800f008:	e7ce      	b.n	800efa8 <_puts_r+0x38>
 800f00a:	3e01      	subs	r6, #1
 800f00c:	e7e4      	b.n	800efd8 <_puts_r+0x68>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	1c5a      	adds	r2, r3, #1
 800f012:	6022      	str	r2, [r4, #0]
 800f014:	220a      	movs	r2, #10
 800f016:	701a      	strb	r2, [r3, #0]
 800f018:	e7ee      	b.n	800eff8 <_puts_r+0x88>
	...

0800f01c <puts>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	@ (800f028 <puts+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f7ff bfa5 	b.w	800ef70 <_puts_r>
 800f026:	bf00      	nop
 800f028:	2000001c 	.word	0x2000001c

0800f02c <sniprintf>:
 800f02c:	b40c      	push	{r2, r3}
 800f02e:	b530      	push	{r4, r5, lr}
 800f030:	4b17      	ldr	r3, [pc, #92]	@ (800f090 <sniprintf+0x64>)
 800f032:	1e0c      	subs	r4, r1, #0
 800f034:	681d      	ldr	r5, [r3, #0]
 800f036:	b09d      	sub	sp, #116	@ 0x74
 800f038:	da08      	bge.n	800f04c <sniprintf+0x20>
 800f03a:	238b      	movs	r3, #139	@ 0x8b
 800f03c:	602b      	str	r3, [r5, #0]
 800f03e:	f04f 30ff 	mov.w	r0, #4294967295
 800f042:	b01d      	add	sp, #116	@ 0x74
 800f044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f048:	b002      	add	sp, #8
 800f04a:	4770      	bx	lr
 800f04c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f050:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f054:	bf14      	ite	ne
 800f056:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f05a:	4623      	moveq	r3, r4
 800f05c:	9304      	str	r3, [sp, #16]
 800f05e:	9307      	str	r3, [sp, #28]
 800f060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f064:	9002      	str	r0, [sp, #8]
 800f066:	9006      	str	r0, [sp, #24]
 800f068:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f06c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f06e:	ab21      	add	r3, sp, #132	@ 0x84
 800f070:	a902      	add	r1, sp, #8
 800f072:	4628      	mov	r0, r5
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	f001 fc9d 	bl	80109b4 <_svfiprintf_r>
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	bfbc      	itt	lt
 800f07e:	238b      	movlt	r3, #139	@ 0x8b
 800f080:	602b      	strlt	r3, [r5, #0]
 800f082:	2c00      	cmp	r4, #0
 800f084:	d0dd      	beq.n	800f042 <sniprintf+0x16>
 800f086:	9b02      	ldr	r3, [sp, #8]
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	e7d9      	b.n	800f042 <sniprintf+0x16>
 800f08e:	bf00      	nop
 800f090:	2000001c 	.word	0x2000001c

0800f094 <__sread>:
 800f094:	b510      	push	{r4, lr}
 800f096:	460c      	mov	r4, r1
 800f098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09c:	f000 f900 	bl	800f2a0 <_read_r>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	bfab      	itete	ge
 800f0a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f0a8:	181b      	addge	r3, r3, r0
 800f0aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f0ae:	bfac      	ite	ge
 800f0b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f0b2:	81a3      	strhlt	r3, [r4, #12]
 800f0b4:	bd10      	pop	{r4, pc}

0800f0b6 <__swrite>:
 800f0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ba:	461f      	mov	r7, r3
 800f0bc:	898b      	ldrh	r3, [r1, #12]
 800f0be:	05db      	lsls	r3, r3, #23
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	4616      	mov	r6, r2
 800f0c6:	d505      	bpl.n	800f0d4 <__swrite+0x1e>
 800f0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f000 f8d4 	bl	800f27c <_lseek_r>
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0de:	81a3      	strh	r3, [r4, #12]
 800f0e0:	4632      	mov	r2, r6
 800f0e2:	463b      	mov	r3, r7
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ea:	f000 b8eb 	b.w	800f2c4 <_write_r>

0800f0ee <__sseek>:
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f6:	f000 f8c1 	bl	800f27c <_lseek_r>
 800f0fa:	1c43      	adds	r3, r0, #1
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	bf15      	itete	ne
 800f100:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f10a:	81a3      	strheq	r3, [r4, #12]
 800f10c:	bf18      	it	ne
 800f10e:	81a3      	strhne	r3, [r4, #12]
 800f110:	bd10      	pop	{r4, pc}

0800f112 <__sclose>:
 800f112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f116:	f000 b8a1 	b.w	800f25c <_close_r>

0800f11a <__swbuf_r>:
 800f11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11c:	460e      	mov	r6, r1
 800f11e:	4614      	mov	r4, r2
 800f120:	4605      	mov	r5, r0
 800f122:	b118      	cbz	r0, 800f12c <__swbuf_r+0x12>
 800f124:	6a03      	ldr	r3, [r0, #32]
 800f126:	b90b      	cbnz	r3, 800f12c <__swbuf_r+0x12>
 800f128:	f7ff feda 	bl	800eee0 <__sinit>
 800f12c:	69a3      	ldr	r3, [r4, #24]
 800f12e:	60a3      	str	r3, [r4, #8]
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	071a      	lsls	r2, r3, #28
 800f134:	d501      	bpl.n	800f13a <__swbuf_r+0x20>
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	b943      	cbnz	r3, 800f14c <__swbuf_r+0x32>
 800f13a:	4621      	mov	r1, r4
 800f13c:	4628      	mov	r0, r5
 800f13e:	f000 f82b 	bl	800f198 <__swsetup_r>
 800f142:	b118      	cbz	r0, 800f14c <__swbuf_r+0x32>
 800f144:	f04f 37ff 	mov.w	r7, #4294967295
 800f148:	4638      	mov	r0, r7
 800f14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	6922      	ldr	r2, [r4, #16]
 800f150:	1a98      	subs	r0, r3, r2
 800f152:	6963      	ldr	r3, [r4, #20]
 800f154:	b2f6      	uxtb	r6, r6
 800f156:	4283      	cmp	r3, r0
 800f158:	4637      	mov	r7, r6
 800f15a:	dc05      	bgt.n	800f168 <__swbuf_r+0x4e>
 800f15c:	4621      	mov	r1, r4
 800f15e:	4628      	mov	r0, r5
 800f160:	f001 feea 	bl	8010f38 <_fflush_r>
 800f164:	2800      	cmp	r0, #0
 800f166:	d1ed      	bne.n	800f144 <__swbuf_r+0x2a>
 800f168:	68a3      	ldr	r3, [r4, #8]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	60a3      	str	r3, [r4, #8]
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	6022      	str	r2, [r4, #0]
 800f174:	701e      	strb	r6, [r3, #0]
 800f176:	6962      	ldr	r2, [r4, #20]
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d004      	beq.n	800f188 <__swbuf_r+0x6e>
 800f17e:	89a3      	ldrh	r3, [r4, #12]
 800f180:	07db      	lsls	r3, r3, #31
 800f182:	d5e1      	bpl.n	800f148 <__swbuf_r+0x2e>
 800f184:	2e0a      	cmp	r6, #10
 800f186:	d1df      	bne.n	800f148 <__swbuf_r+0x2e>
 800f188:	4621      	mov	r1, r4
 800f18a:	4628      	mov	r0, r5
 800f18c:	f001 fed4 	bl	8010f38 <_fflush_r>
 800f190:	2800      	cmp	r0, #0
 800f192:	d0d9      	beq.n	800f148 <__swbuf_r+0x2e>
 800f194:	e7d6      	b.n	800f144 <__swbuf_r+0x2a>
	...

0800f198 <__swsetup_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4b29      	ldr	r3, [pc, #164]	@ (800f240 <__swsetup_r+0xa8>)
 800f19c:	4605      	mov	r5, r0
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	b118      	cbz	r0, 800f1ac <__swsetup_r+0x14>
 800f1a4:	6a03      	ldr	r3, [r0, #32]
 800f1a6:	b90b      	cbnz	r3, 800f1ac <__swsetup_r+0x14>
 800f1a8:	f7ff fe9a 	bl	800eee0 <__sinit>
 800f1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b0:	0719      	lsls	r1, r3, #28
 800f1b2:	d422      	bmi.n	800f1fa <__swsetup_r+0x62>
 800f1b4:	06da      	lsls	r2, r3, #27
 800f1b6:	d407      	bmi.n	800f1c8 <__swsetup_r+0x30>
 800f1b8:	2209      	movs	r2, #9
 800f1ba:	602a      	str	r2, [r5, #0]
 800f1bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1c0:	81a3      	strh	r3, [r4, #12]
 800f1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c6:	e033      	b.n	800f230 <__swsetup_r+0x98>
 800f1c8:	0758      	lsls	r0, r3, #29
 800f1ca:	d512      	bpl.n	800f1f2 <__swsetup_r+0x5a>
 800f1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ce:	b141      	cbz	r1, 800f1e2 <__swsetup_r+0x4a>
 800f1d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1d4:	4299      	cmp	r1, r3
 800f1d6:	d002      	beq.n	800f1de <__swsetup_r+0x46>
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f000 ff0d 	bl	800fff8 <_free_r>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1e2:	89a3      	ldrh	r3, [r4, #12]
 800f1e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1e8:	81a3      	strh	r3, [r4, #12]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	6063      	str	r3, [r4, #4]
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	f043 0308 	orr.w	r3, r3, #8
 800f1f8:	81a3      	strh	r3, [r4, #12]
 800f1fa:	6923      	ldr	r3, [r4, #16]
 800f1fc:	b94b      	cbnz	r3, 800f212 <__swsetup_r+0x7a>
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f208:	d003      	beq.n	800f212 <__swsetup_r+0x7a>
 800f20a:	4621      	mov	r1, r4
 800f20c:	4628      	mov	r0, r5
 800f20e:	f001 fee1 	bl	8010fd4 <__smakebuf_r>
 800f212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f216:	f013 0201 	ands.w	r2, r3, #1
 800f21a:	d00a      	beq.n	800f232 <__swsetup_r+0x9a>
 800f21c:	2200      	movs	r2, #0
 800f21e:	60a2      	str	r2, [r4, #8]
 800f220:	6962      	ldr	r2, [r4, #20]
 800f222:	4252      	negs	r2, r2
 800f224:	61a2      	str	r2, [r4, #24]
 800f226:	6922      	ldr	r2, [r4, #16]
 800f228:	b942      	cbnz	r2, 800f23c <__swsetup_r+0xa4>
 800f22a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f22e:	d1c5      	bne.n	800f1bc <__swsetup_r+0x24>
 800f230:	bd38      	pop	{r3, r4, r5, pc}
 800f232:	0799      	lsls	r1, r3, #30
 800f234:	bf58      	it	pl
 800f236:	6962      	ldrpl	r2, [r4, #20]
 800f238:	60a2      	str	r2, [r4, #8]
 800f23a:	e7f4      	b.n	800f226 <__swsetup_r+0x8e>
 800f23c:	2000      	movs	r0, #0
 800f23e:	e7f7      	b.n	800f230 <__swsetup_r+0x98>
 800f240:	2000001c 	.word	0x2000001c

0800f244 <memset>:
 800f244:	4402      	add	r2, r0
 800f246:	4603      	mov	r3, r0
 800f248:	4293      	cmp	r3, r2
 800f24a:	d100      	bne.n	800f24e <memset+0xa>
 800f24c:	4770      	bx	lr
 800f24e:	f803 1b01 	strb.w	r1, [r3], #1
 800f252:	e7f9      	b.n	800f248 <memset+0x4>

0800f254 <_localeconv_r>:
 800f254:	4800      	ldr	r0, [pc, #0]	@ (800f258 <_localeconv_r+0x4>)
 800f256:	4770      	bx	lr
 800f258:	2000015c 	.word	0x2000015c

0800f25c <_close_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d06      	ldr	r5, [pc, #24]	@ (800f278 <_close_r+0x1c>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f7f4 fb42 	bl	80038f0 <_close>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_close_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_close_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	20006ec8 	.word	0x20006ec8

0800f27c <_lseek_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_lseek_r+0x20>)
 800f280:	4604      	mov	r4, r0
 800f282:	4608      	mov	r0, r1
 800f284:	4611      	mov	r1, r2
 800f286:	2200      	movs	r2, #0
 800f288:	602a      	str	r2, [r5, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	f7f4 fb57 	bl	800393e <_lseek>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_lseek_r+0x1e>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_lseek_r+0x1e>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20006ec8 	.word	0x20006ec8

0800f2a0 <_read_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	@ (800f2c0 <_read_r+0x20>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f7f4 fb01 	bl	80038b6 <_read>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_read_r+0x1e>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_read_r+0x1e>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	20006ec8 	.word	0x20006ec8

0800f2c4 <_write_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d07      	ldr	r5, [pc, #28]	@ (800f2e4 <_write_r+0x20>)
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	4608      	mov	r0, r1
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	602a      	str	r2, [r5, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f7f3 fb54 	bl	8002980 <_write>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d102      	bne.n	800f2e2 <_write_r+0x1e>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	b103      	cbz	r3, 800f2e2 <_write_r+0x1e>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	20006ec8 	.word	0x20006ec8

0800f2e8 <__errno>:
 800f2e8:	4b01      	ldr	r3, [pc, #4]	@ (800f2f0 <__errno+0x8>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	2000001c 	.word	0x2000001c

0800f2f4 <__libc_init_array>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4d0d      	ldr	r5, [pc, #52]	@ (800f32c <__libc_init_array+0x38>)
 800f2f8:	4c0d      	ldr	r4, [pc, #52]	@ (800f330 <__libc_init_array+0x3c>)
 800f2fa:	1b64      	subs	r4, r4, r5
 800f2fc:	10a4      	asrs	r4, r4, #2
 800f2fe:	2600      	movs	r6, #0
 800f300:	42a6      	cmp	r6, r4
 800f302:	d109      	bne.n	800f318 <__libc_init_array+0x24>
 800f304:	4d0b      	ldr	r5, [pc, #44]	@ (800f334 <__libc_init_array+0x40>)
 800f306:	4c0c      	ldr	r4, [pc, #48]	@ (800f338 <__libc_init_array+0x44>)
 800f308:	f002 f91e 	bl	8011548 <_init>
 800f30c:	1b64      	subs	r4, r4, r5
 800f30e:	10a4      	asrs	r4, r4, #2
 800f310:	2600      	movs	r6, #0
 800f312:	42a6      	cmp	r6, r4
 800f314:	d105      	bne.n	800f322 <__libc_init_array+0x2e>
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	f855 3b04 	ldr.w	r3, [r5], #4
 800f31c:	4798      	blx	r3
 800f31e:	3601      	adds	r6, #1
 800f320:	e7ee      	b.n	800f300 <__libc_init_array+0xc>
 800f322:	f855 3b04 	ldr.w	r3, [r5], #4
 800f326:	4798      	blx	r3
 800f328:	3601      	adds	r6, #1
 800f32a:	e7f2      	b.n	800f312 <__libc_init_array+0x1e>
 800f32c:	080121e0 	.word	0x080121e0
 800f330:	080121e0 	.word	0x080121e0
 800f334:	080121e0 	.word	0x080121e0
 800f338:	080121e4 	.word	0x080121e4

0800f33c <__retarget_lock_init_recursive>:
 800f33c:	4770      	bx	lr

0800f33e <__retarget_lock_acquire_recursive>:
 800f33e:	4770      	bx	lr

0800f340 <__retarget_lock_release_recursive>:
 800f340:	4770      	bx	lr

0800f342 <memcpy>:
 800f342:	440a      	add	r2, r1
 800f344:	4291      	cmp	r1, r2
 800f346:	f100 33ff 	add.w	r3, r0, #4294967295
 800f34a:	d100      	bne.n	800f34e <memcpy+0xc>
 800f34c:	4770      	bx	lr
 800f34e:	b510      	push	{r4, lr}
 800f350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f358:	4291      	cmp	r1, r2
 800f35a:	d1f9      	bne.n	800f350 <memcpy+0xe>
 800f35c:	bd10      	pop	{r4, pc}

0800f35e <quorem>:
 800f35e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f362:	6903      	ldr	r3, [r0, #16]
 800f364:	690c      	ldr	r4, [r1, #16]
 800f366:	42a3      	cmp	r3, r4
 800f368:	4607      	mov	r7, r0
 800f36a:	db7e      	blt.n	800f46a <quorem+0x10c>
 800f36c:	3c01      	subs	r4, #1
 800f36e:	f101 0814 	add.w	r8, r1, #20
 800f372:	00a3      	lsls	r3, r4, #2
 800f374:	f100 0514 	add.w	r5, r0, #20
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f37e:	9301      	str	r3, [sp, #4]
 800f380:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f388:	3301      	adds	r3, #1
 800f38a:	429a      	cmp	r2, r3
 800f38c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f390:	fbb2 f6f3 	udiv	r6, r2, r3
 800f394:	d32e      	bcc.n	800f3f4 <quorem+0x96>
 800f396:	f04f 0a00 	mov.w	sl, #0
 800f39a:	46c4      	mov	ip, r8
 800f39c:	46ae      	mov	lr, r5
 800f39e:	46d3      	mov	fp, sl
 800f3a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3a4:	b298      	uxth	r0, r3
 800f3a6:	fb06 a000 	mla	r0, r6, r0, sl
 800f3aa:	0c02      	lsrs	r2, r0, #16
 800f3ac:	0c1b      	lsrs	r3, r3, #16
 800f3ae:	fb06 2303 	mla	r3, r6, r3, r2
 800f3b2:	f8de 2000 	ldr.w	r2, [lr]
 800f3b6:	b280      	uxth	r0, r0
 800f3b8:	b292      	uxth	r2, r2
 800f3ba:	1a12      	subs	r2, r2, r0
 800f3bc:	445a      	add	r2, fp
 800f3be:	f8de 0000 	ldr.w	r0, [lr]
 800f3c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f3cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f3d0:	b292      	uxth	r2, r2
 800f3d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f3d6:	45e1      	cmp	r9, ip
 800f3d8:	f84e 2b04 	str.w	r2, [lr], #4
 800f3dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3e0:	d2de      	bcs.n	800f3a0 <quorem+0x42>
 800f3e2:	9b00      	ldr	r3, [sp, #0]
 800f3e4:	58eb      	ldr	r3, [r5, r3]
 800f3e6:	b92b      	cbnz	r3, 800f3f4 <quorem+0x96>
 800f3e8:	9b01      	ldr	r3, [sp, #4]
 800f3ea:	3b04      	subs	r3, #4
 800f3ec:	429d      	cmp	r5, r3
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	d32f      	bcc.n	800f452 <quorem+0xf4>
 800f3f2:	613c      	str	r4, [r7, #16]
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f001 f979 	bl	80106ec <__mcmp>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	db25      	blt.n	800f44a <quorem+0xec>
 800f3fe:	4629      	mov	r1, r5
 800f400:	2000      	movs	r0, #0
 800f402:	f858 2b04 	ldr.w	r2, [r8], #4
 800f406:	f8d1 c000 	ldr.w	ip, [r1]
 800f40a:	fa1f fe82 	uxth.w	lr, r2
 800f40e:	fa1f f38c 	uxth.w	r3, ip
 800f412:	eba3 030e 	sub.w	r3, r3, lr
 800f416:	4403      	add	r3, r0
 800f418:	0c12      	lsrs	r2, r2, #16
 800f41a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f41e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f422:	b29b      	uxth	r3, r3
 800f424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f428:	45c1      	cmp	r9, r8
 800f42a:	f841 3b04 	str.w	r3, [r1], #4
 800f42e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f432:	d2e6      	bcs.n	800f402 <quorem+0xa4>
 800f434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f43c:	b922      	cbnz	r2, 800f448 <quorem+0xea>
 800f43e:	3b04      	subs	r3, #4
 800f440:	429d      	cmp	r5, r3
 800f442:	461a      	mov	r2, r3
 800f444:	d30b      	bcc.n	800f45e <quorem+0x100>
 800f446:	613c      	str	r4, [r7, #16]
 800f448:	3601      	adds	r6, #1
 800f44a:	4630      	mov	r0, r6
 800f44c:	b003      	add	sp, #12
 800f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f452:	6812      	ldr	r2, [r2, #0]
 800f454:	3b04      	subs	r3, #4
 800f456:	2a00      	cmp	r2, #0
 800f458:	d1cb      	bne.n	800f3f2 <quorem+0x94>
 800f45a:	3c01      	subs	r4, #1
 800f45c:	e7c6      	b.n	800f3ec <quorem+0x8e>
 800f45e:	6812      	ldr	r2, [r2, #0]
 800f460:	3b04      	subs	r3, #4
 800f462:	2a00      	cmp	r2, #0
 800f464:	d1ef      	bne.n	800f446 <quorem+0xe8>
 800f466:	3c01      	subs	r4, #1
 800f468:	e7ea      	b.n	800f440 <quorem+0xe2>
 800f46a:	2000      	movs	r0, #0
 800f46c:	e7ee      	b.n	800f44c <quorem+0xee>
	...

0800f470 <_dtoa_r>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	69c7      	ldr	r7, [r0, #28]
 800f476:	b099      	sub	sp, #100	@ 0x64
 800f478:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f47c:	ec55 4b10 	vmov	r4, r5, d0
 800f480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f482:	9109      	str	r1, [sp, #36]	@ 0x24
 800f484:	4683      	mov	fp, r0
 800f486:	920e      	str	r2, [sp, #56]	@ 0x38
 800f488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f48a:	b97f      	cbnz	r7, 800f4ac <_dtoa_r+0x3c>
 800f48c:	2010      	movs	r0, #16
 800f48e:	f000 fdfd 	bl	801008c <malloc>
 800f492:	4602      	mov	r2, r0
 800f494:	f8cb 001c 	str.w	r0, [fp, #28]
 800f498:	b920      	cbnz	r0, 800f4a4 <_dtoa_r+0x34>
 800f49a:	4ba7      	ldr	r3, [pc, #668]	@ (800f738 <_dtoa_r+0x2c8>)
 800f49c:	21ef      	movs	r1, #239	@ 0xef
 800f49e:	48a7      	ldr	r0, [pc, #668]	@ (800f73c <_dtoa_r+0x2cc>)
 800f4a0:	f001 fe20 	bl	80110e4 <__assert_func>
 800f4a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f4a8:	6007      	str	r7, [r0, #0]
 800f4aa:	60c7      	str	r7, [r0, #12]
 800f4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4b0:	6819      	ldr	r1, [r3, #0]
 800f4b2:	b159      	cbz	r1, 800f4cc <_dtoa_r+0x5c>
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	604a      	str	r2, [r1, #4]
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	4093      	lsls	r3, r2
 800f4bc:	608b      	str	r3, [r1, #8]
 800f4be:	4658      	mov	r0, fp
 800f4c0:	f000 feda 	bl	8010278 <_Bfree>
 800f4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	1e2b      	subs	r3, r5, #0
 800f4ce:	bfb9      	ittee	lt
 800f4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f4d4:	9303      	strlt	r3, [sp, #12]
 800f4d6:	2300      	movge	r3, #0
 800f4d8:	6033      	strge	r3, [r6, #0]
 800f4da:	9f03      	ldr	r7, [sp, #12]
 800f4dc:	4b98      	ldr	r3, [pc, #608]	@ (800f740 <_dtoa_r+0x2d0>)
 800f4de:	bfbc      	itt	lt
 800f4e0:	2201      	movlt	r2, #1
 800f4e2:	6032      	strlt	r2, [r6, #0]
 800f4e4:	43bb      	bics	r3, r7
 800f4e6:	d112      	bne.n	800f50e <_dtoa_r+0x9e>
 800f4e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4f4:	4323      	orrs	r3, r4
 800f4f6:	f000 854d 	beq.w	800ff94 <_dtoa_r+0xb24>
 800f4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f754 <_dtoa_r+0x2e4>
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 854f 	beq.w	800ffa4 <_dtoa_r+0xb34>
 800f506:	f10a 0303 	add.w	r3, sl, #3
 800f50a:	f000 bd49 	b.w	800ffa0 <_dtoa_r+0xb30>
 800f50e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f512:	2200      	movs	r2, #0
 800f514:	ec51 0b17 	vmov	r0, r1, d7
 800f518:	2300      	movs	r3, #0
 800f51a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f51e:	f7f1 fafb 	bl	8000b18 <__aeabi_dcmpeq>
 800f522:	4680      	mov	r8, r0
 800f524:	b158      	cbz	r0, 800f53e <_dtoa_r+0xce>
 800f526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f528:	2301      	movs	r3, #1
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f52e:	b113      	cbz	r3, 800f536 <_dtoa_r+0xc6>
 800f530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f532:	4b84      	ldr	r3, [pc, #528]	@ (800f744 <_dtoa_r+0x2d4>)
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f758 <_dtoa_r+0x2e8>
 800f53a:	f000 bd33 	b.w	800ffa4 <_dtoa_r+0xb34>
 800f53e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f542:	aa16      	add	r2, sp, #88	@ 0x58
 800f544:	a917      	add	r1, sp, #92	@ 0x5c
 800f546:	4658      	mov	r0, fp
 800f548:	f001 f980 	bl	801084c <__d2b>
 800f54c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f550:	4681      	mov	r9, r0
 800f552:	2e00      	cmp	r6, #0
 800f554:	d077      	beq.n	800f646 <_dtoa_r+0x1d6>
 800f556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f56c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f570:	4619      	mov	r1, r3
 800f572:	2200      	movs	r2, #0
 800f574:	4b74      	ldr	r3, [pc, #464]	@ (800f748 <_dtoa_r+0x2d8>)
 800f576:	f7f0 feaf 	bl	80002d8 <__aeabi_dsub>
 800f57a:	a369      	add	r3, pc, #420	@ (adr r3, 800f720 <_dtoa_r+0x2b0>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	f7f1 f862 	bl	8000648 <__aeabi_dmul>
 800f584:	a368      	add	r3, pc, #416	@ (adr r3, 800f728 <_dtoa_r+0x2b8>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f0 fea7 	bl	80002dc <__adddf3>
 800f58e:	4604      	mov	r4, r0
 800f590:	4630      	mov	r0, r6
 800f592:	460d      	mov	r5, r1
 800f594:	f7f0 ffee 	bl	8000574 <__aeabi_i2d>
 800f598:	a365      	add	r3, pc, #404	@ (adr r3, 800f730 <_dtoa_r+0x2c0>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f7f1 f853 	bl	8000648 <__aeabi_dmul>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f7f0 fe97 	bl	80002dc <__adddf3>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	460d      	mov	r5, r1
 800f5b2:	f7f1 faf9 	bl	8000ba8 <__aeabi_d2iz>
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f1 fab4 	bl	8000b2c <__aeabi_dcmplt>
 800f5c4:	b140      	cbz	r0, 800f5d8 <_dtoa_r+0x168>
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7f0 ffd4 	bl	8000574 <__aeabi_i2d>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	462b      	mov	r3, r5
 800f5d0:	f7f1 faa2 	bl	8000b18 <__aeabi_dcmpeq>
 800f5d4:	b900      	cbnz	r0, 800f5d8 <_dtoa_r+0x168>
 800f5d6:	3f01      	subs	r7, #1
 800f5d8:	2f16      	cmp	r7, #22
 800f5da:	d851      	bhi.n	800f680 <_dtoa_r+0x210>
 800f5dc:	4b5b      	ldr	r3, [pc, #364]	@ (800f74c <_dtoa_r+0x2dc>)
 800f5de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5ea:	f7f1 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d048      	beq.n	800f684 <_dtoa_r+0x214>
 800f5f2:	3f01      	subs	r7, #1
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5fa:	1b9b      	subs	r3, r3, r6
 800f5fc:	1e5a      	subs	r2, r3, #1
 800f5fe:	bf44      	itt	mi
 800f600:	f1c3 0801 	rsbmi	r8, r3, #1
 800f604:	2300      	movmi	r3, #0
 800f606:	9208      	str	r2, [sp, #32]
 800f608:	bf54      	ite	pl
 800f60a:	f04f 0800 	movpl.w	r8, #0
 800f60e:	9308      	strmi	r3, [sp, #32]
 800f610:	2f00      	cmp	r7, #0
 800f612:	db39      	blt.n	800f688 <_dtoa_r+0x218>
 800f614:	9b08      	ldr	r3, [sp, #32]
 800f616:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f618:	443b      	add	r3, r7
 800f61a:	9308      	str	r3, [sp, #32]
 800f61c:	2300      	movs	r3, #0
 800f61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f622:	2b09      	cmp	r3, #9
 800f624:	d864      	bhi.n	800f6f0 <_dtoa_r+0x280>
 800f626:	2b05      	cmp	r3, #5
 800f628:	bfc4      	itt	gt
 800f62a:	3b04      	subgt	r3, #4
 800f62c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f630:	f1a3 0302 	sub.w	r3, r3, #2
 800f634:	bfcc      	ite	gt
 800f636:	2400      	movgt	r4, #0
 800f638:	2401      	movle	r4, #1
 800f63a:	2b03      	cmp	r3, #3
 800f63c:	d863      	bhi.n	800f706 <_dtoa_r+0x296>
 800f63e:	e8df f003 	tbb	[pc, r3]
 800f642:	372a      	.short	0x372a
 800f644:	5535      	.short	0x5535
 800f646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f64a:	441e      	add	r6, r3
 800f64c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f650:	2b20      	cmp	r3, #32
 800f652:	bfc1      	itttt	gt
 800f654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f658:	409f      	lslgt	r7, r3
 800f65a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f65e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f662:	bfd6      	itet	le
 800f664:	f1c3 0320 	rsble	r3, r3, #32
 800f668:	ea47 0003 	orrgt.w	r0, r7, r3
 800f66c:	fa04 f003 	lslle.w	r0, r4, r3
 800f670:	f7f0 ff70 	bl	8000554 <__aeabi_ui2d>
 800f674:	2201      	movs	r2, #1
 800f676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f67a:	3e01      	subs	r6, #1
 800f67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f67e:	e777      	b.n	800f570 <_dtoa_r+0x100>
 800f680:	2301      	movs	r3, #1
 800f682:	e7b8      	b.n	800f5f6 <_dtoa_r+0x186>
 800f684:	9012      	str	r0, [sp, #72]	@ 0x48
 800f686:	e7b7      	b.n	800f5f8 <_dtoa_r+0x188>
 800f688:	427b      	negs	r3, r7
 800f68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f68c:	2300      	movs	r3, #0
 800f68e:	eba8 0807 	sub.w	r8, r8, r7
 800f692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f694:	e7c4      	b.n	800f620 <_dtoa_r+0x1b0>
 800f696:	2300      	movs	r3, #0
 800f698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dc35      	bgt.n	800f70c <_dtoa_r+0x29c>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	9307      	str	r3, [sp, #28]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6aa:	e00b      	b.n	800f6c4 <_dtoa_r+0x254>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e7f3      	b.n	800f698 <_dtoa_r+0x228>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6b6:	18fb      	adds	r3, r7, r3
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	9307      	str	r3, [sp, #28]
 800f6c0:	bfb8      	it	lt
 800f6c2:	2301      	movlt	r3, #1
 800f6c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	f102 0514 	add.w	r5, r2, #20
 800f6d0:	429d      	cmp	r5, r3
 800f6d2:	d91f      	bls.n	800f714 <_dtoa_r+0x2a4>
 800f6d4:	6041      	str	r1, [r0, #4]
 800f6d6:	4658      	mov	r0, fp
 800f6d8:	f000 fd8e 	bl	80101f8 <_Balloc>
 800f6dc:	4682      	mov	sl, r0
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d13c      	bne.n	800f75c <_dtoa_r+0x2ec>
 800f6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f750 <_dtoa_r+0x2e0>)
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f6ea:	e6d8      	b.n	800f49e <_dtoa_r+0x2e>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e7e0      	b.n	800f6b2 <_dtoa_r+0x242>
 800f6f0:	2401      	movs	r4, #1
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	9307      	str	r3, [sp, #28]
 800f700:	2200      	movs	r2, #0
 800f702:	2312      	movs	r3, #18
 800f704:	e7d0      	b.n	800f6a8 <_dtoa_r+0x238>
 800f706:	2301      	movs	r3, #1
 800f708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f70a:	e7f5      	b.n	800f6f8 <_dtoa_r+0x288>
 800f70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	9307      	str	r3, [sp, #28]
 800f712:	e7d7      	b.n	800f6c4 <_dtoa_r+0x254>
 800f714:	3101      	adds	r1, #1
 800f716:	0052      	lsls	r2, r2, #1
 800f718:	e7d8      	b.n	800f6cc <_dtoa_r+0x25c>
 800f71a:	bf00      	nop
 800f71c:	f3af 8000 	nop.w
 800f720:	636f4361 	.word	0x636f4361
 800f724:	3fd287a7 	.word	0x3fd287a7
 800f728:	8b60c8b3 	.word	0x8b60c8b3
 800f72c:	3fc68a28 	.word	0x3fc68a28
 800f730:	509f79fb 	.word	0x509f79fb
 800f734:	3fd34413 	.word	0x3fd34413
 800f738:	08011ea9 	.word	0x08011ea9
 800f73c:	08011ec0 	.word	0x08011ec0
 800f740:	7ff00000 	.word	0x7ff00000
 800f744:	08011e79 	.word	0x08011e79
 800f748:	3ff80000 	.word	0x3ff80000
 800f74c:	08011fb8 	.word	0x08011fb8
 800f750:	08011f18 	.word	0x08011f18
 800f754:	08011ea5 	.word	0x08011ea5
 800f758:	08011e78 	.word	0x08011e78
 800f75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f760:	6018      	str	r0, [r3, #0]
 800f762:	9b07      	ldr	r3, [sp, #28]
 800f764:	2b0e      	cmp	r3, #14
 800f766:	f200 80a4 	bhi.w	800f8b2 <_dtoa_r+0x442>
 800f76a:	2c00      	cmp	r4, #0
 800f76c:	f000 80a1 	beq.w	800f8b2 <_dtoa_r+0x442>
 800f770:	2f00      	cmp	r7, #0
 800f772:	dd33      	ble.n	800f7dc <_dtoa_r+0x36c>
 800f774:	4bad      	ldr	r3, [pc, #692]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f776:	f007 020f 	and.w	r2, r7, #15
 800f77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f77e:	ed93 7b00 	vldr	d7, [r3]
 800f782:	05f8      	lsls	r0, r7, #23
 800f784:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f78c:	d516      	bpl.n	800f7bc <_dtoa_r+0x34c>
 800f78e:	4ba8      	ldr	r3, [pc, #672]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f798:	f7f1 f880 	bl	800089c <__aeabi_ddiv>
 800f79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a0:	f004 040f 	and.w	r4, r4, #15
 800f7a4:	2603      	movs	r6, #3
 800f7a6:	4da2      	ldr	r5, [pc, #648]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f7a8:	b954      	cbnz	r4, 800f7c0 <_dtoa_r+0x350>
 800f7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b2:	f7f1 f873 	bl	800089c <__aeabi_ddiv>
 800f7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7ba:	e028      	b.n	800f80e <_dtoa_r+0x39e>
 800f7bc:	2602      	movs	r6, #2
 800f7be:	e7f2      	b.n	800f7a6 <_dtoa_r+0x336>
 800f7c0:	07e1      	lsls	r1, r4, #31
 800f7c2:	d508      	bpl.n	800f7d6 <_dtoa_r+0x366>
 800f7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7cc:	f7f0 ff3c 	bl	8000648 <__aeabi_dmul>
 800f7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7d4:	3601      	adds	r6, #1
 800f7d6:	1064      	asrs	r4, r4, #1
 800f7d8:	3508      	adds	r5, #8
 800f7da:	e7e5      	b.n	800f7a8 <_dtoa_r+0x338>
 800f7dc:	f000 80d2 	beq.w	800f984 <_dtoa_r+0x514>
 800f7e0:	427c      	negs	r4, r7
 800f7e2:	4b92      	ldr	r3, [pc, #584]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f7e4:	4d92      	ldr	r5, [pc, #584]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f7e6:	f004 020f 	and.w	r2, r4, #15
 800f7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7f6:	f7f0 ff27 	bl	8000648 <__aeabi_dmul>
 800f7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7fe:	1124      	asrs	r4, r4, #4
 800f800:	2300      	movs	r3, #0
 800f802:	2602      	movs	r6, #2
 800f804:	2c00      	cmp	r4, #0
 800f806:	f040 80b2 	bne.w	800f96e <_dtoa_r+0x4fe>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1d3      	bne.n	800f7b6 <_dtoa_r+0x346>
 800f80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 80b7 	beq.w	800f988 <_dtoa_r+0x518>
 800f81a:	4b86      	ldr	r3, [pc, #536]	@ (800fa34 <_dtoa_r+0x5c4>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f1 f983 	bl	8000b2c <__aeabi_dcmplt>
 800f826:	2800      	cmp	r0, #0
 800f828:	f000 80ae 	beq.w	800f988 <_dtoa_r+0x518>
 800f82c:	9b07      	ldr	r3, [sp, #28]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f000 80aa 	beq.w	800f988 <_dtoa_r+0x518>
 800f834:	9b00      	ldr	r3, [sp, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	dd37      	ble.n	800f8aa <_dtoa_r+0x43a>
 800f83a:	1e7b      	subs	r3, r7, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	4620      	mov	r0, r4
 800f840:	4b7d      	ldr	r3, [pc, #500]	@ (800fa38 <_dtoa_r+0x5c8>)
 800f842:	2200      	movs	r2, #0
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 feff 	bl	8000648 <__aeabi_dmul>
 800f84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f84e:	9c00      	ldr	r4, [sp, #0]
 800f850:	3601      	adds	r6, #1
 800f852:	4630      	mov	r0, r6
 800f854:	f7f0 fe8e 	bl	8000574 <__aeabi_i2d>
 800f858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f85c:	f7f0 fef4 	bl	8000648 <__aeabi_dmul>
 800f860:	4b76      	ldr	r3, [pc, #472]	@ (800fa3c <_dtoa_r+0x5cc>)
 800f862:	2200      	movs	r2, #0
 800f864:	f7f0 fd3a 	bl	80002dc <__adddf3>
 800f868:	4605      	mov	r5, r0
 800f86a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f86e:	2c00      	cmp	r4, #0
 800f870:	f040 808d 	bne.w	800f98e <_dtoa_r+0x51e>
 800f874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f878:	4b71      	ldr	r3, [pc, #452]	@ (800fa40 <_dtoa_r+0x5d0>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	f7f0 fd2c 	bl	80002d8 <__aeabi_dsub>
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f888:	462a      	mov	r2, r5
 800f88a:	4633      	mov	r3, r6
 800f88c:	f7f1 f96c 	bl	8000b68 <__aeabi_dcmpgt>
 800f890:	2800      	cmp	r0, #0
 800f892:	f040 828b 	bne.w	800fdac <_dtoa_r+0x93c>
 800f896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f89a:	462a      	mov	r2, r5
 800f89c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f8a0:	f7f1 f944 	bl	8000b2c <__aeabi_dcmplt>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	f040 8128 	bne.w	800fafa <_dtoa_r+0x68a>
 800f8aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f8ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f2c0 815a 	blt.w	800fb6e <_dtoa_r+0x6fe>
 800f8ba:	2f0e      	cmp	r7, #14
 800f8bc:	f300 8157 	bgt.w	800fb6e <_dtoa_r+0x6fe>
 800f8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8c6:	ed93 7b00 	vldr	d7, [r3]
 800f8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	ed8d 7b00 	vstr	d7, [sp]
 800f8d2:	da03      	bge.n	800f8dc <_dtoa_r+0x46c>
 800f8d4:	9b07      	ldr	r3, [sp, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f340 8101 	ble.w	800fade <_dtoa_r+0x66e>
 800f8dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8e0:	4656      	mov	r6, sl
 800f8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	f7f0 ffd7 	bl	800089c <__aeabi_ddiv>
 800f8ee:	f7f1 f95b 	bl	8000ba8 <__aeabi_d2iz>
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	f7f0 fe3e 	bl	8000574 <__aeabi_i2d>
 800f8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8fc:	f7f0 fea4 	bl	8000648 <__aeabi_dmul>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4620      	mov	r0, r4
 800f906:	4629      	mov	r1, r5
 800f908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f90c:	f7f0 fce4 	bl	80002d8 <__aeabi_dsub>
 800f910:	f806 4b01 	strb.w	r4, [r6], #1
 800f914:	9d07      	ldr	r5, [sp, #28]
 800f916:	eba6 040a 	sub.w	r4, r6, sl
 800f91a:	42a5      	cmp	r5, r4
 800f91c:	4602      	mov	r2, r0
 800f91e:	460b      	mov	r3, r1
 800f920:	f040 8117 	bne.w	800fb52 <_dtoa_r+0x6e2>
 800f924:	f7f0 fcda 	bl	80002dc <__adddf3>
 800f928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f92c:	4604      	mov	r4, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	f7f1 f91a 	bl	8000b68 <__aeabi_dcmpgt>
 800f934:	2800      	cmp	r0, #0
 800f936:	f040 80f9 	bne.w	800fb2c <_dtoa_r+0x6bc>
 800f93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f1 f8e9 	bl	8000b18 <__aeabi_dcmpeq>
 800f946:	b118      	cbz	r0, 800f950 <_dtoa_r+0x4e0>
 800f948:	f018 0f01 	tst.w	r8, #1
 800f94c:	f040 80ee 	bne.w	800fb2c <_dtoa_r+0x6bc>
 800f950:	4649      	mov	r1, r9
 800f952:	4658      	mov	r0, fp
 800f954:	f000 fc90 	bl	8010278 <_Bfree>
 800f958:	2300      	movs	r3, #0
 800f95a:	7033      	strb	r3, [r6, #0]
 800f95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f95e:	3701      	adds	r7, #1
 800f960:	601f      	str	r7, [r3, #0]
 800f962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 831d 	beq.w	800ffa4 <_dtoa_r+0xb34>
 800f96a:	601e      	str	r6, [r3, #0]
 800f96c:	e31a      	b.n	800ffa4 <_dtoa_r+0xb34>
 800f96e:	07e2      	lsls	r2, r4, #31
 800f970:	d505      	bpl.n	800f97e <_dtoa_r+0x50e>
 800f972:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f976:	f7f0 fe67 	bl	8000648 <__aeabi_dmul>
 800f97a:	3601      	adds	r6, #1
 800f97c:	2301      	movs	r3, #1
 800f97e:	1064      	asrs	r4, r4, #1
 800f980:	3508      	adds	r5, #8
 800f982:	e73f      	b.n	800f804 <_dtoa_r+0x394>
 800f984:	2602      	movs	r6, #2
 800f986:	e742      	b.n	800f80e <_dtoa_r+0x39e>
 800f988:	9c07      	ldr	r4, [sp, #28]
 800f98a:	9704      	str	r7, [sp, #16]
 800f98c:	e761      	b.n	800f852 <_dtoa_r+0x3e2>
 800f98e:	4b27      	ldr	r3, [pc, #156]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f99a:	4454      	add	r4, sl
 800f99c:	2900      	cmp	r1, #0
 800f99e:	d053      	beq.n	800fa48 <_dtoa_r+0x5d8>
 800f9a0:	4928      	ldr	r1, [pc, #160]	@ (800fa44 <_dtoa_r+0x5d4>)
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	f7f0 ff7a 	bl	800089c <__aeabi_ddiv>
 800f9a8:	4633      	mov	r3, r6
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	f7f0 fc94 	bl	80002d8 <__aeabi_dsub>
 800f9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f9b4:	4656      	mov	r6, sl
 800f9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9ba:	f7f1 f8f5 	bl	8000ba8 <__aeabi_d2iz>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	f7f0 fdd8 	bl	8000574 <__aeabi_i2d>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9cc:	f7f0 fc84 	bl	80002d8 <__aeabi_dsub>
 800f9d0:	3530      	adds	r5, #48	@ 0x30
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9da:	f806 5b01 	strb.w	r5, [r6], #1
 800f9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9e2:	f7f1 f8a3 	bl	8000b2c <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d171      	bne.n	800face <_dtoa_r+0x65e>
 800f9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9ee:	4911      	ldr	r1, [pc, #68]	@ (800fa34 <_dtoa_r+0x5c4>)
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f7f0 fc71 	bl	80002d8 <__aeabi_dsub>
 800f9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9fa:	f7f1 f897 	bl	8000b2c <__aeabi_dcmplt>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f040 8095 	bne.w	800fb2e <_dtoa_r+0x6be>
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	f43f af50 	beq.w	800f8aa <_dtoa_r+0x43a>
 800fa0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fa38 <_dtoa_r+0x5c8>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	f7f0 fe19 	bl	8000648 <__aeabi_dmul>
 800fa16:	4b08      	ldr	r3, [pc, #32]	@ (800fa38 <_dtoa_r+0x5c8>)
 800fa18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa22:	f7f0 fe11 	bl	8000648 <__aeabi_dmul>
 800fa26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa2a:	e7c4      	b.n	800f9b6 <_dtoa_r+0x546>
 800fa2c:	08011fb8 	.word	0x08011fb8
 800fa30:	08011f90 	.word	0x08011f90
 800fa34:	3ff00000 	.word	0x3ff00000
 800fa38:	40240000 	.word	0x40240000
 800fa3c:	401c0000 	.word	0x401c0000
 800fa40:	40140000 	.word	0x40140000
 800fa44:	3fe00000 	.word	0x3fe00000
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f7f0 fdfc 	bl	8000648 <__aeabi_dmul>
 800fa50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa54:	9415      	str	r4, [sp, #84]	@ 0x54
 800fa56:	4656      	mov	r6, sl
 800fa58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa5c:	f7f1 f8a4 	bl	8000ba8 <__aeabi_d2iz>
 800fa60:	4605      	mov	r5, r0
 800fa62:	f7f0 fd87 	bl	8000574 <__aeabi_i2d>
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa6e:	f7f0 fc33 	bl	80002d8 <__aeabi_dsub>
 800fa72:	3530      	adds	r5, #48	@ 0x30
 800fa74:	f806 5b01 	strb.w	r5, [r6], #1
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	42a6      	cmp	r6, r4
 800fa7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	d124      	bne.n	800fad2 <_dtoa_r+0x662>
 800fa88:	4bac      	ldr	r3, [pc, #688]	@ (800fd3c <_dtoa_r+0x8cc>)
 800fa8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa8e:	f7f0 fc25 	bl	80002dc <__adddf3>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa9a:	f7f1 f865 	bl	8000b68 <__aeabi_dcmpgt>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d145      	bne.n	800fb2e <_dtoa_r+0x6be>
 800faa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800faa6:	49a5      	ldr	r1, [pc, #660]	@ (800fd3c <_dtoa_r+0x8cc>)
 800faa8:	2000      	movs	r0, #0
 800faaa:	f7f0 fc15 	bl	80002d8 <__aeabi_dsub>
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fab6:	f7f1 f839 	bl	8000b2c <__aeabi_dcmplt>
 800faba:	2800      	cmp	r0, #0
 800fabc:	f43f aef5 	beq.w	800f8aa <_dtoa_r+0x43a>
 800fac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fac2:	1e73      	subs	r3, r6, #1
 800fac4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800faca:	2b30      	cmp	r3, #48	@ 0x30
 800facc:	d0f8      	beq.n	800fac0 <_dtoa_r+0x650>
 800face:	9f04      	ldr	r7, [sp, #16]
 800fad0:	e73e      	b.n	800f950 <_dtoa_r+0x4e0>
 800fad2:	4b9b      	ldr	r3, [pc, #620]	@ (800fd40 <_dtoa_r+0x8d0>)
 800fad4:	f7f0 fdb8 	bl	8000648 <__aeabi_dmul>
 800fad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fadc:	e7bc      	b.n	800fa58 <_dtoa_r+0x5e8>
 800fade:	d10c      	bne.n	800fafa <_dtoa_r+0x68a>
 800fae0:	4b98      	ldr	r3, [pc, #608]	@ (800fd44 <_dtoa_r+0x8d4>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fae8:	f7f0 fdae 	bl	8000648 <__aeabi_dmul>
 800faec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faf0:	f7f1 f830 	bl	8000b54 <__aeabi_dcmpge>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	f000 8157 	beq.w	800fda8 <_dtoa_r+0x938>
 800fafa:	2400      	movs	r4, #0
 800fafc:	4625      	mov	r5, r4
 800fafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb00:	43db      	mvns	r3, r3
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	4656      	mov	r6, sl
 800fb06:	2700      	movs	r7, #0
 800fb08:	4621      	mov	r1, r4
 800fb0a:	4658      	mov	r0, fp
 800fb0c:	f000 fbb4 	bl	8010278 <_Bfree>
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	d0dc      	beq.n	800face <_dtoa_r+0x65e>
 800fb14:	b12f      	cbz	r7, 800fb22 <_dtoa_r+0x6b2>
 800fb16:	42af      	cmp	r7, r5
 800fb18:	d003      	beq.n	800fb22 <_dtoa_r+0x6b2>
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	f000 fbab 	bl	8010278 <_Bfree>
 800fb22:	4629      	mov	r1, r5
 800fb24:	4658      	mov	r0, fp
 800fb26:	f000 fba7 	bl	8010278 <_Bfree>
 800fb2a:	e7d0      	b.n	800face <_dtoa_r+0x65e>
 800fb2c:	9704      	str	r7, [sp, #16]
 800fb2e:	4633      	mov	r3, r6
 800fb30:	461e      	mov	r6, r3
 800fb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb36:	2a39      	cmp	r2, #57	@ 0x39
 800fb38:	d107      	bne.n	800fb4a <_dtoa_r+0x6da>
 800fb3a:	459a      	cmp	sl, r3
 800fb3c:	d1f8      	bne.n	800fb30 <_dtoa_r+0x6c0>
 800fb3e:	9a04      	ldr	r2, [sp, #16]
 800fb40:	3201      	adds	r2, #1
 800fb42:	9204      	str	r2, [sp, #16]
 800fb44:	2230      	movs	r2, #48	@ 0x30
 800fb46:	f88a 2000 	strb.w	r2, [sl]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	3201      	adds	r2, #1
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	e7bd      	b.n	800face <_dtoa_r+0x65e>
 800fb52:	4b7b      	ldr	r3, [pc, #492]	@ (800fd40 <_dtoa_r+0x8d0>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	f7f0 fd77 	bl	8000648 <__aeabi_dmul>
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	4604      	mov	r4, r0
 800fb60:	460d      	mov	r5, r1
 800fb62:	f7f0 ffd9 	bl	8000b18 <__aeabi_dcmpeq>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f43f aebb 	beq.w	800f8e2 <_dtoa_r+0x472>
 800fb6c:	e6f0      	b.n	800f950 <_dtoa_r+0x4e0>
 800fb6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	f000 80db 	beq.w	800fd2c <_dtoa_r+0x8bc>
 800fb76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb78:	2a01      	cmp	r2, #1
 800fb7a:	f300 80bf 	bgt.w	800fcfc <_dtoa_r+0x88c>
 800fb7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	f000 80b7 	beq.w	800fcf4 <_dtoa_r+0x884>
 800fb86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fb8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb8c:	4646      	mov	r6, r8
 800fb8e:	9a08      	ldr	r2, [sp, #32]
 800fb90:	2101      	movs	r1, #1
 800fb92:	441a      	add	r2, r3
 800fb94:	4658      	mov	r0, fp
 800fb96:	4498      	add	r8, r3
 800fb98:	9208      	str	r2, [sp, #32]
 800fb9a:	f000 fc21 	bl	80103e0 <__i2b>
 800fb9e:	4605      	mov	r5, r0
 800fba0:	b15e      	cbz	r6, 800fbba <_dtoa_r+0x74a>
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd08      	ble.n	800fbba <_dtoa_r+0x74a>
 800fba8:	42b3      	cmp	r3, r6
 800fbaa:	9a08      	ldr	r2, [sp, #32]
 800fbac:	bfa8      	it	ge
 800fbae:	4633      	movge	r3, r6
 800fbb0:	eba8 0803 	sub.w	r8, r8, r3
 800fbb4:	1af6      	subs	r6, r6, r3
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	9308      	str	r3, [sp, #32]
 800fbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbbc:	b1f3      	cbz	r3, 800fbfc <_dtoa_r+0x78c>
 800fbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 80b7 	beq.w	800fd34 <_dtoa_r+0x8c4>
 800fbc6:	b18c      	cbz	r4, 800fbec <_dtoa_r+0x77c>
 800fbc8:	4629      	mov	r1, r5
 800fbca:	4622      	mov	r2, r4
 800fbcc:	4658      	mov	r0, fp
 800fbce:	f000 fcc7 	bl	8010560 <__pow5mult>
 800fbd2:	464a      	mov	r2, r9
 800fbd4:	4601      	mov	r1, r0
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	4658      	mov	r0, fp
 800fbda:	f000 fc17 	bl	801040c <__multiply>
 800fbde:	4649      	mov	r1, r9
 800fbe0:	9004      	str	r0, [sp, #16]
 800fbe2:	4658      	mov	r0, fp
 800fbe4:	f000 fb48 	bl	8010278 <_Bfree>
 800fbe8:	9b04      	ldr	r3, [sp, #16]
 800fbea:	4699      	mov	r9, r3
 800fbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbee:	1b1a      	subs	r2, r3, r4
 800fbf0:	d004      	beq.n	800fbfc <_dtoa_r+0x78c>
 800fbf2:	4649      	mov	r1, r9
 800fbf4:	4658      	mov	r0, fp
 800fbf6:	f000 fcb3 	bl	8010560 <__pow5mult>
 800fbfa:	4681      	mov	r9, r0
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	4658      	mov	r0, fp
 800fc00:	f000 fbee 	bl	80103e0 <__i2b>
 800fc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc06:	4604      	mov	r4, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	f000 81cf 	beq.w	800ffac <_dtoa_r+0xb3c>
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4601      	mov	r1, r0
 800fc12:	4658      	mov	r0, fp
 800fc14:	f000 fca4 	bl	8010560 <__pow5mult>
 800fc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	f300 8095 	bgt.w	800fd4c <_dtoa_r+0x8dc>
 800fc22:	9b02      	ldr	r3, [sp, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f040 8087 	bne.w	800fd38 <_dtoa_r+0x8c8>
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f040 8089 	bne.w	800fd48 <_dtoa_r+0x8d8>
 800fc36:	9b03      	ldr	r3, [sp, #12]
 800fc38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc3c:	0d1b      	lsrs	r3, r3, #20
 800fc3e:	051b      	lsls	r3, r3, #20
 800fc40:	b12b      	cbz	r3, 800fc4e <_dtoa_r+0x7de>
 800fc42:	9b08      	ldr	r3, [sp, #32]
 800fc44:	3301      	adds	r3, #1
 800fc46:	9308      	str	r3, [sp, #32]
 800fc48:	f108 0801 	add.w	r8, r8, #1
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 81b0 	beq.w	800ffb8 <_dtoa_r+0xb48>
 800fc58:	6923      	ldr	r3, [r4, #16]
 800fc5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc5e:	6918      	ldr	r0, [r3, #16]
 800fc60:	f000 fb72 	bl	8010348 <__hi0bits>
 800fc64:	f1c0 0020 	rsb	r0, r0, #32
 800fc68:	9b08      	ldr	r3, [sp, #32]
 800fc6a:	4418      	add	r0, r3
 800fc6c:	f010 001f 	ands.w	r0, r0, #31
 800fc70:	d077      	beq.n	800fd62 <_dtoa_r+0x8f2>
 800fc72:	f1c0 0320 	rsb	r3, r0, #32
 800fc76:	2b04      	cmp	r3, #4
 800fc78:	dd6b      	ble.n	800fd52 <_dtoa_r+0x8e2>
 800fc7a:	9b08      	ldr	r3, [sp, #32]
 800fc7c:	f1c0 001c 	rsb	r0, r0, #28
 800fc80:	4403      	add	r3, r0
 800fc82:	4480      	add	r8, r0
 800fc84:	4406      	add	r6, r0
 800fc86:	9308      	str	r3, [sp, #32]
 800fc88:	f1b8 0f00 	cmp.w	r8, #0
 800fc8c:	dd05      	ble.n	800fc9a <_dtoa_r+0x82a>
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4642      	mov	r2, r8
 800fc92:	4658      	mov	r0, fp
 800fc94:	f000 fcbe 	bl	8010614 <__lshift>
 800fc98:	4681      	mov	r9, r0
 800fc9a:	9b08      	ldr	r3, [sp, #32]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dd05      	ble.n	800fcac <_dtoa_r+0x83c>
 800fca0:	4621      	mov	r1, r4
 800fca2:	461a      	mov	r2, r3
 800fca4:	4658      	mov	r0, fp
 800fca6:	f000 fcb5 	bl	8010614 <__lshift>
 800fcaa:	4604      	mov	r4, r0
 800fcac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d059      	beq.n	800fd66 <_dtoa_r+0x8f6>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	f000 fd19 	bl	80106ec <__mcmp>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	da53      	bge.n	800fd66 <_dtoa_r+0x8f6>
 800fcbe:	1e7b      	subs	r3, r7, #1
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	220a      	movs	r2, #10
 800fcc8:	4658      	mov	r0, fp
 800fcca:	f000 faf7 	bl	80102bc <__multadd>
 800fcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcd0:	4681      	mov	r9, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 8172 	beq.w	800ffbc <_dtoa_r+0xb4c>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4629      	mov	r1, r5
 800fcdc:	220a      	movs	r2, #10
 800fcde:	4658      	mov	r0, fp
 800fce0:	f000 faec 	bl	80102bc <__multadd>
 800fce4:	9b00      	ldr	r3, [sp, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	4605      	mov	r5, r0
 800fcea:	dc67      	bgt.n	800fdbc <_dtoa_r+0x94c>
 800fcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	dc41      	bgt.n	800fd76 <_dtoa_r+0x906>
 800fcf2:	e063      	b.n	800fdbc <_dtoa_r+0x94c>
 800fcf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fcfa:	e746      	b.n	800fb8a <_dtoa_r+0x71a>
 800fcfc:	9b07      	ldr	r3, [sp, #28]
 800fcfe:	1e5c      	subs	r4, r3, #1
 800fd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	bfbf      	itttt	lt
 800fd06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fd08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fd0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fd0c:	1ae3      	sublt	r3, r4, r3
 800fd0e:	bfb4      	ite	lt
 800fd10:	18d2      	addlt	r2, r2, r3
 800fd12:	1b1c      	subge	r4, r3, r4
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	bfbc      	itt	lt
 800fd18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fd1a:	2400      	movlt	r4, #0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bfb5      	itete	lt
 800fd20:	eba8 0603 	sublt.w	r6, r8, r3
 800fd24:	9b07      	ldrge	r3, [sp, #28]
 800fd26:	2300      	movlt	r3, #0
 800fd28:	4646      	movge	r6, r8
 800fd2a:	e730      	b.n	800fb8e <_dtoa_r+0x71e>
 800fd2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fd30:	4646      	mov	r6, r8
 800fd32:	e735      	b.n	800fba0 <_dtoa_r+0x730>
 800fd34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd36:	e75c      	b.n	800fbf2 <_dtoa_r+0x782>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	e788      	b.n	800fc4e <_dtoa_r+0x7de>
 800fd3c:	3fe00000 	.word	0x3fe00000
 800fd40:	40240000 	.word	0x40240000
 800fd44:	40140000 	.word	0x40140000
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	e780      	b.n	800fc4e <_dtoa_r+0x7de>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd50:	e782      	b.n	800fc58 <_dtoa_r+0x7e8>
 800fd52:	d099      	beq.n	800fc88 <_dtoa_r+0x818>
 800fd54:	9a08      	ldr	r2, [sp, #32]
 800fd56:	331c      	adds	r3, #28
 800fd58:	441a      	add	r2, r3
 800fd5a:	4498      	add	r8, r3
 800fd5c:	441e      	add	r6, r3
 800fd5e:	9208      	str	r2, [sp, #32]
 800fd60:	e792      	b.n	800fc88 <_dtoa_r+0x818>
 800fd62:	4603      	mov	r3, r0
 800fd64:	e7f6      	b.n	800fd54 <_dtoa_r+0x8e4>
 800fd66:	9b07      	ldr	r3, [sp, #28]
 800fd68:	9704      	str	r7, [sp, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	dc20      	bgt.n	800fdb0 <_dtoa_r+0x940>
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	dd1e      	ble.n	800fdb4 <_dtoa_r+0x944>
 800fd76:	9b00      	ldr	r3, [sp, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f47f aec0 	bne.w	800fafe <_dtoa_r+0x68e>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	2205      	movs	r2, #5
 800fd82:	4658      	mov	r0, fp
 800fd84:	f000 fa9a 	bl	80102bc <__multadd>
 800fd88:	4601      	mov	r1, r0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4648      	mov	r0, r9
 800fd8e:	f000 fcad 	bl	80106ec <__mcmp>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f77f aeb3 	ble.w	800fafe <_dtoa_r+0x68e>
 800fd98:	4656      	mov	r6, sl
 800fd9a:	2331      	movs	r3, #49	@ 0x31
 800fd9c:	f806 3b01 	strb.w	r3, [r6], #1
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	3301      	adds	r3, #1
 800fda4:	9304      	str	r3, [sp, #16]
 800fda6:	e6ae      	b.n	800fb06 <_dtoa_r+0x696>
 800fda8:	9c07      	ldr	r4, [sp, #28]
 800fdaa:	9704      	str	r7, [sp, #16]
 800fdac:	4625      	mov	r5, r4
 800fdae:	e7f3      	b.n	800fd98 <_dtoa_r+0x928>
 800fdb0:	9b07      	ldr	r3, [sp, #28]
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f000 8104 	beq.w	800ffc4 <_dtoa_r+0xb54>
 800fdbc:	2e00      	cmp	r6, #0
 800fdbe:	dd05      	ble.n	800fdcc <_dtoa_r+0x95c>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	4658      	mov	r0, fp
 800fdc6:	f000 fc25 	bl	8010614 <__lshift>
 800fdca:	4605      	mov	r5, r0
 800fdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d05a      	beq.n	800fe88 <_dtoa_r+0xa18>
 800fdd2:	6869      	ldr	r1, [r5, #4]
 800fdd4:	4658      	mov	r0, fp
 800fdd6:	f000 fa0f 	bl	80101f8 <_Balloc>
 800fdda:	4606      	mov	r6, r0
 800fddc:	b928      	cbnz	r0, 800fdea <_dtoa_r+0x97a>
 800fdde:	4b84      	ldr	r3, [pc, #528]	@ (800fff0 <_dtoa_r+0xb80>)
 800fde0:	4602      	mov	r2, r0
 800fde2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fde6:	f7ff bb5a 	b.w	800f49e <_dtoa_r+0x2e>
 800fdea:	692a      	ldr	r2, [r5, #16]
 800fdec:	3202      	adds	r2, #2
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	f105 010c 	add.w	r1, r5, #12
 800fdf4:	300c      	adds	r0, #12
 800fdf6:	f7ff faa4 	bl	800f342 <memcpy>
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4658      	mov	r0, fp
 800fe00:	f000 fc08 	bl	8010614 <__lshift>
 800fe04:	f10a 0301 	add.w	r3, sl, #1
 800fe08:	9307      	str	r3, [sp, #28]
 800fe0a:	9b00      	ldr	r3, [sp, #0]
 800fe0c:	4453      	add	r3, sl
 800fe0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	462f      	mov	r7, r5
 800fe18:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	4621      	mov	r1, r4
 800fe20:	3b01      	subs	r3, #1
 800fe22:	4648      	mov	r0, r9
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	f7ff fa9a 	bl	800f35e <quorem>
 800fe2a:	4639      	mov	r1, r7
 800fe2c:	9002      	str	r0, [sp, #8]
 800fe2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe32:	4648      	mov	r0, r9
 800fe34:	f000 fc5a 	bl	80106ec <__mcmp>
 800fe38:	462a      	mov	r2, r5
 800fe3a:	9008      	str	r0, [sp, #32]
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4658      	mov	r0, fp
 800fe40:	f000 fc70 	bl	8010724 <__mdiff>
 800fe44:	68c2      	ldr	r2, [r0, #12]
 800fe46:	4606      	mov	r6, r0
 800fe48:	bb02      	cbnz	r2, 800fe8c <_dtoa_r+0xa1c>
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4648      	mov	r0, r9
 800fe4e:	f000 fc4d 	bl	80106ec <__mcmp>
 800fe52:	4602      	mov	r2, r0
 800fe54:	4631      	mov	r1, r6
 800fe56:	4658      	mov	r0, fp
 800fe58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe5a:	f000 fa0d 	bl	8010278 <_Bfree>
 800fe5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe62:	9e07      	ldr	r6, [sp, #28]
 800fe64:	ea43 0102 	orr.w	r1, r3, r2
 800fe68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe6a:	4319      	orrs	r1, r3
 800fe6c:	d110      	bne.n	800fe90 <_dtoa_r+0xa20>
 800fe6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fe72:	d029      	beq.n	800fec8 <_dtoa_r+0xa58>
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dd02      	ble.n	800fe80 <_dtoa_r+0xa10>
 800fe7a:	9b02      	ldr	r3, [sp, #8]
 800fe7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fe80:	9b00      	ldr	r3, [sp, #0]
 800fe82:	f883 8000 	strb.w	r8, [r3]
 800fe86:	e63f      	b.n	800fb08 <_dtoa_r+0x698>
 800fe88:	4628      	mov	r0, r5
 800fe8a:	e7bb      	b.n	800fe04 <_dtoa_r+0x994>
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	e7e1      	b.n	800fe54 <_dtoa_r+0x9e4>
 800fe90:	9b08      	ldr	r3, [sp, #32]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	db04      	blt.n	800fea0 <_dtoa_r+0xa30>
 800fe96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe98:	430b      	orrs	r3, r1
 800fe9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	d120      	bne.n	800fee2 <_dtoa_r+0xa72>
 800fea0:	2a00      	cmp	r2, #0
 800fea2:	dded      	ble.n	800fe80 <_dtoa_r+0xa10>
 800fea4:	4649      	mov	r1, r9
 800fea6:	2201      	movs	r2, #1
 800fea8:	4658      	mov	r0, fp
 800feaa:	f000 fbb3 	bl	8010614 <__lshift>
 800feae:	4621      	mov	r1, r4
 800feb0:	4681      	mov	r9, r0
 800feb2:	f000 fc1b 	bl	80106ec <__mcmp>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	dc03      	bgt.n	800fec2 <_dtoa_r+0xa52>
 800feba:	d1e1      	bne.n	800fe80 <_dtoa_r+0xa10>
 800febc:	f018 0f01 	tst.w	r8, #1
 800fec0:	d0de      	beq.n	800fe80 <_dtoa_r+0xa10>
 800fec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fec6:	d1d8      	bne.n	800fe7a <_dtoa_r+0xa0a>
 800fec8:	9a00      	ldr	r2, [sp, #0]
 800feca:	2339      	movs	r3, #57	@ 0x39
 800fecc:	7013      	strb	r3, [r2, #0]
 800fece:	4633      	mov	r3, r6
 800fed0:	461e      	mov	r6, r3
 800fed2:	3b01      	subs	r3, #1
 800fed4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fed8:	2a39      	cmp	r2, #57	@ 0x39
 800feda:	d052      	beq.n	800ff82 <_dtoa_r+0xb12>
 800fedc:	3201      	adds	r2, #1
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	e612      	b.n	800fb08 <_dtoa_r+0x698>
 800fee2:	2a00      	cmp	r2, #0
 800fee4:	dd07      	ble.n	800fef6 <_dtoa_r+0xa86>
 800fee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800feea:	d0ed      	beq.n	800fec8 <_dtoa_r+0xa58>
 800feec:	9a00      	ldr	r2, [sp, #0]
 800feee:	f108 0301 	add.w	r3, r8, #1
 800fef2:	7013      	strb	r3, [r2, #0]
 800fef4:	e608      	b.n	800fb08 <_dtoa_r+0x698>
 800fef6:	9b07      	ldr	r3, [sp, #28]
 800fef8:	9a07      	ldr	r2, [sp, #28]
 800fefa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d028      	beq.n	800ff56 <_dtoa_r+0xae6>
 800ff04:	4649      	mov	r1, r9
 800ff06:	2300      	movs	r3, #0
 800ff08:	220a      	movs	r2, #10
 800ff0a:	4658      	mov	r0, fp
 800ff0c:	f000 f9d6 	bl	80102bc <__multadd>
 800ff10:	42af      	cmp	r7, r5
 800ff12:	4681      	mov	r9, r0
 800ff14:	f04f 0300 	mov.w	r3, #0
 800ff18:	f04f 020a 	mov.w	r2, #10
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4658      	mov	r0, fp
 800ff20:	d107      	bne.n	800ff32 <_dtoa_r+0xac2>
 800ff22:	f000 f9cb 	bl	80102bc <__multadd>
 800ff26:	4607      	mov	r7, r0
 800ff28:	4605      	mov	r5, r0
 800ff2a:	9b07      	ldr	r3, [sp, #28]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	9307      	str	r3, [sp, #28]
 800ff30:	e774      	b.n	800fe1c <_dtoa_r+0x9ac>
 800ff32:	f000 f9c3 	bl	80102bc <__multadd>
 800ff36:	4629      	mov	r1, r5
 800ff38:	4607      	mov	r7, r0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	220a      	movs	r2, #10
 800ff3e:	4658      	mov	r0, fp
 800ff40:	f000 f9bc 	bl	80102bc <__multadd>
 800ff44:	4605      	mov	r5, r0
 800ff46:	e7f0      	b.n	800ff2a <_dtoa_r+0xaba>
 800ff48:	9b00      	ldr	r3, [sp, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bfcc      	ite	gt
 800ff4e:	461e      	movgt	r6, r3
 800ff50:	2601      	movle	r6, #1
 800ff52:	4456      	add	r6, sl
 800ff54:	2700      	movs	r7, #0
 800ff56:	4649      	mov	r1, r9
 800ff58:	2201      	movs	r2, #1
 800ff5a:	4658      	mov	r0, fp
 800ff5c:	f000 fb5a 	bl	8010614 <__lshift>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4681      	mov	r9, r0
 800ff64:	f000 fbc2 	bl	80106ec <__mcmp>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	dcb0      	bgt.n	800fece <_dtoa_r+0xa5e>
 800ff6c:	d102      	bne.n	800ff74 <_dtoa_r+0xb04>
 800ff6e:	f018 0f01 	tst.w	r8, #1
 800ff72:	d1ac      	bne.n	800fece <_dtoa_r+0xa5e>
 800ff74:	4633      	mov	r3, r6
 800ff76:	461e      	mov	r6, r3
 800ff78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff7c:	2a30      	cmp	r2, #48	@ 0x30
 800ff7e:	d0fa      	beq.n	800ff76 <_dtoa_r+0xb06>
 800ff80:	e5c2      	b.n	800fb08 <_dtoa_r+0x698>
 800ff82:	459a      	cmp	sl, r3
 800ff84:	d1a4      	bne.n	800fed0 <_dtoa_r+0xa60>
 800ff86:	9b04      	ldr	r3, [sp, #16]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	9304      	str	r3, [sp, #16]
 800ff8c:	2331      	movs	r3, #49	@ 0x31
 800ff8e:	f88a 3000 	strb.w	r3, [sl]
 800ff92:	e5b9      	b.n	800fb08 <_dtoa_r+0x698>
 800ff94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fff4 <_dtoa_r+0xb84>
 800ff9a:	b11b      	cbz	r3, 800ffa4 <_dtoa_r+0xb34>
 800ff9c:	f10a 0308 	add.w	r3, sl, #8
 800ffa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	4650      	mov	r0, sl
 800ffa6:	b019      	add	sp, #100	@ 0x64
 800ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	f77f ae37 	ble.w	800fc22 <_dtoa_r+0x7b2>
 800ffb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffb8:	2001      	movs	r0, #1
 800ffba:	e655      	b.n	800fc68 <_dtoa_r+0x7f8>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f77f aed6 	ble.w	800fd70 <_dtoa_r+0x900>
 800ffc4:	4656      	mov	r6, sl
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4648      	mov	r0, r9
 800ffca:	f7ff f9c8 	bl	800f35e <quorem>
 800ffce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ffd2:	f806 8b01 	strb.w	r8, [r6], #1
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	eba6 020a 	sub.w	r2, r6, sl
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	ddb3      	ble.n	800ff48 <_dtoa_r+0xad8>
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	220a      	movs	r2, #10
 800ffe6:	4658      	mov	r0, fp
 800ffe8:	f000 f968 	bl	80102bc <__multadd>
 800ffec:	4681      	mov	r9, r0
 800ffee:	e7ea      	b.n	800ffc6 <_dtoa_r+0xb56>
 800fff0:	08011f18 	.word	0x08011f18
 800fff4:	08011e9c 	.word	0x08011e9c

0800fff8 <_free_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	4605      	mov	r5, r0
 800fffc:	2900      	cmp	r1, #0
 800fffe:	d041      	beq.n	8010084 <_free_r+0x8c>
 8010000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010004:	1f0c      	subs	r4, r1, #4
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfb8      	it	lt
 801000a:	18e4      	addlt	r4, r4, r3
 801000c:	f000 f8e8 	bl	80101e0 <__malloc_lock>
 8010010:	4a1d      	ldr	r2, [pc, #116]	@ (8010088 <_free_r+0x90>)
 8010012:	6813      	ldr	r3, [r2, #0]
 8010014:	b933      	cbnz	r3, 8010024 <_free_r+0x2c>
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	6014      	str	r4, [r2, #0]
 801001a:	4628      	mov	r0, r5
 801001c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010020:	f000 b8e4 	b.w	80101ec <__malloc_unlock>
 8010024:	42a3      	cmp	r3, r4
 8010026:	d908      	bls.n	801003a <_free_r+0x42>
 8010028:	6820      	ldr	r0, [r4, #0]
 801002a:	1821      	adds	r1, r4, r0
 801002c:	428b      	cmp	r3, r1
 801002e:	bf01      	itttt	eq
 8010030:	6819      	ldreq	r1, [r3, #0]
 8010032:	685b      	ldreq	r3, [r3, #4]
 8010034:	1809      	addeq	r1, r1, r0
 8010036:	6021      	streq	r1, [r4, #0]
 8010038:	e7ed      	b.n	8010016 <_free_r+0x1e>
 801003a:	461a      	mov	r2, r3
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	b10b      	cbz	r3, 8010044 <_free_r+0x4c>
 8010040:	42a3      	cmp	r3, r4
 8010042:	d9fa      	bls.n	801003a <_free_r+0x42>
 8010044:	6811      	ldr	r1, [r2, #0]
 8010046:	1850      	adds	r0, r2, r1
 8010048:	42a0      	cmp	r0, r4
 801004a:	d10b      	bne.n	8010064 <_free_r+0x6c>
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	4401      	add	r1, r0
 8010050:	1850      	adds	r0, r2, r1
 8010052:	4283      	cmp	r3, r0
 8010054:	6011      	str	r1, [r2, #0]
 8010056:	d1e0      	bne.n	801001a <_free_r+0x22>
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	6053      	str	r3, [r2, #4]
 801005e:	4408      	add	r0, r1
 8010060:	6010      	str	r0, [r2, #0]
 8010062:	e7da      	b.n	801001a <_free_r+0x22>
 8010064:	d902      	bls.n	801006c <_free_r+0x74>
 8010066:	230c      	movs	r3, #12
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	e7d6      	b.n	801001a <_free_r+0x22>
 801006c:	6820      	ldr	r0, [r4, #0]
 801006e:	1821      	adds	r1, r4, r0
 8010070:	428b      	cmp	r3, r1
 8010072:	bf04      	itt	eq
 8010074:	6819      	ldreq	r1, [r3, #0]
 8010076:	685b      	ldreq	r3, [r3, #4]
 8010078:	6063      	str	r3, [r4, #4]
 801007a:	bf04      	itt	eq
 801007c:	1809      	addeq	r1, r1, r0
 801007e:	6021      	streq	r1, [r4, #0]
 8010080:	6054      	str	r4, [r2, #4]
 8010082:	e7ca      	b.n	801001a <_free_r+0x22>
 8010084:	bd38      	pop	{r3, r4, r5, pc}
 8010086:	bf00      	nop
 8010088:	20006ed4 	.word	0x20006ed4

0801008c <malloc>:
 801008c:	4b02      	ldr	r3, [pc, #8]	@ (8010098 <malloc+0xc>)
 801008e:	4601      	mov	r1, r0
 8010090:	6818      	ldr	r0, [r3, #0]
 8010092:	f000 b825 	b.w	80100e0 <_malloc_r>
 8010096:	bf00      	nop
 8010098:	2000001c 	.word	0x2000001c

0801009c <sbrk_aligned>:
 801009c:	b570      	push	{r4, r5, r6, lr}
 801009e:	4e0f      	ldr	r6, [pc, #60]	@ (80100dc <sbrk_aligned+0x40>)
 80100a0:	460c      	mov	r4, r1
 80100a2:	6831      	ldr	r1, [r6, #0]
 80100a4:	4605      	mov	r5, r0
 80100a6:	b911      	cbnz	r1, 80100ae <sbrk_aligned+0x12>
 80100a8:	f001 f80c 	bl	80110c4 <_sbrk_r>
 80100ac:	6030      	str	r0, [r6, #0]
 80100ae:	4621      	mov	r1, r4
 80100b0:	4628      	mov	r0, r5
 80100b2:	f001 f807 	bl	80110c4 <_sbrk_r>
 80100b6:	1c43      	adds	r3, r0, #1
 80100b8:	d103      	bne.n	80100c2 <sbrk_aligned+0x26>
 80100ba:	f04f 34ff 	mov.w	r4, #4294967295
 80100be:	4620      	mov	r0, r4
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	1cc4      	adds	r4, r0, #3
 80100c4:	f024 0403 	bic.w	r4, r4, #3
 80100c8:	42a0      	cmp	r0, r4
 80100ca:	d0f8      	beq.n	80100be <sbrk_aligned+0x22>
 80100cc:	1a21      	subs	r1, r4, r0
 80100ce:	4628      	mov	r0, r5
 80100d0:	f000 fff8 	bl	80110c4 <_sbrk_r>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d1f2      	bne.n	80100be <sbrk_aligned+0x22>
 80100d8:	e7ef      	b.n	80100ba <sbrk_aligned+0x1e>
 80100da:	bf00      	nop
 80100dc:	20006ed0 	.word	0x20006ed0

080100e0 <_malloc_r>:
 80100e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100e4:	1ccd      	adds	r5, r1, #3
 80100e6:	f025 0503 	bic.w	r5, r5, #3
 80100ea:	3508      	adds	r5, #8
 80100ec:	2d0c      	cmp	r5, #12
 80100ee:	bf38      	it	cc
 80100f0:	250c      	movcc	r5, #12
 80100f2:	2d00      	cmp	r5, #0
 80100f4:	4606      	mov	r6, r0
 80100f6:	db01      	blt.n	80100fc <_malloc_r+0x1c>
 80100f8:	42a9      	cmp	r1, r5
 80100fa:	d904      	bls.n	8010106 <_malloc_r+0x26>
 80100fc:	230c      	movs	r3, #12
 80100fe:	6033      	str	r3, [r6, #0]
 8010100:	2000      	movs	r0, #0
 8010102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101dc <_malloc_r+0xfc>
 801010a:	f000 f869 	bl	80101e0 <__malloc_lock>
 801010e:	f8d8 3000 	ldr.w	r3, [r8]
 8010112:	461c      	mov	r4, r3
 8010114:	bb44      	cbnz	r4, 8010168 <_malloc_r+0x88>
 8010116:	4629      	mov	r1, r5
 8010118:	4630      	mov	r0, r6
 801011a:	f7ff ffbf 	bl	801009c <sbrk_aligned>
 801011e:	1c43      	adds	r3, r0, #1
 8010120:	4604      	mov	r4, r0
 8010122:	d158      	bne.n	80101d6 <_malloc_r+0xf6>
 8010124:	f8d8 4000 	ldr.w	r4, [r8]
 8010128:	4627      	mov	r7, r4
 801012a:	2f00      	cmp	r7, #0
 801012c:	d143      	bne.n	80101b6 <_malloc_r+0xd6>
 801012e:	2c00      	cmp	r4, #0
 8010130:	d04b      	beq.n	80101ca <_malloc_r+0xea>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	4639      	mov	r1, r7
 8010136:	4630      	mov	r0, r6
 8010138:	eb04 0903 	add.w	r9, r4, r3
 801013c:	f000 ffc2 	bl	80110c4 <_sbrk_r>
 8010140:	4581      	cmp	r9, r0
 8010142:	d142      	bne.n	80101ca <_malloc_r+0xea>
 8010144:	6821      	ldr	r1, [r4, #0]
 8010146:	1a6d      	subs	r5, r5, r1
 8010148:	4629      	mov	r1, r5
 801014a:	4630      	mov	r0, r6
 801014c:	f7ff ffa6 	bl	801009c <sbrk_aligned>
 8010150:	3001      	adds	r0, #1
 8010152:	d03a      	beq.n	80101ca <_malloc_r+0xea>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	442b      	add	r3, r5
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	f8d8 3000 	ldr.w	r3, [r8]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	bb62      	cbnz	r2, 80101bc <_malloc_r+0xdc>
 8010162:	f8c8 7000 	str.w	r7, [r8]
 8010166:	e00f      	b.n	8010188 <_malloc_r+0xa8>
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	1b52      	subs	r2, r2, r5
 801016c:	d420      	bmi.n	80101b0 <_malloc_r+0xd0>
 801016e:	2a0b      	cmp	r2, #11
 8010170:	d917      	bls.n	80101a2 <_malloc_r+0xc2>
 8010172:	1961      	adds	r1, r4, r5
 8010174:	42a3      	cmp	r3, r4
 8010176:	6025      	str	r5, [r4, #0]
 8010178:	bf18      	it	ne
 801017a:	6059      	strne	r1, [r3, #4]
 801017c:	6863      	ldr	r3, [r4, #4]
 801017e:	bf08      	it	eq
 8010180:	f8c8 1000 	streq.w	r1, [r8]
 8010184:	5162      	str	r2, [r4, r5]
 8010186:	604b      	str	r3, [r1, #4]
 8010188:	4630      	mov	r0, r6
 801018a:	f000 f82f 	bl	80101ec <__malloc_unlock>
 801018e:	f104 000b 	add.w	r0, r4, #11
 8010192:	1d23      	adds	r3, r4, #4
 8010194:	f020 0007 	bic.w	r0, r0, #7
 8010198:	1ac2      	subs	r2, r0, r3
 801019a:	bf1c      	itt	ne
 801019c:	1a1b      	subne	r3, r3, r0
 801019e:	50a3      	strne	r3, [r4, r2]
 80101a0:	e7af      	b.n	8010102 <_malloc_r+0x22>
 80101a2:	6862      	ldr	r2, [r4, #4]
 80101a4:	42a3      	cmp	r3, r4
 80101a6:	bf0c      	ite	eq
 80101a8:	f8c8 2000 	streq.w	r2, [r8]
 80101ac:	605a      	strne	r2, [r3, #4]
 80101ae:	e7eb      	b.n	8010188 <_malloc_r+0xa8>
 80101b0:	4623      	mov	r3, r4
 80101b2:	6864      	ldr	r4, [r4, #4]
 80101b4:	e7ae      	b.n	8010114 <_malloc_r+0x34>
 80101b6:	463c      	mov	r4, r7
 80101b8:	687f      	ldr	r7, [r7, #4]
 80101ba:	e7b6      	b.n	801012a <_malloc_r+0x4a>
 80101bc:	461a      	mov	r2, r3
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	42a3      	cmp	r3, r4
 80101c2:	d1fb      	bne.n	80101bc <_malloc_r+0xdc>
 80101c4:	2300      	movs	r3, #0
 80101c6:	6053      	str	r3, [r2, #4]
 80101c8:	e7de      	b.n	8010188 <_malloc_r+0xa8>
 80101ca:	230c      	movs	r3, #12
 80101cc:	6033      	str	r3, [r6, #0]
 80101ce:	4630      	mov	r0, r6
 80101d0:	f000 f80c 	bl	80101ec <__malloc_unlock>
 80101d4:	e794      	b.n	8010100 <_malloc_r+0x20>
 80101d6:	6005      	str	r5, [r0, #0]
 80101d8:	e7d6      	b.n	8010188 <_malloc_r+0xa8>
 80101da:	bf00      	nop
 80101dc:	20006ed4 	.word	0x20006ed4

080101e0 <__malloc_lock>:
 80101e0:	4801      	ldr	r0, [pc, #4]	@ (80101e8 <__malloc_lock+0x8>)
 80101e2:	f7ff b8ac 	b.w	800f33e <__retarget_lock_acquire_recursive>
 80101e6:	bf00      	nop
 80101e8:	20006ecc 	.word	0x20006ecc

080101ec <__malloc_unlock>:
 80101ec:	4801      	ldr	r0, [pc, #4]	@ (80101f4 <__malloc_unlock+0x8>)
 80101ee:	f7ff b8a7 	b.w	800f340 <__retarget_lock_release_recursive>
 80101f2:	bf00      	nop
 80101f4:	20006ecc 	.word	0x20006ecc

080101f8 <_Balloc>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	69c6      	ldr	r6, [r0, #28]
 80101fc:	4604      	mov	r4, r0
 80101fe:	460d      	mov	r5, r1
 8010200:	b976      	cbnz	r6, 8010220 <_Balloc+0x28>
 8010202:	2010      	movs	r0, #16
 8010204:	f7ff ff42 	bl	801008c <malloc>
 8010208:	4602      	mov	r2, r0
 801020a:	61e0      	str	r0, [r4, #28]
 801020c:	b920      	cbnz	r0, 8010218 <_Balloc+0x20>
 801020e:	4b18      	ldr	r3, [pc, #96]	@ (8010270 <_Balloc+0x78>)
 8010210:	4818      	ldr	r0, [pc, #96]	@ (8010274 <_Balloc+0x7c>)
 8010212:	216b      	movs	r1, #107	@ 0x6b
 8010214:	f000 ff66 	bl	80110e4 <__assert_func>
 8010218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801021c:	6006      	str	r6, [r0, #0]
 801021e:	60c6      	str	r6, [r0, #12]
 8010220:	69e6      	ldr	r6, [r4, #28]
 8010222:	68f3      	ldr	r3, [r6, #12]
 8010224:	b183      	cbz	r3, 8010248 <_Balloc+0x50>
 8010226:	69e3      	ldr	r3, [r4, #28]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801022e:	b9b8      	cbnz	r0, 8010260 <_Balloc+0x68>
 8010230:	2101      	movs	r1, #1
 8010232:	fa01 f605 	lsl.w	r6, r1, r5
 8010236:	1d72      	adds	r2, r6, #5
 8010238:	0092      	lsls	r2, r2, #2
 801023a:	4620      	mov	r0, r4
 801023c:	f000 ff70 	bl	8011120 <_calloc_r>
 8010240:	b160      	cbz	r0, 801025c <_Balloc+0x64>
 8010242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010246:	e00e      	b.n	8010266 <_Balloc+0x6e>
 8010248:	2221      	movs	r2, #33	@ 0x21
 801024a:	2104      	movs	r1, #4
 801024c:	4620      	mov	r0, r4
 801024e:	f000 ff67 	bl	8011120 <_calloc_r>
 8010252:	69e3      	ldr	r3, [r4, #28]
 8010254:	60f0      	str	r0, [r6, #12]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1e4      	bne.n	8010226 <_Balloc+0x2e>
 801025c:	2000      	movs	r0, #0
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	6802      	ldr	r2, [r0, #0]
 8010262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010266:	2300      	movs	r3, #0
 8010268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801026c:	e7f7      	b.n	801025e <_Balloc+0x66>
 801026e:	bf00      	nop
 8010270:	08011ea9 	.word	0x08011ea9
 8010274:	08011f29 	.word	0x08011f29

08010278 <_Bfree>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	69c6      	ldr	r6, [r0, #28]
 801027c:	4605      	mov	r5, r0
 801027e:	460c      	mov	r4, r1
 8010280:	b976      	cbnz	r6, 80102a0 <_Bfree+0x28>
 8010282:	2010      	movs	r0, #16
 8010284:	f7ff ff02 	bl	801008c <malloc>
 8010288:	4602      	mov	r2, r0
 801028a:	61e8      	str	r0, [r5, #28]
 801028c:	b920      	cbnz	r0, 8010298 <_Bfree+0x20>
 801028e:	4b09      	ldr	r3, [pc, #36]	@ (80102b4 <_Bfree+0x3c>)
 8010290:	4809      	ldr	r0, [pc, #36]	@ (80102b8 <_Bfree+0x40>)
 8010292:	218f      	movs	r1, #143	@ 0x8f
 8010294:	f000 ff26 	bl	80110e4 <__assert_func>
 8010298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801029c:	6006      	str	r6, [r0, #0]
 801029e:	60c6      	str	r6, [r0, #12]
 80102a0:	b13c      	cbz	r4, 80102b2 <_Bfree+0x3a>
 80102a2:	69eb      	ldr	r3, [r5, #28]
 80102a4:	6862      	ldr	r2, [r4, #4]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102ac:	6021      	str	r1, [r4, #0]
 80102ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102b2:	bd70      	pop	{r4, r5, r6, pc}
 80102b4:	08011ea9 	.word	0x08011ea9
 80102b8:	08011f29 	.word	0x08011f29

080102bc <__multadd>:
 80102bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c0:	690d      	ldr	r5, [r1, #16]
 80102c2:	4607      	mov	r7, r0
 80102c4:	460c      	mov	r4, r1
 80102c6:	461e      	mov	r6, r3
 80102c8:	f101 0c14 	add.w	ip, r1, #20
 80102cc:	2000      	movs	r0, #0
 80102ce:	f8dc 3000 	ldr.w	r3, [ip]
 80102d2:	b299      	uxth	r1, r3
 80102d4:	fb02 6101 	mla	r1, r2, r1, r6
 80102d8:	0c1e      	lsrs	r6, r3, #16
 80102da:	0c0b      	lsrs	r3, r1, #16
 80102dc:	fb02 3306 	mla	r3, r2, r6, r3
 80102e0:	b289      	uxth	r1, r1
 80102e2:	3001      	adds	r0, #1
 80102e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102e8:	4285      	cmp	r5, r0
 80102ea:	f84c 1b04 	str.w	r1, [ip], #4
 80102ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102f2:	dcec      	bgt.n	80102ce <__multadd+0x12>
 80102f4:	b30e      	cbz	r6, 801033a <__multadd+0x7e>
 80102f6:	68a3      	ldr	r3, [r4, #8]
 80102f8:	42ab      	cmp	r3, r5
 80102fa:	dc19      	bgt.n	8010330 <__multadd+0x74>
 80102fc:	6861      	ldr	r1, [r4, #4]
 80102fe:	4638      	mov	r0, r7
 8010300:	3101      	adds	r1, #1
 8010302:	f7ff ff79 	bl	80101f8 <_Balloc>
 8010306:	4680      	mov	r8, r0
 8010308:	b928      	cbnz	r0, 8010316 <__multadd+0x5a>
 801030a:	4602      	mov	r2, r0
 801030c:	4b0c      	ldr	r3, [pc, #48]	@ (8010340 <__multadd+0x84>)
 801030e:	480d      	ldr	r0, [pc, #52]	@ (8010344 <__multadd+0x88>)
 8010310:	21ba      	movs	r1, #186	@ 0xba
 8010312:	f000 fee7 	bl	80110e4 <__assert_func>
 8010316:	6922      	ldr	r2, [r4, #16]
 8010318:	3202      	adds	r2, #2
 801031a:	f104 010c 	add.w	r1, r4, #12
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	300c      	adds	r0, #12
 8010322:	f7ff f80e 	bl	800f342 <memcpy>
 8010326:	4621      	mov	r1, r4
 8010328:	4638      	mov	r0, r7
 801032a:	f7ff ffa5 	bl	8010278 <_Bfree>
 801032e:	4644      	mov	r4, r8
 8010330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010334:	3501      	adds	r5, #1
 8010336:	615e      	str	r6, [r3, #20]
 8010338:	6125      	str	r5, [r4, #16]
 801033a:	4620      	mov	r0, r4
 801033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010340:	08011f18 	.word	0x08011f18
 8010344:	08011f29 	.word	0x08011f29

08010348 <__hi0bits>:
 8010348:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801034c:	4603      	mov	r3, r0
 801034e:	bf36      	itet	cc
 8010350:	0403      	lslcc	r3, r0, #16
 8010352:	2000      	movcs	r0, #0
 8010354:	2010      	movcc	r0, #16
 8010356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801035a:	bf3c      	itt	cc
 801035c:	021b      	lslcc	r3, r3, #8
 801035e:	3008      	addcc	r0, #8
 8010360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010364:	bf3c      	itt	cc
 8010366:	011b      	lslcc	r3, r3, #4
 8010368:	3004      	addcc	r0, #4
 801036a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801036e:	bf3c      	itt	cc
 8010370:	009b      	lslcc	r3, r3, #2
 8010372:	3002      	addcc	r0, #2
 8010374:	2b00      	cmp	r3, #0
 8010376:	db05      	blt.n	8010384 <__hi0bits+0x3c>
 8010378:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801037c:	f100 0001 	add.w	r0, r0, #1
 8010380:	bf08      	it	eq
 8010382:	2020      	moveq	r0, #32
 8010384:	4770      	bx	lr

08010386 <__lo0bits>:
 8010386:	6803      	ldr	r3, [r0, #0]
 8010388:	4602      	mov	r2, r0
 801038a:	f013 0007 	ands.w	r0, r3, #7
 801038e:	d00b      	beq.n	80103a8 <__lo0bits+0x22>
 8010390:	07d9      	lsls	r1, r3, #31
 8010392:	d421      	bmi.n	80103d8 <__lo0bits+0x52>
 8010394:	0798      	lsls	r0, r3, #30
 8010396:	bf49      	itett	mi
 8010398:	085b      	lsrmi	r3, r3, #1
 801039a:	089b      	lsrpl	r3, r3, #2
 801039c:	2001      	movmi	r0, #1
 801039e:	6013      	strmi	r3, [r2, #0]
 80103a0:	bf5c      	itt	pl
 80103a2:	6013      	strpl	r3, [r2, #0]
 80103a4:	2002      	movpl	r0, #2
 80103a6:	4770      	bx	lr
 80103a8:	b299      	uxth	r1, r3
 80103aa:	b909      	cbnz	r1, 80103b0 <__lo0bits+0x2a>
 80103ac:	0c1b      	lsrs	r3, r3, #16
 80103ae:	2010      	movs	r0, #16
 80103b0:	b2d9      	uxtb	r1, r3
 80103b2:	b909      	cbnz	r1, 80103b8 <__lo0bits+0x32>
 80103b4:	3008      	adds	r0, #8
 80103b6:	0a1b      	lsrs	r3, r3, #8
 80103b8:	0719      	lsls	r1, r3, #28
 80103ba:	bf04      	itt	eq
 80103bc:	091b      	lsreq	r3, r3, #4
 80103be:	3004      	addeq	r0, #4
 80103c0:	0799      	lsls	r1, r3, #30
 80103c2:	bf04      	itt	eq
 80103c4:	089b      	lsreq	r3, r3, #2
 80103c6:	3002      	addeq	r0, #2
 80103c8:	07d9      	lsls	r1, r3, #31
 80103ca:	d403      	bmi.n	80103d4 <__lo0bits+0x4e>
 80103cc:	085b      	lsrs	r3, r3, #1
 80103ce:	f100 0001 	add.w	r0, r0, #1
 80103d2:	d003      	beq.n	80103dc <__lo0bits+0x56>
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	4770      	bx	lr
 80103d8:	2000      	movs	r0, #0
 80103da:	4770      	bx	lr
 80103dc:	2020      	movs	r0, #32
 80103de:	4770      	bx	lr

080103e0 <__i2b>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	460c      	mov	r4, r1
 80103e4:	2101      	movs	r1, #1
 80103e6:	f7ff ff07 	bl	80101f8 <_Balloc>
 80103ea:	4602      	mov	r2, r0
 80103ec:	b928      	cbnz	r0, 80103fa <__i2b+0x1a>
 80103ee:	4b05      	ldr	r3, [pc, #20]	@ (8010404 <__i2b+0x24>)
 80103f0:	4805      	ldr	r0, [pc, #20]	@ (8010408 <__i2b+0x28>)
 80103f2:	f240 1145 	movw	r1, #325	@ 0x145
 80103f6:	f000 fe75 	bl	80110e4 <__assert_func>
 80103fa:	2301      	movs	r3, #1
 80103fc:	6144      	str	r4, [r0, #20]
 80103fe:	6103      	str	r3, [r0, #16]
 8010400:	bd10      	pop	{r4, pc}
 8010402:	bf00      	nop
 8010404:	08011f18 	.word	0x08011f18
 8010408:	08011f29 	.word	0x08011f29

0801040c <__multiply>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	4614      	mov	r4, r2
 8010412:	690a      	ldr	r2, [r1, #16]
 8010414:	6923      	ldr	r3, [r4, #16]
 8010416:	429a      	cmp	r2, r3
 8010418:	bfa8      	it	ge
 801041a:	4623      	movge	r3, r4
 801041c:	460f      	mov	r7, r1
 801041e:	bfa4      	itt	ge
 8010420:	460c      	movge	r4, r1
 8010422:	461f      	movge	r7, r3
 8010424:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010428:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801042c:	68a3      	ldr	r3, [r4, #8]
 801042e:	6861      	ldr	r1, [r4, #4]
 8010430:	eb0a 0609 	add.w	r6, sl, r9
 8010434:	42b3      	cmp	r3, r6
 8010436:	b085      	sub	sp, #20
 8010438:	bfb8      	it	lt
 801043a:	3101      	addlt	r1, #1
 801043c:	f7ff fedc 	bl	80101f8 <_Balloc>
 8010440:	b930      	cbnz	r0, 8010450 <__multiply+0x44>
 8010442:	4602      	mov	r2, r0
 8010444:	4b44      	ldr	r3, [pc, #272]	@ (8010558 <__multiply+0x14c>)
 8010446:	4845      	ldr	r0, [pc, #276]	@ (801055c <__multiply+0x150>)
 8010448:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801044c:	f000 fe4a 	bl	80110e4 <__assert_func>
 8010450:	f100 0514 	add.w	r5, r0, #20
 8010454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010458:	462b      	mov	r3, r5
 801045a:	2200      	movs	r2, #0
 801045c:	4543      	cmp	r3, r8
 801045e:	d321      	bcc.n	80104a4 <__multiply+0x98>
 8010460:	f107 0114 	add.w	r1, r7, #20
 8010464:	f104 0214 	add.w	r2, r4, #20
 8010468:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801046c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010470:	9302      	str	r3, [sp, #8]
 8010472:	1b13      	subs	r3, r2, r4
 8010474:	3b15      	subs	r3, #21
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	3304      	adds	r3, #4
 801047c:	f104 0715 	add.w	r7, r4, #21
 8010480:	42ba      	cmp	r2, r7
 8010482:	bf38      	it	cc
 8010484:	2304      	movcc	r3, #4
 8010486:	9301      	str	r3, [sp, #4]
 8010488:	9b02      	ldr	r3, [sp, #8]
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	428b      	cmp	r3, r1
 801048e:	d80c      	bhi.n	80104aa <__multiply+0x9e>
 8010490:	2e00      	cmp	r6, #0
 8010492:	dd03      	ble.n	801049c <__multiply+0x90>
 8010494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010498:	2b00      	cmp	r3, #0
 801049a:	d05b      	beq.n	8010554 <__multiply+0x148>
 801049c:	6106      	str	r6, [r0, #16]
 801049e:	b005      	add	sp, #20
 80104a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a4:	f843 2b04 	str.w	r2, [r3], #4
 80104a8:	e7d8      	b.n	801045c <__multiply+0x50>
 80104aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80104ae:	f1ba 0f00 	cmp.w	sl, #0
 80104b2:	d024      	beq.n	80104fe <__multiply+0xf2>
 80104b4:	f104 0e14 	add.w	lr, r4, #20
 80104b8:	46a9      	mov	r9, r5
 80104ba:	f04f 0c00 	mov.w	ip, #0
 80104be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80104c2:	f8d9 3000 	ldr.w	r3, [r9]
 80104c6:	fa1f fb87 	uxth.w	fp, r7
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80104d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80104d4:	f8d9 7000 	ldr.w	r7, [r9]
 80104d8:	4463      	add	r3, ip
 80104da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104de:	fb0a c70b 	mla	r7, sl, fp, ip
 80104e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104ec:	4572      	cmp	r2, lr
 80104ee:	f849 3b04 	str.w	r3, [r9], #4
 80104f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104f6:	d8e2      	bhi.n	80104be <__multiply+0xb2>
 80104f8:	9b01      	ldr	r3, [sp, #4]
 80104fa:	f845 c003 	str.w	ip, [r5, r3]
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010504:	3104      	adds	r1, #4
 8010506:	f1b9 0f00 	cmp.w	r9, #0
 801050a:	d021      	beq.n	8010550 <__multiply+0x144>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	f104 0c14 	add.w	ip, r4, #20
 8010512:	46ae      	mov	lr, r5
 8010514:	f04f 0a00 	mov.w	sl, #0
 8010518:	f8bc b000 	ldrh.w	fp, [ip]
 801051c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010520:	fb09 770b 	mla	r7, r9, fp, r7
 8010524:	4457      	add	r7, sl
 8010526:	b29b      	uxth	r3, r3
 8010528:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801052c:	f84e 3b04 	str.w	r3, [lr], #4
 8010530:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010538:	f8be 3000 	ldrh.w	r3, [lr]
 801053c:	fb09 330a 	mla	r3, r9, sl, r3
 8010540:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010544:	4562      	cmp	r2, ip
 8010546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801054a:	d8e5      	bhi.n	8010518 <__multiply+0x10c>
 801054c:	9f01      	ldr	r7, [sp, #4]
 801054e:	51eb      	str	r3, [r5, r7]
 8010550:	3504      	adds	r5, #4
 8010552:	e799      	b.n	8010488 <__multiply+0x7c>
 8010554:	3e01      	subs	r6, #1
 8010556:	e79b      	b.n	8010490 <__multiply+0x84>
 8010558:	08011f18 	.word	0x08011f18
 801055c:	08011f29 	.word	0x08011f29

08010560 <__pow5mult>:
 8010560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	4615      	mov	r5, r2
 8010566:	f012 0203 	ands.w	r2, r2, #3
 801056a:	4607      	mov	r7, r0
 801056c:	460e      	mov	r6, r1
 801056e:	d007      	beq.n	8010580 <__pow5mult+0x20>
 8010570:	4c25      	ldr	r4, [pc, #148]	@ (8010608 <__pow5mult+0xa8>)
 8010572:	3a01      	subs	r2, #1
 8010574:	2300      	movs	r3, #0
 8010576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801057a:	f7ff fe9f 	bl	80102bc <__multadd>
 801057e:	4606      	mov	r6, r0
 8010580:	10ad      	asrs	r5, r5, #2
 8010582:	d03d      	beq.n	8010600 <__pow5mult+0xa0>
 8010584:	69fc      	ldr	r4, [r7, #28]
 8010586:	b97c      	cbnz	r4, 80105a8 <__pow5mult+0x48>
 8010588:	2010      	movs	r0, #16
 801058a:	f7ff fd7f 	bl	801008c <malloc>
 801058e:	4602      	mov	r2, r0
 8010590:	61f8      	str	r0, [r7, #28]
 8010592:	b928      	cbnz	r0, 80105a0 <__pow5mult+0x40>
 8010594:	4b1d      	ldr	r3, [pc, #116]	@ (801060c <__pow5mult+0xac>)
 8010596:	481e      	ldr	r0, [pc, #120]	@ (8010610 <__pow5mult+0xb0>)
 8010598:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801059c:	f000 fda2 	bl	80110e4 <__assert_func>
 80105a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105a4:	6004      	str	r4, [r0, #0]
 80105a6:	60c4      	str	r4, [r0, #12]
 80105a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80105ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80105b0:	b94c      	cbnz	r4, 80105c6 <__pow5mult+0x66>
 80105b2:	f240 2171 	movw	r1, #625	@ 0x271
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7ff ff12 	bl	80103e0 <__i2b>
 80105bc:	2300      	movs	r3, #0
 80105be:	f8c8 0008 	str.w	r0, [r8, #8]
 80105c2:	4604      	mov	r4, r0
 80105c4:	6003      	str	r3, [r0, #0]
 80105c6:	f04f 0900 	mov.w	r9, #0
 80105ca:	07eb      	lsls	r3, r5, #31
 80105cc:	d50a      	bpl.n	80105e4 <__pow5mult+0x84>
 80105ce:	4631      	mov	r1, r6
 80105d0:	4622      	mov	r2, r4
 80105d2:	4638      	mov	r0, r7
 80105d4:	f7ff ff1a 	bl	801040c <__multiply>
 80105d8:	4631      	mov	r1, r6
 80105da:	4680      	mov	r8, r0
 80105dc:	4638      	mov	r0, r7
 80105de:	f7ff fe4b 	bl	8010278 <_Bfree>
 80105e2:	4646      	mov	r6, r8
 80105e4:	106d      	asrs	r5, r5, #1
 80105e6:	d00b      	beq.n	8010600 <__pow5mult+0xa0>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	b938      	cbnz	r0, 80105fc <__pow5mult+0x9c>
 80105ec:	4622      	mov	r2, r4
 80105ee:	4621      	mov	r1, r4
 80105f0:	4638      	mov	r0, r7
 80105f2:	f7ff ff0b 	bl	801040c <__multiply>
 80105f6:	6020      	str	r0, [r4, #0]
 80105f8:	f8c0 9000 	str.w	r9, [r0]
 80105fc:	4604      	mov	r4, r0
 80105fe:	e7e4      	b.n	80105ca <__pow5mult+0x6a>
 8010600:	4630      	mov	r0, r6
 8010602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010606:	bf00      	nop
 8010608:	08011f84 	.word	0x08011f84
 801060c:	08011ea9 	.word	0x08011ea9
 8010610:	08011f29 	.word	0x08011f29

08010614 <__lshift>:
 8010614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010618:	460c      	mov	r4, r1
 801061a:	6849      	ldr	r1, [r1, #4]
 801061c:	6923      	ldr	r3, [r4, #16]
 801061e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010622:	68a3      	ldr	r3, [r4, #8]
 8010624:	4607      	mov	r7, r0
 8010626:	4691      	mov	r9, r2
 8010628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801062c:	f108 0601 	add.w	r6, r8, #1
 8010630:	42b3      	cmp	r3, r6
 8010632:	db0b      	blt.n	801064c <__lshift+0x38>
 8010634:	4638      	mov	r0, r7
 8010636:	f7ff fddf 	bl	80101f8 <_Balloc>
 801063a:	4605      	mov	r5, r0
 801063c:	b948      	cbnz	r0, 8010652 <__lshift+0x3e>
 801063e:	4602      	mov	r2, r0
 8010640:	4b28      	ldr	r3, [pc, #160]	@ (80106e4 <__lshift+0xd0>)
 8010642:	4829      	ldr	r0, [pc, #164]	@ (80106e8 <__lshift+0xd4>)
 8010644:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010648:	f000 fd4c 	bl	80110e4 <__assert_func>
 801064c:	3101      	adds	r1, #1
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	e7ee      	b.n	8010630 <__lshift+0x1c>
 8010652:	2300      	movs	r3, #0
 8010654:	f100 0114 	add.w	r1, r0, #20
 8010658:	f100 0210 	add.w	r2, r0, #16
 801065c:	4618      	mov	r0, r3
 801065e:	4553      	cmp	r3, sl
 8010660:	db33      	blt.n	80106ca <__lshift+0xb6>
 8010662:	6920      	ldr	r0, [r4, #16]
 8010664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010668:	f104 0314 	add.w	r3, r4, #20
 801066c:	f019 091f 	ands.w	r9, r9, #31
 8010670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010678:	d02b      	beq.n	80106d2 <__lshift+0xbe>
 801067a:	f1c9 0e20 	rsb	lr, r9, #32
 801067e:	468a      	mov	sl, r1
 8010680:	2200      	movs	r2, #0
 8010682:	6818      	ldr	r0, [r3, #0]
 8010684:	fa00 f009 	lsl.w	r0, r0, r9
 8010688:	4310      	orrs	r0, r2
 801068a:	f84a 0b04 	str.w	r0, [sl], #4
 801068e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010692:	459c      	cmp	ip, r3
 8010694:	fa22 f20e 	lsr.w	r2, r2, lr
 8010698:	d8f3      	bhi.n	8010682 <__lshift+0x6e>
 801069a:	ebac 0304 	sub.w	r3, ip, r4
 801069e:	3b15      	subs	r3, #21
 80106a0:	f023 0303 	bic.w	r3, r3, #3
 80106a4:	3304      	adds	r3, #4
 80106a6:	f104 0015 	add.w	r0, r4, #21
 80106aa:	4584      	cmp	ip, r0
 80106ac:	bf38      	it	cc
 80106ae:	2304      	movcc	r3, #4
 80106b0:	50ca      	str	r2, [r1, r3]
 80106b2:	b10a      	cbz	r2, 80106b8 <__lshift+0xa4>
 80106b4:	f108 0602 	add.w	r6, r8, #2
 80106b8:	3e01      	subs	r6, #1
 80106ba:	4638      	mov	r0, r7
 80106bc:	612e      	str	r6, [r5, #16]
 80106be:	4621      	mov	r1, r4
 80106c0:	f7ff fdda 	bl	8010278 <_Bfree>
 80106c4:	4628      	mov	r0, r5
 80106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80106ce:	3301      	adds	r3, #1
 80106d0:	e7c5      	b.n	801065e <__lshift+0x4a>
 80106d2:	3904      	subs	r1, #4
 80106d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80106d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80106dc:	459c      	cmp	ip, r3
 80106de:	d8f9      	bhi.n	80106d4 <__lshift+0xc0>
 80106e0:	e7ea      	b.n	80106b8 <__lshift+0xa4>
 80106e2:	bf00      	nop
 80106e4:	08011f18 	.word	0x08011f18
 80106e8:	08011f29 	.word	0x08011f29

080106ec <__mcmp>:
 80106ec:	690a      	ldr	r2, [r1, #16]
 80106ee:	4603      	mov	r3, r0
 80106f0:	6900      	ldr	r0, [r0, #16]
 80106f2:	1a80      	subs	r0, r0, r2
 80106f4:	b530      	push	{r4, r5, lr}
 80106f6:	d10e      	bne.n	8010716 <__mcmp+0x2a>
 80106f8:	3314      	adds	r3, #20
 80106fa:	3114      	adds	r1, #20
 80106fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801070c:	4295      	cmp	r5, r2
 801070e:	d003      	beq.n	8010718 <__mcmp+0x2c>
 8010710:	d205      	bcs.n	801071e <__mcmp+0x32>
 8010712:	f04f 30ff 	mov.w	r0, #4294967295
 8010716:	bd30      	pop	{r4, r5, pc}
 8010718:	42a3      	cmp	r3, r4
 801071a:	d3f3      	bcc.n	8010704 <__mcmp+0x18>
 801071c:	e7fb      	b.n	8010716 <__mcmp+0x2a>
 801071e:	2001      	movs	r0, #1
 8010720:	e7f9      	b.n	8010716 <__mcmp+0x2a>
	...

08010724 <__mdiff>:
 8010724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	4689      	mov	r9, r1
 801072a:	4606      	mov	r6, r0
 801072c:	4611      	mov	r1, r2
 801072e:	4648      	mov	r0, r9
 8010730:	4614      	mov	r4, r2
 8010732:	f7ff ffdb 	bl	80106ec <__mcmp>
 8010736:	1e05      	subs	r5, r0, #0
 8010738:	d112      	bne.n	8010760 <__mdiff+0x3c>
 801073a:	4629      	mov	r1, r5
 801073c:	4630      	mov	r0, r6
 801073e:	f7ff fd5b 	bl	80101f8 <_Balloc>
 8010742:	4602      	mov	r2, r0
 8010744:	b928      	cbnz	r0, 8010752 <__mdiff+0x2e>
 8010746:	4b3f      	ldr	r3, [pc, #252]	@ (8010844 <__mdiff+0x120>)
 8010748:	f240 2137 	movw	r1, #567	@ 0x237
 801074c:	483e      	ldr	r0, [pc, #248]	@ (8010848 <__mdiff+0x124>)
 801074e:	f000 fcc9 	bl	80110e4 <__assert_func>
 8010752:	2301      	movs	r3, #1
 8010754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010758:	4610      	mov	r0, r2
 801075a:	b003      	add	sp, #12
 801075c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010760:	bfbc      	itt	lt
 8010762:	464b      	movlt	r3, r9
 8010764:	46a1      	movlt	r9, r4
 8010766:	4630      	mov	r0, r6
 8010768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801076c:	bfba      	itte	lt
 801076e:	461c      	movlt	r4, r3
 8010770:	2501      	movlt	r5, #1
 8010772:	2500      	movge	r5, #0
 8010774:	f7ff fd40 	bl	80101f8 <_Balloc>
 8010778:	4602      	mov	r2, r0
 801077a:	b918      	cbnz	r0, 8010784 <__mdiff+0x60>
 801077c:	4b31      	ldr	r3, [pc, #196]	@ (8010844 <__mdiff+0x120>)
 801077e:	f240 2145 	movw	r1, #581	@ 0x245
 8010782:	e7e3      	b.n	801074c <__mdiff+0x28>
 8010784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010788:	6926      	ldr	r6, [r4, #16]
 801078a:	60c5      	str	r5, [r0, #12]
 801078c:	f109 0310 	add.w	r3, r9, #16
 8010790:	f109 0514 	add.w	r5, r9, #20
 8010794:	f104 0e14 	add.w	lr, r4, #20
 8010798:	f100 0b14 	add.w	fp, r0, #20
 801079c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80107a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	46d9      	mov	r9, fp
 80107a8:	f04f 0c00 	mov.w	ip, #0
 80107ac:	9b01      	ldr	r3, [sp, #4]
 80107ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80107b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80107b6:	9301      	str	r3, [sp, #4]
 80107b8:	fa1f f38a 	uxth.w	r3, sl
 80107bc:	4619      	mov	r1, r3
 80107be:	b283      	uxth	r3, r0
 80107c0:	1acb      	subs	r3, r1, r3
 80107c2:	0c00      	lsrs	r0, r0, #16
 80107c4:	4463      	add	r3, ip
 80107c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80107ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107d4:	4576      	cmp	r6, lr
 80107d6:	f849 3b04 	str.w	r3, [r9], #4
 80107da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107de:	d8e5      	bhi.n	80107ac <__mdiff+0x88>
 80107e0:	1b33      	subs	r3, r6, r4
 80107e2:	3b15      	subs	r3, #21
 80107e4:	f023 0303 	bic.w	r3, r3, #3
 80107e8:	3415      	adds	r4, #21
 80107ea:	3304      	adds	r3, #4
 80107ec:	42a6      	cmp	r6, r4
 80107ee:	bf38      	it	cc
 80107f0:	2304      	movcc	r3, #4
 80107f2:	441d      	add	r5, r3
 80107f4:	445b      	add	r3, fp
 80107f6:	461e      	mov	r6, r3
 80107f8:	462c      	mov	r4, r5
 80107fa:	4544      	cmp	r4, r8
 80107fc:	d30e      	bcc.n	801081c <__mdiff+0xf8>
 80107fe:	f108 0103 	add.w	r1, r8, #3
 8010802:	1b49      	subs	r1, r1, r5
 8010804:	f021 0103 	bic.w	r1, r1, #3
 8010808:	3d03      	subs	r5, #3
 801080a:	45a8      	cmp	r8, r5
 801080c:	bf38      	it	cc
 801080e:	2100      	movcc	r1, #0
 8010810:	440b      	add	r3, r1
 8010812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010816:	b191      	cbz	r1, 801083e <__mdiff+0x11a>
 8010818:	6117      	str	r7, [r2, #16]
 801081a:	e79d      	b.n	8010758 <__mdiff+0x34>
 801081c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010820:	46e6      	mov	lr, ip
 8010822:	0c08      	lsrs	r0, r1, #16
 8010824:	fa1c fc81 	uxtah	ip, ip, r1
 8010828:	4471      	add	r1, lr
 801082a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801082e:	b289      	uxth	r1, r1
 8010830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010834:	f846 1b04 	str.w	r1, [r6], #4
 8010838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801083c:	e7dd      	b.n	80107fa <__mdiff+0xd6>
 801083e:	3f01      	subs	r7, #1
 8010840:	e7e7      	b.n	8010812 <__mdiff+0xee>
 8010842:	bf00      	nop
 8010844:	08011f18 	.word	0x08011f18
 8010848:	08011f29 	.word	0x08011f29

0801084c <__d2b>:
 801084c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010850:	460f      	mov	r7, r1
 8010852:	2101      	movs	r1, #1
 8010854:	ec59 8b10 	vmov	r8, r9, d0
 8010858:	4616      	mov	r6, r2
 801085a:	f7ff fccd 	bl	80101f8 <_Balloc>
 801085e:	4604      	mov	r4, r0
 8010860:	b930      	cbnz	r0, 8010870 <__d2b+0x24>
 8010862:	4602      	mov	r2, r0
 8010864:	4b23      	ldr	r3, [pc, #140]	@ (80108f4 <__d2b+0xa8>)
 8010866:	4824      	ldr	r0, [pc, #144]	@ (80108f8 <__d2b+0xac>)
 8010868:	f240 310f 	movw	r1, #783	@ 0x30f
 801086c:	f000 fc3a 	bl	80110e4 <__assert_func>
 8010870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010878:	b10d      	cbz	r5, 801087e <__d2b+0x32>
 801087a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	f1b8 0300 	subs.w	r3, r8, #0
 8010884:	d023      	beq.n	80108ce <__d2b+0x82>
 8010886:	4668      	mov	r0, sp
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	f7ff fd7c 	bl	8010386 <__lo0bits>
 801088e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010892:	b1d0      	cbz	r0, 80108ca <__d2b+0x7e>
 8010894:	f1c0 0320 	rsb	r3, r0, #32
 8010898:	fa02 f303 	lsl.w	r3, r2, r3
 801089c:	430b      	orrs	r3, r1
 801089e:	40c2      	lsrs	r2, r0
 80108a0:	6163      	str	r3, [r4, #20]
 80108a2:	9201      	str	r2, [sp, #4]
 80108a4:	9b01      	ldr	r3, [sp, #4]
 80108a6:	61a3      	str	r3, [r4, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	bf0c      	ite	eq
 80108ac:	2201      	moveq	r2, #1
 80108ae:	2202      	movne	r2, #2
 80108b0:	6122      	str	r2, [r4, #16]
 80108b2:	b1a5      	cbz	r5, 80108de <__d2b+0x92>
 80108b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108b8:	4405      	add	r5, r0
 80108ba:	603d      	str	r5, [r7, #0]
 80108bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80108c0:	6030      	str	r0, [r6, #0]
 80108c2:	4620      	mov	r0, r4
 80108c4:	b003      	add	sp, #12
 80108c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ca:	6161      	str	r1, [r4, #20]
 80108cc:	e7ea      	b.n	80108a4 <__d2b+0x58>
 80108ce:	a801      	add	r0, sp, #4
 80108d0:	f7ff fd59 	bl	8010386 <__lo0bits>
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	6163      	str	r3, [r4, #20]
 80108d8:	3020      	adds	r0, #32
 80108da:	2201      	movs	r2, #1
 80108dc:	e7e8      	b.n	80108b0 <__d2b+0x64>
 80108de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108e6:	6038      	str	r0, [r7, #0]
 80108e8:	6918      	ldr	r0, [r3, #16]
 80108ea:	f7ff fd2d 	bl	8010348 <__hi0bits>
 80108ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108f2:	e7e5      	b.n	80108c0 <__d2b+0x74>
 80108f4:	08011f18 	.word	0x08011f18
 80108f8:	08011f29 	.word	0x08011f29

080108fc <__ssputs_r>:
 80108fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010900:	688e      	ldr	r6, [r1, #8]
 8010902:	461f      	mov	r7, r3
 8010904:	42be      	cmp	r6, r7
 8010906:	680b      	ldr	r3, [r1, #0]
 8010908:	4682      	mov	sl, r0
 801090a:	460c      	mov	r4, r1
 801090c:	4690      	mov	r8, r2
 801090e:	d82d      	bhi.n	801096c <__ssputs_r+0x70>
 8010910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010914:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010918:	d026      	beq.n	8010968 <__ssputs_r+0x6c>
 801091a:	6965      	ldr	r5, [r4, #20]
 801091c:	6909      	ldr	r1, [r1, #16]
 801091e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010922:	eba3 0901 	sub.w	r9, r3, r1
 8010926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801092a:	1c7b      	adds	r3, r7, #1
 801092c:	444b      	add	r3, r9
 801092e:	106d      	asrs	r5, r5, #1
 8010930:	429d      	cmp	r5, r3
 8010932:	bf38      	it	cc
 8010934:	461d      	movcc	r5, r3
 8010936:	0553      	lsls	r3, r2, #21
 8010938:	d527      	bpl.n	801098a <__ssputs_r+0x8e>
 801093a:	4629      	mov	r1, r5
 801093c:	f7ff fbd0 	bl	80100e0 <_malloc_r>
 8010940:	4606      	mov	r6, r0
 8010942:	b360      	cbz	r0, 801099e <__ssputs_r+0xa2>
 8010944:	6921      	ldr	r1, [r4, #16]
 8010946:	464a      	mov	r2, r9
 8010948:	f7fe fcfb 	bl	800f342 <memcpy>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010956:	81a3      	strh	r3, [r4, #12]
 8010958:	6126      	str	r6, [r4, #16]
 801095a:	6165      	str	r5, [r4, #20]
 801095c:	444e      	add	r6, r9
 801095e:	eba5 0509 	sub.w	r5, r5, r9
 8010962:	6026      	str	r6, [r4, #0]
 8010964:	60a5      	str	r5, [r4, #8]
 8010966:	463e      	mov	r6, r7
 8010968:	42be      	cmp	r6, r7
 801096a:	d900      	bls.n	801096e <__ssputs_r+0x72>
 801096c:	463e      	mov	r6, r7
 801096e:	6820      	ldr	r0, [r4, #0]
 8010970:	4632      	mov	r2, r6
 8010972:	4641      	mov	r1, r8
 8010974:	f000 fb6a 	bl	801104c <memmove>
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	1b9b      	subs	r3, r3, r6
 801097c:	60a3      	str	r3, [r4, #8]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	4433      	add	r3, r6
 8010982:	6023      	str	r3, [r4, #0]
 8010984:	2000      	movs	r0, #0
 8010986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801098a:	462a      	mov	r2, r5
 801098c:	f000 fbee 	bl	801116c <_realloc_r>
 8010990:	4606      	mov	r6, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	d1e0      	bne.n	8010958 <__ssputs_r+0x5c>
 8010996:	6921      	ldr	r1, [r4, #16]
 8010998:	4650      	mov	r0, sl
 801099a:	f7ff fb2d 	bl	800fff8 <_free_r>
 801099e:	230c      	movs	r3, #12
 80109a0:	f8ca 3000 	str.w	r3, [sl]
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109aa:	81a3      	strh	r3, [r4, #12]
 80109ac:	f04f 30ff 	mov.w	r0, #4294967295
 80109b0:	e7e9      	b.n	8010986 <__ssputs_r+0x8a>
	...

080109b4 <_svfiprintf_r>:
 80109b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b8:	4698      	mov	r8, r3
 80109ba:	898b      	ldrh	r3, [r1, #12]
 80109bc:	061b      	lsls	r3, r3, #24
 80109be:	b09d      	sub	sp, #116	@ 0x74
 80109c0:	4607      	mov	r7, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	4614      	mov	r4, r2
 80109c6:	d510      	bpl.n	80109ea <_svfiprintf_r+0x36>
 80109c8:	690b      	ldr	r3, [r1, #16]
 80109ca:	b973      	cbnz	r3, 80109ea <_svfiprintf_r+0x36>
 80109cc:	2140      	movs	r1, #64	@ 0x40
 80109ce:	f7ff fb87 	bl	80100e0 <_malloc_r>
 80109d2:	6028      	str	r0, [r5, #0]
 80109d4:	6128      	str	r0, [r5, #16]
 80109d6:	b930      	cbnz	r0, 80109e6 <_svfiprintf_r+0x32>
 80109d8:	230c      	movs	r3, #12
 80109da:	603b      	str	r3, [r7, #0]
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295
 80109e0:	b01d      	add	sp, #116	@ 0x74
 80109e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e6:	2340      	movs	r3, #64	@ 0x40
 80109e8:	616b      	str	r3, [r5, #20]
 80109ea:	2300      	movs	r3, #0
 80109ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80109ee:	2320      	movs	r3, #32
 80109f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80109f8:	2330      	movs	r3, #48	@ 0x30
 80109fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010b98 <_svfiprintf_r+0x1e4>
 80109fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a02:	f04f 0901 	mov.w	r9, #1
 8010a06:	4623      	mov	r3, r4
 8010a08:	469a      	mov	sl, r3
 8010a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a0e:	b10a      	cbz	r2, 8010a14 <_svfiprintf_r+0x60>
 8010a10:	2a25      	cmp	r2, #37	@ 0x25
 8010a12:	d1f9      	bne.n	8010a08 <_svfiprintf_r+0x54>
 8010a14:	ebba 0b04 	subs.w	fp, sl, r4
 8010a18:	d00b      	beq.n	8010a32 <_svfiprintf_r+0x7e>
 8010a1a:	465b      	mov	r3, fp
 8010a1c:	4622      	mov	r2, r4
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4638      	mov	r0, r7
 8010a22:	f7ff ff6b 	bl	80108fc <__ssputs_r>
 8010a26:	3001      	adds	r0, #1
 8010a28:	f000 80a7 	beq.w	8010b7a <_svfiprintf_r+0x1c6>
 8010a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a2e:	445a      	add	r2, fp
 8010a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a32:	f89a 3000 	ldrb.w	r3, [sl]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f000 809f 	beq.w	8010b7a <_svfiprintf_r+0x1c6>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a46:	f10a 0a01 	add.w	sl, sl, #1
 8010a4a:	9304      	str	r3, [sp, #16]
 8010a4c:	9307      	str	r3, [sp, #28]
 8010a4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a52:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a54:	4654      	mov	r4, sl
 8010a56:	2205      	movs	r2, #5
 8010a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5c:	484e      	ldr	r0, [pc, #312]	@ (8010b98 <_svfiprintf_r+0x1e4>)
 8010a5e:	f7ef fbdf 	bl	8000220 <memchr>
 8010a62:	9a04      	ldr	r2, [sp, #16]
 8010a64:	b9d8      	cbnz	r0, 8010a9e <_svfiprintf_r+0xea>
 8010a66:	06d0      	lsls	r0, r2, #27
 8010a68:	bf44      	itt	mi
 8010a6a:	2320      	movmi	r3, #32
 8010a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a70:	0711      	lsls	r1, r2, #28
 8010a72:	bf44      	itt	mi
 8010a74:	232b      	movmi	r3, #43	@ 0x2b
 8010a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a80:	d015      	beq.n	8010aae <_svfiprintf_r+0xfa>
 8010a82:	9a07      	ldr	r2, [sp, #28]
 8010a84:	4654      	mov	r4, sl
 8010a86:	2000      	movs	r0, #0
 8010a88:	f04f 0c0a 	mov.w	ip, #10
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a92:	3b30      	subs	r3, #48	@ 0x30
 8010a94:	2b09      	cmp	r3, #9
 8010a96:	d94b      	bls.n	8010b30 <_svfiprintf_r+0x17c>
 8010a98:	b1b0      	cbz	r0, 8010ac8 <_svfiprintf_r+0x114>
 8010a9a:	9207      	str	r2, [sp, #28]
 8010a9c:	e014      	b.n	8010ac8 <_svfiprintf_r+0x114>
 8010a9e:	eba0 0308 	sub.w	r3, r0, r8
 8010aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	46a2      	mov	sl, r4
 8010aac:	e7d2      	b.n	8010a54 <_svfiprintf_r+0xa0>
 8010aae:	9b03      	ldr	r3, [sp, #12]
 8010ab0:	1d19      	adds	r1, r3, #4
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	9103      	str	r1, [sp, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	bfbb      	ittet	lt
 8010aba:	425b      	neglt	r3, r3
 8010abc:	f042 0202 	orrlt.w	r2, r2, #2
 8010ac0:	9307      	strge	r3, [sp, #28]
 8010ac2:	9307      	strlt	r3, [sp, #28]
 8010ac4:	bfb8      	it	lt
 8010ac6:	9204      	strlt	r2, [sp, #16]
 8010ac8:	7823      	ldrb	r3, [r4, #0]
 8010aca:	2b2e      	cmp	r3, #46	@ 0x2e
 8010acc:	d10a      	bne.n	8010ae4 <_svfiprintf_r+0x130>
 8010ace:	7863      	ldrb	r3, [r4, #1]
 8010ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ad2:	d132      	bne.n	8010b3a <_svfiprintf_r+0x186>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	1d1a      	adds	r2, r3, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	9203      	str	r2, [sp, #12]
 8010adc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ae0:	3402      	adds	r4, #2
 8010ae2:	9305      	str	r3, [sp, #20]
 8010ae4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010ba8 <_svfiprintf_r+0x1f4>
 8010ae8:	7821      	ldrb	r1, [r4, #0]
 8010aea:	2203      	movs	r2, #3
 8010aec:	4650      	mov	r0, sl
 8010aee:	f7ef fb97 	bl	8000220 <memchr>
 8010af2:	b138      	cbz	r0, 8010b04 <_svfiprintf_r+0x150>
 8010af4:	9b04      	ldr	r3, [sp, #16]
 8010af6:	eba0 000a 	sub.w	r0, r0, sl
 8010afa:	2240      	movs	r2, #64	@ 0x40
 8010afc:	4082      	lsls	r2, r0
 8010afe:	4313      	orrs	r3, r2
 8010b00:	3401      	adds	r4, #1
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b08:	4824      	ldr	r0, [pc, #144]	@ (8010b9c <_svfiprintf_r+0x1e8>)
 8010b0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b0e:	2206      	movs	r2, #6
 8010b10:	f7ef fb86 	bl	8000220 <memchr>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d036      	beq.n	8010b86 <_svfiprintf_r+0x1d2>
 8010b18:	4b21      	ldr	r3, [pc, #132]	@ (8010ba0 <_svfiprintf_r+0x1ec>)
 8010b1a:	bb1b      	cbnz	r3, 8010b64 <_svfiprintf_r+0x1b0>
 8010b1c:	9b03      	ldr	r3, [sp, #12]
 8010b1e:	3307      	adds	r3, #7
 8010b20:	f023 0307 	bic.w	r3, r3, #7
 8010b24:	3308      	adds	r3, #8
 8010b26:	9303      	str	r3, [sp, #12]
 8010b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b2a:	4433      	add	r3, r6
 8010b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b2e:	e76a      	b.n	8010a06 <_svfiprintf_r+0x52>
 8010b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b34:	460c      	mov	r4, r1
 8010b36:	2001      	movs	r0, #1
 8010b38:	e7a8      	b.n	8010a8c <_svfiprintf_r+0xd8>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	3401      	adds	r4, #1
 8010b3e:	9305      	str	r3, [sp, #20]
 8010b40:	4619      	mov	r1, r3
 8010b42:	f04f 0c0a 	mov.w	ip, #10
 8010b46:	4620      	mov	r0, r4
 8010b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b4c:	3a30      	subs	r2, #48	@ 0x30
 8010b4e:	2a09      	cmp	r2, #9
 8010b50:	d903      	bls.n	8010b5a <_svfiprintf_r+0x1a6>
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0c6      	beq.n	8010ae4 <_svfiprintf_r+0x130>
 8010b56:	9105      	str	r1, [sp, #20]
 8010b58:	e7c4      	b.n	8010ae4 <_svfiprintf_r+0x130>
 8010b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b5e:	4604      	mov	r4, r0
 8010b60:	2301      	movs	r3, #1
 8010b62:	e7f0      	b.n	8010b46 <_svfiprintf_r+0x192>
 8010b64:	ab03      	add	r3, sp, #12
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	462a      	mov	r2, r5
 8010b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8010ba4 <_svfiprintf_r+0x1f0>)
 8010b6c:	a904      	add	r1, sp, #16
 8010b6e:	4638      	mov	r0, r7
 8010b70:	f7fd fd72 	bl	800e658 <_printf_float>
 8010b74:	1c42      	adds	r2, r0, #1
 8010b76:	4606      	mov	r6, r0
 8010b78:	d1d6      	bne.n	8010b28 <_svfiprintf_r+0x174>
 8010b7a:	89ab      	ldrh	r3, [r5, #12]
 8010b7c:	065b      	lsls	r3, r3, #25
 8010b7e:	f53f af2d 	bmi.w	80109dc <_svfiprintf_r+0x28>
 8010b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b84:	e72c      	b.n	80109e0 <_svfiprintf_r+0x2c>
 8010b86:	ab03      	add	r3, sp, #12
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	4b05      	ldr	r3, [pc, #20]	@ (8010ba4 <_svfiprintf_r+0x1f0>)
 8010b8e:	a904      	add	r1, sp, #16
 8010b90:	4638      	mov	r0, r7
 8010b92:	f7fd fff9 	bl	800eb88 <_printf_i>
 8010b96:	e7ed      	b.n	8010b74 <_svfiprintf_r+0x1c0>
 8010b98:	08012080 	.word	0x08012080
 8010b9c:	0801208a 	.word	0x0801208a
 8010ba0:	0800e659 	.word	0x0800e659
 8010ba4:	080108fd 	.word	0x080108fd
 8010ba8:	08012086 	.word	0x08012086

08010bac <__sfputc_r>:
 8010bac:	6893      	ldr	r3, [r2, #8]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	b410      	push	{r4}
 8010bb4:	6093      	str	r3, [r2, #8]
 8010bb6:	da08      	bge.n	8010bca <__sfputc_r+0x1e>
 8010bb8:	6994      	ldr	r4, [r2, #24]
 8010bba:	42a3      	cmp	r3, r4
 8010bbc:	db01      	blt.n	8010bc2 <__sfputc_r+0x16>
 8010bbe:	290a      	cmp	r1, #10
 8010bc0:	d103      	bne.n	8010bca <__sfputc_r+0x1e>
 8010bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bc6:	f7fe baa8 	b.w	800f11a <__swbuf_r>
 8010bca:	6813      	ldr	r3, [r2, #0]
 8010bcc:	1c58      	adds	r0, r3, #1
 8010bce:	6010      	str	r0, [r2, #0]
 8010bd0:	7019      	strb	r1, [r3, #0]
 8010bd2:	4608      	mov	r0, r1
 8010bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <__sfputs_r>:
 8010bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bdc:	4606      	mov	r6, r0
 8010bde:	460f      	mov	r7, r1
 8010be0:	4614      	mov	r4, r2
 8010be2:	18d5      	adds	r5, r2, r3
 8010be4:	42ac      	cmp	r4, r5
 8010be6:	d101      	bne.n	8010bec <__sfputs_r+0x12>
 8010be8:	2000      	movs	r0, #0
 8010bea:	e007      	b.n	8010bfc <__sfputs_r+0x22>
 8010bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bf0:	463a      	mov	r2, r7
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ff ffda 	bl	8010bac <__sfputc_r>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d1f3      	bne.n	8010be4 <__sfputs_r+0xa>
 8010bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c00 <_vfiprintf_r>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	460d      	mov	r5, r1
 8010c06:	b09d      	sub	sp, #116	@ 0x74
 8010c08:	4614      	mov	r4, r2
 8010c0a:	4698      	mov	r8, r3
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	b118      	cbz	r0, 8010c18 <_vfiprintf_r+0x18>
 8010c10:	6a03      	ldr	r3, [r0, #32]
 8010c12:	b90b      	cbnz	r3, 8010c18 <_vfiprintf_r+0x18>
 8010c14:	f7fe f964 	bl	800eee0 <__sinit>
 8010c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c1a:	07d9      	lsls	r1, r3, #31
 8010c1c:	d405      	bmi.n	8010c2a <_vfiprintf_r+0x2a>
 8010c1e:	89ab      	ldrh	r3, [r5, #12]
 8010c20:	059a      	lsls	r2, r3, #22
 8010c22:	d402      	bmi.n	8010c2a <_vfiprintf_r+0x2a>
 8010c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c26:	f7fe fb8a 	bl	800f33e <__retarget_lock_acquire_recursive>
 8010c2a:	89ab      	ldrh	r3, [r5, #12]
 8010c2c:	071b      	lsls	r3, r3, #28
 8010c2e:	d501      	bpl.n	8010c34 <_vfiprintf_r+0x34>
 8010c30:	692b      	ldr	r3, [r5, #16]
 8010c32:	b99b      	cbnz	r3, 8010c5c <_vfiprintf_r+0x5c>
 8010c34:	4629      	mov	r1, r5
 8010c36:	4630      	mov	r0, r6
 8010c38:	f7fe faae 	bl	800f198 <__swsetup_r>
 8010c3c:	b170      	cbz	r0, 8010c5c <_vfiprintf_r+0x5c>
 8010c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c40:	07dc      	lsls	r4, r3, #31
 8010c42:	d504      	bpl.n	8010c4e <_vfiprintf_r+0x4e>
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	b01d      	add	sp, #116	@ 0x74
 8010c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4e:	89ab      	ldrh	r3, [r5, #12]
 8010c50:	0598      	lsls	r0, r3, #22
 8010c52:	d4f7      	bmi.n	8010c44 <_vfiprintf_r+0x44>
 8010c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c56:	f7fe fb73 	bl	800f340 <__retarget_lock_release_recursive>
 8010c5a:	e7f3      	b.n	8010c44 <_vfiprintf_r+0x44>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c60:	2320      	movs	r3, #32
 8010c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c6a:	2330      	movs	r3, #48	@ 0x30
 8010c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e1c <_vfiprintf_r+0x21c>
 8010c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c74:	f04f 0901 	mov.w	r9, #1
 8010c78:	4623      	mov	r3, r4
 8010c7a:	469a      	mov	sl, r3
 8010c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c80:	b10a      	cbz	r2, 8010c86 <_vfiprintf_r+0x86>
 8010c82:	2a25      	cmp	r2, #37	@ 0x25
 8010c84:	d1f9      	bne.n	8010c7a <_vfiprintf_r+0x7a>
 8010c86:	ebba 0b04 	subs.w	fp, sl, r4
 8010c8a:	d00b      	beq.n	8010ca4 <_vfiprintf_r+0xa4>
 8010c8c:	465b      	mov	r3, fp
 8010c8e:	4622      	mov	r2, r4
 8010c90:	4629      	mov	r1, r5
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ff ffa1 	bl	8010bda <__sfputs_r>
 8010c98:	3001      	adds	r0, #1
 8010c9a:	f000 80a7 	beq.w	8010dec <_vfiprintf_r+0x1ec>
 8010c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ca0:	445a      	add	r2, fp
 8010ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f000 809f 	beq.w	8010dec <_vfiprintf_r+0x1ec>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cb8:	f10a 0a01 	add.w	sl, sl, #1
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	9307      	str	r3, [sp, #28]
 8010cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cc6:	4654      	mov	r4, sl
 8010cc8:	2205      	movs	r2, #5
 8010cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cce:	4853      	ldr	r0, [pc, #332]	@ (8010e1c <_vfiprintf_r+0x21c>)
 8010cd0:	f7ef faa6 	bl	8000220 <memchr>
 8010cd4:	9a04      	ldr	r2, [sp, #16]
 8010cd6:	b9d8      	cbnz	r0, 8010d10 <_vfiprintf_r+0x110>
 8010cd8:	06d1      	lsls	r1, r2, #27
 8010cda:	bf44      	itt	mi
 8010cdc:	2320      	movmi	r3, #32
 8010cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ce2:	0713      	lsls	r3, r2, #28
 8010ce4:	bf44      	itt	mi
 8010ce6:	232b      	movmi	r3, #43	@ 0x2b
 8010ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cec:	f89a 3000 	ldrb.w	r3, [sl]
 8010cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cf2:	d015      	beq.n	8010d20 <_vfiprintf_r+0x120>
 8010cf4:	9a07      	ldr	r2, [sp, #28]
 8010cf6:	4654      	mov	r4, sl
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	f04f 0c0a 	mov.w	ip, #10
 8010cfe:	4621      	mov	r1, r4
 8010d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d04:	3b30      	subs	r3, #48	@ 0x30
 8010d06:	2b09      	cmp	r3, #9
 8010d08:	d94b      	bls.n	8010da2 <_vfiprintf_r+0x1a2>
 8010d0a:	b1b0      	cbz	r0, 8010d3a <_vfiprintf_r+0x13a>
 8010d0c:	9207      	str	r2, [sp, #28]
 8010d0e:	e014      	b.n	8010d3a <_vfiprintf_r+0x13a>
 8010d10:	eba0 0308 	sub.w	r3, r0, r8
 8010d14:	fa09 f303 	lsl.w	r3, r9, r3
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	9304      	str	r3, [sp, #16]
 8010d1c:	46a2      	mov	sl, r4
 8010d1e:	e7d2      	b.n	8010cc6 <_vfiprintf_r+0xc6>
 8010d20:	9b03      	ldr	r3, [sp, #12]
 8010d22:	1d19      	adds	r1, r3, #4
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	9103      	str	r1, [sp, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	bfbb      	ittet	lt
 8010d2c:	425b      	neglt	r3, r3
 8010d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8010d32:	9307      	strge	r3, [sp, #28]
 8010d34:	9307      	strlt	r3, [sp, #28]
 8010d36:	bfb8      	it	lt
 8010d38:	9204      	strlt	r2, [sp, #16]
 8010d3a:	7823      	ldrb	r3, [r4, #0]
 8010d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d3e:	d10a      	bne.n	8010d56 <_vfiprintf_r+0x156>
 8010d40:	7863      	ldrb	r3, [r4, #1]
 8010d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d44:	d132      	bne.n	8010dac <_vfiprintf_r+0x1ac>
 8010d46:	9b03      	ldr	r3, [sp, #12]
 8010d48:	1d1a      	adds	r2, r3, #4
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	9203      	str	r2, [sp, #12]
 8010d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d52:	3402      	adds	r4, #2
 8010d54:	9305      	str	r3, [sp, #20]
 8010d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e2c <_vfiprintf_r+0x22c>
 8010d5a:	7821      	ldrb	r1, [r4, #0]
 8010d5c:	2203      	movs	r2, #3
 8010d5e:	4650      	mov	r0, sl
 8010d60:	f7ef fa5e 	bl	8000220 <memchr>
 8010d64:	b138      	cbz	r0, 8010d76 <_vfiprintf_r+0x176>
 8010d66:	9b04      	ldr	r3, [sp, #16]
 8010d68:	eba0 000a 	sub.w	r0, r0, sl
 8010d6c:	2240      	movs	r2, #64	@ 0x40
 8010d6e:	4082      	lsls	r2, r0
 8010d70:	4313      	orrs	r3, r2
 8010d72:	3401      	adds	r4, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d7a:	4829      	ldr	r0, [pc, #164]	@ (8010e20 <_vfiprintf_r+0x220>)
 8010d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d80:	2206      	movs	r2, #6
 8010d82:	f7ef fa4d 	bl	8000220 <memchr>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d03f      	beq.n	8010e0a <_vfiprintf_r+0x20a>
 8010d8a:	4b26      	ldr	r3, [pc, #152]	@ (8010e24 <_vfiprintf_r+0x224>)
 8010d8c:	bb1b      	cbnz	r3, 8010dd6 <_vfiprintf_r+0x1d6>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	3307      	adds	r3, #7
 8010d92:	f023 0307 	bic.w	r3, r3, #7
 8010d96:	3308      	adds	r3, #8
 8010d98:	9303      	str	r3, [sp, #12]
 8010d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d9c:	443b      	add	r3, r7
 8010d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010da0:	e76a      	b.n	8010c78 <_vfiprintf_r+0x78>
 8010da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da6:	460c      	mov	r4, r1
 8010da8:	2001      	movs	r0, #1
 8010daa:	e7a8      	b.n	8010cfe <_vfiprintf_r+0xfe>
 8010dac:	2300      	movs	r3, #0
 8010dae:	3401      	adds	r4, #1
 8010db0:	9305      	str	r3, [sp, #20]
 8010db2:	4619      	mov	r1, r3
 8010db4:	f04f 0c0a 	mov.w	ip, #10
 8010db8:	4620      	mov	r0, r4
 8010dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dbe:	3a30      	subs	r2, #48	@ 0x30
 8010dc0:	2a09      	cmp	r2, #9
 8010dc2:	d903      	bls.n	8010dcc <_vfiprintf_r+0x1cc>
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d0c6      	beq.n	8010d56 <_vfiprintf_r+0x156>
 8010dc8:	9105      	str	r1, [sp, #20]
 8010dca:	e7c4      	b.n	8010d56 <_vfiprintf_r+0x156>
 8010dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e7f0      	b.n	8010db8 <_vfiprintf_r+0x1b8>
 8010dd6:	ab03      	add	r3, sp, #12
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	462a      	mov	r2, r5
 8010ddc:	4b12      	ldr	r3, [pc, #72]	@ (8010e28 <_vfiprintf_r+0x228>)
 8010dde:	a904      	add	r1, sp, #16
 8010de0:	4630      	mov	r0, r6
 8010de2:	f7fd fc39 	bl	800e658 <_printf_float>
 8010de6:	4607      	mov	r7, r0
 8010de8:	1c78      	adds	r0, r7, #1
 8010dea:	d1d6      	bne.n	8010d9a <_vfiprintf_r+0x19a>
 8010dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dee:	07d9      	lsls	r1, r3, #31
 8010df0:	d405      	bmi.n	8010dfe <_vfiprintf_r+0x1fe>
 8010df2:	89ab      	ldrh	r3, [r5, #12]
 8010df4:	059a      	lsls	r2, r3, #22
 8010df6:	d402      	bmi.n	8010dfe <_vfiprintf_r+0x1fe>
 8010df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dfa:	f7fe faa1 	bl	800f340 <__retarget_lock_release_recursive>
 8010dfe:	89ab      	ldrh	r3, [r5, #12]
 8010e00:	065b      	lsls	r3, r3, #25
 8010e02:	f53f af1f 	bmi.w	8010c44 <_vfiprintf_r+0x44>
 8010e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e08:	e71e      	b.n	8010c48 <_vfiprintf_r+0x48>
 8010e0a:	ab03      	add	r3, sp, #12
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	462a      	mov	r2, r5
 8010e10:	4b05      	ldr	r3, [pc, #20]	@ (8010e28 <_vfiprintf_r+0x228>)
 8010e12:	a904      	add	r1, sp, #16
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7fd feb7 	bl	800eb88 <_printf_i>
 8010e1a:	e7e4      	b.n	8010de6 <_vfiprintf_r+0x1e6>
 8010e1c:	08012080 	.word	0x08012080
 8010e20:	0801208a 	.word	0x0801208a
 8010e24:	0800e659 	.word	0x0800e659
 8010e28:	08010bdb 	.word	0x08010bdb
 8010e2c:	08012086 	.word	0x08012086

08010e30 <__sflush_r>:
 8010e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e38:	0716      	lsls	r6, r2, #28
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	d454      	bmi.n	8010eea <__sflush_r+0xba>
 8010e40:	684b      	ldr	r3, [r1, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	dc02      	bgt.n	8010e4c <__sflush_r+0x1c>
 8010e46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	dd48      	ble.n	8010ede <__sflush_r+0xae>
 8010e4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e4e:	2e00      	cmp	r6, #0
 8010e50:	d045      	beq.n	8010ede <__sflush_r+0xae>
 8010e52:	2300      	movs	r3, #0
 8010e54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e58:	682f      	ldr	r7, [r5, #0]
 8010e5a:	6a21      	ldr	r1, [r4, #32]
 8010e5c:	602b      	str	r3, [r5, #0]
 8010e5e:	d030      	beq.n	8010ec2 <__sflush_r+0x92>
 8010e60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	0759      	lsls	r1, r3, #29
 8010e66:	d505      	bpl.n	8010e74 <__sflush_r+0x44>
 8010e68:	6863      	ldr	r3, [r4, #4]
 8010e6a:	1ad2      	subs	r2, r2, r3
 8010e6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e6e:	b10b      	cbz	r3, 8010e74 <__sflush_r+0x44>
 8010e70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e72:	1ad2      	subs	r2, r2, r3
 8010e74:	2300      	movs	r3, #0
 8010e76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e78:	6a21      	ldr	r1, [r4, #32]
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	47b0      	blx	r6
 8010e7e:	1c43      	adds	r3, r0, #1
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	d106      	bne.n	8010e92 <__sflush_r+0x62>
 8010e84:	6829      	ldr	r1, [r5, #0]
 8010e86:	291d      	cmp	r1, #29
 8010e88:	d82b      	bhi.n	8010ee2 <__sflush_r+0xb2>
 8010e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8010f34 <__sflush_r+0x104>)
 8010e8c:	410a      	asrs	r2, r1
 8010e8e:	07d6      	lsls	r6, r2, #31
 8010e90:	d427      	bmi.n	8010ee2 <__sflush_r+0xb2>
 8010e92:	2200      	movs	r2, #0
 8010e94:	6062      	str	r2, [r4, #4]
 8010e96:	04d9      	lsls	r1, r3, #19
 8010e98:	6922      	ldr	r2, [r4, #16]
 8010e9a:	6022      	str	r2, [r4, #0]
 8010e9c:	d504      	bpl.n	8010ea8 <__sflush_r+0x78>
 8010e9e:	1c42      	adds	r2, r0, #1
 8010ea0:	d101      	bne.n	8010ea6 <__sflush_r+0x76>
 8010ea2:	682b      	ldr	r3, [r5, #0]
 8010ea4:	b903      	cbnz	r3, 8010ea8 <__sflush_r+0x78>
 8010ea6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eaa:	602f      	str	r7, [r5, #0]
 8010eac:	b1b9      	cbz	r1, 8010ede <__sflush_r+0xae>
 8010eae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010eb2:	4299      	cmp	r1, r3
 8010eb4:	d002      	beq.n	8010ebc <__sflush_r+0x8c>
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7ff f89e 	bl	800fff8 <_free_r>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ec0:	e00d      	b.n	8010ede <__sflush_r+0xae>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	47b0      	blx	r6
 8010ec8:	4602      	mov	r2, r0
 8010eca:	1c50      	adds	r0, r2, #1
 8010ecc:	d1c9      	bne.n	8010e62 <__sflush_r+0x32>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d0c6      	beq.n	8010e62 <__sflush_r+0x32>
 8010ed4:	2b1d      	cmp	r3, #29
 8010ed6:	d001      	beq.n	8010edc <__sflush_r+0xac>
 8010ed8:	2b16      	cmp	r3, #22
 8010eda:	d11e      	bne.n	8010f1a <__sflush_r+0xea>
 8010edc:	602f      	str	r7, [r5, #0]
 8010ede:	2000      	movs	r0, #0
 8010ee0:	e022      	b.n	8010f28 <__sflush_r+0xf8>
 8010ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ee6:	b21b      	sxth	r3, r3
 8010ee8:	e01b      	b.n	8010f22 <__sflush_r+0xf2>
 8010eea:	690f      	ldr	r7, [r1, #16]
 8010eec:	2f00      	cmp	r7, #0
 8010eee:	d0f6      	beq.n	8010ede <__sflush_r+0xae>
 8010ef0:	0793      	lsls	r3, r2, #30
 8010ef2:	680e      	ldr	r6, [r1, #0]
 8010ef4:	bf08      	it	eq
 8010ef6:	694b      	ldreq	r3, [r1, #20]
 8010ef8:	600f      	str	r7, [r1, #0]
 8010efa:	bf18      	it	ne
 8010efc:	2300      	movne	r3, #0
 8010efe:	eba6 0807 	sub.w	r8, r6, r7
 8010f02:	608b      	str	r3, [r1, #8]
 8010f04:	f1b8 0f00 	cmp.w	r8, #0
 8010f08:	dde9      	ble.n	8010ede <__sflush_r+0xae>
 8010f0a:	6a21      	ldr	r1, [r4, #32]
 8010f0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f0e:	4643      	mov	r3, r8
 8010f10:	463a      	mov	r2, r7
 8010f12:	4628      	mov	r0, r5
 8010f14:	47b0      	blx	r6
 8010f16:	2800      	cmp	r0, #0
 8010f18:	dc08      	bgt.n	8010f2c <__sflush_r+0xfc>
 8010f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f22:	81a3      	strh	r3, [r4, #12]
 8010f24:	f04f 30ff 	mov.w	r0, #4294967295
 8010f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f2c:	4407      	add	r7, r0
 8010f2e:	eba8 0800 	sub.w	r8, r8, r0
 8010f32:	e7e7      	b.n	8010f04 <__sflush_r+0xd4>
 8010f34:	dfbffffe 	.word	0xdfbffffe

08010f38 <_fflush_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	690b      	ldr	r3, [r1, #16]
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	460c      	mov	r4, r1
 8010f40:	b913      	cbnz	r3, 8010f48 <_fflush_r+0x10>
 8010f42:	2500      	movs	r5, #0
 8010f44:	4628      	mov	r0, r5
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	b118      	cbz	r0, 8010f52 <_fflush_r+0x1a>
 8010f4a:	6a03      	ldr	r3, [r0, #32]
 8010f4c:	b90b      	cbnz	r3, 8010f52 <_fflush_r+0x1a>
 8010f4e:	f7fd ffc7 	bl	800eee0 <__sinit>
 8010f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0f3      	beq.n	8010f42 <_fflush_r+0xa>
 8010f5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f5c:	07d0      	lsls	r0, r2, #31
 8010f5e:	d404      	bmi.n	8010f6a <_fflush_r+0x32>
 8010f60:	0599      	lsls	r1, r3, #22
 8010f62:	d402      	bmi.n	8010f6a <_fflush_r+0x32>
 8010f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f66:	f7fe f9ea 	bl	800f33e <__retarget_lock_acquire_recursive>
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	f7ff ff5f 	bl	8010e30 <__sflush_r>
 8010f72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f74:	07da      	lsls	r2, r3, #31
 8010f76:	4605      	mov	r5, r0
 8010f78:	d4e4      	bmi.n	8010f44 <_fflush_r+0xc>
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	059b      	lsls	r3, r3, #22
 8010f7e:	d4e1      	bmi.n	8010f44 <_fflush_r+0xc>
 8010f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f82:	f7fe f9dd 	bl	800f340 <__retarget_lock_release_recursive>
 8010f86:	e7dd      	b.n	8010f44 <_fflush_r+0xc>

08010f88 <__swhatbuf_r>:
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f90:	2900      	cmp	r1, #0
 8010f92:	b096      	sub	sp, #88	@ 0x58
 8010f94:	4615      	mov	r5, r2
 8010f96:	461e      	mov	r6, r3
 8010f98:	da0d      	bge.n	8010fb6 <__swhatbuf_r+0x2e>
 8010f9a:	89a3      	ldrh	r3, [r4, #12]
 8010f9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010fa0:	f04f 0100 	mov.w	r1, #0
 8010fa4:	bf14      	ite	ne
 8010fa6:	2340      	movne	r3, #64	@ 0x40
 8010fa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010fac:	2000      	movs	r0, #0
 8010fae:	6031      	str	r1, [r6, #0]
 8010fb0:	602b      	str	r3, [r5, #0]
 8010fb2:	b016      	add	sp, #88	@ 0x58
 8010fb4:	bd70      	pop	{r4, r5, r6, pc}
 8010fb6:	466a      	mov	r2, sp
 8010fb8:	f000 f862 	bl	8011080 <_fstat_r>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	dbec      	blt.n	8010f9a <__swhatbuf_r+0x12>
 8010fc0:	9901      	ldr	r1, [sp, #4]
 8010fc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010fc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010fca:	4259      	negs	r1, r3
 8010fcc:	4159      	adcs	r1, r3
 8010fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fd2:	e7eb      	b.n	8010fac <__swhatbuf_r+0x24>

08010fd4 <__smakebuf_r>:
 8010fd4:	898b      	ldrh	r3, [r1, #12]
 8010fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fd8:	079d      	lsls	r5, r3, #30
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460c      	mov	r4, r1
 8010fde:	d507      	bpl.n	8010ff0 <__smakebuf_r+0x1c>
 8010fe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	6123      	str	r3, [r4, #16]
 8010fe8:	2301      	movs	r3, #1
 8010fea:	6163      	str	r3, [r4, #20]
 8010fec:	b003      	add	sp, #12
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff0:	ab01      	add	r3, sp, #4
 8010ff2:	466a      	mov	r2, sp
 8010ff4:	f7ff ffc8 	bl	8010f88 <__swhatbuf_r>
 8010ff8:	9f00      	ldr	r7, [sp, #0]
 8010ffa:	4605      	mov	r5, r0
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	4630      	mov	r0, r6
 8011000:	f7ff f86e 	bl	80100e0 <_malloc_r>
 8011004:	b948      	cbnz	r0, 801101a <__smakebuf_r+0x46>
 8011006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801100a:	059a      	lsls	r2, r3, #22
 801100c:	d4ee      	bmi.n	8010fec <__smakebuf_r+0x18>
 801100e:	f023 0303 	bic.w	r3, r3, #3
 8011012:	f043 0302 	orr.w	r3, r3, #2
 8011016:	81a3      	strh	r3, [r4, #12]
 8011018:	e7e2      	b.n	8010fe0 <__smakebuf_r+0xc>
 801101a:	89a3      	ldrh	r3, [r4, #12]
 801101c:	6020      	str	r0, [r4, #0]
 801101e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011022:	81a3      	strh	r3, [r4, #12]
 8011024:	9b01      	ldr	r3, [sp, #4]
 8011026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801102a:	b15b      	cbz	r3, 8011044 <__smakebuf_r+0x70>
 801102c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011030:	4630      	mov	r0, r6
 8011032:	f000 f837 	bl	80110a4 <_isatty_r>
 8011036:	b128      	cbz	r0, 8011044 <__smakebuf_r+0x70>
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	f023 0303 	bic.w	r3, r3, #3
 801103e:	f043 0301 	orr.w	r3, r3, #1
 8011042:	81a3      	strh	r3, [r4, #12]
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	431d      	orrs	r5, r3
 8011048:	81a5      	strh	r5, [r4, #12]
 801104a:	e7cf      	b.n	8010fec <__smakebuf_r+0x18>

0801104c <memmove>:
 801104c:	4288      	cmp	r0, r1
 801104e:	b510      	push	{r4, lr}
 8011050:	eb01 0402 	add.w	r4, r1, r2
 8011054:	d902      	bls.n	801105c <memmove+0x10>
 8011056:	4284      	cmp	r4, r0
 8011058:	4623      	mov	r3, r4
 801105a:	d807      	bhi.n	801106c <memmove+0x20>
 801105c:	1e43      	subs	r3, r0, #1
 801105e:	42a1      	cmp	r1, r4
 8011060:	d008      	beq.n	8011074 <memmove+0x28>
 8011062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011066:	f803 2f01 	strb.w	r2, [r3, #1]!
 801106a:	e7f8      	b.n	801105e <memmove+0x12>
 801106c:	4402      	add	r2, r0
 801106e:	4601      	mov	r1, r0
 8011070:	428a      	cmp	r2, r1
 8011072:	d100      	bne.n	8011076 <memmove+0x2a>
 8011074:	bd10      	pop	{r4, pc}
 8011076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801107a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801107e:	e7f7      	b.n	8011070 <memmove+0x24>

08011080 <_fstat_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	4d07      	ldr	r5, [pc, #28]	@ (80110a0 <_fstat_r+0x20>)
 8011084:	2300      	movs	r3, #0
 8011086:	4604      	mov	r4, r0
 8011088:	4608      	mov	r0, r1
 801108a:	4611      	mov	r1, r2
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	f7f2 fc3b 	bl	8003908 <_fstat>
 8011092:	1c43      	adds	r3, r0, #1
 8011094:	d102      	bne.n	801109c <_fstat_r+0x1c>
 8011096:	682b      	ldr	r3, [r5, #0]
 8011098:	b103      	cbz	r3, 801109c <_fstat_r+0x1c>
 801109a:	6023      	str	r3, [r4, #0]
 801109c:	bd38      	pop	{r3, r4, r5, pc}
 801109e:	bf00      	nop
 80110a0:	20006ec8 	.word	0x20006ec8

080110a4 <_isatty_r>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4d06      	ldr	r5, [pc, #24]	@ (80110c0 <_isatty_r+0x1c>)
 80110a8:	2300      	movs	r3, #0
 80110aa:	4604      	mov	r4, r0
 80110ac:	4608      	mov	r0, r1
 80110ae:	602b      	str	r3, [r5, #0]
 80110b0:	f7f2 fc3a 	bl	8003928 <_isatty>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_isatty_r+0x1a>
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	b103      	cbz	r3, 80110be <_isatty_r+0x1a>
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	20006ec8 	.word	0x20006ec8

080110c4 <_sbrk_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d06      	ldr	r5, [pc, #24]	@ (80110e0 <_sbrk_r+0x1c>)
 80110c8:	2300      	movs	r3, #0
 80110ca:	4604      	mov	r4, r0
 80110cc:	4608      	mov	r0, r1
 80110ce:	602b      	str	r3, [r5, #0]
 80110d0:	f7f2 fc42 	bl	8003958 <_sbrk>
 80110d4:	1c43      	adds	r3, r0, #1
 80110d6:	d102      	bne.n	80110de <_sbrk_r+0x1a>
 80110d8:	682b      	ldr	r3, [r5, #0]
 80110da:	b103      	cbz	r3, 80110de <_sbrk_r+0x1a>
 80110dc:	6023      	str	r3, [r4, #0]
 80110de:	bd38      	pop	{r3, r4, r5, pc}
 80110e0:	20006ec8 	.word	0x20006ec8

080110e4 <__assert_func>:
 80110e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110e6:	4614      	mov	r4, r2
 80110e8:	461a      	mov	r2, r3
 80110ea:	4b09      	ldr	r3, [pc, #36]	@ (8011110 <__assert_func+0x2c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4605      	mov	r5, r0
 80110f0:	68d8      	ldr	r0, [r3, #12]
 80110f2:	b954      	cbnz	r4, 801110a <__assert_func+0x26>
 80110f4:	4b07      	ldr	r3, [pc, #28]	@ (8011114 <__assert_func+0x30>)
 80110f6:	461c      	mov	r4, r3
 80110f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110fc:	9100      	str	r1, [sp, #0]
 80110fe:	462b      	mov	r3, r5
 8011100:	4905      	ldr	r1, [pc, #20]	@ (8011118 <__assert_func+0x34>)
 8011102:	f000 f86f 	bl	80111e4 <fiprintf>
 8011106:	f000 f87f 	bl	8011208 <abort>
 801110a:	4b04      	ldr	r3, [pc, #16]	@ (801111c <__assert_func+0x38>)
 801110c:	e7f4      	b.n	80110f8 <__assert_func+0x14>
 801110e:	bf00      	nop
 8011110:	2000001c 	.word	0x2000001c
 8011114:	080120d6 	.word	0x080120d6
 8011118:	080120a8 	.word	0x080120a8
 801111c:	0801209b 	.word	0x0801209b

08011120 <_calloc_r>:
 8011120:	b570      	push	{r4, r5, r6, lr}
 8011122:	fba1 5402 	umull	r5, r4, r1, r2
 8011126:	b93c      	cbnz	r4, 8011138 <_calloc_r+0x18>
 8011128:	4629      	mov	r1, r5
 801112a:	f7fe ffd9 	bl	80100e0 <_malloc_r>
 801112e:	4606      	mov	r6, r0
 8011130:	b928      	cbnz	r0, 801113e <_calloc_r+0x1e>
 8011132:	2600      	movs	r6, #0
 8011134:	4630      	mov	r0, r6
 8011136:	bd70      	pop	{r4, r5, r6, pc}
 8011138:	220c      	movs	r2, #12
 801113a:	6002      	str	r2, [r0, #0]
 801113c:	e7f9      	b.n	8011132 <_calloc_r+0x12>
 801113e:	462a      	mov	r2, r5
 8011140:	4621      	mov	r1, r4
 8011142:	f7fe f87f 	bl	800f244 <memset>
 8011146:	e7f5      	b.n	8011134 <_calloc_r+0x14>

08011148 <__ascii_mbtowc>:
 8011148:	b082      	sub	sp, #8
 801114a:	b901      	cbnz	r1, 801114e <__ascii_mbtowc+0x6>
 801114c:	a901      	add	r1, sp, #4
 801114e:	b142      	cbz	r2, 8011162 <__ascii_mbtowc+0x1a>
 8011150:	b14b      	cbz	r3, 8011166 <__ascii_mbtowc+0x1e>
 8011152:	7813      	ldrb	r3, [r2, #0]
 8011154:	600b      	str	r3, [r1, #0]
 8011156:	7812      	ldrb	r2, [r2, #0]
 8011158:	1e10      	subs	r0, r2, #0
 801115a:	bf18      	it	ne
 801115c:	2001      	movne	r0, #1
 801115e:	b002      	add	sp, #8
 8011160:	4770      	bx	lr
 8011162:	4610      	mov	r0, r2
 8011164:	e7fb      	b.n	801115e <__ascii_mbtowc+0x16>
 8011166:	f06f 0001 	mvn.w	r0, #1
 801116a:	e7f8      	b.n	801115e <__ascii_mbtowc+0x16>

0801116c <_realloc_r>:
 801116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011170:	4680      	mov	r8, r0
 8011172:	4615      	mov	r5, r2
 8011174:	460c      	mov	r4, r1
 8011176:	b921      	cbnz	r1, 8011182 <_realloc_r+0x16>
 8011178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801117c:	4611      	mov	r1, r2
 801117e:	f7fe bfaf 	b.w	80100e0 <_malloc_r>
 8011182:	b92a      	cbnz	r2, 8011190 <_realloc_r+0x24>
 8011184:	f7fe ff38 	bl	800fff8 <_free_r>
 8011188:	2400      	movs	r4, #0
 801118a:	4620      	mov	r0, r4
 801118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011190:	f000 f841 	bl	8011216 <_malloc_usable_size_r>
 8011194:	4285      	cmp	r5, r0
 8011196:	4606      	mov	r6, r0
 8011198:	d802      	bhi.n	80111a0 <_realloc_r+0x34>
 801119a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801119e:	d8f4      	bhi.n	801118a <_realloc_r+0x1e>
 80111a0:	4629      	mov	r1, r5
 80111a2:	4640      	mov	r0, r8
 80111a4:	f7fe ff9c 	bl	80100e0 <_malloc_r>
 80111a8:	4607      	mov	r7, r0
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d0ec      	beq.n	8011188 <_realloc_r+0x1c>
 80111ae:	42b5      	cmp	r5, r6
 80111b0:	462a      	mov	r2, r5
 80111b2:	4621      	mov	r1, r4
 80111b4:	bf28      	it	cs
 80111b6:	4632      	movcs	r2, r6
 80111b8:	f7fe f8c3 	bl	800f342 <memcpy>
 80111bc:	4621      	mov	r1, r4
 80111be:	4640      	mov	r0, r8
 80111c0:	f7fe ff1a 	bl	800fff8 <_free_r>
 80111c4:	463c      	mov	r4, r7
 80111c6:	e7e0      	b.n	801118a <_realloc_r+0x1e>

080111c8 <__ascii_wctomb>:
 80111c8:	4603      	mov	r3, r0
 80111ca:	4608      	mov	r0, r1
 80111cc:	b141      	cbz	r1, 80111e0 <__ascii_wctomb+0x18>
 80111ce:	2aff      	cmp	r2, #255	@ 0xff
 80111d0:	d904      	bls.n	80111dc <__ascii_wctomb+0x14>
 80111d2:	228a      	movs	r2, #138	@ 0x8a
 80111d4:	601a      	str	r2, [r3, #0]
 80111d6:	f04f 30ff 	mov.w	r0, #4294967295
 80111da:	4770      	bx	lr
 80111dc:	700a      	strb	r2, [r1, #0]
 80111de:	2001      	movs	r0, #1
 80111e0:	4770      	bx	lr
	...

080111e4 <fiprintf>:
 80111e4:	b40e      	push	{r1, r2, r3}
 80111e6:	b503      	push	{r0, r1, lr}
 80111e8:	4601      	mov	r1, r0
 80111ea:	ab03      	add	r3, sp, #12
 80111ec:	4805      	ldr	r0, [pc, #20]	@ (8011204 <fiprintf+0x20>)
 80111ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80111f2:	6800      	ldr	r0, [r0, #0]
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	f7ff fd03 	bl	8010c00 <_vfiprintf_r>
 80111fa:	b002      	add	sp, #8
 80111fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011200:	b003      	add	sp, #12
 8011202:	4770      	bx	lr
 8011204:	2000001c 	.word	0x2000001c

08011208 <abort>:
 8011208:	b508      	push	{r3, lr}
 801120a:	2006      	movs	r0, #6
 801120c:	f000 f834 	bl	8011278 <raise>
 8011210:	2001      	movs	r0, #1
 8011212:	f7f2 fb45 	bl	80038a0 <_exit>

08011216 <_malloc_usable_size_r>:
 8011216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801121a:	1f18      	subs	r0, r3, #4
 801121c:	2b00      	cmp	r3, #0
 801121e:	bfbc      	itt	lt
 8011220:	580b      	ldrlt	r3, [r1, r0]
 8011222:	18c0      	addlt	r0, r0, r3
 8011224:	4770      	bx	lr

08011226 <_raise_r>:
 8011226:	291f      	cmp	r1, #31
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4605      	mov	r5, r0
 801122c:	460c      	mov	r4, r1
 801122e:	d904      	bls.n	801123a <_raise_r+0x14>
 8011230:	2316      	movs	r3, #22
 8011232:	6003      	str	r3, [r0, #0]
 8011234:	f04f 30ff 	mov.w	r0, #4294967295
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801123c:	b112      	cbz	r2, 8011244 <_raise_r+0x1e>
 801123e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011242:	b94b      	cbnz	r3, 8011258 <_raise_r+0x32>
 8011244:	4628      	mov	r0, r5
 8011246:	f000 f831 	bl	80112ac <_getpid_r>
 801124a:	4622      	mov	r2, r4
 801124c:	4601      	mov	r1, r0
 801124e:	4628      	mov	r0, r5
 8011250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011254:	f000 b818 	b.w	8011288 <_kill_r>
 8011258:	2b01      	cmp	r3, #1
 801125a:	d00a      	beq.n	8011272 <_raise_r+0x4c>
 801125c:	1c59      	adds	r1, r3, #1
 801125e:	d103      	bne.n	8011268 <_raise_r+0x42>
 8011260:	2316      	movs	r3, #22
 8011262:	6003      	str	r3, [r0, #0]
 8011264:	2001      	movs	r0, #1
 8011266:	e7e7      	b.n	8011238 <_raise_r+0x12>
 8011268:	2100      	movs	r1, #0
 801126a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801126e:	4620      	mov	r0, r4
 8011270:	4798      	blx	r3
 8011272:	2000      	movs	r0, #0
 8011274:	e7e0      	b.n	8011238 <_raise_r+0x12>
	...

08011278 <raise>:
 8011278:	4b02      	ldr	r3, [pc, #8]	@ (8011284 <raise+0xc>)
 801127a:	4601      	mov	r1, r0
 801127c:	6818      	ldr	r0, [r3, #0]
 801127e:	f7ff bfd2 	b.w	8011226 <_raise_r>
 8011282:	bf00      	nop
 8011284:	2000001c 	.word	0x2000001c

08011288 <_kill_r>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	4d07      	ldr	r5, [pc, #28]	@ (80112a8 <_kill_r+0x20>)
 801128c:	2300      	movs	r3, #0
 801128e:	4604      	mov	r4, r0
 8011290:	4608      	mov	r0, r1
 8011292:	4611      	mov	r1, r2
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	f7f2 faf3 	bl	8003880 <_kill>
 801129a:	1c43      	adds	r3, r0, #1
 801129c:	d102      	bne.n	80112a4 <_kill_r+0x1c>
 801129e:	682b      	ldr	r3, [r5, #0]
 80112a0:	b103      	cbz	r3, 80112a4 <_kill_r+0x1c>
 80112a2:	6023      	str	r3, [r4, #0]
 80112a4:	bd38      	pop	{r3, r4, r5, pc}
 80112a6:	bf00      	nop
 80112a8:	20006ec8 	.word	0x20006ec8

080112ac <_getpid_r>:
 80112ac:	f7f2 bae0 	b.w	8003870 <_getpid>

080112b0 <sqrt>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	ed2d 8b02 	vpush	{d8}
 80112b6:	ec55 4b10 	vmov	r4, r5, d0
 80112ba:	f000 f825 	bl	8011308 <__ieee754_sqrt>
 80112be:	4622      	mov	r2, r4
 80112c0:	462b      	mov	r3, r5
 80112c2:	4620      	mov	r0, r4
 80112c4:	4629      	mov	r1, r5
 80112c6:	eeb0 8a40 	vmov.f32	s16, s0
 80112ca:	eef0 8a60 	vmov.f32	s17, s1
 80112ce:	f7ef fc55 	bl	8000b7c <__aeabi_dcmpun>
 80112d2:	b990      	cbnz	r0, 80112fa <sqrt+0x4a>
 80112d4:	2200      	movs	r2, #0
 80112d6:	2300      	movs	r3, #0
 80112d8:	4620      	mov	r0, r4
 80112da:	4629      	mov	r1, r5
 80112dc:	f7ef fc26 	bl	8000b2c <__aeabi_dcmplt>
 80112e0:	b158      	cbz	r0, 80112fa <sqrt+0x4a>
 80112e2:	f7fe f801 	bl	800f2e8 <__errno>
 80112e6:	2321      	movs	r3, #33	@ 0x21
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	2200      	movs	r2, #0
 80112ec:	2300      	movs	r3, #0
 80112ee:	4610      	mov	r0, r2
 80112f0:	4619      	mov	r1, r3
 80112f2:	f7ef fad3 	bl	800089c <__aeabi_ddiv>
 80112f6:	ec41 0b18 	vmov	d8, r0, r1
 80112fa:	eeb0 0a48 	vmov.f32	s0, s16
 80112fe:	eef0 0a68 	vmov.f32	s1, s17
 8011302:	ecbd 8b02 	vpop	{d8}
 8011306:	bd38      	pop	{r3, r4, r5, pc}

08011308 <__ieee754_sqrt>:
 8011308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	4a68      	ldr	r2, [pc, #416]	@ (80114b0 <__ieee754_sqrt+0x1a8>)
 801130e:	ec55 4b10 	vmov	r4, r5, d0
 8011312:	43aa      	bics	r2, r5
 8011314:	462b      	mov	r3, r5
 8011316:	4621      	mov	r1, r4
 8011318:	d110      	bne.n	801133c <__ieee754_sqrt+0x34>
 801131a:	4622      	mov	r2, r4
 801131c:	4620      	mov	r0, r4
 801131e:	4629      	mov	r1, r5
 8011320:	f7ef f992 	bl	8000648 <__aeabi_dmul>
 8011324:	4602      	mov	r2, r0
 8011326:	460b      	mov	r3, r1
 8011328:	4620      	mov	r0, r4
 801132a:	4629      	mov	r1, r5
 801132c:	f7ee ffd6 	bl	80002dc <__adddf3>
 8011330:	4604      	mov	r4, r0
 8011332:	460d      	mov	r5, r1
 8011334:	ec45 4b10 	vmov	d0, r4, r5
 8011338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133c:	2d00      	cmp	r5, #0
 801133e:	dc0e      	bgt.n	801135e <__ieee754_sqrt+0x56>
 8011340:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011344:	4322      	orrs	r2, r4
 8011346:	d0f5      	beq.n	8011334 <__ieee754_sqrt+0x2c>
 8011348:	b19d      	cbz	r5, 8011372 <__ieee754_sqrt+0x6a>
 801134a:	4622      	mov	r2, r4
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ee ffc2 	bl	80002d8 <__aeabi_dsub>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	f7ef faa0 	bl	800089c <__aeabi_ddiv>
 801135c:	e7e8      	b.n	8011330 <__ieee754_sqrt+0x28>
 801135e:	152a      	asrs	r2, r5, #20
 8011360:	d115      	bne.n	801138e <__ieee754_sqrt+0x86>
 8011362:	2000      	movs	r0, #0
 8011364:	e009      	b.n	801137a <__ieee754_sqrt+0x72>
 8011366:	0acb      	lsrs	r3, r1, #11
 8011368:	3a15      	subs	r2, #21
 801136a:	0549      	lsls	r1, r1, #21
 801136c:	2b00      	cmp	r3, #0
 801136e:	d0fa      	beq.n	8011366 <__ieee754_sqrt+0x5e>
 8011370:	e7f7      	b.n	8011362 <__ieee754_sqrt+0x5a>
 8011372:	462a      	mov	r2, r5
 8011374:	e7fa      	b.n	801136c <__ieee754_sqrt+0x64>
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	3001      	adds	r0, #1
 801137a:	02dc      	lsls	r4, r3, #11
 801137c:	d5fb      	bpl.n	8011376 <__ieee754_sqrt+0x6e>
 801137e:	1e44      	subs	r4, r0, #1
 8011380:	1b12      	subs	r2, r2, r4
 8011382:	f1c0 0420 	rsb	r4, r0, #32
 8011386:	fa21 f404 	lsr.w	r4, r1, r4
 801138a:	4323      	orrs	r3, r4
 801138c:	4081      	lsls	r1, r0
 801138e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011392:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801139a:	07d2      	lsls	r2, r2, #31
 801139c:	bf5c      	itt	pl
 801139e:	005b      	lslpl	r3, r3, #1
 80113a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80113a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80113a8:	bf58      	it	pl
 80113aa:	0049      	lslpl	r1, r1, #1
 80113ac:	2600      	movs	r6, #0
 80113ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80113b2:	106d      	asrs	r5, r5, #1
 80113b4:	0049      	lsls	r1, r1, #1
 80113b6:	2016      	movs	r0, #22
 80113b8:	4632      	mov	r2, r6
 80113ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80113be:	1917      	adds	r7, r2, r4
 80113c0:	429f      	cmp	r7, r3
 80113c2:	bfde      	ittt	le
 80113c4:	193a      	addle	r2, r7, r4
 80113c6:	1bdb      	suble	r3, r3, r7
 80113c8:	1936      	addle	r6, r6, r4
 80113ca:	0fcf      	lsrs	r7, r1, #31
 80113cc:	3801      	subs	r0, #1
 80113ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80113d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80113d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80113da:	d1f0      	bne.n	80113be <__ieee754_sqrt+0xb6>
 80113dc:	4604      	mov	r4, r0
 80113de:	2720      	movs	r7, #32
 80113e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80113e4:	429a      	cmp	r2, r3
 80113e6:	eb00 0e0c 	add.w	lr, r0, ip
 80113ea:	db02      	blt.n	80113f2 <__ieee754_sqrt+0xea>
 80113ec:	d113      	bne.n	8011416 <__ieee754_sqrt+0x10e>
 80113ee:	458e      	cmp	lr, r1
 80113f0:	d811      	bhi.n	8011416 <__ieee754_sqrt+0x10e>
 80113f2:	f1be 0f00 	cmp.w	lr, #0
 80113f6:	eb0e 000c 	add.w	r0, lr, ip
 80113fa:	da42      	bge.n	8011482 <__ieee754_sqrt+0x17a>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	db40      	blt.n	8011482 <__ieee754_sqrt+0x17a>
 8011400:	f102 0801 	add.w	r8, r2, #1
 8011404:	1a9b      	subs	r3, r3, r2
 8011406:	458e      	cmp	lr, r1
 8011408:	bf88      	it	hi
 801140a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801140e:	eba1 010e 	sub.w	r1, r1, lr
 8011412:	4464      	add	r4, ip
 8011414:	4642      	mov	r2, r8
 8011416:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801141a:	3f01      	subs	r7, #1
 801141c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011420:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011424:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011428:	d1dc      	bne.n	80113e4 <__ieee754_sqrt+0xdc>
 801142a:	4319      	orrs	r1, r3
 801142c:	d01b      	beq.n	8011466 <__ieee754_sqrt+0x15e>
 801142e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80114b4 <__ieee754_sqrt+0x1ac>
 8011432:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80114b8 <__ieee754_sqrt+0x1b0>
 8011436:	e9da 0100 	ldrd	r0, r1, [sl]
 801143a:	e9db 2300 	ldrd	r2, r3, [fp]
 801143e:	f7ee ff4b 	bl	80002d8 <__aeabi_dsub>
 8011442:	e9da 8900 	ldrd	r8, r9, [sl]
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f7ef fb77 	bl	8000b40 <__aeabi_dcmple>
 8011452:	b140      	cbz	r0, 8011466 <__ieee754_sqrt+0x15e>
 8011454:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011458:	e9da 0100 	ldrd	r0, r1, [sl]
 801145c:	e9db 2300 	ldrd	r2, r3, [fp]
 8011460:	d111      	bne.n	8011486 <__ieee754_sqrt+0x17e>
 8011462:	3601      	adds	r6, #1
 8011464:	463c      	mov	r4, r7
 8011466:	1072      	asrs	r2, r6, #1
 8011468:	0863      	lsrs	r3, r4, #1
 801146a:	07f1      	lsls	r1, r6, #31
 801146c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011470:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011474:	bf48      	it	mi
 8011476:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801147a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801147e:	4618      	mov	r0, r3
 8011480:	e756      	b.n	8011330 <__ieee754_sqrt+0x28>
 8011482:	4690      	mov	r8, r2
 8011484:	e7be      	b.n	8011404 <__ieee754_sqrt+0xfc>
 8011486:	f7ee ff29 	bl	80002dc <__adddf3>
 801148a:	e9da 8900 	ldrd	r8, r9, [sl]
 801148e:	4602      	mov	r2, r0
 8011490:	460b      	mov	r3, r1
 8011492:	4640      	mov	r0, r8
 8011494:	4649      	mov	r1, r9
 8011496:	f7ef fb49 	bl	8000b2c <__aeabi_dcmplt>
 801149a:	b120      	cbz	r0, 80114a6 <__ieee754_sqrt+0x19e>
 801149c:	1ca0      	adds	r0, r4, #2
 801149e:	bf08      	it	eq
 80114a0:	3601      	addeq	r6, #1
 80114a2:	3402      	adds	r4, #2
 80114a4:	e7df      	b.n	8011466 <__ieee754_sqrt+0x15e>
 80114a6:	1c63      	adds	r3, r4, #1
 80114a8:	f023 0401 	bic.w	r4, r3, #1
 80114ac:	e7db      	b.n	8011466 <__ieee754_sqrt+0x15e>
 80114ae:	bf00      	nop
 80114b0:	7ff00000 	.word	0x7ff00000
 80114b4:	200001e0 	.word	0x200001e0
 80114b8:	200001d8 	.word	0x200001d8

080114bc <round>:
 80114bc:	ec51 0b10 	vmov	r0, r1, d0
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80114c6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80114ca:	2a13      	cmp	r2, #19
 80114cc:	460b      	mov	r3, r1
 80114ce:	4605      	mov	r5, r0
 80114d0:	dc1b      	bgt.n	801150a <round+0x4e>
 80114d2:	2a00      	cmp	r2, #0
 80114d4:	da0b      	bge.n	80114ee <round+0x32>
 80114d6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80114da:	3201      	adds	r2, #1
 80114dc:	bf04      	itt	eq
 80114de:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80114e2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80114e6:	2200      	movs	r2, #0
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	e015      	b.n	801151a <round+0x5e>
 80114ee:	4c15      	ldr	r4, [pc, #84]	@ (8011544 <round+0x88>)
 80114f0:	4114      	asrs	r4, r2
 80114f2:	ea04 0601 	and.w	r6, r4, r1
 80114f6:	4306      	orrs	r6, r0
 80114f8:	d00f      	beq.n	801151a <round+0x5e>
 80114fa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80114fe:	fa41 f202 	asr.w	r2, r1, r2
 8011502:	4413      	add	r3, r2
 8011504:	ea23 0304 	bic.w	r3, r3, r4
 8011508:	e7ed      	b.n	80114e6 <round+0x2a>
 801150a:	2a33      	cmp	r2, #51	@ 0x33
 801150c:	dd08      	ble.n	8011520 <round+0x64>
 801150e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8011512:	d102      	bne.n	801151a <round+0x5e>
 8011514:	4602      	mov	r2, r0
 8011516:	f7ee fee1 	bl	80002dc <__adddf3>
 801151a:	ec41 0b10 	vmov	d0, r0, r1
 801151e:	bd70      	pop	{r4, r5, r6, pc}
 8011520:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8011524:	f04f 34ff 	mov.w	r4, #4294967295
 8011528:	40f4      	lsrs	r4, r6
 801152a:	4204      	tst	r4, r0
 801152c:	d0f5      	beq.n	801151a <round+0x5e>
 801152e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8011532:	2201      	movs	r2, #1
 8011534:	408a      	lsls	r2, r1
 8011536:	1952      	adds	r2, r2, r5
 8011538:	bf28      	it	cs
 801153a:	3301      	addcs	r3, #1
 801153c:	ea22 0204 	bic.w	r2, r2, r4
 8011540:	e7d2      	b.n	80114e8 <round+0x2c>
 8011542:	bf00      	nop
 8011544:	000fffff 	.word	0x000fffff

08011548 <_init>:
 8011548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154a:	bf00      	nop
 801154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801154e:	bc08      	pop	{r3}
 8011550:	469e      	mov	lr, r3
 8011552:	4770      	bx	lr

08011554 <_fini>:
 8011554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011556:	bf00      	nop
 8011558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801155a:	bc08      	pop	{r3}
 801155c:	469e      	mov	lr, r3
 801155e:	4770      	bx	lr
