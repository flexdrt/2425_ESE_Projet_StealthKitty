
Code_Robot0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  0800db50  0800db50  0000eb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6b0  0800e6b0  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6b0  0800e6b0  0000f6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6b8  0800e6b8  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6b8  0800e6b8  0000f6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6bc  0800e6bc  0000f6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e6c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005474  200001d8  0800e898  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000564c  0800e898  0001064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235f0  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000505c  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  00038858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017da  00000000  00000000  0003a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fed  00000000  00000000  0003bf02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268b5  00000000  00000000  0005feef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77d4  00000000  00000000  000867a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015df78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090c4  00000000  00000000  0015dfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00167080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800db38 	.word	0x0800db38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800db38 	.word	0x0800db38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <ADXL343_initialization>:

#define ADXL_CS_LOW()   HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET)
#define ADXL_CS_HIGH()  HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET)

uint8_t ADXL343_initialization(SPI_HandleTypeDef *hspi, ADXL343 *dev)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    dev->hspiHandle = hspi;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
    uint8_t regAddr = ADXL343_REG_DEVICE_ID | 0x80; // Lecture du registre DEVICE_ID
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	737b      	strb	r3, [r7, #13]
    uint8_t regData = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status;

    printf("Starting ADXL343 initialization...\r\n");
 8000f46:	482a      	ldr	r0, [pc, #168]	@ (8000ff0 <ADXL343_initialization+0xc8>)
 8000f48:	f00a fe86 	bl	800bc58 <puts>

    // Lecture du DEVICE_ID
    ADXL_CS_LOW();
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4828      	ldr	r0, [pc, #160]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f52:	f003 f8ff 	bl	8004154 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 8000f56:	f107 010d 	add.w	r1, r7, #13
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	2201      	movs	r2, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f004 fff6 	bl	8005f52 <HAL_SPI_Transmit>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <ADXL343_initialization+0x5c>
        printf("Erreur SPI lors de l'envoi de l'adresse.\r\n");
 8000f70:	4821      	ldr	r0, [pc, #132]	@ (8000ff8 <ADXL343_initialization+0xd0>)
 8000f72:	f00a fe71 	bl	800bc58 <puts>
        ADXL_CS_HIGH();
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	481e      	ldr	r0, [pc, #120]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f7c:	f003 f8ea 	bl	8004154 <HAL_GPIO_WritePin>
        return 255; // Erreur
 8000f80:	23ff      	movs	r3, #255	@ 0xff
 8000f82:	e030      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }
    status = HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 8000f84:	f107 010c 	add.w	r1, r7, #12
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f005 f955 	bl	800623e <HAL_SPI_Receive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
    ADXL_CS_HIGH();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4815      	ldr	r0, [pc, #84]	@ (8000ff4 <ADXL343_initialization+0xcc>)
 8000f9e:	f003 f8d9 	bl	8004154 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <ADXL343_initialization+0x8a>
        printf("Erreur SPI lors de la réception des données.\r\n");
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <ADXL343_initialization+0xd4>)
 8000faa:	f00a fe55 	bl	800bc58 <puts>
        return 255; // Erreur
 8000fae:	23ff      	movs	r3, #255	@ 0xff
 8000fb0:	e019      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }

    // Vérification du DEVICE_ID
    if (regData != ADXL343_DEVICE_ID) {
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	22e5      	movs	r2, #229	@ 0xe5
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d006      	beq.n	8000fc8 <ADXL343_initialization+0xa0>
        printf("Erreur SPI : Device ID attendu 0xE5, reçu 0x%02X\r\n", regData);
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	@ (8001000 <ADXL343_initialization+0xd8>)
 8000fc0:	f00a fde2 	bl	800bb88 <iprintf>
        return 255; // Erreur
 8000fc4:	23ff      	movs	r3, #255	@ 0xff
 8000fc6:	e00e      	b.n	8000fe6 <ADXL343_initialization+0xbe>
    }

    printf("ADXL343 détecté avec succès : Device ID = 0x%02X\r\n", regData);
 8000fc8:	7b3b      	ldrb	r3, [r7, #12]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <ADXL343_initialization+0xdc>)
 8000fce:	f00a fddb 	bl	800bb88 <iprintf>

    // Configurer le mode mesure
    uint8_t powerCtl = 0x08; // Activer le mode mesure
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(hspi, ADXL343_REG_POWER_CTL, powerCtl);
 8000fd6:	232d      	movs	r3, #45	@ 0x2d
 8000fd8:	4619      	mov	r1, r3
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f812 	bl	8001008 <ADXL343_write_register>

    return 0; // Initialisation réussie
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800db50 	.word	0x0800db50
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	0800db74 	.word	0x0800db74
 8000ffc:	0800dba0 	.word	0x0800dba0
 8001000:	0800dbd0 	.word	0x0800dbd0
 8001004:	0800dc04 	.word	0x0800dc04

08001008 <ADXL343_write_register>:


void ADXL343_write_register(SPI_HandleTypeDef *hspi, uint8_t regAddr, uint8_t regData)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = regAddr & 0x7F; // Assurez-vous que le bit MSB est 0 pour l'écriture
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800101e:	b2db      	uxtb	r3, r3
 8001020:	73bb      	strb	r3, [r7, #14]
    ADXL_CS_LOW();
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4819      	ldr	r0, [pc, #100]	@ (800108c <ADXL343_write_register+0x84>)
 8001028:	f003 f894 	bl	8004154 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 800102c:	f107 010e 	add.w	r1, r7, #14
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2201      	movs	r2, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f004 ff8b 	bl	8005f52 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &regData, 1, HAL_MAX_DELAY);
 800103c:	1cb9      	adds	r1, r7, #2
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2201      	movs	r2, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f004 ff84 	bl	8005f52 <HAL_SPI_Transmit>
    ADXL_CS_HIGH();
 800104a:	2201      	movs	r2, #1
 800104c:	2110      	movs	r1, #16
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <ADXL343_write_register+0x84>)
 8001050:	f003 f880 	bl	8004154 <HAL_GPIO_WritePin>

    // Vérification de l'écriture
    uint8_t verify = ADXL343_read_register(hspi, regAddr);
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	4619      	mov	r1, r3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f81d 	bl	8001098 <ADXL343_read_register>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
    if (verify != regData) {
 8001062:	78bb      	ldrb	r3, [r7, #2]
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	429a      	cmp	r2, r3
 8001068:	d006      	beq.n	8001078 <ADXL343_write_register+0x70>
        printf("Erreur : le registre 0x%02X contient 0x%02X (attendu 0x%02X)\r\n", regAddr, verify, regData);
 800106a:	78f9      	ldrb	r1, [r7, #3]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <ADXL343_write_register+0x88>)
 8001072:	f00a fd89 	bl	800bb88 <iprintf>
    } else {
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
    }
}
 8001076:	e005      	b.n	8001084 <ADXL343_write_register+0x7c>
        printf("Registre 0x%02X configuré avec succès : 0x%02X\r\n", regAddr, regData);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	78ba      	ldrb	r2, [r7, #2]
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <ADXL343_write_register+0x8c>)
 8001080:	f00a fd82 	bl	800bb88 <iprintf>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000800 	.word	0x48000800
 8001090:	0800dc3c 	.word	0x0800dc3c
 8001094:	0800dc7c 	.word	0x0800dc7c

08001098 <ADXL343_read_register>:



uint8_t ADXL343_read_register(SPI_HandleTypeDef *hspi, uint8_t regAddr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);  // Mettre NSS à 0 pour commencer la communication SPI
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <ADXL343_read_register+0x54>)
 80010aa:	f003 f853 	bl	8004154 <HAL_GPIO_WritePin>
	regAddr |= 0x80;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &regAddr, 1, HAL_MAX_DELAY);
 80010b8:	1cf9      	adds	r1, r7, #3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	2201      	movs	r2, #1
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f004 ff46 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &regData, 1, HAL_MAX_DELAY);
 80010c6:	f107 010f 	add.w	r1, r7, #15
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2201      	movs	r2, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f005 f8b4 	bl	800623e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);    // Mettre NSS à 1 pour terminer la communication SPI
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <ADXL343_read_register+0x54>)
 80010dc:	f003 f83a 	bl	8004154 <HAL_GPIO_WritePin>
	return regData;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000800 	.word	0x48000800

080010f0 <ADXL343_set_tap_parameters>:
void ADXL343_print_raw(ADXL343 *dev, UART_HandleTypeDef *huart) {
	printf("Acceleration Raw Data normalisé - X: %d, Y: %d, Z: %d\n",
			dev->acc_rawX, dev->acc_rawY, dev->acc_rawZ);
}

void ADXL343_set_tap_parameters(ADXL343 *dev, uint8_t threshold, uint8_t duration, uint8_t latency, uint8_t window) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	70fb      	strb	r3, [r7, #3]
 8001102:	460b      	mov	r3, r1
 8001104:	70bb      	strb	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2110      	movs	r1, #16
 800110e:	4835      	ldr	r0, [pc, #212]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001110:	f003 f820 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_THRESH_TAP, 1, HAL_MAX_DELAY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	2201      	movs	r2, #1
 800111e:	4932      	ldr	r1, [pc, #200]	@ (80011e8 <ADXL343_set_tap_parameters+0xf8>)
 8001120:	f004 ff17 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &threshold, 1, HAL_MAX_DELAY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	1cf9      	adds	r1, r7, #3
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	f004 ff0f 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2110      	movs	r1, #16
 8001138:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 800113a:	f003 f80b 	bl	8004154 <HAL_GPIO_WritePin>

	// Configurer la durée du tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	4828      	ldr	r0, [pc, #160]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001144:	f003 f806 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_DUR, 1, HAL_MAX_DELAY);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2201      	movs	r2, #1
 8001152:	4926      	ldr	r1, [pc, #152]	@ (80011ec <ADXL343_set_tap_parameters+0xfc>)
 8001154:	f004 fefd 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &duration, 1, HAL_MAX_DELAY);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	1cb9      	adds	r1, r7, #2
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	f004 fef5 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	481d      	ldr	r0, [pc, #116]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 800116e:	f002 fff1 	bl	8004154 <HAL_GPIO_WritePin>

	// Configurer la latence pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 8001178:	f002 ffec 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_LATENT, 1, HAL_MAX_DELAY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2201      	movs	r2, #1
 8001186:	491a      	ldr	r1, [pc, #104]	@ (80011f0 <ADXL343_set_tap_parameters+0x100>)
 8001188:	f004 fee3 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &latency, 1, HAL_MAX_DELAY);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	1c79      	adds	r1, r7, #1
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	2201      	movs	r2, #1
 8001198:	f004 fedb 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011a2:	f002 ffd7 	bl	8004154 <HAL_GPIO_WritePin>

	// Configurer la fenêtre pour double tapotement
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011ac:	f002 ffd2 	bl	8004154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, &ADXL343_REG_WINDOW, 1, HAL_MAX_DELAY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	2201      	movs	r2, #1
 80011ba:	490e      	ldr	r1, [pc, #56]	@ (80011f4 <ADXL343_set_tap_parameters+0x104>)
 80011bc:	f004 fec9 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->hspiHandle, &window, 1, HAL_MAX_DELAY);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	f107 0110 	add.w	r1, r7, #16
 80011ce:	f004 fec0 	bl	8005f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <ADXL343_set_tap_parameters+0xf4>)
 80011d8:	f002 ffbc 	bl	8004154 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000800 	.word	0x48000800
 80011e8:	0800e299 	.word	0x0800e299
 80011ec:	0800e29a 	.word	0x0800e29a
 80011f0:	0800e29b 	.word	0x0800e29b
 80011f4:	0800e29c 	.word	0x0800e29c

080011f8 <ADXL343_EnableTapInterrupts>:

	printf("Valeur du registre INT_MAP après écriture: 0x%02X\n", int_map_read);
}*/

void ADXL343_EnableTapInterrupts(ADXL343 *dev)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    // Activer les interruptions SINGLE_TAP
    uint8_t intEnable = 0x40;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE, intEnable);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	212e      	movs	r1, #46	@ 0x2e
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fefb 	bl	8001008 <ADXL343_write_register>

    // Configurer les axes pour les tapotements
    uint8_t tapAxes = 0x07;
 8001212:	2307      	movs	r3, #7
 8001214:	73bb      	strb	r3, [r7, #14]
    ADXL343_write_register(dev->hspiHandle, ADXL343_REG_TAP_AXES, tapAxes);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	212a      	movs	r1, #42	@ 0x2a
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fef2 	bl	8001008 <ADXL343_write_register>

    // Vérification
    uint8_t intEnableRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_ENABLE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	222e      	movs	r2, #46	@ 0x2e
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff33 	bl	8001098 <ADXL343_read_register>
 8001232:	4603      	mov	r3, r0
 8001234:	737b      	strb	r3, [r7, #13]
    uint8_t tapAxesRead = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_TAP_AXES);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	222a      	movs	r2, #42	@ 0x2a
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff2a 	bl	8001098 <ADXL343_read_register>
 8001244:	4603      	mov	r3, r0
 8001246:	733b      	strb	r3, [r7, #12]

    printf("INT_ENABLE configuré : 0x%02X\r\n", intEnableRead);
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <ADXL343_EnableTapInterrupts+0x6c>)
 800124e:	f00a fc9b 	bl	800bb88 <iprintf>
    printf("TAP_AXES configuré : 0x%02X\r\n", tapAxesRead);
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <ADXL343_EnableTapInterrupts+0x70>)
 8001258:	f00a fc96 	bl	800bb88 <iprintf>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800dd1c 	.word	0x0800dd1c
 8001268:	0800dd40 	.word	0x0800dd40

0800126c <ADXL343_check_tap>:


int ADXL343_check_tap(ADXL343 *dev) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint8_t intSource = ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2230      	movs	r2, #48	@ 0x30
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff0b 	bl	8001098 <ADXL343_read_register>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]

    // Si un "Single Tap" est détecté
    if (intSource & 0x40) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <ADXL343_check_tap+0x3c>
        printf("Single Tap detected!\n");
 8001290:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <ADXL343_check_tap+0x48>)
 8001292:	f00a fce1 	bl	800bc58 <puts>

        // Réinitialiser le registre d'interruption pour éviter des lectures multiples
        ADXL343_read_register(dev->hspiHandle, ADXL343_REG_INT_SOURCE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2230      	movs	r2, #48	@ 0x30
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fefa 	bl	8001098 <ADXL343_read_register>

        return 1; // "Tap" détecté
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <ADXL343_check_tap+0x3e>
    }

    // Aucun "Tap" détecté
    return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800dd60 	.word	0x0800dd60

080012b8 <ADXL343_SetDataFormat>:

void ADXL343_SetDataFormat(SPI_HandleTypeDef *hspi, uint8_t range)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
    uint8_t dataFormat = 0x08 | (range & 0x03); // Activer FULL_RES et définir la plage
 80012c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
    ADXL343_write_register(hspi, ADXL343_REG_DATA_FORMAT, dataFormat);
 80012d6:	2131      	movs	r1, #49	@ 0x31
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	461a      	mov	r2, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fe93 	bl	8001008 <ADXL343_write_register>

    printf("DATA_FORMAT configuré : 0x%02X\r\n", ADXL343_read_register(hspi, ADXL343_REG_DATA_FORMAT));
 80012e2:	2331      	movs	r3, #49	@ 0x31
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fed6 	bl	8001098 <ADXL343_read_register>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <ADXL343_SetDataFormat+0x48>)
 80012f2:	f00a fc49 	bl	800bb88 <iprintf>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	0800dd78 	.word	0x0800dd78

08001304 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8001316:	232d      	movs	r3, #45	@ 0x2d
 8001318:	73bb      	strb	r3, [r7, #14]
 800131a:	e011      	b.n	8001340 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	b299      	uxth	r1, r3
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	3b2d      	subs	r3, #45	@ 0x2d
 8001324:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <VL53L1X_SensorInit+0xd4>)
 8001326:	5cd2      	ldrb	r2, [r2, r3]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 f856 	bl	80033dc <VL53L1_WrByte>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4313      	orrs	r3, r2
 8001338:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	3301      	adds	r3, #1
 800133e:	73bb      	strb	r3, [r7, #14]
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2b87      	cmp	r3, #135	@ 0x87
 8001344:	d9ea      	bls.n	800131c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f8c1 	bl	80014d0 <VL53L1X_StartRanging>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4313      	orrs	r3, r2
 8001356:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800135c:	e00b      	b.n	8001376 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800135e:	f107 020d 	add.w	r2, r7, #13
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f8e2 	bl	8001530 <VL53L1X_CheckForDataReady>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4313      	orrs	r3, r2
 8001374:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82c 	bl	80013dc <VL53L1X_ClearInterrupt>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	4313      	orrs	r3, r2
 800138c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f8b5 	bl	8001500 <VL53L1X_StopRanging>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	4313      	orrs	r3, r2
 800139e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2209      	movs	r2, #9
 80013a4:	2108      	movs	r1, #8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 f818 	bl	80033dc <VL53L1_WrByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	2200      	movs	r2, #0
 80013ba:	210b      	movs	r1, #11
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f80d 	bl	80033dc <VL53L1_WrByte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	73fb      	strb	r3, [r7, #15]
	return status;
 80013cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800e2a0 	.word	0x0800e2a0

080013dc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2201      	movs	r2, #1
 80013ee:	2186      	movs	r1, #134	@ 0x86
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fff3 	bl	80033dc <VL53L1_WrByte>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	73fb      	strb	r3, [r7, #15]
	return status;
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <VL53L1X_SetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_SetInterruptPolarity(uint16_t dev, uint8_t NewPolarity)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	717b      	strb	r3, [r7, #5]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8001420:	f107 020e 	add.w	r2, r7, #14
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	2130      	movs	r1, #48	@ 0x30
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff65 	bl	80032f8 <VL53L1_RdByte>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4313      	orrs	r3, r2
 8001436:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0xEF;
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	f023 0310 	bic.w	r3, r3, #16
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73bb      	strb	r3, [r7, #14]
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <VL53L1X_SetInterruptPolarity+0x44>
 800144c:	2210      	movs	r2, #16
 800144e:	e000      	b.n	8001452 <VL53L1X_SetInterruptPolarity+0x46>
 8001450:	2200      	movs	r2, #0
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b25b      	sxtb	r3, r3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2130      	movs	r1, #48	@ 0x30
 8001460:	4618      	mov	r0, r3
 8001462:	f001 ffbb 	bl	80033dc <VL53L1_WrByte>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4313      	orrs	r3, r2
 800146e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <VL53L1X_GetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800148c:	f107 020e 	add.w	r2, r7, #14
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2130      	movs	r1, #48	@ 0x30
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff2f 	bl	80032f8 <VL53L1_RdByte>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
	return status;
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	2187      	movs	r1, #135	@ 0x87
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 ff79 	bl	80033dc <VL53L1_WrByte>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2200      	movs	r2, #0
 8001512:	2187      	movs	r1, #135	@ 0x87
 8001514:	4618      	mov	r0, r3
 8001516:	f001 ff61 	bl	80033dc <VL53L1_WrByte>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	4313      	orrs	r3, r2
 8001522:	73fb      	strb	r3, [r7, #15]
	return status;
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8001540:	f107 020d 	add.w	r2, r7, #13
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff97 	bl	800147c <VL53L1X_GetInterruptPolarity>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8001558:	f107 020e 	add.w	r2, r7, #14
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	2131      	movs	r1, #49	@ 0x31
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fec9 	bl	80032f8 <VL53L1_RdByte>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4313      	orrs	r3, r2
 800156e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10c      	bne.n	8001592 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	7b7a      	ldrb	r2, [r7, #13]
 8001580:	4293      	cmp	r3, r2
 8001582:	d103      	bne.n	800158c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e002      	b.n	8001592 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	460a      	mov	r2, r1
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fa2a 	bl	8001a14 <VL53L1X_GetDistanceMode>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 80015ca:	89bb      	ldrh	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0f6      	b.n	80017c2 <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 80015d4:	89bb      	ldrh	r3, [r7, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f040 8082 	bne.w	80016e0 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e2:	d06b      	beq.n	80016bc <VL53L1X_SetTimingBudgetInMs+0x11e>
 80015e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e8:	dc77      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80015ec:	d057      	beq.n	800169e <VL53L1X_SetTimingBudgetInMs+0x100>
 80015ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80015f0:	dc73      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d044      	beq.n	8001680 <VL53L1X_SetTimingBudgetInMs+0xe2>
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	dc6f      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 80015fa:	2b32      	cmp	r3, #50	@ 0x32
 80015fc:	d031      	beq.n	8001662 <VL53L1X_SetTimingBudgetInMs+0xc4>
 80015fe:	2b32      	cmp	r3, #50	@ 0x32
 8001600:	dc6b      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 8001602:	2b21      	cmp	r3, #33	@ 0x21
 8001604:	d020      	beq.n	8001648 <VL53L1X_SetTimingBudgetInMs+0xaa>
 8001606:	2b21      	cmp	r3, #33	@ 0x21
 8001608:	dc67      	bgt.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
 800160a:	2b0f      	cmp	r3, #15
 800160c:	d002      	beq.n	8001614 <VL53L1X_SetTimingBudgetInMs+0x76>
 800160e:	2b14      	cmp	r3, #20
 8001610:	d00d      	beq.n	800162e <VL53L1X_SetTimingBudgetInMs+0x90>
 8001612:	e062      	b.n	80016da <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	221d      	movs	r2, #29
 8001618:	215e      	movs	r1, #94	@ 0x5e
 800161a:	4618      	mov	r0, r3
 800161c:	f001 ff00 	bl	8003420 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	2227      	movs	r2, #39	@ 0x27
 8001624:	2161      	movs	r1, #97	@ 0x61
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fefa 	bl	8003420 <VL53L1_WrWord>
					0x0027);
			break;
 800162c:	e0c7      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2251      	movs	r2, #81	@ 0x51
 8001632:	215e      	movs	r1, #94	@ 0x5e
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fef3 	bl	8003420 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	226e      	movs	r2, #110	@ 0x6e
 800163e:	2161      	movs	r1, #97	@ 0x61
 8001640:	4618      	mov	r0, r3
 8001642:	f001 feed 	bl	8003420 <VL53L1_WrWord>
					0x006E);
			break;
 8001646:	e0ba      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	22d6      	movs	r2, #214	@ 0xd6
 800164c:	215e      	movs	r1, #94	@ 0x5e
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fee6 	bl	8003420 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	226e      	movs	r2, #110	@ 0x6e
 8001658:	2161      	movs	r1, #97	@ 0x61
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fee0 	bl	8003420 <VL53L1_WrWord>
					0x006E);
			break;
 8001660:	e0ad      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001668:	215e      	movs	r1, #94	@ 0x5e
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fed8 	bl	8003420 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001676:	2161      	movs	r1, #97	@ 0x61
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fed1 	bl	8003420 <VL53L1_WrWord>
					0x01E8);
			break;
 800167e:	e09e      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001686:	215e      	movs	r1, #94	@ 0x5e
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fec9 	bl	8003420 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8001694:	2161      	movs	r1, #97	@ 0x61
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fec2 	bl	8003420 <VL53L1_WrWord>
					0x0388);
			break;
 800169c:	e08f      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80016a4:	215e      	movs	r1, #94	@ 0x5e
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 feba 	bl	8003420 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f240 4296 	movw	r2, #1174	@ 0x496
 80016b2:	2161      	movs	r1, #97	@ 0x61
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 feb3 	bl	8003420 <VL53L1_WrWord>
					0x0496);
			break;
 80016ba:	e080      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f240 5291 	movw	r2, #1425	@ 0x591
 80016c2:	215e      	movs	r1, #94	@ 0x5e
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 feab 	bl	8003420 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 80016d0:	2161      	movs	r1, #97	@ 0x61
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fea4 	bl	8003420 <VL53L1_WrWord>
					0x05C1);
			break;
 80016d8:	e071      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
			break;
 80016de:	e06e      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e6:	d058      	beq.n	800179a <VL53L1X_SetTimingBudgetInMs+0x1fc>
 80016e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016ec:	dc64      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80016f0:	d044      	beq.n	800177c <VL53L1X_SetTimingBudgetInMs+0x1de>
 80016f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80016f4:	dc60      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d031      	beq.n	800175e <VL53L1X_SetTimingBudgetInMs+0x1c0>
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	dc5c      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80016fe:	2b32      	cmp	r3, #50	@ 0x32
 8001700:	d020      	beq.n	8001744 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8001702:	2b32      	cmp	r3, #50	@ 0x32
 8001704:	dc58      	bgt.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8001706:	2b14      	cmp	r3, #20
 8001708:	d002      	beq.n	8001710 <VL53L1X_SetTimingBudgetInMs+0x172>
 800170a:	2b21      	cmp	r3, #33	@ 0x21
 800170c:	d00d      	beq.n	800172a <VL53L1X_SetTimingBudgetInMs+0x18c>
 800170e:	e053      	b.n	80017b8 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	221e      	movs	r2, #30
 8001714:	215e      	movs	r1, #94	@ 0x5e
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fe82 	bl	8003420 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2222      	movs	r2, #34	@ 0x22
 8001720:	2161      	movs	r1, #97	@ 0x61
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fe7c 	bl	8003420 <VL53L1_WrWord>
					0x0022);
			break;
 8001728:	e049      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2260      	movs	r2, #96	@ 0x60
 800172e:	215e      	movs	r1, #94	@ 0x5e
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fe75 	bl	8003420 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	226e      	movs	r2, #110	@ 0x6e
 800173a:	2161      	movs	r1, #97	@ 0x61
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fe6f 	bl	8003420 <VL53L1_WrWord>
					0x006E);
			break;
 8001742:	e03c      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	22ad      	movs	r2, #173	@ 0xad
 8001748:	215e      	movs	r1, #94	@ 0x5e
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fe68 	bl	8003420 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	22c6      	movs	r2, #198	@ 0xc6
 8001754:	2161      	movs	r1, #97	@ 0x61
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fe62 	bl	8003420 <VL53L1_WrWord>
					0x00C6);
			break;
 800175c:	e02f      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001764:	215e      	movs	r1, #94	@ 0x5e
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fe5a 	bl	8003420 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001772:	2161      	movs	r1, #97	@ 0x61
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fe53 	bl	8003420 <VL53L1_WrWord>
					0x01EA);
			break;
 800177a:	e020      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001782:	215e      	movs	r1, #94	@ 0x5e
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fe4b 	bl	8003420 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001790:	2161      	movs	r1, #97	@ 0x61
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fe44 	bl	8003420 <VL53L1_WrWord>
					0x02F8);
			break;
 8001798:	e011      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	f240 428f 	movw	r2, #1167	@ 0x48f
 80017a0:	215e      	movs	r1, #94	@ 0x5e
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fe3c 	bl	8003420 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 80017ae:	2161      	movs	r1, #97	@ 0x61
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fe35 	bl	8003420 <VL53L1_WrWord>
					0x04A4);
			break;
 80017b6:	e002      	b.n	80017be <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
			break;
 80017bc:	bf00      	nop
		}
	}
	return status;
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	6039      	str	r1, [r7, #0]
 80017d4:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	215e      	movs	r1, #94	@ 0x5e
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fdaa 	bl	800333c <VL53L1_RdWord>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	f240 5291 	movw	r2, #1425	@ 0x591
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05b      	beq.n	80018b4 <VL53L1X_GetTimingBudgetInMs+0xea>
 80017fc:	f240 5291 	movw	r2, #1425	@ 0x591
 8001800:	4293      	cmp	r3, r2
 8001802:	dc5c      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001804:	f240 428f 	movw	r2, #1167	@ 0x48f
 8001808:	4293      	cmp	r3, r2
 800180a:	d053      	beq.n	80018b4 <VL53L1X_GetTimingBudgetInMs+0xea>
 800180c:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8001810:	da55      	bge.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001812:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8001816:	4293      	cmp	r3, r2
 8001818:	d048      	beq.n	80018ac <VL53L1X_GetTimingBudgetInMs+0xe2>
 800181a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800181e:	4293      	cmp	r3, r2
 8001820:	dc4d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001822:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8001826:	4293      	cmp	r3, r2
 8001828:	d03c      	beq.n	80018a4 <VL53L1X_GetTimingBudgetInMs+0xda>
 800182a:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800182e:	4293      	cmp	r3, r2
 8001830:	dc45      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001832:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001836:	4293      	cmp	r3, r2
 8001838:	d038      	beq.n	80018ac <VL53L1X_GetTimingBudgetInMs+0xe2>
 800183a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800183e:	4293      	cmp	r3, r2
 8001840:	dc3d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001842:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001846:	d02d      	beq.n	80018a4 <VL53L1X_GetTimingBudgetInMs+0xda>
 8001848:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 800184c:	dc37      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800184e:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8001852:	d023      	beq.n	800189c <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001854:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8001858:	dc31      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800185a:	2bd6      	cmp	r3, #214	@ 0xd6
 800185c:	d01a      	beq.n	8001894 <VL53L1X_GetTimingBudgetInMs+0xca>
 800185e:	2bd6      	cmp	r3, #214	@ 0xd6
 8001860:	dc2d      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001862:	2bad      	cmp	r3, #173	@ 0xad
 8001864:	d01a      	beq.n	800189c <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001866:	2bad      	cmp	r3, #173	@ 0xad
 8001868:	dc29      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800186a:	2b60      	cmp	r3, #96	@ 0x60
 800186c:	d012      	beq.n	8001894 <VL53L1X_GetTimingBudgetInMs+0xca>
 800186e:	2b60      	cmp	r3, #96	@ 0x60
 8001870:	dc25      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001872:	2b51      	cmp	r3, #81	@ 0x51
 8001874:	d00a      	beq.n	800188c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001876:	2b51      	cmp	r3, #81	@ 0x51
 8001878:	dc21      	bgt.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
 800187a:	2b1d      	cmp	r3, #29
 800187c:	d002      	beq.n	8001884 <VL53L1X_GetTimingBudgetInMs+0xba>
 800187e:	2b1e      	cmp	r3, #30
 8001880:	d004      	beq.n	800188c <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001882:	e01c      	b.n	80018be <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	220f      	movs	r2, #15
 8001888:	801a      	strh	r2, [r3, #0]
			break;
 800188a:	e01d      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2214      	movs	r2, #20
 8001890:	801a      	strh	r2, [r3, #0]
			break;
 8001892:	e019      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2221      	movs	r2, #33	@ 0x21
 8001898:	801a      	strh	r2, [r3, #0]
			break;
 800189a:	e015      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2232      	movs	r2, #50	@ 0x32
 80018a0:	801a      	strh	r2, [r3, #0]
			break;
 80018a2:	e011      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2264      	movs	r2, #100	@ 0x64
 80018a8:	801a      	strh	r2, [r3, #0]
			break;
 80018aa:	e00d      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	22c8      	movs	r2, #200	@ 0xc8
 80018b0:	801a      	strh	r2, [r3, #0]
			break;
 80018b2:	e009      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018ba:	801a      	strh	r2, [r3, #0]
			break;
 80018bc:	e004      	b.n	80018c8 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	80fb      	strh	r3, [r7, #6]
 80018e0:	4613      	mov	r3, r2
 80018e2:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff6a 	bl	80017ca <VL53L1X_GetTimingBudgetInMs>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <VL53L1X_SetDistanceMode+0x38>
		return 1;
 8001908:	2301      	movs	r3, #1
 800190a:	e07f      	b.n	8001a0c <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d002      	beq.n	8001918 <VL53L1X_SetDistanceMode+0x44>
 8001912:	2b02      	cmp	r3, #2
 8001914:	d033      	beq.n	800197e <VL53L1X_SetDistanceMode+0xaa>
 8001916:	e065      	b.n	80019e4 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	2214      	movs	r2, #20
 800191c:	214b      	movs	r1, #75	@ 0x4b
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fd5c 	bl	80033dc <VL53L1_WrByte>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2207      	movs	r2, #7
 800192c:	2160      	movs	r1, #96	@ 0x60
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fd54 	bl	80033dc <VL53L1_WrByte>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2205      	movs	r2, #5
 800193c:	2163      	movs	r1, #99	@ 0x63
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fd4c 	bl	80033dc <VL53L1_WrByte>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	2238      	movs	r2, #56	@ 0x38
 800194c:	2169      	movs	r1, #105	@ 0x69
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fd44 	bl	80033dc <VL53L1_WrByte>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	f240 7205 	movw	r2, #1797	@ 0x705
 800195e:	2178      	movs	r1, #120	@ 0x78
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fd5d 	bl	8003420 <VL53L1_WrWord>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f240 6206 	movw	r2, #1542	@ 0x606
 8001970:	217a      	movs	r1, #122	@ 0x7a
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fd54 	bl	8003420 <VL53L1_WrWord>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
		break;
 800197c:	e035      	b.n	80019ea <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	220a      	movs	r2, #10
 8001982:	214b      	movs	r1, #75	@ 0x4b
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fd29 	bl	80033dc <VL53L1_WrByte>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	220f      	movs	r2, #15
 8001992:	2160      	movs	r1, #96	@ 0x60
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fd21 	bl	80033dc <VL53L1_WrByte>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	220d      	movs	r2, #13
 80019a2:	2163      	movs	r1, #99	@ 0x63
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fd19 	bl	80033dc <VL53L1_WrByte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	22b8      	movs	r2, #184	@ 0xb8
 80019b2:	2169      	movs	r1, #105	@ 0x69
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fd11 	bl	80033dc <VL53L1_WrByte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f640 720d 	movw	r2, #3853	@ 0xf0d
 80019c4:	2178      	movs	r1, #120	@ 0x78
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fd2a 	bl	8003420 <VL53L1_WrWord>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f640 620e 	movw	r2, #3598	@ 0xe0e
 80019d6:	217a      	movs	r1, #122	@ 0x7a
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fd21 	bl	8003420 <VL53L1_WrWord>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
		break;
 80019e2:	e002      	b.n	80019ea <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
		break;
 80019e8:	bf00      	nop
	}

	if (status == 0)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80019f2:	89ba      	ldrh	r2, [r7, #12]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fdd0 	bl	800159e <VL53L1X_SetTimingBudgetInMs>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	73fb      	strb	r3, [r7, #15]
	return status;
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001a24:	f107 020e 	add.w	r2, r7, #14
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	214b      	movs	r1, #75	@ 0x4b
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fc63 	bl	80032f8 <VL53L1_RdByte>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b14      	cmp	r3, #20
 8001a44:	d102      	bne.n	8001a4c <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b0a      	cmp	r3, #10
 8001a50:	d102      	bne.n	8001a58 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	801a      	strh	r2, [r3, #0]
	return status;
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0000      	movs	r0, r0
	...

08001a68 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	21de      	movs	r1, #222	@ 0xde
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 fc5b 	bl	800333c <VL53L1_RdWord>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001a90:	89bb      	ldrh	r3, [r7, #12]
 8001a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd55 	bl	8000554 <__aeabi_ui2d>
 8001aaa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001ad8 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fdca 	bl	8000648 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f89c 	bl	8000bf8 <__aeabi_d2uiz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	216c      	movs	r1, #108	@ 0x6c
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fcd6 	bl	8003478 <VL53L1_WrDWord>
	return status;
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	33333333 	.word	0x33333333
 8001adc:	3ff13333 	.word	0x3ff13333

08001ae0 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	2196      	movs	r1, #150	@ 0x96
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fc1f 	bl	800333c <VL53L1_RdWord>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001b08:	89ba      	ldrh	r2, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	801a      	strh	r2, [r3, #0]
	return status;
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	460a      	mov	r2, r1
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8001b36:	89ba      	ldrh	r2, [r7, #12]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	211e      	movs	r1, #30
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fc6f 	bl	8003420 <VL53L1_WrWord>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2120      	movs	r1, #32
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fc64 	bl	8003420 <VL53L1_WrWord>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2122      	movs	r1, #34	@ 0x22
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fc59 	bl	8003420 <VL53L1_WrWord>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	73fb      	strb	r3, [r7, #15]
	return status;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	4613      	mov	r3, r2
 8001b92:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2118      	movs	r1, #24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fc3e 	bl	8003420 <VL53L1_WrWord>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	211a      	movs	r1, #26
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fc33 	bl	8003420 <VL53L1_WrWord>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	025b      	lsls	r3, r3, #9
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <VL53L1X_SetXtalk+0x74>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1192      	asrs	r2, r2, #6
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2116      	movs	r1, #22
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fc20 	bl	8003420 <VL53L1_WrWord>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	73fb      	strb	r3, [r7, #15]
	return status;
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 8001c22:	f107 020e 	add.w	r2, r7, #14
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2146      	movs	r1, #70	@ 0x46
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fb64 	bl	80032f8 <VL53L1_RdByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & (~0x6F);
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	f023 036f 	bic.w	r3, r3, #111	@ 0x6f
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73bb      	strb	r3, [r7, #14]
	Temp = Temp|Window;
 8001c44:	7bba      	ldrb	r2, [r7, #14]
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 8001c4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <VL53L1X_SetDistanceThreshold+0x6c>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,Temp);
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2146      	movs	r1, #70	@ 0x46
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fbbd 	bl	80033dc <VL53L1_WrByte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e00a      	b.n	8001c7e <VL53L1X_SetDistanceThreshold+0x82>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,(Temp | 0x40));
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2146      	movs	r1, #70	@ 0x46
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fbb1 	bl	80033dc <VL53L1_WrByte>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2172      	movs	r1, #114	@ 0x72
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fbcb 	bl	8003420 <VL53L1_WrWord>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2174      	movs	r1, #116	@ 0x74
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fbc0 	bl	8003420 <VL53L1_WrWord>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	73fb      	strb	r3, [r7, #15]
	return status;
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
	...

08001cb8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_FREERTOS_Init+0x2c>)
 8001cc0:	1d3c      	adds	r4, r7, #4
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 f8c4 	bl	8009e5e <osThreadCreate>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a03      	ldr	r2, [pc, #12]	@ (8001ce8 <MX_FREERTOS_Init+0x30>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	0800dda8 	.word	0x0800dda8
 8001ce8:	200001f4 	.word	0x200001f4

08001cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f008 f8d9 	bl	8009eac <osDelay>
 8001cfa:	e7fb      	b.n	8001cf4 <StartDefaultTask+0x8>

08001cfc <MX_DMA_Init>:
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <MX_DMA_Init+0x50>)
 8001d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	200b      	movs	r0, #11
 8001d38:	f001 fde8 	bl	800390c <HAL_NVIC_SetPriority>
 8001d3c:	200b      	movs	r0, #11
 8001d3e:	f001 fdff 	bl	8003940 <HAL_NVIC_EnableIRQ>
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <MX_GPIO_Init>:
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a46      	ldr	r2, [pc, #280]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a40      	ldr	r2, [pc, #256]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <MX_GPIO_Init+0x164>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f248 0112 	movw	r1, #32786	@ 0x8012
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f002 f9c0 	bl	8004154 <HAL_GPIO_WritePin>
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4837      	ldr	r0, [pc, #220]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001dda:	f002 f9bb 	bl	8004154 <HAL_GPIO_WritePin>
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001de4:	4835      	ldr	r0, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001de6:	f002 f9b5 	bl	8004154 <HAL_GPIO_WritePin>
 8001dea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482d      	ldr	r0, [pc, #180]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001e02:	f002 f825 	bl	8003e50 <HAL_GPIO_Init>
 8001e06:	f248 0312 	movw	r3, #32786	@ 0x8012
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f002 f815 	bl	8003e50 <HAL_GPIO_Init>
 8001e26:	2310      	movs	r3, #16
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481e      	ldr	r0, [pc, #120]	@ (8001eb8 <MX_GPIO_Init+0x168>)
 8001e3e:	f002 f807 	bl	8003e50 <HAL_GPIO_Init>
 8001e42:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4818      	ldr	r0, [pc, #96]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001e5a:	f001 fff9 	bl	8003e50 <HAL_GPIO_Init>
 8001e5e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <MX_GPIO_Init+0x16c>)
 8001e78:	f001 ffea 	bl	8003e50 <HAL_GPIO_Init>
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2105      	movs	r1, #5
 8001e80:	2007      	movs	r0, #7
 8001e82:	f001 fd43 	bl	800390c <HAL_NVIC_SetPriority>
 8001e86:	2007      	movs	r0, #7
 8001e88:	f001 fd5a 	bl	8003940 <HAL_NVIC_EnableIRQ>
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2105      	movs	r1, #5
 8001e90:	2008      	movs	r0, #8
 8001e92:	f001 fd3b 	bl	800390c <HAL_NVIC_SetPriority>
 8001e96:	2008      	movs	r0, #8
 8001e98:	f001 fd52 	bl	8003940 <HAL_NVIC_EnableIRQ>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	2028      	movs	r0, #40	@ 0x28
 8001ea2:	f001 fd33 	bl	800390c <HAL_NVIC_SetPriority>
 8001ea6:	2028      	movs	r0, #40	@ 0x28
 8001ea8:	f001 fd4a 	bl	8003940 <HAL_NVIC_EnableIRQ>
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	@ 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <MX_I2C1_Init>:
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <MX_I2C1_Init+0x78>)
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <MX_I2C1_Init+0x7c>)
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001efc:	f002 f95a 	bl	80041b4 <HAL_I2C_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_I2C1_Init+0x4a>
 8001f06:	f000 f9f9 	bl	80022fc <Error_Handler>
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4809      	ldr	r0, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001f0e:	f002 fedd 	bl	8004ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_I2C1_Init+0x5c>
 8001f18:	f000 f9f0 	bl	80022fc <Error_Handler>
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_I2C1_Init+0x74>)
 8001f20:	f002 ff1f 	bl	8004d62 <HAL_I2CEx_ConfigDigitalFilter>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_I2C1_Init+0x6e>
 8001f2a:	f000 f9e7 	bl	80022fc <Error_Handler>
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200001f8 	.word	0x200001f8
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40b285c2 	.word	0x40b285c2

08001f40 <HAL_I2C_MspInit>:
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09a      	sub	sp, #104	@ 0x68
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	2244      	movs	r2, #68	@ 0x44
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f009 ff59 	bl	800be18 <memset>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <HAL_I2C_MspInit+0xa8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d136      	bne.n	8001fde <HAL_I2C_MspInit+0x9e>
 8001f70:	2340      	movs	r3, #64	@ 0x40
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fd4d 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_MspInit+0x4c>
 8001f88:	f000 f9b8 	bl	80022fc <Error_Handler>
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001faa:	2312      	movs	r3, #18
 8001fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fae:	2300      	movs	r3, #0
 8001fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480b      	ldr	r0, [pc, #44]	@ (8001ff0 <HAL_I2C_MspInit+0xb0>)
 8001fc2:	f001 ff45 	bl	8003e50 <HAL_GPIO_Init>
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_I2C_MspInit+0xac>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	bf00      	nop
 8001fe0:	3768      	adds	r7, #104	@ 0x68
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <_write>:
#include "drv_mot.h"
#include "string.h"
#include "moteur.h"
#include "ADXL343_SPI.h"

int _write(int file, char *ptr, int len) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <_write+0x28>)
 800200c:	f006 fccd 	bl	80089aa <HAL_UART_Transmit>
	return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000494 	.word	0x20000494

08002020 <vTaskADX>:
	}
}*/


void vTaskADX(void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
    // Initialisation de l'accéléromètre
    ADXL343_initialization(&hspi1, &accelerometer);
 8002028:	4932      	ldr	r1, [pc, #200]	@ (80020f4 <vTaskADX+0xd4>)
 800202a:	4833      	ldr	r0, [pc, #204]	@ (80020f8 <vTaskADX+0xd8>)
 800202c:	f7fe ff7c 	bl	8000f28 <ADXL343_initialization>
    ADXL343_EnableTapInterrupts(&accelerometer);
 8002030:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <vTaskADX+0xd4>)
 8002032:	f7ff f8e1 	bl	80011f8 <ADXL343_EnableTapInterrupts>
    ADXL343_set_tap_parameters(&accelerometer, 20, 1, 80, 200);
 8002036:	23c8      	movs	r3, #200	@ 0xc8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2350      	movs	r3, #80	@ 0x50
 800203c:	2201      	movs	r2, #1
 800203e:	2114      	movs	r1, #20
 8002040:	482c      	ldr	r0, [pc, #176]	@ (80020f4 <vTaskADX+0xd4>)
 8002042:	f7ff f855 	bl	80010f0 <ADXL343_set_tap_parameters>
    ADXL343_SetDataFormat(&hspi1, 0x03); // Configurer en ±16g
 8002046:	2103      	movs	r1, #3
 8002048:	482b      	ldr	r0, [pc, #172]	@ (80020f8 <vTaskADX+0xd8>)
 800204a:	f7ff f935 	bl	80012b8 <ADXL343_SetDataFormat>

    // Variables pour suivre l'état des LEDs et le mode moteur
    uint8_t led_state = 0;    // 0 = rouge, 1 = bleu
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
    uint8_t motor_mode = 0;  // 0 = souris, 1 = prédateur
 8002052:	2300      	movs	r3, #0
 8002054:	73bb      	strb	r3, [r7, #14]

    printf("Tâche ADXL343 démarrée. Attente des tapotements...\n");
 8002056:	4829      	ldr	r0, [pc, #164]	@ (80020fc <vTaskADX+0xdc>)
 8002058:	f009 fdfe 	bl	800bc58 <puts>

    while (1)
    {
        // Attente de détection de tap
        vTaskDelay(pdMS_TO_TICKS(500));
 800205c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002060:	f008 f920 	bl	800a2a4 <vTaskDelay>

        if (ADXL343_check_tap(&accelerometer)) // Si un tap est détecté
 8002064:	4823      	ldr	r0, [pc, #140]	@ (80020f4 <vTaskADX+0xd4>)
 8002066:	f7ff f901 	bl	800126c <ADXL343_check_tap>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f5      	beq.n	800205c <vTaskADX+0x3c>
        {
            // Alterner les LEDs
            if (led_state == 0)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d111      	bne.n	800209a <vTaskADX+0x7a>
            {
                printf("Tap détecté : LED Rouge allumée\n");
 8002076:	4822      	ldr	r0, [pc, #136]	@ (8002100 <vTaskADX+0xe0>)
 8002078:	f009 fdee 	bl	800bc58 <puts>
                HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_SET);    // LED rouge ON
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002082:	4820      	ldr	r0, [pc, #128]	@ (8002104 <vTaskADX+0xe4>)
 8002084:	f002 f866 	bl	8004154 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_RESET); // LED bleue OFF
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800208e:	481d      	ldr	r0, [pc, #116]	@ (8002104 <vTaskADX+0xe4>)
 8002090:	f002 f860 	bl	8004154 <HAL_GPIO_WritePin>
                led_state = 1;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e010      	b.n	80020bc <vTaskADX+0x9c>
            }
            else
            {
                printf("Tap détecté : LED Bleue allumée\n");
 800209a:	481b      	ldr	r0, [pc, #108]	@ (8002108 <vTaskADX+0xe8>)
 800209c:	f009 fddc 	bl	800bc58 <puts>
                HAL_GPIO_WritePin(GPIOB, Status_Red_Pin, GPIO_PIN_RESET); // LED rouge OFF
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020a6:	4817      	ldr	r0, [pc, #92]	@ (8002104 <vTaskADX+0xe4>)
 80020a8:	f002 f854 	bl	8004154 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, Status_Blue_Pin, GPIO_PIN_SET);   // LED bleue ON
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b2:	4814      	ldr	r0, [pc, #80]	@ (8002104 <vTaskADX+0xe4>)
 80020b4:	f002 f84e 	bl	8004154 <HAL_GPIO_WritePin>
                led_state = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
            }

            // Alterner le mode moteur
            if (motor_mode == 0)
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <vTaskADX+0xba>
            {
            	vTaskDelay(pdMS_TO_TICKS(1000));
 80020c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c6:	f008 f8ed 	bl	800a2a4 <vTaskDelay>
                printf("Mode Prédateur activé.\n");
 80020ca:	4810      	ldr	r0, [pc, #64]	@ (800210c <vTaskADX+0xec>)
 80020cc:	f009 fdc4 	bl	800bc58 <puts>
                motorcontrol_predateur(); // Activer le mode prédateur
 80020d0:	f000 fa90 	bl	80025f4 <motorcontrol_predateur>
                motor_mode = 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73bb      	strb	r3, [r7, #14]
 80020d8:	e7c0      	b.n	800205c <vTaskADX+0x3c>
            }
            else
            {
            	vTaskDelay(pdMS_TO_TICKS(1000));
 80020da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020de:	f008 f8e1 	bl	800a2a4 <vTaskDelay>
                printf("Mode Souris activé.\n");
 80020e2:	480b      	ldr	r0, [pc, #44]	@ (8002110 <vTaskADX+0xf0>)
 80020e4:	f009 fdb8 	bl	800bc58 <puts>
                motorcontrol_souris(); // Activer le mode souris
 80020e8:	f000 fa18 	bl	800251c <motorcontrol_souris>
                motor_mode = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]
        vTaskDelay(pdMS_TO_TICKS(500));
 80020f0:	e7b4      	b.n	800205c <vTaskADX+0x3c>
 80020f2:	bf00      	nop
 80020f4:	2000024c 	.word	0x2000024c
 80020f8:	20000268 	.word	0x20000268
 80020fc:	0800ddbc 	.word	0x0800ddbc
 8002100:	0800ddf4 	.word	0x0800ddf4
 8002104:	48000400 	.word	0x48000400
 8002108:	0800de18 	.word	0x0800de18
 800210c:	0800de3c 	.word	0x0800de3c
 8002110:	0800de58 	.word	0x0800de58

08002114 <vTaskToF>:
}




void vTaskToF(void *argument) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    uint16_t distance;
    uint8_t range_status;

    while (1) {
        VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 800211c:	f107 030d 	add.w	r3, r7, #13
 8002120:	4619      	mov	r1, r3
 8002122:	2052      	movs	r0, #82	@ 0x52
 8002124:	f7ff fa04 	bl	8001530 <VL53L1X_CheckForDataReady>
        if (range_status == 0) {
 8002128:	7b7b      	ldrb	r3, [r7, #13]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <vTaskToF+0x3a>
            VL53L1X_GetDistance(TOF_ADDR, &distance);
 800212e:	f107 030e 	add.w	r3, r7, #14
 8002132:	4619      	mov	r1, r3
 8002134:	2052      	movs	r0, #82	@ 0x52
 8002136:	f7ff fcd3 	bl	8001ae0 <VL53L1X_GetDistance>
            printf("Distance mesurée : %d mm\n", distance);
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	@ (8002158 <vTaskToF+0x44>)
 8002140:	f009 fd22 	bl	800bb88 <iprintf>

            if (distance > 250) {
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	2bfa      	cmp	r3, #250	@ 0xfa
 8002148:	d901      	bls.n	800214e <vTaskToF+0x3a>
                pivot(); // Effectuer un pivot
 800214a:	f000 fabf 	bl	80026cc <pivot>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(500)); // Vérification rapide
 800214e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002152:	f008 f8a7 	bl	800a2a4 <vTaskDelay>
        VL53L1X_CheckForDataReady(TOF_ADDR, &range_status);
 8002156:	e7e1      	b.n	800211c <vTaskToF+0x8>
 8002158:	0800de70 	.word	0x0800de70

0800215c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandleSensor = NULL;  // Renamed from xHandleLIDAR
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002166:	f001 fac0 	bl	80036ea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800216a:	f000 f855 	bl	8002218 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800216e:	f7ff fdef 	bl	8001d50 <MX_GPIO_Init>
	MX_DMA_Init();
 8002172:	f7ff fdc3 	bl	8001cfc <MX_DMA_Init>
	MX_I2C1_Init();
 8002176:	f7ff fea3 	bl	8001ec0 <MX_I2C1_Init>
	MX_SPI1_Init();
 800217a:	f000 fae1 	bl	8002740 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800217e:	f000 ff9f 	bl	80030c0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002182:	f000 fd0d 	bl	8002ba0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002186:	f000 fdd7 	bl	8002d38 <MX_TIM3_Init>
	MX_TIM4_Init();
 800218a:	f000 fe2b 	bl	8002de4 <MX_TIM4_Init>
	MX_UART4_Init();
 800218e:	f000 ff4b 	bl	8003028 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	init_motors();
 8002192:	f000 f8b9 	bl	8002308 <init_motors>

	//I2C_Scan();


	VL53L1__Init();
 8002196:	f001 f995 	bl	80034c4 <VL53L1__Init>
	printf("Initialisation du système STM32 terminée.\n");
 800219a:	481a      	ldr	r0, [pc, #104]	@ (8002204 <main+0xa8>)
 800219c:	f009 fd5c 	bl	800bc58 <puts>

	VL53L1X_StartRanging(TOF_ADDR); // Démarrer le capteur
 80021a0:	2052      	movs	r0, #82	@ 0x52
 80021a2:	f7ff f995 	bl	80014d0 <VL53L1X_StartRanging>
	VL53L1X_SetDistanceThreshold(TOF_ADDR, 10, 250, 1, 0); // Définir le seuil de distance
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2301      	movs	r3, #1
 80021ac:	22fa      	movs	r2, #250	@ 0xfa
 80021ae:	210a      	movs	r1, #10
 80021b0:	2052      	movs	r0, #82	@ 0x52
 80021b2:	f7ff fd23 	bl	8001bfc <VL53L1X_SetDistanceThreshold>
	VL53L1X_SetInterruptPolarity(TOF_ADDR, 1); // Configurer la polarité de l'interruption
 80021b6:	2101      	movs	r1, #1
 80021b8:	2052      	movs	r0, #82	@ 0x52
 80021ba:	f7ff f927 	bl	800140c <VL53L1X_SetInterruptPolarity>
	VL53L1X_ClearInterrupt(TOF_ADDR); // Effacer les interruptions en attente
 80021be:	2052      	movs	r0, #82	@ 0x52
 80021c0:	f7ff f90c 	bl	80013dc <VL53L1X_ClearInterrupt>


	// Créer les tâches FreeRTOS
	xTaskCreate(vTaskADX, "TaskADX", 256, NULL, 2, NULL);
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <main+0xac>)
 80021d4:	480d      	ldr	r0, [pc, #52]	@ (800220c <main+0xb0>)
 80021d6:	f007 ff31 	bl	800a03c <xTaskCreate>
	xTaskCreate(vTaskToF, "TaskToF", 256, NULL, 5, NULL);
 80021da:	2300      	movs	r3, #0
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2305      	movs	r3, #5
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e8:	4909      	ldr	r1, [pc, #36]	@ (8002210 <main+0xb4>)
 80021ea:	480a      	ldr	r0, [pc, #40]	@ (8002214 <main+0xb8>)
 80021ec:	f007 ff26 	bl	800a03c <xTaskCreate>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80021f0:	f7ff fd62 	bl	8001cb8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80021f4:	f007 fe2c 	bl	8009e50 <osKernelStart>
			printf("Erreur lors de la mesure.\n");
		}*/

		//VL53L1__test();

		HAL_Delay(500);
 80021f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021fc:	f001 faac 	bl	8003758 <HAL_Delay>
	{
 8002200:	bf00      	nop
 8002202:	e7f9      	b.n	80021f8 <main+0x9c>
 8002204:	0800de8c 	.word	0x0800de8c
 8002208:	0800deb8 	.word	0x0800deb8
 800220c:	08002021 	.word	0x08002021
 8002210:	0800dec0 	.word	0x0800dec0
 8002214:	08002115 	.word	0x08002115

08002218 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b094      	sub	sp, #80	@ 0x50
 800221c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	2238      	movs	r2, #56	@ 0x38
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f009 fdf6 	bl	800be18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800223a:	2000      	movs	r0, #0
 800223c:	f002 fdde 	bl	8004dfc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002240:	2301      	movs	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002248:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	2302      	movs	r3, #2
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224e:	2303      	movs	r3, #3
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002252:	2304      	movs	r3, #4
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002256:	2355      	movs	r3, #85	@ 0x55
 8002258:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800225a:	2302      	movs	r3, #2
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800225e:	2302      	movs	r3, #2
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002262:	2302      	movs	r3, #2
 8002264:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fe7a 	bl	8004f64 <HAL_RCC_OscConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8002276:	f000 f841 	bl	80022fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227a:	230f      	movs	r3, #15
 800227c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227e:	2303      	movs	r3, #3
 8002280:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2104      	movs	r1, #4
 8002292:	4618      	mov	r0, r3
 8002294:	f003 f978 	bl	8005588 <HAL_RCC_ClockConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800229e:	f000 f82d 	bl	80022fc <Error_Handler>
	}
}
 80022a2:	bf00      	nop
 80022a4:	3750      	adds	r7, #80	@ 0x50
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT_TOF2_Pin) {
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022bc:	d105      	bne.n	80022ca <HAL_GPIO_EXTI_Callback+0x1e>
        printf("Interruption détectée sur le capteur TOF.\n");
 80022be:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80022c0:	f009 fcca 	bl	800bc58 <puts>

        // Effacer l'interruption immédiatement
        VL53L1X_ClearInterrupt(TOF_ADDR);
 80022c4:	2052      	movs	r0, #82	@ 0x52
 80022c6:	f7ff f889 	bl	80013dc <VL53L1X_ClearInterrupt>
    }
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	0800dec8 	.word	0x0800dec8

080022d8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80022ea:	f001 fa17 	bl	800371c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40001000 	.word	0x40001000

080022fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <init_motors>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim3; // TIM3 pour l'encodeur moteur droit
extern TIM_HandleTypeDef htim4; // TIM4 pour l'encodeur moteur gauche

void init_motors(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	// Initialisation des PWM pour les moteurs
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 800230c:	2100      	movs	r1, #0
 800230e:	4810      	ldr	r0, [pc, #64]	@ (8002350 <init_motors+0x48>)
 8002310:	f004 fdcc 	bl	8006eac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 8002314:	2104      	movs	r1, #4
 8002316:	480e      	ldr	r0, [pc, #56]	@ (8002350 <init_motors+0x48>)
 8002318:	f004 fdc8 	bl	8006eac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800231c:	2100      	movs	r1, #0
 800231e:	480c      	ldr	r0, [pc, #48]	@ (8002350 <init_motors+0x48>)
 8002320:	f006 f868 	bl	80083f4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002324:	2104      	movs	r1, #4
 8002326:	480a      	ldr	r0, [pc, #40]	@ (8002350 <init_motors+0x48>)
 8002328:	f006 f864 	bl	80083f4 <HAL_TIMEx_PWMN_Start>

	// Initialisation des encodeurs
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Moteur 1 (encodeur sur TIM3)
 800232c:	213c      	movs	r1, #60	@ 0x3c
 800232e:	4809      	ldr	r0, [pc, #36]	@ (8002354 <init_motors+0x4c>)
 8002330:	f004 fff8 	bl	8007324 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Moteur 2 (encodeur sur TIM4)
 8002334:	213c      	movs	r1, #60	@ 0x3c
 8002336:	4808      	ldr	r0, [pc, #32]	@ (8002358 <init_motors+0x50>)
 8002338:	f004 fff4 	bl	8007324 <HAL_TIM_Encoder_Start>

	// Réinitialisation des compteurs d'encodeurs
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <init_motors+0x4c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <init_motors+0x50>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000031c 	.word	0x2000031c
 8002354:	20000368 	.word	0x20000368
 8002358:	200003b4 	.word	0x200003b4

0800235c <forward_r>:


// Fonction avance moteur droit
void forward_r(uint16_t alpha) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);  // TIM1_CH1
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <forward_r+0x2c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	635a      	str	r2, [r3, #52]	@ 0x34
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
 800236e:	2100      	movs	r1, #0
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <forward_r+0x2c>)
 8002372:	f004 fd9b 	bl	8006eac <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002376:	2100      	movs	r1, #0
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <forward_r+0x2c>)
 800237a:	f006 f8ef 	bl	800855c <HAL_TIMEx_PWMN_Stop>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000031c 	.word	0x2000031c

0800238c <forward_l>:

// Fonction avance moteur gauchej
void forward_l(uint16_t alpha) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha);  // TIM1_CH2
 8002396:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <forward_l+0x2c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	88fa      	ldrh	r2, [r7, #6]
 800239c:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
 800239e:	2104      	movs	r1, #4
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <forward_l+0x2c>)
 80023a2:	f004 fe83 	bl	80070ac <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80023a6:	2104      	movs	r1, #4
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <forward_l+0x2c>)
 80023aa:	f006 f823 	bl	80083f4 <HAL_TIMEx_PWMN_Start>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000031c 	.word	0x2000031c

080023bc <reverse_r>:

// Fonction recule moteur droit
void reverse_r(uint16_t alpha) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha); // TIM1_CH2N
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <reverse_r+0x2c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
	//    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH2
 80023ce:	2100      	movs	r1, #0
 80023d0:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <reverse_r+0x2c>)
 80023d2:	f004 fe6b 	bl	80070ac <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80023d6:	2100      	movs	r1, #0
 80023d8:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <reverse_r+0x2c>)
 80023da:	f006 f80b 	bl	80083f4 <HAL_TIMEx_PWMN_Start>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);

}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000031c 	.word	0x2000031c

080023ec <reverse_l>:

// Fonction recule moteur gauche
void reverse_l(uint16_t alpha) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha); // TIM1_CH1N
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <reverse_l+0x2c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34
	// __HAL_TIM_SET_COMPARE(&htim1, TIM_CH0ANNEL_2, 0);      // TIM1_CH2
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // TIM1_CH1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 80023fe:	2104      	movs	r1, #4
 8002400:	4805      	ldr	r0, [pc, #20]	@ (8002418 <reverse_l+0x2c>)
 8002402:	f004 fd53 	bl	8006eac <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002406:	2104      	movs	r1, #4
 8002408:	4803      	ldr	r0, [pc, #12]	@ (8002418 <reverse_l+0x2c>)
 800240a:	f006 f8a7 	bl	800855c <HAL_TIMEx_PWMN_Stop>
	//   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000031c 	.word	0x2000031c

0800241c <stop_r>:

// Fonction stop moteur droit
void stop_r(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      // TIM1_CH1
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <stop_r+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	635a      	str	r2, [r3, #52]	@ 0x34
	//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);     // TIM1_CH2N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
 8002428:	2100      	movs	r1, #0
 800242a:	4802      	ldr	r0, [pc, #8]	@ (8002434 <stop_r+0x18>)
 800242c:	f004 fe3e 	bl	80070ac <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000031c 	.word	0x2000031c

08002438 <stop_l>:

// Fonction stop moteur gauche
void stop_l(void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);      // TIM1_CH2
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <stop_l+0x18>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	@ 0x38
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);     // TIM1_CH1N
	//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // TIM1_CH1N
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // TIM1_CH2
 8002444:	2104      	movs	r1, #4
 8002446:	4802      	ldr	r0, [pc, #8]	@ (8002450 <stop_l+0x18>)
 8002448:	f004 fe30 	bl	80070ac <HAL_TIM_PWM_Stop>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	2000031c 	.word	0x2000031c

08002454 <calculate_motor_speed>:
}



// Fonction pour calculer la vitesse à partir de l'encodeur
float calculate_motor_speed(uint8_t motor, uint32_t delta_time_ms, uint16_t encoder_resolution) {
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	4613      	mov	r3, r2
 8002462:	80bb      	strh	r3, [r7, #4]
	static int16_t last_position_motor1 = 0;
	static int16_t last_position_motor2 = 0;

	int16_t current_position = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	81bb      	strh	r3, [r7, #12]
	int16_t delta_position = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	81fb      	strh	r3, [r7, #14]

	if (motor == MOTOR_LEFT) { // Moteur gauche
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <calculate_motor_speed+0x3e>
		current_position = __HAL_TIM_GET_COUNTER(&htim3); // TIM3 pour moteur gauche
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <calculate_motor_speed+0xb4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor1;
 800247a:	89ba      	ldrh	r2, [r7, #12]
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <calculate_motor_speed+0xb8>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	b29b      	uxth	r3, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	b29b      	uxth	r3, r3
 8002488:	81fb      	strh	r3, [r7, #14]
		last_position_motor1 = current_position;
 800248a:	4a20      	ldr	r2, [pc, #128]	@ (800250c <calculate_motor_speed+0xb8>)
 800248c:	89bb      	ldrh	r3, [r7, #12]
 800248e:	8013      	strh	r3, [r2, #0]
 8002490:	e011      	b.n	80024b6 <calculate_motor_speed+0x62>
	} else if (motor == MOTOR_RIGHT) { // Moteur droit
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10e      	bne.n	80024b6 <calculate_motor_speed+0x62>
		current_position = __HAL_TIM_GET_COUNTER(&htim4); // TIM4 pour moteur droit
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <calculate_motor_speed+0xbc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	81bb      	strh	r3, [r7, #12]
		delta_position = current_position - last_position_motor2;
 80024a0:	89ba      	ldrh	r2, [r7, #12]
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <calculate_motor_speed+0xc0>)
 80024a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	81fb      	strh	r3, [r7, #14]
		last_position_motor2 = current_position;
 80024b0:	4a18      	ldr	r2, [pc, #96]	@ (8002514 <calculate_motor_speed+0xc0>)
 80024b2:	89bb      	ldrh	r3, [r7, #12]
 80024b4:	8013      	strh	r3, [r2, #0]
	}

	// Calculer la vitesse en tours par seconde
	float speed = (float)delta_position / encoder_resolution; // Tours par intervalle
 80024b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024c2:	88bb      	ldrh	r3, [r7, #4]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d0:	edc7 7a02 	vstr	s15, [r7, #8]
	speed *= (1000.0f / delta_time_ms); // Convertir en tours par seconde
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002518 <calculate_motor_speed+0xc4>
 80024e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a02 	vstr	s15, [r7, #8]

	return speed;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	ee07 3a90 	vmov	s15, r3
}
 80024f8:	eeb0 0a67 	vmov.f32	s0, s15
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000368 	.word	0x20000368
 800250c:	20000264 	.word	0x20000264
 8002510:	200003b4 	.word	0x200003b4
 8002514:	20000266 	.word	0x20000266
 8002518:	447a0000 	.word	0x447a0000

0800251c <motorcontrol_souris>:
	float output = kp * error + ki * (*integral_error) + kd * derivative;
	return output;
}


void motorcontrol_souris(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 40% de 8500
 8002522:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002526:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 8002528:	2300      	movs	r3, #0
 800252a:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 800252c:	2332      	movs	r3, #50	@ 0x32
 800252e:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 8002530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002534:	81fb      	strh	r3, [r7, #14]

	printf("Mode Souris : moteurs avancent à vitesse normale.\n");
 8002536:	4827      	ldr	r0, [pc, #156]	@ (80025d4 <motorcontrol_souris+0xb8>)
 8002538:	f009 fb8e 	bl	800bc58 <puts>
	forward_r(alpha + 450);
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff09 	bl	800235c <forward_r>
	forward_l(alpha + 10);
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	330a      	adds	r3, #10
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff1b 	bl	800238c <forward_l>

	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 8002556:	89fb      	ldrh	r3, [r7, #14]
 8002558:	461a      	mov	r2, r3
 800255a:	6939      	ldr	r1, [r7, #16]
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ff79 	bl	8002454 <calculate_motor_speed>
 8002562:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	461a      	mov	r2, r3
 800256a:	6939      	ldr	r1, [r7, #16]
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff ff71 	bl	8002454 <calculate_motor_speed>
 8002572:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7fe f80e 	bl	8000598 <__aeabi_f2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4815      	ldr	r0, [pc, #84]	@ (80025d8 <motorcontrol_souris+0xbc>)
 8002582:	f009 fb01 	bl	800bb88 <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4812      	ldr	r0, [pc, #72]	@ (80025dc <motorcontrol_souris+0xc0>)
 8002592:	f009 faf9 	bl	800bb88 <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <motorcontrol_souris+0xc4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	4811      	ldr	r0, [pc, #68]	@ (80025e4 <motorcontrol_souris+0xc8>)
 80025a0:	f009 faf2 	bl	800bb88 <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <motorcontrol_souris+0xcc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	4619      	mov	r1, r3
 80025ac:	480f      	ldr	r0, [pc, #60]	@ (80025ec <motorcontrol_souris+0xd0>)
 80025ae:	f009 faeb 	bl	800bb88 <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	4a0c      	ldr	r2, [pc, #48]	@ (80025f0 <motorcontrol_souris+0xd4>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	4618      	mov	r0, r3
 80025c6:	f007 fe6d 	bl	800a2a4 <vTaskDelay>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	0800def4 	.word	0x0800def4
 80025d8:	0800df28 	.word	0x0800df28
 80025dc:	0800df50 	.word	0x0800df50
 80025e0:	20000368 	.word	0x20000368
 80025e4:	0800df78 	.word	0x0800df78
 80025e8:	200003b4 	.word	0x200003b4
 80025ec:	0800df98 	.word	0x0800df98
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <motorcontrol_predateur>:

void motorcontrol_predateur(void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
	uint16_t alpha = 3400;  // 30% de 8500
 80025fa:	f640 5348 	movw	r3, #3400	@ 0xd48
 80025fe:	82fb      	strh	r3, [r7, #22]
	uint16_t distance = 0;  // Distance mesurée par le capteur
 8002600:	2300      	movs	r3, #0
 8002602:	82bb      	strh	r3, [r7, #20]
	const uint32_t delta_time_ms = 50;  // Intervalle de temps pour le calcul
 8002604:	2332      	movs	r3, #50	@ 0x32
 8002606:	613b      	str	r3, [r7, #16]
	const uint16_t encoder_resolution = 1024;  // Nombre d'impulsions par tour
 8002608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800260c:	81fb      	strh	r3, [r7, #14]

	printf("Mode Prédateur : moteurs avancent à grande vitesse.\n");
 800260e:	4827      	ldr	r0, [pc, #156]	@ (80026ac <motorcontrol_predateur+0xb8>)
 8002610:	f009 fb22 	bl	800bc58 <puts>
	forward_r(alpha + 1850);
 8002614:	8afb      	ldrh	r3, [r7, #22]
 8002616:	f203 733a 	addw	r3, r3, #1850	@ 0x73a
 800261a:	b29b      	uxth	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe9d 	bl	800235c <forward_r>
	forward_l(alpha+ 50);
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	3332      	adds	r3, #50	@ 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff feaf 	bl	800238c <forward_l>


	// Calcul et affichage des vitesses
	float speed_left = calculate_motor_speed(MOTOR_LEFT, delta_time_ms, encoder_resolution);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	461a      	mov	r2, r3
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff ff0d 	bl	8002454 <calculate_motor_speed>
 800263a:	ed87 0a02 	vstr	s0, [r7, #8]
	float speed_right = calculate_motor_speed(MOTOR_RIGHT, delta_time_ms, encoder_resolution);
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	461a      	mov	r2, r3
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	2001      	movs	r0, #1
 8002646:	f7ff ff05 	bl	8002454 <calculate_motor_speed>
 800264a:	ed87 0a01 	vstr	s0, [r7, #4]

	printf("Vitesse moteur gauche : %.2f tours/s\n", speed_left);
 800264e:	68b8      	ldr	r0, [r7, #8]
 8002650:	f7fd ffa2 	bl	8000598 <__aeabi_f2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4815      	ldr	r0, [pc, #84]	@ (80026b0 <motorcontrol_predateur+0xbc>)
 800265a:	f009 fa95 	bl	800bb88 <iprintf>
	printf("Vitesse moteur droit : %.2f tours/s\n", speed_right);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4812      	ldr	r0, [pc, #72]	@ (80026b4 <motorcontrol_predateur+0xc0>)
 800266a:	f009 fa8d 	bl	800bb88 <iprintf>

	printf("Position moteur gauche : %d\n", __HAL_TIM_GET_COUNTER(&htim3));
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <motorcontrol_predateur+0xc4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	4619      	mov	r1, r3
 8002676:	4811      	ldr	r0, [pc, #68]	@ (80026bc <motorcontrol_predateur+0xc8>)
 8002678:	f009 fa86 	bl	800bb88 <iprintf>
	printf("Position moteur droit : %d\n", __HAL_TIM_GET_COUNTER(&htim4));
 800267c:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <motorcontrol_predateur+0xcc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	4619      	mov	r1, r3
 8002684:	480f      	ldr	r0, [pc, #60]	@ (80026c4 <motorcontrol_predateur+0xd0>)
 8002686:	f009 fa7f 	bl	800bb88 <iprintf>


	vTaskDelay(pdMS_TO_TICKS(delta_time_ms)); // Vérification toutes les 100 ms
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	4a0c      	ldr	r2, [pc, #48]	@ (80026c8 <motorcontrol_predateur+0xd4>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	4618      	mov	r0, r3
 800269e:	f007 fe01 	bl	800a2a4 <vTaskDelay>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	0800dfb4 	.word	0x0800dfb4
 80026b0:	0800df28 	.word	0x0800df28
 80026b4:	0800df50 	.word	0x0800df50
 80026b8:	20000368 	.word	0x20000368
 80026bc:	0800df78 	.word	0x0800df78
 80026c0:	200003b4 	.word	0x200003b4
 80026c4:	0800df98 	.word	0x0800df98
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <pivot>:

void pivot(void) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
	uint16_t alpha = 1200;  // 30% de 8500
 80026d2:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80026d6:	80fb      	strh	r3, [r7, #6]

	// Arrêter les moteurs
	stop_r();
 80026d8:	f7ff fea0 	bl	800241c <stop_r>
	stop_l();
 80026dc:	f7ff feac 	bl	8002438 <stop_l>
	printf("Danger détecté : moteur arrêté. Pivot arrière en cours...\n");
 80026e0:	4815      	ldr	r0, [pc, #84]	@ (8002738 <pivot+0x6c>)
 80026e2:	f009 fab9 	bl	800bc58 <puts>

	// Effectuer un pivot en arrière
	reverse_r(alpha + 3050);       // Moteur droit recule
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f603 33ea 	addw	r3, r3, #3050	@ 0xbea
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe64 	bl	80023bc <reverse_r>
	reverse_l(alpha );   // Moteur gauche recule plus lentement pour pivoter
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fe78 	bl	80023ec <reverse_l>
	vTaskDelay(pdMS_TO_TICKS(600)); // Pivot pendant 1,5 seconde
 80026fc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002700:	f007 fdd0 	bl	800a2a4 <vTaskDelay>

	// Arrêter les moteurs après le pivot
	stop_r();
 8002704:	f7ff fe8a 	bl	800241c <stop_r>
	stop_l();
 8002708:	f7ff fe96 	bl	8002438 <stop_l>

	vTaskDelay(pdMS_TO_TICKS(200));
 800270c:	20c8      	movs	r0, #200	@ 0xc8
 800270e:	f007 fdc9 	bl	800a2a4 <vTaskDelay>

	forward_r(alpha+ 2450);
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	f603 1392 	addw	r3, r3, #2450	@ 0x992
 8002718:	b29b      	uxth	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe1e 	bl	800235c <forward_r>

	vTaskDelay(pdMS_TO_TICKS(320));
 8002720:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002724:	f007 fdbe 	bl	800a2a4 <vTaskDelay>

	printf("Pivot terminé, moteurs arrêtés.\n");
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <pivot+0x70>)
 800272a:	f009 fa95 	bl	800bc58 <puts>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	0800dfec 	.word	0x0800dfec
 800273c:	0800e02c 	.word	0x0800e02c

08002740 <MX_SPI1_Init>:
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002746:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <MX_SPI1_Init+0x78>)
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800274c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800275a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002762:	2202      	movs	r2, #2
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	615a      	str	r2, [r3, #20]
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800276e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002772:	619a      	str	r2, [r3, #24]
 8002774:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002776:	2220      	movs	r2, #32
 8002778:	61da      	str	r2, [r3, #28]
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800278e:	2207      	movs	r2, #7
 8002790:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <MX_SPI1_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <MX_SPI1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	635a      	str	r2, [r3, #52]	@ 0x34
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_SPI1_Init+0x74>)
 80027a0:	f003 fb2c 	bl	8005dfc <HAL_SPI_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_SPI1_Init+0x6e>
 80027aa:	f7ff fda7 	bl	80022fc <Error_Handler>
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000268 	.word	0x20000268
 80027b8:	40013000 	.word	0x40013000

080027bc <HAL_SPI_MspInit>:
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_SPI_MspInit+0x7c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d128      	bne.n	8002830 <HAL_SPI_MspInit+0x74>
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_SPI_MspInit+0x80>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_SPI_MspInit+0x80>)
 80027e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_SPI_MspInit+0x80>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_SPI_MspInit+0x80>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fa:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_SPI_MspInit+0x80>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_SPI_MspInit+0x80>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	23e0      	movs	r3, #224	@ 0xe0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	2302      	movs	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	2305      	movs	r3, #5
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800282c:	f001 fb10 	bl	8003e50 <HAL_GPIO_Init>
 8002830:	bf00      	nop
 8002832:	3728      	adds	r7, #40	@ 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40013000 	.word	0x40013000
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_MspInit>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <HAL_MspInit+0x50>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_MspInit+0x50>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6613      	str	r3, [r2, #96]	@ 0x60
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <HAL_MspInit+0x50>)
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <HAL_MspInit+0x50>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <HAL_MspInit+0x50>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	@ 0x58
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_MspInit+0x50>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	210f      	movs	r1, #15
 800287a:	f06f 0001 	mvn.w	r0, #1
 800287e:	f001 f845 	bl	800390c <HAL_NVIC_SetPriority>
 8002882:	f002 fb5f 	bl	8004f44 <HAL_PWREx_DisableUCPDDeadBattery>
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_InitTick>:
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <HAL_InitTick+0xc4>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002958 <HAL_InitTick+0xc4>)
 80028aa:	f043 0310 	orr.w	r3, r3, #16
 80028ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <HAL_InitTick+0xc4>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f107 020c 	add.w	r2, r7, #12
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 f832 	bl	8005930 <HAL_RCC_GetClockConfig>
 80028cc:	f003 f804 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 80028d0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	4a21      	ldr	r2, [pc, #132]	@ (800295c <HAL_InitTick+0xc8>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	3b01      	subs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_InitTick+0xcc>)
 80028e2:	4a20      	ldr	r2, [pc, #128]	@ (8002964 <HAL_InitTick+0xd0>)
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <HAL_InitTick+0xcc>)
 80028e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002960 <HAL_InitTick+0xcc>)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_InitTick+0xcc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_InitTick+0xcc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	4817      	ldr	r0, [pc, #92]	@ (8002960 <HAL_InitTick+0xcc>)
 8002902:	f004 f9af 	bl	8006c64 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800290c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002910:	2b00      	cmp	r3, #0
 8002912:	d11b      	bne.n	800294c <HAL_InitTick+0xb8>
 8002914:	4812      	ldr	r0, [pc, #72]	@ (8002960 <HAL_InitTick+0xcc>)
 8002916:	f004 f9fd 	bl	8006d14 <HAL_TIM_Base_Start_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <HAL_InitTick+0xb8>
 8002928:	2036      	movs	r0, #54	@ 0x36
 800292a:	f001 f809 	bl	8003940 <HAL_NVIC_EnableIRQ>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d808      	bhi.n	8002946 <HAL_InitTick+0xb2>
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	2036      	movs	r0, #54	@ 0x36
 800293a:	f000 ffe7 	bl	800390c <HAL_NVIC_SetPriority>
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_InitTick+0xd4>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e002      	b.n	800294c <HAL_InitTick+0xb8>
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800294c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002950:	4618      	mov	r0, r3
 8002952:	3730      	adds	r7, #48	@ 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	431bde83 	.word	0x431bde83
 8002960:	200002cc 	.word	0x200002cc
 8002964:	40001000 	.word	0x40001000
 8002968:	20000004 	.word	0x20000004

0800296c <NMI_Handler>:
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <DebugMon_Handler>:
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <EXTI1_IRQHandler>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4803      	ldr	r0, [pc, #12]	@ (80029b8 <EXTI1_IRQHandler+0x14>)
 80029aa:	f009 f8ed 	bl	800bb88 <iprintf>
 80029ae:	2002      	movs	r0, #2
 80029b0:	f001 fbe8 	bl	8004184 <HAL_GPIO_EXTI_IRQHandler>
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800e050 	.word	0x0800e050

080029bc <EXTI2_IRQHandler>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4803      	ldr	r0, [pc, #12]	@ (80029d0 <EXTI2_IRQHandler+0x14>)
 80029c2:	f009 f8e1 	bl	800bb88 <iprintf>
 80029c6:	2004      	movs	r0, #4
 80029c8:	f001 fbdc 	bl	8004184 <HAL_GPIO_EXTI_IRQHandler>
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	0800e058 	.word	0x0800e058

080029d4 <DMA1_Channel1_IRQHandler>:
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <DMA1_Channel1_IRQHandler+0x10>)
 80029da:	f001 f927 	bl	8003c2c <HAL_DMA_IRQHandler>
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000528 	.word	0x20000528

080029e8 <EXTI15_10_IRQHandler>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80029f0:	f001 fbc8 	bl	8004184 <HAL_GPIO_EXTI_IRQHandler>
 80029f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80029f8:	f001 fbc4 	bl	8004184 <HAL_GPIO_EXTI_IRQHandler>
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART4_IRQHandler>:
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <UART4_IRQHandler+0x10>)
 8002a06:	f006 f85f 	bl	8008ac8 <HAL_UART_IRQHandler>
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000400 	.word	0x20000400

08002a14 <TIM6_DAC_IRQHandler>:
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <TIM6_DAC_IRQHandler+0x10>)
 8002a1a:	f004 fd11 	bl	8007440 <HAL_TIM_IRQHandler>
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200002cc 	.word	0x200002cc

08002a28 <_getpid>:
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <_kill>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	f009 fa3b 	bl	800bebc <__errno>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2216      	movs	r2, #22
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_exit>:
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffe7 	bl	8002a38 <_kill>
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <_exit+0x12>

08002a6e <_read>:
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e00a      	b.n	8002a96 <_read+0x28>
 8002a80:	f3af 8000 	nop.w
 8002a84:	4601      	mov	r1, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	b2ca      	uxtb	r2, r1
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	dbf0      	blt.n	8002a80 <_read+0x12>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_close>:
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_fstat>:
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_isatty>:
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_lseek>:
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	2300      	movs	r3, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_sbrk>:
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <_sbrk+0x5c>)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <_sbrk+0x60>)
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
 8002b40:	f009 f9bc 	bl	800bebc <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20008000 	.word	0x20008000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	20000318 	.word	0x20000318
 8002b78:	20005650 	.word	0x20005650

08002b7c <SystemInit>:
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <SystemInit+0x20>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <SystemInit+0x20>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <MX_TIM1_Init>:
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b09c      	sub	sp, #112	@ 0x70
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	615a      	str	r2, [r3, #20]
 8002bd2:	619a      	str	r2, [r3, #24]
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2234      	movs	r2, #52	@ 0x34
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f009 f91c 	bl	800be18 <memset>
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002be2:	4a54      	ldr	r2, [pc, #336]	@ (8002d34 <MX_TIM1_Init+0x194>)
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	4b50      	ldr	r3, [pc, #320]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002bee:	2220      	movs	r2, #32
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002bf4:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	4b4b      	ldr	r3, [pc, #300]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
 8002c06:	4b4a      	ldr	r3, [pc, #296]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	619a      	str	r2, [r3, #24]
 8002c0c:	4848      	ldr	r0, [pc, #288]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c0e:	f004 f829 	bl	8006c64 <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0x7c>
 8002c18:	f7ff fb70 	bl	80022fc <Error_Handler>
 8002c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c22:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c26:	4619      	mov	r1, r3
 8002c28:	4841      	ldr	r0, [pc, #260]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c2a:	f004 fe6d 	bl	8007908 <HAL_TIM_ConfigClockSource>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM1_Init+0x98>
 8002c34:	f7ff fb62 	bl	80022fc <Error_Handler>
 8002c38:	483d      	ldr	r0, [pc, #244]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c3a:	f004 f8d5 	bl	8006de8 <HAL_TIM_PWM_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM1_Init+0xa8>
 8002c44:	f7ff fb5a 	bl	80022fc <Error_Handler>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c50:	2300      	movs	r3, #0
 8002c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4835      	ldr	r0, [pc, #212]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c5c:	f005 fcdc 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM1_Init+0xca>
 8002c66:	f7ff fb49 	bl	80022fc <Error_Handler>
 8002c6a:	2360      	movs	r3, #96	@ 0x60
 8002c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c6e:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c74:	2300      	movs	r3, #0
 8002c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c78:	2300      	movs	r3, #0
 8002c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c80:	2300      	movs	r3, #0
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c84:	2300      	movs	r3, #0
 8002c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4827      	ldr	r0, [pc, #156]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002c92:	f004 fd25 	bl	80076e0 <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM1_Init+0x100>
 8002c9c:	f7ff fb2e 	bl	80022fc <Error_Handler>
 8002ca0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4821      	ldr	r0, [pc, #132]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002caa:	f004 fd19 	bl	80076e0 <HAL_TIM_PWM_ConfigChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM1_Init+0x118>
 8002cb4:	f7ff fb22 	bl	80022fc <Error_Handler>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	481a      	ldr	r0, [pc, #104]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002cc6:	f004 fd0b 	bl	80076e0 <HAL_TIM_PWM_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM1_Init+0x134>
 8002cd0:	f7ff fb14 	bl	80022fc <Error_Handler>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d08:	2300      	movs	r3, #0
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4807      	ldr	r0, [pc, #28]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002d12:	f005 fd03 	bl	800871c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM1_Init+0x180>
 8002d1c:	f7ff faee 	bl	80022fc <Error_Handler>
 8002d20:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <MX_TIM1_Init+0x190>)
 8002d22:	f000 f949 	bl	8002fb8 <HAL_TIM_MspPostInit>
 8002d26:	bf00      	nop
 8002d28:	3770      	adds	r7, #112	@ 0x70
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000031c 	.word	0x2000031c
 8002d34:	40012c00 	.word	0x40012c00

08002d38 <MX_TIM3_Init>:
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	@ 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	2224      	movs	r2, #36	@ 0x24
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f009 f866 	bl	800be18 <memset>
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d58:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <MX_TIM3_Init+0xa8>)
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	2301      	movs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	2301      	movs	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	4619      	mov	r1, r3
 8002da6:	480d      	ldr	r0, [pc, #52]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002da8:	f004 fa16 	bl	80071d8 <HAL_TIM_Encoder_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM3_Init+0x7e>
 8002db2:	f7ff faa3 	bl	80022fc <Error_Handler>
 8002db6:	2300      	movs	r3, #0
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4806      	ldr	r0, [pc, #24]	@ (8002ddc <MX_TIM3_Init+0xa4>)
 8002dc4:	f005 fc28 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM3_Init+0x9a>
 8002dce:	f7ff fa95 	bl	80022fc <Error_Handler>
 8002dd2:	bf00      	nop
 8002dd4:	3730      	adds	r7, #48	@ 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000368 	.word	0x20000368
 8002de0:	40000400 	.word	0x40000400

08002de4 <MX_TIM4_Init>:
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	@ 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f009 f810 	bl	800be18 <memset>
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e04:	4a21      	ldr	r2, [pc, #132]	@ (8002e8c <MX_TIM4_Init+0xa8>)
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	4b1c      	ldr	r3, [pc, #112]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	2301      	movs	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e54:	f004 f9c0 	bl	80071d8 <HAL_TIM_Encoder_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x7e>
 8002e5e:	f7ff fa4d 	bl	80022fc <Error_Handler>
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4806      	ldr	r0, [pc, #24]	@ (8002e88 <MX_TIM4_Init+0xa4>)
 8002e70:	f005 fbd2 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM4_Init+0x9a>
 8002e7a:	f7ff fa3f 	bl	80022fc <Error_Handler>
 8002e7e:	bf00      	nop
 8002e80:	3730      	adds	r7, #48	@ 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200003b4 	.word	0x200003b4
 8002e8c:	40000800 	.word	0x40000800

08002e90 <HAL_TIM_Base_MspInit>:
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_TIM_Base_MspInit+0x38>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10b      	bne.n	8002eba <HAL_TIM_Base_MspInit+0x2a>
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	4a09      	ldr	r2, [pc, #36]	@ (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002eac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <HAL_TIM_Base_MspInit+0x3c>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_TIM_Encoder_MspInit>:
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d128      	bne.n	8002f44 <HAL_TIM_Encoder_MspInit+0x74>
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efe:	4b2b      	ldr	r3, [pc, #172]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0e:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f16:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2330      	movs	r3, #48	@ 0x30
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	2302      	movs	r3, #2
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f32:	2302      	movs	r3, #2
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	481c      	ldr	r0, [pc, #112]	@ (8002fb0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002f3e:	f000 ff87 	bl	8003e50 <HAL_GPIO_Init>
 8002f42:	e02c      	b.n	8002f9e <HAL_TIM_Encoder_MspInit+0xce>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d127      	bne.n	8002f9e <HAL_TIM_Encoder_MspInit+0xce>
 8002f4e:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6a:	4a10      	ldr	r2, [pc, #64]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	2302      	movs	r3, #2
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8e:	2302      	movs	r3, #2
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002f9a:	f000 ff59 	bl	8003e50 <HAL_GPIO_Init>
 8002f9e:	bf00      	nop
 8002fa0:	3730      	adds	r7, #48	@ 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	40000800 	.word	0x40000800

08002fb8 <HAL_TIM_MspPostInit>:
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <HAL_TIM_MspPostInit+0x68>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d11d      	bne.n	8003016 <HAL_TIM_MspPostInit+0x5e>
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_TIM_MspPostInit+0x6c>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fde:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <HAL_TIM_MspPostInit+0x6c>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <HAL_TIM_MspPostInit+0x6c>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	2306      	movs	r3, #6
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003012:	f000 ff1d 	bl	8003e50 <HAL_GPIO_Init>
 8003016:	bf00      	nop
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40021000 	.word	0x40021000

08003028 <MX_UART4_Init>:
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
 800302c:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <MX_UART4_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <MX_UART4_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003034:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <MX_UART4_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <MX_UART4_Init+0x90>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_UART4_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_UART4_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003070:	4811      	ldr	r0, [pc, #68]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003072:	f005 fc4a 	bl	800890a <HAL_UART_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_UART4_Init+0x58>
 800307c:	f7ff f93e 	bl	80022fc <Error_Handler>
 8003080:	2100      	movs	r1, #0
 8003082:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003084:	f006 fe01 	bl	8009c8a <HAL_UARTEx_SetTxFifoThreshold>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_UART4_Init+0x6a>
 800308e:	f7ff f935 	bl	80022fc <Error_Handler>
 8003092:	2100      	movs	r1, #0
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003096:	f006 fe36 	bl	8009d06 <HAL_UARTEx_SetRxFifoThreshold>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_UART4_Init+0x7c>
 80030a0:	f7ff f92c 	bl	80022fc <Error_Handler>
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_UART4_Init+0x90>)
 80030a6:	f006 fdb7 	bl	8009c18 <HAL_UARTEx_DisableFifoMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_UART4_Init+0x8c>
 80030b0:	f7ff f924 	bl	80022fc <Error_Handler>
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000400 	.word	0x20000400
 80030bc:	40004c00 	.word	0x40004c00

080030c0 <MX_USART2_UART_Init>:
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030c6:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <MX_USART2_UART_Init+0x94>)
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
 80030ea:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	@ 0x24
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28
 8003108:	4811      	ldr	r0, [pc, #68]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 800310a:	f005 fbfe 	bl	800890a <HAL_UART_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_USART2_UART_Init+0x58>
 8003114:	f7ff f8f2 	bl	80022fc <Error_Handler>
 8003118:	2100      	movs	r1, #0
 800311a:	480d      	ldr	r0, [pc, #52]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 800311c:	f006 fdb5 	bl	8009c8a <HAL_UARTEx_SetTxFifoThreshold>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART2_UART_Init+0x6a>
 8003126:	f7ff f8e9 	bl	80022fc <Error_Handler>
 800312a:	2100      	movs	r1, #0
 800312c:	4808      	ldr	r0, [pc, #32]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 800312e:	f006 fdea 	bl	8009d06 <HAL_UARTEx_SetRxFifoThreshold>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_USART2_UART_Init+0x7c>
 8003138:	f7ff f8e0 	bl	80022fc <Error_Handler>
 800313c:	4804      	ldr	r0, [pc, #16]	@ (8003150 <MX_USART2_UART_Init+0x90>)
 800313e:	f006 fd6b 	bl	8009c18 <HAL_UARTEx_DisableFifoMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_USART2_UART_Init+0x8c>
 8003148:	f7ff f8d8 	bl	80022fc <Error_Handler>
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000494 	.word	0x20000494
 8003154:	40004400 	.word	0x40004400

08003158 <HAL_UART_MspInit>:
 8003158:	b580      	push	{r7, lr}
 800315a:	b09c      	sub	sp, #112	@ 0x70
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	2244      	movs	r2, #68	@ 0x44
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f008 fe4d 	bl	800be18 <memset>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_UART_MspInit+0x188>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d16a      	bne.n	800325e <HAL_UART_MspInit+0x106>
 8003188:	2308      	movs	r3, #8
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fc41 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x4c>
 80031a0:	f7ff f8ac 	bl	80022fc <Error_Handler>
 80031a4:	4b4f      	ldr	r3, [pc, #316]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	4a4e      	ldr	r2, [pc, #312]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b0:	4b4c      	ldr	r3, [pc, #304]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4b49      	ldr	r3, [pc, #292]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c0:	4a48      	ldr	r2, [pc, #288]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c8:	4b46      	ldr	r3, [pc, #280]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031da:	2302      	movs	r3, #2
 80031dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80031de:	2300      	movs	r3, #0
 80031e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80031e2:	2300      	movs	r3, #0
 80031e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e6:	2305      	movs	r3, #5
 80031e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031ee:	4619      	mov	r1, r3
 80031f0:	483d      	ldr	r0, [pc, #244]	@ (80032e8 <HAL_UART_MspInit+0x190>)
 80031f2:	f000 fe2d 	bl	8003e50 <HAL_GPIO_Init>
 80031f6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ec <HAL_UART_MspInit+0x194>)
 80031f8:	4a3d      	ldr	r2, [pc, #244]	@ (80032f0 <HAL_UART_MspInit+0x198>)
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <HAL_UART_MspInit+0x194>)
 80031fe:	221e      	movs	r2, #30
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	4b3a      	ldr	r3, [pc, #232]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	4b38      	ldr	r3, [pc, #224]	@ (80032ec <HAL_UART_MspInit+0x194>)
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_UART_MspInit+0x194>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003222:	2220      	movs	r2, #32
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800322c:	621a      	str	r2, [r3, #32]
 800322e:	482f      	ldr	r0, [pc, #188]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003230:	f000 fb94 	bl	800395c <HAL_DMA_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_UART_MspInit+0xe6>
 800323a:	f7ff f85f 	bl	80022fc <Error_Handler>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003246:	4a29      	ldr	r2, [pc, #164]	@ (80032ec <HAL_UART_MspInit+0x194>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6293      	str	r3, [r2, #40]	@ 0x28
 800324c:	2200      	movs	r2, #0
 800324e:	2105      	movs	r1, #5
 8003250:	2034      	movs	r0, #52	@ 0x34
 8003252:	f000 fb5b 	bl	800390c <HAL_NVIC_SetPriority>
 8003256:	2034      	movs	r0, #52	@ 0x34
 8003258:	f000 fb72 	bl	8003940 <HAL_NVIC_EnableIRQ>
 800325c:	e03b      	b.n	80032d6 <HAL_UART_MspInit+0x17e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a24      	ldr	r2, [pc, #144]	@ (80032f4 <HAL_UART_MspInit+0x19c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d136      	bne.n	80032d6 <HAL_UART_MspInit+0x17e>
 8003268:	2302      	movs	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	4618      	mov	r0, r3
 8003276:	f002 fbd1 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_MspInit+0x12c>
 8003280:	f7ff f83c 	bl	80022fc <Error_Handler>
 8003284:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	4a16      	ldr	r2, [pc, #88]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	4a10      	ldr	r2, [pc, #64]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <HAL_UART_MspInit+0x18c>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	230c      	movs	r3, #12
 80032b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b8:	2302      	movs	r3, #2
 80032ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80032bc:	2300      	movs	r3, #0
 80032be:	667b      	str	r3, [r7, #100]	@ 0x64
 80032c0:	2300      	movs	r3, #0
 80032c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032c4:	2307      	movs	r3, #7
 80032c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d2:	f000 fdbd 	bl	8003e50 <HAL_GPIO_Init>
 80032d6:	bf00      	nop
 80032d8:	3770      	adds	r7, #112	@ 0x70
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40004c00 	.word	0x40004c00
 80032e4:	40021000 	.word	0x40021000
 80032e8:	48000800 	.word	0x48000800
 80032ec:	20000528 	.word	0x20000528
 80032f0:	40020008 	.word	0x40020008
 80032f4:	40004400 	.word	0x40004400

080032f8 <VL53L1_RdByte>:
#include "VL53L1X_api.h"

extern I2C_HandleTypeDef TOF_PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	4603      	mov	r3, r0
 8003300:	603a      	str	r2, [r7, #0]
 8003302:	80fb      	strh	r3, [r7, #6]
 8003304:	460b      	mov	r3, r1
 8003306:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8003308:	88ba      	ldrh	r2, [r7, #4]
 800330a:	88f9      	ldrh	r1, [r7, #6]
 800330c:	2314      	movs	r3, #20
 800330e:	9302      	str	r3, [sp, #8]
 8003310:	2301      	movs	r3, #1
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2302      	movs	r3, #2
 800331a:	4807      	ldr	r0, [pc, #28]	@ (8003338 <VL53L1_RdByte+0x40>)
 800331c:	f001 f8fa 	bl	8004514 <HAL_I2C_Mem_Read>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <VL53L1_RdByte+0x34>
		return VL53L1__IO_ERROR;
 8003326:	f06f 030c 	mvn.w	r3, #12
 800332a:	e000      	b.n	800332e <VL53L1_RdByte+0x36>
	else
		return 0;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200001f8 	.word	0x200001f8

0800333c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af04      	add	r7, sp, #16
 8003342:	4603      	mov	r3, r0
 8003344:	603a      	str	r2, [r7, #0]
 8003346:	80fb      	strh	r3, [r7, #6]
 8003348:	460b      	mov	r3, r1
 800334a:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 800334c:	88ba      	ldrh	r2, [r7, #4]
 800334e:	88f9      	ldrh	r1, [r7, #6]
 8003350:	2314      	movs	r3, #20
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	2302      	movs	r3, #2
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2302      	movs	r3, #2
 800335e:	480c      	ldr	r0, [pc, #48]	@ (8003390 <VL53L1_RdWord+0x54>)
 8003360:	f001 f8d8 	bl	8004514 <HAL_I2C_Mem_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 800336a:	f06f 030c 	mvn.w	r3, #12
 800336e:	e00b      	b.n	8003388 <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b21b      	sxth	r3, r3
 8003376:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	ba5b      	rev16	r3, r3
 800337c:	b29b      	uxth	r3, r3
 800337e:	b21b      	sxth	r3, r3
 8003380:	b29a      	uxth	r2, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	801a      	strh	r2, [r3, #0]
		return 0;
 8003386:	2300      	movs	r3, #0
	}
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200001f8 	.word	0x200001f8

08003394 <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af04      	add	r7, sp, #16
 800339a:	60ba      	str	r2, [r7, #8]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	4603      	mov	r3, r0
 80033a0:	81fb      	strh	r3, [r7, #14]
 80033a2:	460b      	mov	r3, r1
 80033a4:	81bb      	strh	r3, [r7, #12]
	if (HAL_I2C_Mem_Read(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, HAL_MAX_DELAY))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	89ba      	ldrh	r2, [r7, #12]
 80033ac:	89f9      	ldrh	r1, [r7, #14]
 80033ae:	f04f 30ff 	mov.w	r0, #4294967295
 80033b2:	9002      	str	r0, [sp, #8]
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2302      	movs	r3, #2
 80033bc:	4806      	ldr	r0, [pc, #24]	@ (80033d8 <VL53L1_ReadMulti+0x44>)
 80033be:	f001 f8a9 	bl	8004514 <HAL_I2C_Mem_Read>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <VL53L1_ReadMulti+0x3a>
		return VL53L1__IO_ERROR;
 80033c8:	f06f 030c 	mvn.w	r3, #12
 80033cc:	e000      	b.n	80033d0 <VL53L1_ReadMulti+0x3c>
	else
		return 0;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200001f8 	.word	0x200001f8

080033dc <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af04      	add	r7, sp, #16
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
 80033e6:	460b      	mov	r3, r1
 80033e8:	80bb      	strh	r3, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 80033ee:	88ba      	ldrh	r2, [r7, #4]
 80033f0:	88f9      	ldrh	r1, [r7, #6]
 80033f2:	2314      	movs	r3, #20
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	2301      	movs	r3, #1
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	1cfb      	adds	r3, r7, #3
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2302      	movs	r3, #2
 8003400:	4806      	ldr	r0, [pc, #24]	@ (800341c <VL53L1_WrByte+0x40>)
 8003402:	f000 ff73 	bl	80042ec <HAL_I2C_Mem_Write>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 800340c:	f06f 030c 	mvn.w	r3, #12
 8003410:	e000      	b.n	8003414 <VL53L1_WrByte+0x38>
	else
		return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200001f8 	.word	0x200001f8

08003420 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af04      	add	r7, sp, #16
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	460b      	mov	r3, r1
 800342c:	80bb      	strh	r3, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	b21b      	sxth	r3, r3
 8003436:	81fb      	strh	r3, [r7, #14]
 8003438:	89fb      	ldrh	r3, [r7, #14]
 800343a:	ba5b      	rev16	r3, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	b21b      	sxth	r3, r3
 8003440:	b29b      	uxth	r3, r3
 8003442:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 8003444:	88ba      	ldrh	r2, [r7, #4]
 8003446:	88f9      	ldrh	r1, [r7, #6]
 8003448:	2314      	movs	r3, #20
 800344a:	9302      	str	r3, [sp, #8]
 800344c:	2302      	movs	r3, #2
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	1cbb      	adds	r3, r7, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2302      	movs	r3, #2
 8003456:	4807      	ldr	r0, [pc, #28]	@ (8003474 <VL53L1_WrWord+0x54>)
 8003458:	f000 ff48 	bl	80042ec <HAL_I2C_Mem_Write>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 8003462:	f06f 030c 	mvn.w	r3, #12
 8003466:	e000      	b.n	800346a <VL53L1_WrWord+0x4a>
	else
		return 0;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200001f8 	.word	0x200001f8

08003478 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af04      	add	r7, sp, #16
 800347e:	4603      	mov	r3, r0
 8003480:	603a      	str	r2, [r7, #0]
 8003482:	80fb      	strh	r3, [r7, #6]
 8003484:	460b      	mov	r3, r1
 8003486:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	ba1b      	rev	r3, r3
 8003490:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&TOF_PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 8003492:	88ba      	ldrh	r2, [r7, #4]
 8003494:	88f9      	ldrh	r1, [r7, #6]
 8003496:	2314      	movs	r3, #20
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	2304      	movs	r3, #4
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	463b      	mov	r3, r7
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2302      	movs	r3, #2
 80034a4:	4806      	ldr	r0, [pc, #24]	@ (80034c0 <VL53L1_WrDWord+0x48>)
 80034a6:	f000 ff21 	bl	80042ec <HAL_I2C_Mem_Write>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 80034b0:	f06f 030c 	mvn.w	r3, #12
 80034b4:	e000      	b.n	80034b8 <VL53L1_WrDWord+0x40>
	else
		return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200001f8 	.word	0x200001f8

080034c4 <VL53L1__Init>:
 * @brief:		Test VL53L1 presence,
 * 				initialize sensor,
 * 				set it the default Distance Mode, Timing Budget and Intermeasurement
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
	uint8_t refRegs[4] = {0,0,0,0};
 80034ca:	2300      	movs	r3, #0
 80034cc:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
	printf("Verification du capteur via I2C...\n");
 80034d2:	4864      	ldr	r0, [pc, #400]	@ (8003664 <VL53L1__Init+0x1a0>)
 80034d4:	f008 fbc0 	bl	800bc58 <puts>
	/*status |= VL53L1__Xshut(1);
	if (status)
		return (status);

	HAL_Delay(4);*/
	status = VL53L1_ReadMulti(TOF_ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 80034d8:	463a      	mov	r2, r7
 80034da:	2304      	movs	r3, #4
 80034dc:	f240 110f 	movw	r1, #271	@ 0x10f
 80034e0:	2052      	movs	r0, #82	@ 0x52
 80034e2:	f7ff ff57 	bl	8003394 <VL53L1_ReadMulti>
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <VL53L1__Init+0x3a>
		printf("Erreur I2C lors de la lecture des registres : %d\n", status);
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4619      	mov	r1, r3
 80034f4:	485c      	ldr	r0, [pc, #368]	@ (8003668 <VL53L1__Init+0x1a4>)
 80034f6:	f008 fb47 	bl	800bb88 <iprintf>
		return 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0ae      	b.n	800365c <VL53L1__Init+0x198>
	}

	printf("Model ID : 0x%02X, Module Type : 0x%02X, Mask Revision : 0x%02X\n", refRegs[0], refRegs[1], refRegs[2]);
 80034fe:	783b      	ldrb	r3, [r7, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	787b      	ldrb	r3, [r7, #1]
 8003504:	461a      	mov	r2, r3
 8003506:	78bb      	ldrb	r3, [r7, #2]
 8003508:	4858      	ldr	r0, [pc, #352]	@ (800366c <VL53L1__Init+0x1a8>)
 800350a:	f008 fb3d 	bl	800bb88 <iprintf>


	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1

	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 800350e:	783b      	ldrb	r3, [r7, #0]
 8003510:	2bea      	cmp	r3, #234	@ 0xea
 8003512:	d105      	bne.n	8003520 <VL53L1__Init+0x5c>
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2bcc      	cmp	r3, #204	@ 0xcc
 8003518:	d102      	bne.n	8003520 <VL53L1__Init+0x5c>
 800351a:	78bb      	ldrb	r3, [r7, #2]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d004      	beq.n	800352a <VL53L1__Init+0x66>
	{
		printf("Valeurs incorrectes des registres. Vérifiez le câblage.\n");
 8003520:	4853      	ldr	r0, [pc, #332]	@ (8003670 <VL53L1__Init+0x1ac>)
 8003522:	f008 fb99 	bl	800bc58 <puts>
		return (1);
 8003526:	2301      	movs	r3, #1
 8003528:	e098      	b.n	800365c <VL53L1__Init+0x198>
	}

	printf("Capteur détecté avec succès ! \n");
 800352a:	4852      	ldr	r0, [pc, #328]	@ (8003674 <VL53L1__Init+0x1b0>)
 800352c:	f008 fb94 	bl	800bc58 <puts>

	// Initialisation du capteur
	printf("Initialisation du capteur VL53L1X...\n");
 8003530:	4851      	ldr	r0, [pc, #324]	@ (8003678 <VL53L1__Init+0x1b4>)
 8003532:	f008 fb91 	bl	800bc58 <puts>
	status |= VL53L1X_SensorInit(TOF_ADDR);
 8003536:	2052      	movs	r0, #82	@ 0x52
 8003538:	f7fd fee4 	bl	8001304 <VL53L1X_SensorInit>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4313      	orrs	r3, r2
 8003546:	b25b      	sxtb	r3, r3
 8003548:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <VL53L1__Init+0xa0>
		printf("Échec de l'initialisation du capteur VL53L1X : %d\n", status);
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4619      	mov	r1, r3
 8003554:	4849      	ldr	r0, [pc, #292]	@ (800367c <VL53L1__Init+0x1b8>)
 8003556:	f008 fb17 	bl	800bb88 <iprintf>
		HAL_Delay(50);
 800355a:	2032      	movs	r0, #50	@ 0x32
 800355c:	f000 f8fc 	bl	8003758 <HAL_Delay>
		return 1;
 8003560:	2301      	movs	r3, #1
 8003562:	e07b      	b.n	800365c <VL53L1__Init+0x198>
	}

	// Calibration des offsets et xtalk
	printf("Calibration des offsets et xtalk...\n");
 8003564:	4846      	ldr	r0, [pc, #280]	@ (8003680 <VL53L1__Init+0x1bc>)
 8003566:	f008 fb77 	bl	800bc58 <puts>
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 800356a:	f06f 0118 	mvn.w	r1, #24
 800356e:	2052      	movs	r0, #82	@ 0x52
 8003570:	f7fe fad3 	bl	8001b1a <VL53L1X_SetOffset>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4313      	orrs	r3, r2
 800357e:	b25b      	sxtb	r3, r3
 8003580:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <VL53L1__Init+0xd8>
			printf("Erreur de calibration OFFSET : %d\n", status);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4619      	mov	r1, r3
 800358c:	483d      	ldr	r0, [pc, #244]	@ (8003684 <VL53L1__Init+0x1c0>)
 800358e:	f008 fafb 	bl	800bb88 <iprintf>
			HAL_Delay(50);
 8003592:	2032      	movs	r0, #50	@ 0x32
 8003594:	f000 f8e0 	bl	8003758 <HAL_Delay>
			return 1;
 8003598:	2301      	movs	r3, #1
 800359a:	e05f      	b.n	800365c <VL53L1__Init+0x198>
		}
	status |= VL53L1X_SetXtalk(TOF_ADDR, VL53L1__CALIB_XTALK);
 800359c:	2100      	movs	r1, #0
 800359e:	2052      	movs	r0, #82	@ 0x52
 80035a0:	f7fe faf0 	bl	8001b84 <VL53L1X_SetXtalk>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	71fb      	strb	r3, [r7, #7]
	if (status != 0) {
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <VL53L1__Init+0x108>
			printf("Erreur de calibration XTALK : %d\n", status);
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4619      	mov	r1, r3
 80035bc:	4832      	ldr	r0, [pc, #200]	@ (8003688 <VL53L1__Init+0x1c4>)
 80035be:	f008 fae3 	bl	800bb88 <iprintf>
			HAL_Delay(50);
 80035c2:	2032      	movs	r0, #50	@ 0x32
 80035c4:	f000 f8c8 	bl	8003758 <HAL_Delay>
			return 1;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e047      	b.n	800365c <VL53L1__Init+0x198>
		}


	// Configuration des paramètres de mesure
	printf("Configuration des paramètres de mesure...\n");
 80035cc:	482f      	ldr	r0, [pc, #188]	@ (800368c <VL53L1__Init+0x1c8>)
 80035ce:	f008 fb43 	bl	800bc58 <puts>
	// VL53L1X sensor is available
	/* inizializing: default setting  */
	status |= VL53L1X_SensorInit(TOF_ADDR);
 80035d2:	2052      	movs	r0, #82	@ 0x52
 80035d4:	f7fd fe96 	bl	8001304 <VL53L1X_SensorInit>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	71fb      	strb	r3, [r7, #7]
	/* initializing: device settings */
	status |= VL53L1X_SetOffset(TOF_ADDR, VL53L1__CALIB_OFFSET);
 80035e6:	f06f 0118 	mvn.w	r1, #24
 80035ea:	2052      	movs	r0, #82	@ 0x52
 80035ec:	f7fe fa95 	bl	8001b1a <VL53L1X_SetOffset>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	71fb      	strb	r3, [r7, #7]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(TOF_ADDR, VL53L1__DISTANCE_MODE);
 80035fe:	2102      	movs	r1, #2
 8003600:	2052      	movs	r0, #82	@ 0x52
 8003602:	f7fe f967 	bl	80018d4 <VL53L1X_SetDistanceMode>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	4313      	orrs	r3, r2
 8003610:	b25b      	sxtb	r3, r3
 8003612:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(TOF_ADDR, VL53L1__TIMING_BUDGET);
 8003614:	2114      	movs	r1, #20
 8003616:	2052      	movs	r0, #82	@ 0x52
 8003618:	f7fd ffc1 	bl	800159e <VL53L1X_SetTimingBudgetInMs>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	4313      	orrs	r3, r2
 8003626:	b25b      	sxtb	r3, r3
 8003628:	71fb      	strb	r3, [r7, #7]
	status |= VL53L1X_SetInterMeasurementInMs(TOF_ADDR, VL53L1__INTERMEASUREMENT);
 800362a:	2119      	movs	r1, #25
 800362c:	2052      	movs	r0, #82	@ 0x52
 800362e:	f7fe fa1b 	bl	8001a68 <VL53L1X_SetInterMeasurementInMs>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	4313      	orrs	r3, r2
 800363c:	b25b      	sxtb	r3, r3
 800363e:	71fb      	strb	r3, [r7, #7]

	if (status != 0) {
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <VL53L1__Init+0x190>
		printf("Erreur de configuration : %d\n", status);
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4619      	mov	r1, r3
 800364a:	4811      	ldr	r0, [pc, #68]	@ (8003690 <VL53L1__Init+0x1cc>)
 800364c:	f008 fa9c 	bl	800bb88 <iprintf>
		return 1;
 8003650:	2301      	movs	r3, #1
 8003652:	e003      	b.n	800365c <VL53L1__Init+0x198>
	}

	printf("Capteur initialisé avec succès.\n");
 8003654:	480f      	ldr	r0, [pc, #60]	@ (8003694 <VL53L1__Init+0x1d0>)
 8003656:	f008 faff 	bl	800bc58 <puts>
	return status;
 800365a:	79fb      	ldrb	r3, [r7, #7]
};
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0800e060 	.word	0x0800e060
 8003668:	0800e084 	.word	0x0800e084
 800366c:	0800e0b8 	.word	0x0800e0b8
 8003670:	0800e0fc 	.word	0x0800e0fc
 8003674:	0800e138 	.word	0x0800e138
 8003678:	0800e15c 	.word	0x0800e15c
 800367c:	0800e184 	.word	0x0800e184
 8003680:	0800e1b8 	.word	0x0800e1b8
 8003684:	0800e1dc 	.word	0x0800e1dc
 8003688:	0800e200 	.word	0x0800e200
 800368c:	0800e224 	.word	0x0800e224
 8003690:	0800e250 	.word	0x0800e250
 8003694:	0800e270 	.word	0x0800e270

08003698 <Reset_Handler>:
 8003698:	480d      	ldr	r0, [pc, #52]	@ (80036d0 <LoopForever+0x2>)
 800369a:	4685      	mov	sp, r0
 800369c:	f7ff fa6e 	bl	8002b7c <SystemInit>
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <LoopForever+0x6>)
 80036a2:	490d      	ldr	r1, [pc, #52]	@ (80036d8 <LoopForever+0xa>)
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <LoopForever+0xe>)
 80036a6:	2300      	movs	r3, #0
 80036a8:	e002      	b.n	80036b0 <LoopCopyDataInit>

080036aa <CopyDataInit>:
 80036aa:	58d4      	ldr	r4, [r2, r3]
 80036ac:	50c4      	str	r4, [r0, r3]
 80036ae:	3304      	adds	r3, #4

080036b0 <LoopCopyDataInit>:
 80036b0:	18c4      	adds	r4, r0, r3
 80036b2:	428c      	cmp	r4, r1
 80036b4:	d3f9      	bcc.n	80036aa <CopyDataInit>
 80036b6:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <LoopForever+0x12>)
 80036b8:	4c0a      	ldr	r4, [pc, #40]	@ (80036e4 <LoopForever+0x16>)
 80036ba:	2300      	movs	r3, #0
 80036bc:	e001      	b.n	80036c2 <LoopFillZerobss>

080036be <FillZerobss>:
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	3204      	adds	r2, #4

080036c2 <LoopFillZerobss>:
 80036c2:	42a2      	cmp	r2, r4
 80036c4:	d3fb      	bcc.n	80036be <FillZerobss>
 80036c6:	f008 fbff 	bl	800bec8 <__libc_init_array>
 80036ca:	f7fe fd47 	bl	800215c <main>

080036ce <LoopForever>:
 80036ce:	e7fe      	b.n	80036ce <LoopForever>
 80036d0:	20008000 	.word	0x20008000
 80036d4:	20000000 	.word	0x20000000
 80036d8:	200001d8 	.word	0x200001d8
 80036dc:	0800e6c0 	.word	0x0800e6c0
 80036e0:	200001d8 	.word	0x200001d8
 80036e4:	2000564c 	.word	0x2000564c

080036e8 <ADC1_2_IRQHandler>:
 80036e8:	e7fe      	b.n	80036e8 <ADC1_2_IRQHandler>

080036ea <HAL_Init>:
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	2300      	movs	r3, #0
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 f8fe 	bl	80038f6 <HAL_NVIC_SetPriorityGrouping>
 80036fa:	200f      	movs	r0, #15
 80036fc:	f7ff f8ca 	bl	8002894 <HAL_InitTick>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_Init+0x22>
 8003706:	2301      	movs	r3, #1
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	e001      	b.n	8003710 <HAL_Init+0x26>
 800370c:	f7ff f898 	bl	8002840 <HAL_MspInit>
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_IncTick>:
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_IncTick+0x1c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_IncTick+0x20>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4413      	add	r3, r2
 800372a:	4a03      	ldr	r2, [pc, #12]	@ (8003738 <HAL_IncTick+0x1c>)
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	20000588 	.word	0x20000588
 800373c:	20000008 	.word	0x20000008

08003740 <HAL_GetTick>:
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000588 	.word	0x20000588

08003758 <HAL_Delay>:
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d004      	beq.n	800377c <HAL_Delay+0x24>
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_Delay+0x40>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	bf00      	nop
 800377e:	f7ff ffdf 	bl	8003740 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	429a      	cmp	r2, r3
 800378c:	d8f7      	bhi.n	800377e <HAL_Delay+0x26>
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000008 	.word	0x20000008

0800379c <__NVIC_SetPriorityGrouping>:
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	@ (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	@ (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	@ (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	@ 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_NVIC_SetPriorityGrouping>:
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff4c 	bl	800379c <__NVIC_SetPriorityGrouping>
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_NVIC_SetPriority>:
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	f7ff ff63 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 800391e:	6178      	str	r0, [r7, #20]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7ff ffb3 	bl	8003890 <NVIC_EncodePriority>
 800392a:	4602      	mov	r2, r0
 800392c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff82 	bl	800383c <__NVIC_SetPriority>
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_NVIC_EnableIRQ>:
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff56 	bl	8003800 <__NVIC_EnableIRQ>
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA_Init>:
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DMA_Init+0x12>
 800396a:	2301      	movs	r3, #1
 800396c:	e08d      	b.n	8003a8a <HAL_DMA_Init+0x12e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_DMA_Init+0x138>)
 8003976:	429a      	cmp	r2, r3
 8003978:	d80f      	bhi.n	800399a <HAL_DMA_Init+0x3e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b45      	ldr	r3, [pc, #276]	@ (8003a98 <HAL_DMA_Init+0x13c>)
 8003982:	4413      	add	r3, r2
 8003984:	4a45      	ldr	r2, [pc, #276]	@ (8003a9c <HAL_DMA_Init+0x140>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	009a      	lsls	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a42      	ldr	r2, [pc, #264]	@ (8003aa0 <HAL_DMA_Init+0x144>)
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40
 8003998:	e00e      	b.n	80039b8 <HAL_DMA_Init+0x5c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b40      	ldr	r3, [pc, #256]	@ (8003aa4 <HAL_DMA_Init+0x148>)
 80039a2:	4413      	add	r3, r2
 80039a4:	4a3d      	ldr	r2, [pc, #244]	@ (8003a9c <HAL_DMA_Init+0x140>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa8 <HAL_DMA_Init+0x14c>)
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9be 	bl	8003d8c <DMA_CalcDMAMUXChannelBaseAndMask>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a18:	d102      	bne.n	8003a20 <HAL_DMA_Init+0xc4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d010      	beq.n	8003a60 <HAL_DMA_Init+0x104>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d80c      	bhi.n	8003a60 <HAL_DMA_Init+0x104>
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9de 	bl	8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	e008      	b.n	8003a72 <HAL_DMA_Init+0x116>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40020407 	.word	0x40020407
 8003a98:	bffdfff8 	.word	0xbffdfff8
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	bffdfbf8 	.word	0xbffdfbf8
 8003aa8:	40020400 	.word	0x40020400

08003aac <HAL_DMA_Abort>:
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DMA_Abort+0x24>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e037      	b.n	8003b40 <HAL_DMA_Abort+0x94>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_DMA_Abort+0x94>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_DMA_Abort_IT>:
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d00d      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x34>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e047      	b.n	8003c22 <HAL_DMA_Abort_IT+0xc4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 020e 	bic.w	r2, r2, #14
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f003 021f 	and.w	r2, r3, #31
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_DMA_Abort_IT+0xa4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_DMA_Abort_IT+0xc4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_DMA_IRQHandler>:
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d026      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x7a>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d021      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x7a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x54>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d071      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x154>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
 8003ca4:	e06c      	b.n	8003d80 <HAL_DMA_IRQHandler+0x154>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2202      	movs	r2, #2
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02e      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xec>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d029      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xec>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_DMA_IRQHandler+0xbe>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 020a 	bic.w	r2, r2, #10
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d038      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x154>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
 8003d16:	e033      	b.n	8003d80 <HAL_DMA_IRQHandler+0x154>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2208      	movs	r2, #8
 8003d22:	409a      	lsls	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02a      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x156>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d025      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x156>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 020e 	bic.w	r2, r2, #14
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x156>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b16      	ldr	r3, [pc, #88]	@ (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d802      	bhi.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
 8003da0:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e001      	b.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3b08      	subs	r3, #8
 8003db6:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	009a      	lsls	r2, r3, #2
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	649a      	str	r2, [r3, #72]	@ 0x48
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40020407 	.word	0x40020407
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020820 	.word	0x40020820
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	40020880 	.word	0x40020880

08003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	461a      	mov	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a08      	ldr	r2, [pc, #32]	@ (8003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	1000823f 	.word	0x1000823f
 8003e4c:	40020940 	.word	0x40020940

08003e50 <HAL_GPIO_Init>:
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e15a      	b.n	8004116 <HAL_GPIO_Init+0x2c6>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 814c 	beq.w	8004110 <HAL_GPIO_Init+0x2c0>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d005      	beq.n	8003e90 <HAL_GPIO_Init+0x40>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d130      	bne.n	8003ef2 <HAL_GPIO_Init+0xa2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 0201 	and.w	r2, r3, #1
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d017      	beq.n	8003f2e <HAL_GPIO_Init+0xde>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d123      	bne.n	8003f82 <HAL_GPIO_Init+0x132>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	08da      	lsrs	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3208      	adds	r2, #8
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	08da      	lsrs	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3208      	adds	r2, #8
 8003f7c:	6939      	ldr	r1, [r7, #16]
 8003f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a6 	beq.w	8004110 <HAL_GPIO_Init+0x2c0>
 8003fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8004134 <HAL_GPIO_Init+0x2e4>)
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004134 <HAL_GPIO_Init+0x2e4>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fd0:	4b58      	ldr	r3, [pc, #352]	@ (8004134 <HAL_GPIO_Init+0x2e4>)
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a56      	ldr	r2, [pc, #344]	@ (8004138 <HAL_GPIO_Init+0x2e8>)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	220f      	movs	r2, #15
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004006:	d01f      	beq.n	8004048 <HAL_GPIO_Init+0x1f8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4c      	ldr	r2, [pc, #304]	@ (800413c <HAL_GPIO_Init+0x2ec>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d019      	beq.n	8004044 <HAL_GPIO_Init+0x1f4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a4b      	ldr	r2, [pc, #300]	@ (8004140 <HAL_GPIO_Init+0x2f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_GPIO_Init+0x1f0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a4a      	ldr	r2, [pc, #296]	@ (8004144 <HAL_GPIO_Init+0x2f4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00d      	beq.n	800403c <HAL_GPIO_Init+0x1ec>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a49      	ldr	r2, [pc, #292]	@ (8004148 <HAL_GPIO_Init+0x2f8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <HAL_GPIO_Init+0x1e8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a48      	ldr	r2, [pc, #288]	@ (800414c <HAL_GPIO_Init+0x2fc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_GPIO_Init+0x1e4>
 8004030:	2305      	movs	r3, #5
 8004032:	e00a      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 8004034:	2306      	movs	r3, #6
 8004036:	e008      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 8004038:	2304      	movs	r3, #4
 800403a:	e006      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 800403c:	2303      	movs	r3, #3
 800403e:	e004      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 8004040:	2302      	movs	r3, #2
 8004042:	e002      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_GPIO_Init+0x1fa>
 8004048:	2300      	movs	r3, #0
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	f002 0203 	and.w	r2, r2, #3
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4093      	lsls	r3, r2
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	4937      	ldr	r1, [pc, #220]	@ (8004138 <HAL_GPIO_Init+0x2e8>)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3302      	adds	r3, #2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004068:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <HAL_GPIO_Init+0x300>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x23c>
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	4a30      	ldr	r2, [pc, #192]	@ (8004150 <HAL_GPIO_Init+0x300>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6093      	str	r3, [r2, #8]
 8004092:	4b2f      	ldr	r3, [pc, #188]	@ (8004150 <HAL_GPIO_Init+0x300>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x266>
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_GPIO_Init+0x300>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60d3      	str	r3, [r2, #12]
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_GPIO_Init+0x300>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x290>
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <HAL_GPIO_Init+0x300>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <HAL_GPIO_Init+0x300>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2ba>
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	4a11      	ldr	r2, [pc, #68]	@ (8004150 <HAL_GPIO_Init+0x300>)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f ae9d 	bne.w	8003e60 <HAL_GPIO_Init+0x10>
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40021000 	.word	0x40021000
 8004138:	40010000 	.word	0x40010000
 800413c:	48000400 	.word	0x48000400
 8004140:	48000800 	.word	0x48000800
 8004144:	48000c00 	.word	0x48000c00
 8004148:	48001000 	.word	0x48001000
 800414c:	48001400 	.word	0x48001400
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_GPIO_WritePin>:
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
 8004160:	4613      	mov	r3, r2
 8004162:	707b      	strb	r3, [r7, #1]
 8004164:	787b      	ldrb	r3, [r7, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_WritePin+0x1e>
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
 8004170:	e002      	b.n	8004178 <HAL_GPIO_WritePin+0x24>
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_GPIO_EXTI_IRQHandler>:
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	80fb      	strh	r3, [r7, #6]
 800418e:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800419a:	4a05      	ldr	r2, [pc, #20]	@ (80041b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	6153      	str	r3, [r2, #20]
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe f882 	bl	80022ac <HAL_GPIO_EXTI_Callback>
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40010400 	.word	0x40010400

080041b4 <HAL_I2C_Init>:
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Init+0x12>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e08d      	b.n	80042e2 <HAL_I2C_Init+0x12e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_I2C_Init+0x2c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd feb0 	bl	8001f40 <HAL_I2C_MspInit>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	@ 0x24
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_I2C_Init+0x7a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e006      	b.n	800423c <HAL_I2C_Init+0x88>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d108      	bne.n	8004256 <HAL_I2C_Init+0xa2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	e007      	b.n	8004266 <HAL_I2C_Init+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	ea42 0103 	orr.w	r1, r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e0:	2300      	movs	r3, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_I2C_Mem_Write>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	817b      	strh	r3, [r7, #10]
 80042fe:	460b      	mov	r3, r1
 8004300:	813b      	strh	r3, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 80f9 	bne.w	8004506 <HAL_I2C_Mem_Write+0x21a>
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_I2C_Mem_Write+0x34>
 800431a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_I2C_Mem_Write+0x40>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004326:	645a      	str	r2, [r3, #68]	@ 0x44
 8004328:	2301      	movs	r3, #1
 800432a:	e0ed      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_I2C_Mem_Write+0x4e>
 8004336:	2302      	movs	r3, #2
 8004338:	e0e6      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004342:	f7ff f9fd 	bl	8003740 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2319      	movs	r3, #25
 800434e:	2201      	movs	r2, #1
 8004350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fac3 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Write+0x78>
 8004360:	2301      	movs	r3, #1
 8004362:	e0d1      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2221      	movs	r2, #33	@ 0x21
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2240      	movs	r2, #64	@ 0x40
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004384:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	635a      	str	r2, [r3, #52]	@ 0x34
 800438c:	88f8      	ldrh	r0, [r7, #6]
 800438e:	893a      	ldrh	r2, [r7, #8]
 8004390:	8979      	ldrh	r1, [r7, #10]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4603      	mov	r3, r0
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f9d3 	bl	8004748 <I2C_RequestMemoryWrite>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_I2C_Mem_Write+0xc8>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0a9      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	@ 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Mem_Write+0xf0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	@ 0xff
 80043c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fc47 	bl	8004c68 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Mem_Write+0x110>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fc36 	bl	8004c68 <I2C_TransferConfig>
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fac6 	bl	8004992 <I2C_WaitOnTXISFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_I2C_Mem_Write+0x124>
 800440c:	2301      	movs	r3, #1
 800440e:	e07b      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	@ 0x24
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d034      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x1c8>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d130      	bne.n	80044b4 <HAL_I2C_Mem_Write+0x1c8>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fa3f 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_I2C_Mem_Write+0x180>
 8004468:	2301      	movs	r3, #1
 800446a:	e04d      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2bff      	cmp	r3, #255	@ 0xff
 8004474:	d90e      	bls.n	8004494 <HAL_I2C_Mem_Write+0x1a8>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	22ff      	movs	r2, #255	@ 0xff
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	b2da      	uxtb	r2, r3
 8004482:	8979      	ldrh	r1, [r7, #10]
 8004484:	2300      	movs	r3, #0
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fbeb 	bl	8004c68 <I2C_TransferConfig>
 8004492:	e00f      	b.n	80044b4 <HAL_I2C_Mem_Write+0x1c8>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	8979      	ldrh	r1, [r7, #10]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fbda 	bl	8004c68 <I2C_TransferConfig>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d19e      	bne.n	80043fc <HAL_I2C_Mem_Write+0x110>
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 faac 	bl	8004a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Mem_Write+0x1e6>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e01a      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2220      	movs	r2, #32
 80044d8:	61da      	str	r2, [r3, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <HAL_I2C_Mem_Write+0x224>)
 80044e6:	400b      	ands	r3, r1
 80044e8:	6053      	str	r3, [r2, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004502:	2300      	movs	r3, #0
 8004504:	e000      	b.n	8004508 <HAL_I2C_Mem_Write+0x21c>
 8004506:	2302      	movs	r3, #2
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	fe00e800 	.word	0xfe00e800

08004514 <HAL_I2C_Mem_Read>:
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4603      	mov	r3, r0
 8004524:	817b      	strh	r3, [r7, #10]
 8004526:	460b      	mov	r3, r1
 8004528:	813b      	strh	r3, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	f040 80fd 	bne.w	8004736 <HAL_I2C_Mem_Read+0x222>
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_I2C_Mem_Read+0x34>
 8004542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_I2C_Mem_Read+0x40>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004550:	2301      	movs	r3, #1
 8004552:	e0f1      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_I2C_Mem_Read+0x4e>
 800455e:	2302      	movs	r3, #2
 8004560:	e0ea      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456a:	f7ff f8e9 	bl	8003740 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2319      	movs	r3, #25
 8004576:	2201      	movs	r2, #1
 8004578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9af 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Read+0x78>
 8004588:	2301      	movs	r3, #1
 800458a:	e0d5      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2222      	movs	r2, #34	@ 0x22
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2240      	movs	r2, #64	@ 0x40
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80045b4:	88f8      	ldrh	r0, [r7, #6]
 80045b6:	893a      	ldrh	r2, [r7, #8]
 80045b8:	8979      	ldrh	r1, [r7, #10]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4603      	mov	r3, r0
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f913 	bl	80047f0 <I2C_RequestMemoryRead>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_I2C_Mem_Read+0xc8>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d8:	2301      	movs	r3, #1
 80045da:	e0ad      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2bff      	cmp	r3, #255	@ 0xff
 80045e4:	d90e      	bls.n	8004604 <HAL_I2C_Mem_Read+0xf0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	22ff      	movs	r2, #255	@ 0xff
 80045ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	8979      	ldrh	r1, [r7, #10]
 80045f4:	4b52      	ldr	r3, [pc, #328]	@ (8004740 <HAL_I2C_Mem_Read+0x22c>)
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fb33 	bl	8004c68 <I2C_TransferConfig>
 8004602:	e00f      	b.n	8004624 <HAL_I2C_Mem_Read+0x110>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004612:	b2da      	uxtb	r2, r3
 8004614:	8979      	ldrh	r1, [r7, #10]
 8004616:	4b4a      	ldr	r3, [pc, #296]	@ (8004740 <HAL_I2C_Mem_Read+0x22c>)
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fb22 	bl	8004c68 <I2C_TransferConfig>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	2200      	movs	r2, #0
 800462c:	2104      	movs	r1, #4
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f956 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Mem_Read+0x12a>
 800463a:	2301      	movs	r3, #1
 800463c:	e07c      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d034      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x1d0>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d130      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x1d0>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	2200      	movs	r2, #0
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f927 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Mem_Read+0x188>
 8004698:	2301      	movs	r3, #1
 800469a:	e04d      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2bff      	cmp	r3, #255	@ 0xff
 80046a4:	d90e      	bls.n	80046c4 <HAL_I2C_Mem_Read+0x1b0>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	22ff      	movs	r2, #255	@ 0xff
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	8979      	ldrh	r1, [r7, #10]
 80046b4:	2300      	movs	r3, #0
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fad3 	bl	8004c68 <I2C_TransferConfig>
 80046c2:	e00f      	b.n	80046e4 <HAL_I2C_Mem_Read+0x1d0>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	8979      	ldrh	r1, [r7, #10]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fac2 	bl	8004c68 <I2C_TransferConfig>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d19a      	bne.n	8004624 <HAL_I2C_Mem_Read+0x110>
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f994 	bl	8004a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Mem_Read+0x1ee>
 80046fe:	2301      	movs	r3, #1
 8004700:	e01a      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	61da      	str	r2, [r3, #28]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_I2C_Mem_Read+0x230>)
 8004716:	400b      	ands	r3, r1
 8004718:	6053      	str	r3, [r2, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <HAL_I2C_Mem_Read+0x224>
 8004736:	2302      	movs	r3, #2
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	80002400 	.word	0x80002400
 8004744:	fe00e800 	.word	0xfe00e800

08004748 <I2C_RequestMemoryWrite>:
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	460b      	mov	r3, r1
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	8979      	ldrh	r1, [r7, #10]
 8004768:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <I2C_RequestMemoryWrite+0xa4>)
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fa79 	bl	8004c68 <I2C_TransferConfig>
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f909 	bl	8004992 <I2C_WaitOnTXISFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_RequestMemoryWrite+0x42>
 8004786:	2301      	movs	r3, #1
 8004788:	e02c      	b.n	80047e4 <I2C_RequestMemoryWrite+0x9c>
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <I2C_RequestMemoryWrite+0x54>
 8004790:	893b      	ldrh	r3, [r7, #8]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	629a      	str	r2, [r3, #40]	@ 0x28
 800479a:	e015      	b.n	80047c8 <I2C_RequestMemoryWrite+0x80>
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8ef 	bl	8004992 <I2C_WaitOnTXISFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <I2C_RequestMemoryWrite+0x76>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e012      	b.n	80047e4 <I2C_RequestMemoryWrite+0x9c>
 80047be:	893b      	ldrh	r3, [r7, #8]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2180      	movs	r1, #128	@ 0x80
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f884 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x9a>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <I2C_RequestMemoryWrite+0x9c>
 80047e2:	2300      	movs	r3, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	80002000 	.word	0x80002000

080047f0 <I2C_RequestMemoryRead>:
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <I2C_RequestMemoryRead+0xa4>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fa26 	bl	8004c68 <I2C_TransferConfig>
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8b6 	bl	8004992 <I2C_WaitOnTXISFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <I2C_RequestMemoryRead+0x40>
 800482c:	2301      	movs	r3, #1
 800482e:	e02c      	b.n	800488a <I2C_RequestMemoryRead+0x9a>
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <I2C_RequestMemoryRead+0x52>
 8004836:	893b      	ldrh	r3, [r7, #8]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004840:	e015      	b.n	800486e <I2C_RequestMemoryRead+0x7e>
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	b29b      	uxth	r3, r3
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f89c 	bl	8004992 <I2C_WaitOnTXISFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <I2C_RequestMemoryRead+0x74>
 8004860:	2301      	movs	r3, #1
 8004862:	e012      	b.n	800488a <I2C_RequestMemoryRead+0x9a>
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	@ 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f831 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryRead+0x98>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <I2C_RequestMemoryRead+0x9a>
 8004888:	2300      	movs	r3, #0
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	80002000 	.word	0x80002000

08004898 <I2C_Flush_TXDR>:
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d103      	bne.n	80048b6 <I2C_Flush_TXDR+0x1e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <I2C_Flush_TXDR+0x3c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <I2C_WaitOnFlagUntilTimeout>:
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
 80048f0:	e03b      	b.n	800496a <I2C_WaitOnFlagUntilTimeout+0x8a>
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8d6 	bl	8004aa8 <I2C_IsErrorOccurred>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x26>
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <I2C_WaitOnFlagUntilTimeout+0xaa>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d02d      	beq.n	800496a <I2C_WaitOnFlagUntilTimeout+0x8a>
 800490e:	f7fe ff17 	bl	8003740 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x44>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d122      	bne.n	800496a <I2C_WaitOnFlagUntilTimeout+0x8a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	429a      	cmp	r2, r3
 8004940:	d113      	bne.n	800496a <I2C_WaitOnFlagUntilTimeout+0x8a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	645a      	str	r2, [r3, #68]	@ 0x44
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004966:	2301      	movs	r3, #1
 8004968:	e00f      	b.n	800498a <I2C_WaitOnFlagUntilTimeout+0xaa>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d0b4      	beq.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004988:	2300      	movs	r3, #0
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <I2C_WaitOnTXISFlagUntilTimeout>:
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	e033      	b.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f87f 	bl	8004aa8 <I2C_IsErrorOccurred>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e031      	b.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d025      	beq.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80049bc:	f7fe fec0 	bl	8003740 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d302      	bcc.n	80049d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11a      	bne.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d013      	beq.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a04:	2301      	movs	r3, #1
 8004a06:	e007      	b.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d1c4      	bne.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8004a16:	2300      	movs	r3, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	e02f      	b.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f838 	bl	8004aa8 <I2C_IsErrorOccurred>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02d      	b.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8004a42:	f7fe fe7d 	bl	8003740 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11a      	bne.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d013      	beq.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e007      	b.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d1c8      	bne.n	8004a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <I2C_IsErrorOccurred>:
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d068      	beq.n	8004ba6 <I2C_IsErrorOccurred+0xfe>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	61da      	str	r2, [r3, #28]
 8004adc:	e049      	b.n	8004b72 <I2C_IsErrorOccurred+0xca>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d045      	beq.n	8004b72 <I2C_IsErrorOccurred+0xca>
 8004ae6:	f7fe fe2b 	bl	8003740 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_IsErrorOccurred+0x54>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d13a      	bne.n	8004b72 <I2C_IsErrorOccurred+0xca>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b0e:	74fb      	strb	r3, [r7, #19]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b1e:	d121      	bne.n	8004b64 <I2C_IsErrorOccurred+0xbc>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b26:	d01d      	beq.n	8004b64 <I2C_IsErrorOccurred+0xbc>
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d01a      	beq.n	8004b64 <I2C_IsErrorOccurred+0xbc>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	f7fe fdff 	bl	8003740 <HAL_GetTick>
 8004b42:	61f8      	str	r0, [r7, #28]
 8004b44:	e00e      	b.n	8004b64 <I2C_IsErrorOccurred+0xbc>
 8004b46:	f7fe fdfb 	bl	8003740 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b19      	cmp	r3, #25
 8004b52:	d907      	bls.n	8004b64 <I2C_IsErrorOccurred+0xbc>
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f043 0320 	orr.w	r3, r3, #32
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b62:	e006      	b.n	8004b72 <I2C_IsErrorOccurred+0xca>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d1e9      	bne.n	8004b46 <I2C_IsErrorOccurred+0x9e>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d003      	beq.n	8004b88 <I2C_IsErrorOccurred+0xe0>
 8004b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0aa      	beq.n	8004ade <I2C_IsErrorOccurred+0x36>
 8004b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <I2C_IsErrorOccurred+0xf0>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2220      	movs	r2, #32
 8004b96:	61da      	str	r2, [r3, #28]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00b      	beq.n	8004bd0 <I2C_IsErrorOccurred+0x128>
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <I2C_IsErrorOccurred+0x14a>
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f043 0308 	orr.w	r3, r3, #8
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bea:	61da      	str	r2, [r3, #28]
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <I2C_IsErrorOccurred+0x16c>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0c:	61da      	str	r2, [r3, #28]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <I2C_IsErrorOccurred+0x1ae>
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fe3b 	bl	8004898 <I2C_Flush_TXDR>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <I2C_IsErrorOccurred+0x1bc>)
 8004c2e:	400b      	ands	r3, r1
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3728      	adds	r7, #40	@ 0x28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	fe00e800 	.word	0xfe00e800

08004c68 <I2C_TransferConfig>:
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	4613      	mov	r3, r2
 8004c78:	727b      	strb	r3, [r7, #9]
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c80:	7a7b      	ldrb	r3, [r7, #9]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	0d5b      	lsrs	r3, r3, #21
 8004ca2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ca6:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <I2C_TransferConfig+0x60>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	43db      	mvns	r3, r3
 8004cac:	ea02 0103 	and.w	r1, r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	03ff63ff 	.word	0x03ff63ff

08004ccc <HAL_I2CEx_ConfigAnalogFilter>:
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d138      	bne.n	8004d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e032      	b.n	8004d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	@ 0x24
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d54:	2302      	movs	r3, #2
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_I2CEx_ConfigDigitalFilter>:
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d139      	bne.n	8004dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e033      	b.n	8004dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2224      	movs	r2, #36	@ 0x24
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_PWREx_ControlVoltageScaling>:
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d141      	bne.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0x92>
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e16:	d131      	bne.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0x80>
 8004e18:	4b47      	ldr	r3, [pc, #284]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e1e:	4a46      	ldr	r2, [pc, #280]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e28:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e30:	4a41      	ldr	r2, [pc, #260]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b40      	ldr	r3, [pc, #256]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2232      	movs	r2, #50	@ 0x32
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	4a3f      	ldr	r2, [pc, #252]	@ (8004f40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	0c9b      	lsrs	r3, r3, #18
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e002      	b.n	8004e56 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	4b38      	ldr	r3, [pc, #224]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e62:	d102      	bne.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f2      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x54>
 8004e6a:	4b33      	ldr	r3, [pc, #204]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e76:	d158      	bne.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e057      	b.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0x130>
 8004e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e82:	4a2d      	ldr	r2, [pc, #180]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e8c:	e04d      	b.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e94:	d141      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x11e>
 8004e96:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	d131      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8004ea4:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eaa:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004eb4:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2232      	movs	r2, #50	@ 0x32
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9b      	lsrs	r3, r3, #18
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e002      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eee:	d102      	bne.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f2      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0xe0>
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f02:	d112      	bne.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004f04:	2303      	movs	r3, #3
 8004f06:	e011      	b.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0x130>
 8004f08:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f18:	e007      	b.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004f1a:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f22:	4a05      	ldr	r2, [pc, #20]	@ (8004f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	431bde83 	.word	0x431bde83

08004f44 <HAL_PWREx_DisableUCPDDeadBattery>:
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40007000 	.word	0x40007000

08004f64 <HAL_RCC_OscConfig>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x12>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e2fe      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d075      	beq.n	800506e <HAL_RCC_OscConfig+0x10a>
 8004f82:	4b97      	ldr	r3, [pc, #604]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	4b94      	ldr	r3, [pc, #592]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x3e>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d002      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x44>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x5c>
 8004fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05b      	beq.n	800506c <HAL_RCC_OscConfig+0x108>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d157      	bne.n	800506c <HAL_RCC_OscConfig+0x108>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e2d9      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x74>
 8004fca:	4b85      	ldr	r3, [pc, #532]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a84      	ldr	r2, [pc, #528]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e01d      	b.n	8005014 <HAL_RCC_OscConfig+0xb0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x98>
 8004fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b7c      	ldr	r3, [pc, #496]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7b      	ldr	r2, [pc, #492]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e00b      	b.n	8005014 <HAL_RCC_OscConfig+0xb0>
 8004ffc:	4b78      	ldr	r3, [pc, #480]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a77      	ldr	r2, [pc, #476]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b75      	ldr	r3, [pc, #468]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a74      	ldr	r2, [pc, #464]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800500e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_RCC_OscConfig+0xe0>
 800501c:	f7fe fb90 	bl	8003740 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xd2>
 8005024:	f7fe fb8c 	bl	8003740 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xd2>
 8005032:	2303      	movs	r3, #3
 8005034:	e29e      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005036:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0xc0>
 8005042:	e014      	b.n	800506e <HAL_RCC_OscConfig+0x10a>
 8005044:	f7fe fb7c 	bl	8003740 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xfa>
 800504c:	f7fe fb78 	bl	8003740 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xfa>
 800505a:	2303      	movs	r3, #3
 800505c:	e28a      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 800505e:	4b60      	ldr	r3, [pc, #384]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0xe8>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x10a>
 800506c:	bf00      	nop
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d075      	beq.n	8005166 <HAL_RCC_OscConfig+0x202>
 800507a:	4b59      	ldr	r3, [pc, #356]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	4b56      	ldr	r3, [pc, #344]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d102      	bne.n	800509a <HAL_RCC_OscConfig+0x136>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d002      	beq.n	80050a0 <HAL_RCC_OscConfig+0x13c>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d11f      	bne.n	80050e0 <HAL_RCC_OscConfig+0x17c>
 80050a0:	4b4f      	ldr	r3, [pc, #316]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_OscConfig+0x154>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_OscConfig+0x154>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e25d      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80050b8:	4b49      	ldr	r3, [pc, #292]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	4946      	ldr	r1, [pc, #280]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	4b45      	ldr	r3, [pc, #276]	@ (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fd fbdf 	bl	8002894 <HAL_InitTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d043      	beq.n	8005164 <HAL_RCC_OscConfig+0x200>
 80050dc:	2301      	movs	r3, #1
 80050de:	e249      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d023      	beq.n	8005130 <HAL_RCC_OscConfig+0x1cc>
 80050e8:	4b3d      	ldr	r3, [pc, #244]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3c      	ldr	r2, [pc, #240]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	f7fe fb24 	bl	8003740 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x1aa>
 80050fc:	f7fe fb20 	bl	8003740 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x1aa>
 800510a:	2303      	movs	r3, #3
 800510c:	e232      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 800510e:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x198>
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	492d      	ldr	r1, [pc, #180]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800512a:	4313      	orrs	r3, r2
 800512c:	604b      	str	r3, [r1, #4]
 800512e:	e01a      	b.n	8005166 <HAL_RCC_OscConfig+0x202>
 8005130:	4b2b      	ldr	r3, [pc, #172]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2a      	ldr	r2, [pc, #168]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005136:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	f7fe fb00 	bl	8003740 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x1f2>
 8005144:	f7fe fafc 	bl	8003740 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x1f2>
 8005152:	2303      	movs	r3, #3
 8005154:	e20e      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005156:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x1e0>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x202>
 8005164:	bf00      	nop
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d041      	beq.n	80051f6 <HAL_RCC_OscConfig+0x292>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01c      	beq.n	80051b4 <HAL_RCC_OscConfig+0x250>
 800517a:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005180:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800518a:	f7fe fad9 	bl	8003740 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x240>
 8005192:	f7fe fad5 	bl	8003740 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x240>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1e7      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80051a4:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <HAL_RCC_OscConfig+0x22e>
 80051b2:	e020      	b.n	80051f6 <HAL_RCC_OscConfig+0x292>
 80051b4:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ba:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051c4:	f7fe fabc 	bl	8003740 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]
 80051ca:	e00d      	b.n	80051e8 <HAL_RCC_OscConfig+0x284>
 80051cc:	f7fe fab8 	bl	8003740 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d906      	bls.n	80051e8 <HAL_RCC_OscConfig+0x284>
 80051da:	2303      	movs	r3, #3
 80051dc:	e1ca      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000
 80051e4:	20000004 	.word	0x20000004
 80051e8:	4b8c      	ldr	r3, [pc, #560]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1ea      	bne.n	80051cc <HAL_RCC_OscConfig+0x268>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a6 	beq.w	8005350 <HAL_RCC_OscConfig+0x3ec>
 8005204:	2300      	movs	r3, #0
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	4b84      	ldr	r3, [pc, #528]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x2b4>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x2b6>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_RCC_OscConfig+0x2d6>
 800521e:	4b7f      	ldr	r3, [pc, #508]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005222:	4a7e      	ldr	r2, [pc, #504]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005228:	6593      	str	r3, [r2, #88]	@ 0x58
 800522a:	4b7c      	ldr	r3, [pc, #496]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	4b79      	ldr	r3, [pc, #484]	@ (8005420 <HAL_RCC_OscConfig+0x4bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d118      	bne.n	8005278 <HAL_RCC_OscConfig+0x314>
 8005246:	4b76      	ldr	r3, [pc, #472]	@ (8005420 <HAL_RCC_OscConfig+0x4bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a75      	ldr	r2, [pc, #468]	@ (8005420 <HAL_RCC_OscConfig+0x4bc>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	f7fe fa75 	bl	8003740 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x308>
 800525a:	f7fe fa71 	bl	8003740 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x308>
 8005268:	2303      	movs	r3, #3
 800526a:	e183      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 800526c:	4b6c      	ldr	r3, [pc, #432]	@ (8005420 <HAL_RCC_OscConfig+0x4bc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x2f6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <HAL_RCC_OscConfig+0x32e>
 8005280:	4b66      	ldr	r3, [pc, #408]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005286:	4a65      	ldr	r2, [pc, #404]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005290:	e024      	b.n	80052dc <HAL_RCC_OscConfig+0x378>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b05      	cmp	r3, #5
 8005298:	d110      	bne.n	80052bc <HAL_RCC_OscConfig+0x358>
 800529a:	4b60      	ldr	r3, [pc, #384]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a0:	4a5e      	ldr	r2, [pc, #376]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052aa:	4b5c      	ldr	r3, [pc, #368]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b0:	4a5a      	ldr	r2, [pc, #360]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052ba:	e00f      	b.n	80052dc <HAL_RCC_OscConfig+0x378>
 80052bc:	4b57      	ldr	r3, [pc, #348]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	4a56      	ldr	r2, [pc, #344]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052cc:	4b53      	ldr	r3, [pc, #332]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d2:	4a52      	ldr	r2, [pc, #328]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <HAL_RCC_OscConfig+0x3ae>
 80052e4:	f7fe fa2c 	bl	8003740 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_OscConfig+0x39e>
 80052ec:	f7fe fa28 	bl	8003740 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x39e>
 80052fe:	2303      	movs	r3, #3
 8005300:	e138      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005302:	4b46      	ldr	r3, [pc, #280]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ed      	beq.n	80052ec <HAL_RCC_OscConfig+0x388>
 8005310:	e015      	b.n	800533e <HAL_RCC_OscConfig+0x3da>
 8005312:	f7fe fa15 	bl	8003740 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x3cc>
 800531a:	f7fe fa11 	bl	8003740 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x3cc>
 800532c:	2303      	movs	r3, #3
 800532e:	e121      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005330:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ed      	bne.n	800531a <HAL_RCC_OscConfig+0x3b6>
 800533e:	7ffb      	ldrb	r3, [r7, #31]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_RCC_OscConfig+0x3ec>
 8005344:	4b35      	ldr	r3, [pc, #212]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	4a34      	ldr	r2, [pc, #208]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03c      	beq.n	80053d6 <HAL_RCC_OscConfig+0x472>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01c      	beq.n	800539e <HAL_RCC_OscConfig+0x43a>
 8005364:	4b2d      	ldr	r3, [pc, #180]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800536a:	4a2c      	ldr	r2, [pc, #176]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8005374:	f7fe f9e4 	bl	8003740 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x42a>
 800537c:	f7fe f9e0 	bl	8003740 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x42a>
 800538a:	2303      	movs	r3, #3
 800538c:	e0f2      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 800538e:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ef      	beq.n	800537c <HAL_RCC_OscConfig+0x418>
 800539c:	e01b      	b.n	80053d6 <HAL_RCC_OscConfig+0x472>
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053a4:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 80053ae:	f7fe f9c7 	bl	8003740 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x464>
 80053b6:	f7fe f9c3 	bl	8003740 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x464>
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0d5      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80053c8:	4b14      	ldr	r3, [pc, #80]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ef      	bne.n	80053b6 <HAL_RCC_OscConfig+0x452>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80c9 	beq.w	8005572 <HAL_RCC_OscConfig+0x60e>
 80053e0:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	f000 8083 	beq.w	80054f4 <HAL_RCC_OscConfig+0x590>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d15e      	bne.n	80054b4 <HAL_RCC_OscConfig+0x550>
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a08      	ldr	r2, [pc, #32]	@ (800541c <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	f7fe f99d 	bl	8003740 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]
 8005408:	e00c      	b.n	8005424 <HAL_RCC_OscConfig+0x4c0>
 800540a:	f7fe f999 	bl	8003740 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d905      	bls.n	8005424 <HAL_RCC_OscConfig+0x4c0>
 8005418:	2303      	movs	r3, #3
 800541a:	e0ab      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 800541c:	40021000 	.word	0x40021000
 8005420:	40007000 	.word	0x40007000
 8005424:	4b55      	ldr	r3, [pc, #340]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ec      	bne.n	800540a <HAL_RCC_OscConfig+0x4a6>
 8005430:	4b52      	ldr	r3, [pc, #328]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b52      	ldr	r3, [pc, #328]	@ (8005580 <HAL_RCC_OscConfig+0x61c>)
 8005436:	4013      	ands	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6a11      	ldr	r1, [r2, #32]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005440:	3a01      	subs	r2, #1
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800544a:	0212      	lsls	r2, r2, #8
 800544c:	4311      	orrs	r1, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005452:	0852      	lsrs	r2, r2, #1
 8005454:	3a01      	subs	r2, #1
 8005456:	0552      	lsls	r2, r2, #21
 8005458:	4311      	orrs	r1, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800545e:	0852      	lsrs	r2, r2, #1
 8005460:	3a01      	subs	r2, #1
 8005462:	0652      	lsls	r2, r2, #25
 8005464:	4311      	orrs	r1, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800546a:	06d2      	lsls	r2, r2, #27
 800546c:	430a      	orrs	r2, r1
 800546e:	4943      	ldr	r1, [pc, #268]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005470:	4313      	orrs	r3, r2
 8005472:	60cb      	str	r3, [r1, #12]
 8005474:	4b41      	ldr	r3, [pc, #260]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a40      	ldr	r2, [pc, #256]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b3e      	ldr	r3, [pc, #248]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a3d      	ldr	r2, [pc, #244]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800548a:	60d3      	str	r3, [r2, #12]
 800548c:	f7fe f958 	bl	8003740 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x542>
 8005494:	f7fe f954 	bl	8003740 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x542>
 80054a2:	2303      	movs	r3, #3
 80054a4:	e066      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80054a6:	4b35      	ldr	r3, [pc, #212]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x530>
 80054b2:	e05e      	b.n	8005572 <HAL_RCC_OscConfig+0x60e>
 80054b4:	4b31      	ldr	r3, [pc, #196]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a30      	ldr	r2, [pc, #192]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	f7fe f93e 	bl	8003740 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x576>
 80054c8:	f7fe f93a 	bl	8003740 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x576>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e04c      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 80054da:	4b28      	ldr	r3, [pc, #160]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x564>
 80054e6:	4b25      	ldr	r3, [pc, #148]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	4924      	ldr	r1, [pc, #144]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 80054ec:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <HAL_RCC_OscConfig+0x620>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	60cb      	str	r3, [r1, #12]
 80054f2:	e03e      	b.n	8005572 <HAL_RCC_OscConfig+0x60e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_OscConfig+0x59c>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e039      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005500:	4b1e      	ldr	r3, [pc, #120]	@ (800557c <HAL_RCC_OscConfig+0x618>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 0203 	and.w	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	429a      	cmp	r2, r3
 8005512:	d12c      	bne.n	800556e <HAL_RCC_OscConfig+0x60a>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	3b01      	subs	r3, #1
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	429a      	cmp	r2, r3
 8005524:	d123      	bne.n	800556e <HAL_RCC_OscConfig+0x60a>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	429a      	cmp	r2, r3
 8005534:	d11b      	bne.n	800556e <HAL_RCC_OscConfig+0x60a>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	06db      	lsls	r3, r3, #27
 8005542:	429a      	cmp	r2, r3
 8005544:	d113      	bne.n	800556e <HAL_RCC_OscConfig+0x60a>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	3b01      	subs	r3, #1
 8005554:	055b      	lsls	r3, r3, #21
 8005556:	429a      	cmp	r2, r3
 8005558:	d109      	bne.n	800556e <HAL_RCC_OscConfig+0x60a>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	3b01      	subs	r3, #1
 8005568:	065b      	lsls	r3, r3, #25
 800556a:	429a      	cmp	r2, r3
 800556c:	d001      	beq.n	8005572 <HAL_RCC_OscConfig+0x60e>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <HAL_RCC_OscConfig+0x610>
 8005572:	2300      	movs	r3, #0
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000
 8005580:	019f800c 	.word	0x019f800c
 8005584:	feeefffc 	.word	0xfeeefffc

08005588 <HAL_RCC_ClockConfig>:
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x18>
 800559c:	2301      	movs	r3, #1
 800559e:	e11e      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 80055a0:	4b91      	ldr	r3, [pc, #580]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d910      	bls.n	80055d0 <HAL_RCC_ClockConfig+0x48>
 80055ae:	4b8e      	ldr	r3, [pc, #568]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	498c      	ldr	r1, [pc, #560]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	4b8a      	ldr	r3, [pc, #552]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d001      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x48>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e106      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d073      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x13c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d129      	bne.n	8005638 <HAL_RCC_ClockConfig+0xb0>
 80055e4:	4b81      	ldr	r3, [pc, #516]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x6c>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0f4      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 80055f4:	f000 f9ce 	bl	8005994 <RCC_GetSysClockFreqFromPLLSource>
 80055f8:	6138      	str	r0, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4a7c      	ldr	r2, [pc, #496]	@ (80057f0 <HAL_RCC_ClockConfig+0x268>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d93f      	bls.n	8005682 <HAL_RCC_ClockConfig+0xfa>
 8005602:	4b7a      	ldr	r3, [pc, #488]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d033      	beq.n	8005682 <HAL_RCC_ClockConfig+0xfa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d12f      	bne.n	8005682 <HAL_RCC_ClockConfig+0xfa>
 8005622:	4b72      	ldr	r3, [pc, #456]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800562a:	4a70      	ldr	r2, [pc, #448]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 800562c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005630:	6093      	str	r3, [r2, #8]
 8005632:	2380      	movs	r3, #128	@ 0x80
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e024      	b.n	8005682 <HAL_RCC_ClockConfig+0xfa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d107      	bne.n	8005650 <HAL_RCC_ClockConfig+0xc8>
 8005640:	4b6a      	ldr	r3, [pc, #424]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_RCC_ClockConfig+0xd8>
 800564c:	2301      	movs	r3, #1
 800564e:	e0c6      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 8005650:	4b66      	ldr	r3, [pc, #408]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0xd8>
 800565c:	2301      	movs	r3, #1
 800565e:	e0be      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 8005660:	f000 f8ce 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 8005664:	6138      	str	r0, [r7, #16]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4a61      	ldr	r2, [pc, #388]	@ (80057f0 <HAL_RCC_ClockConfig+0x268>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d909      	bls.n	8005682 <HAL_RCC_ClockConfig+0xfa>
 800566e:	4b5f      	ldr	r3, [pc, #380]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005676:	4a5d      	ldr	r2, [pc, #372]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567c:	6093      	str	r3, [r2, #8]
 800567e:	2380      	movs	r3, #128	@ 0x80
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	4b5a      	ldr	r3, [pc, #360]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4957      	ldr	r1, [pc, #348]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005690:	4313      	orrs	r3, r2
 8005692:	608b      	str	r3, [r1, #8]
 8005694:	f7fe f854 	bl	8003740 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x12a>
 800569c:	f7fe f850 	bl	8003740 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x12a>
 80056ae:	2303      	movs	r3, #3
 80056b0:	e095      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 80056b2:	4b4e      	ldr	r3, [pc, #312]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0x114>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d023      	beq.n	8005718 <HAL_RCC_ClockConfig+0x190>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x160>
 80056dc:	4b43      	ldr	r3, [pc, #268]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a42      	ldr	r2, [pc, #264]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80056e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056e6:	6093      	str	r3, [r2, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <HAL_RCC_ClockConfig+0x17c>
 80056f4:	4b3d      	ldr	r3, [pc, #244]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056fc:	4a3b      	ldr	r2, [pc, #236]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80056fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005702:	6093      	str	r3, [r2, #8]
 8005704:	4b39      	ldr	r3, [pc, #228]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4936      	ldr	r1, [pc, #216]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	e008      	b.n	800572a <HAL_RCC_ClockConfig+0x1a2>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b80      	cmp	r3, #128	@ 0x80
 800571c:	d105      	bne.n	800572a <HAL_RCC_ClockConfig+0x1a2>
 800571e:	4b33      	ldr	r3, [pc, #204]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	4a32      	ldr	r2, [pc, #200]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005728:	6093      	str	r3, [r2, #8]
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d21d      	bcs.n	8005774 <HAL_RCC_ClockConfig+0x1ec>
 8005738:	4b2b      	ldr	r3, [pc, #172]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 020f 	bic.w	r2, r3, #15
 8005740:	4929      	ldr	r1, [pc, #164]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
 8005748:	f7fd fffa 	bl	8003740 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	e00a      	b.n	8005766 <HAL_RCC_ClockConfig+0x1de>
 8005750:	f7fd fff6 	bl	8003740 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_ClockConfig+0x1de>
 8005762:	2303      	movs	r3, #3
 8005764:	e03b      	b.n	80057de <HAL_RCC_ClockConfig+0x256>
 8005766:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <HAL_RCC_ClockConfig+0x260>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d1ed      	bne.n	8005750 <HAL_RCC_ClockConfig+0x1c8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_RCC_ClockConfig+0x20a>
 8005780:	4b1a      	ldr	r3, [pc, #104]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4917      	ldr	r1, [pc, #92]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x22a>
 800579e:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	490f      	ldr	r1, [pc, #60]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f000 f825 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 80057b6:	4602      	mov	r2, r0
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <HAL_RCC_ClockConfig+0x264>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	490c      	ldr	r1, [pc, #48]	@ (80057f4 <HAL_RCC_ClockConfig+0x26c>)
 80057c4:	5ccb      	ldrb	r3, [r1, r3]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	fa22 f303 	lsr.w	r3, r2, r3
 80057ce:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <HAL_RCC_ClockConfig+0x270>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <HAL_RCC_ClockConfig+0x274>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd f85c 	bl	8002894 <HAL_InitTick>
 80057dc:	4603      	mov	r3, r0
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40022000 	.word	0x40022000
 80057ec:	40021000 	.word	0x40021000
 80057f0:	04c4b400 	.word	0x04c4b400
 80057f4:	0800e2fc 	.word	0x0800e2fc
 80057f8:	20000000 	.word	0x20000000
 80057fc:	20000004 	.word	0x20000004

08005800 <HAL_RCC_GetSysClockFreq>:
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	4b2c      	ldr	r3, [pc, #176]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	2b04      	cmp	r3, #4
 8005810:	d102      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0x18>
 8005812:	4b2a      	ldr	r3, [pc, #168]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e047      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0xa8>
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	2b08      	cmp	r3, #8
 8005822:	d102      	bne.n	800582a <HAL_RCC_GetSysClockFreq+0x2a>
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	e03e      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0xa8>
 800582a:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d136      	bne.n	80058a4 <HAL_RCC_GetSysClockFreq+0xa4>
 8005836:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	3301      	adds	r3, #1
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d10c      	bne.n	800586e <HAL_RCC_GetSysClockFreq+0x6e>
 8005854:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800585e:	68d2      	ldr	r2, [r2, #12]
 8005860:	0a12      	lsrs	r2, r2, #8
 8005862:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e00c      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x88>
 800586e:	4a13      	ldr	r2, [pc, #76]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	4a10      	ldr	r2, [pc, #64]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005878:	68d2      	ldr	r2, [r2, #12]
 800587a:	0a12      	lsrs	r2, r2, #8
 800587c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	bf00      	nop
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	0e5b      	lsrs	r3, r3, #25
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	3301      	adds	r3, #1
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e001      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0xa8>
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	00f42400 	.word	0x00f42400

080058c0 <HAL_RCC_GetHCLKFreq>:
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4b03      	ldr	r3, [pc, #12]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000000 	.word	0x20000000

080058d8 <HAL_RCC_GetPCLK1Freq>:
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
 80058dc:	f7ff fff0 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4904      	ldr	r1, [pc, #16]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000
 8005900:	0800e30c 	.word	0x0800e30c

08005904 <HAL_RCC_GetPCLK2Freq>:
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
 8005908:	f7ff ffda 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0adb      	lsrs	r3, r3, #11
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	@ (800592c <HAL_RCC_GetPCLK2Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	0800e30c 	.word	0x0800e30c

08005930 <HAL_RCC_GetClockConfig>:
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	220f      	movs	r2, #15
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	4b12      	ldr	r3, [pc, #72]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <HAL_RCC_GetClockConfig+0x60>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40022000 	.word	0x40022000

08005994 <RCC_GetSysClockFreqFromPLLSource>:
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d10c      	bne.n	80059d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
 80059b8:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059c2:	68d2      	ldr	r2, [r2, #12]
 80059c4:	0a12      	lsrs	r2, r2, #8
 80059c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e00c      	b.n	80059ec <RCC_GetSysClockFreqFromPLLSource+0x58>
 80059d2:	4a11      	ldr	r2, [pc, #68]	@ (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	4a0e      	ldr	r2, [pc, #56]	@ (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	0a12      	lsrs	r2, r2, #8
 80059e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	bf00      	nop
 80059ec:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0e5b      	lsrs	r3, r3, #25
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	3301      	adds	r3, #1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40021000 	.word	0x40021000
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	2300      	movs	r3, #0
 8005a26:	74fb      	strb	r3, [r7, #19]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	74bb      	strb	r3, [r7, #18]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8098 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	747b      	strb	r3, [r7, #17]
 8005a3e:	4b43      	ldr	r3, [pc, #268]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10d      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005a4a:	4b40      	ldr	r3, [pc, #256]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a56:	4b3d      	ldr	r3, [pc, #244]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2301      	movs	r3, #1
 8005a64:	747b      	strb	r3, [r7, #17]
 8005a66:	4b3a      	ldr	r3, [pc, #232]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a39      	ldr	r2, [pc, #228]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	f7fd fe65 	bl	8003740 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	e009      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005a7a:	f7fd fe61 	bl	8003740 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d902      	bls.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005a88:	2303      	movs	r3, #3
 8005a8a:	74fb      	strb	r3, [r7, #19]
 8005a8c:	e005      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005a8e:	4b30      	ldr	r3, [pc, #192]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ef      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d159      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01e      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d019      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005abc:	4b23      	ldr	r3, [pc, #140]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	4b20      	ldr	r3, [pc, #128]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ace:	4a1f      	ldr	r2, [pc, #124]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ade:	4a1b      	ldr	r2, [pc, #108]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ae8:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005afa:	f7fd fe21 	bl	8003740 <HAL_GetTick>
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	e00b      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b02:	f7fd fe1d 	bl	8003740 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d902      	bls.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b14:	2303      	movs	r3, #3
 8005b16:	74fb      	strb	r3, [r7, #19]
 8005b18:	e006      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0ec      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005b2e:	4b07      	ldr	r3, [pc, #28]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	4903      	ldr	r1, [pc, #12]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	74bb      	strb	r3, [r7, #18]
 8005b4a:	e005      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40007000 	.word	0x40007000
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	74bb      	strb	r3, [r7, #18]
 8005b58:	7c7b      	ldrb	r3, [r7, #17]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005b5e:	4ba6      	ldr	r3, [pc, #664]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	4aa5      	ldr	r2, [pc, #660]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005b76:	4ba0      	ldr	r3, [pc, #640]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f023 0203 	bic.w	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	499c      	ldr	r1, [pc, #624]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b98:	4b97      	ldr	r3, [pc, #604]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f023 020c 	bic.w	r2, r3, #12
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4994      	ldr	r1, [pc, #592]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005bba:	4b8f      	ldr	r3, [pc, #572]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	498b      	ldr	r1, [pc, #556]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005bdc:	4b86      	ldr	r3, [pc, #536]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4983      	ldr	r1, [pc, #524]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	497a      	ldr	r1, [pc, #488]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005c20:	4b75      	ldr	r3, [pc, #468]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	4972      	ldr	r1, [pc, #456]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8005c42:	4b6d      	ldr	r3, [pc, #436]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	4969      	ldr	r1, [pc, #420]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005c64:	4b64      	ldr	r3, [pc, #400]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	4961      	ldr	r1, [pc, #388]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005c86:	4b5c      	ldr	r3, [pc, #368]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	4958      	ldr	r1, [pc, #352]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005ca8:	4b53      	ldr	r3, [pc, #332]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	4950      	ldr	r1, [pc, #320]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cd2:	60d3      	str	r3, [r2, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d015      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005ce0:	4b45      	ldr	r3, [pc, #276]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	4942      	ldr	r1, [pc, #264]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005d00:	4b3d      	ldr	r3, [pc, #244]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a3c      	ldr	r2, [pc, #240]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d0a:	60d3      	str	r3, [r2, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d015      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005d18:	4b37      	ldr	r3, [pc, #220]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d26:	4934      	ldr	r1, [pc, #208]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d36:	d105      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005d38:	4b2f      	ldr	r3, [pc, #188]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d42:	60d3      	str	r3, [r2, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d015      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d50:	4b29      	ldr	r3, [pc, #164]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	4926      	ldr	r1, [pc, #152]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d70:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4a20      	ldr	r2, [pc, #128]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d7a:	60d3      	str	r3, [r2, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005d88:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	4918      	ldr	r1, [pc, #96]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005da8:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a12      	ldr	r2, [pc, #72]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005db2:	60d3      	str	r3, [r2, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	490a      	ldr	r1, [pc, #40]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005de0:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a04      	ldr	r2, [pc, #16]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dea:	60d3      	str	r3, [r2, #12]
 8005dec:	7cbb      	ldrb	r3, [r7, #18]
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40021000 	.word	0x40021000

08005dfc <HAL_SPI_Init>:
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e09d      	b.n	8005f4a <HAL_SPI_Init+0x14e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_SPI_Init+0x2c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1e:	d009      	beq.n	8005e34 <HAL_SPI_Init+0x38>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
 8005e26:	e005      	b.n	8005e34 <HAL_SPI_Init+0x38>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	615a      	str	r2, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Init+0x58>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc fcb4 	bl	80027bc <HAL_SPI_MspInit>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e74:	d902      	bls.n	8005e7c <HAL_SPI_Init+0x80>
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e002      	b.n	8005e82 <HAL_SPI_Init+0x86>
 8005e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_Init+0xa0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Init+0xa0>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ede:	ea42 0103 	orr.w	r1, r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	f003 0204 	and.w	r2, r3, #4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f18:	ea42 0103 	orr.w	r1, r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f38:	61da      	str	r2, [r3, #28]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_SPI_Transmit>:
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
 8005f62:	f7fd fbed 	bl	8003740 <HAL_GetTick>
 8005f66:	61f8      	str	r0, [r7, #28]
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	837b      	strh	r3, [r7, #26]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_SPI_Transmit+0x2a>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e15c      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_Transmit+0x36>
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_SPI_Transmit+0x3a>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e154      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_SPI_Transmit+0x48>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e14d      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	@ 0x60
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fec:	d10f      	bne.n	800600e <HAL_SPI_Transmit+0xbc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b40      	cmp	r3, #64	@ 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_Transmit+0xda>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006034:	d952      	bls.n	80060dc <HAL_SPI_Transmit+0x18a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Transmit+0xf2>
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d145      	bne.n	80060d0 <HAL_SPI_Transmit+0x17e>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006068:	e032      	b.n	80060d0 <HAL_SPI_Transmit+0x17e>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b02      	cmp	r3, #2
 8006076:	d112      	bne.n	800609e <HAL_SPI_Transmit+0x14c>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800609c:	e018      	b.n	80060d0 <HAL_SPI_Transmit+0x17e>
 800609e:	f7fd fb4f 	bl	8003740 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d803      	bhi.n	80060b6 <HAL_SPI_Transmit+0x164>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x16a>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <HAL_SPI_Transmit+0x17e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0b2      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1c7      	bne.n	800606a <HAL_SPI_Transmit+0x118>
 80060da:	e083      	b.n	80061e4 <HAL_SPI_Transmit+0x292>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Transmit+0x198>
 80060e4:	8b7b      	ldrh	r3, [r7, #26]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d177      	bne.n	80061da <HAL_SPI_Transmit+0x288>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d912      	bls.n	800611a <HAL_SPI_Transmit+0x1c8>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b02      	subs	r3, #2
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006118:	e05f      	b.n	80061da <HAL_SPI_Transmit+0x288>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006140:	e04b      	b.n	80061da <HAL_SPI_Transmit+0x288>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d12b      	bne.n	80061a8 <HAL_SPI_Transmit+0x256>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d912      	bls.n	8006180 <HAL_SPI_Transmit+0x22e>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b02      	subs	r3, #2
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800617e:	e02c      	b.n	80061da <HAL_SPI_Transmit+0x288>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061a6:	e018      	b.n	80061da <HAL_SPI_Transmit+0x288>
 80061a8:	f7fd faca 	bl	8003740 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_Transmit+0x26e>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x274>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <HAL_SPI_Transmit+0x288>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80061d6:	2303      	movs	r3, #3
 80061d8:	e02d      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ae      	bne.n	8006142 <HAL_SPI_Transmit+0x1f0>
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fcf5 	bl	8006bd8 <SPI_EndRxTxTransaction>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Transmit+0x2a8>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <HAL_SPI_Transmit+0x2c6>
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_SPI_Transmit+0x2e2>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_SPI_Transmit+0x2e4>
 8006234:	2300      	movs	r3, #0
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Receive>:
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af02      	add	r7, sp, #8
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d001      	beq.n	800625e <HAL_SPI_Receive+0x20>
 800625a:	2302      	movs	r3, #2
 800625c:	e123      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_SPI_Receive+0x2c>
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_SPI_Receive+0x30>
 800626a:	2301      	movs	r3, #1
 800626c:	e11b      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006276:	d112      	bne.n	800629e <HAL_SPI_Receive+0x60>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10e      	bne.n	800629e <HAL_SPI_Receive+0x60>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2204      	movs	r2, #4
 8006284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f90a 	bl	80064ae <HAL_SPI_TransmitReceive>
 800629a:	4603      	mov	r3, r0
 800629c:	e103      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 800629e:	f7fd fa4f 	bl	8003740 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_SPI_Receive+0x74>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0f9      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2204      	movs	r2, #4
 80062be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	88fa      	ldrh	r2, [r7, #6]
 80062d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006304:	d908      	bls.n	8006318 <HAL_SPI_Receive+0xda>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e007      	b.n	8006328 <HAL_SPI_Receive+0xea>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006330:	d10f      	bne.n	8006352 <HAL_SPI_Receive+0x114>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b40      	cmp	r3, #64	@ 0x40
 800635e:	d007      	beq.n	8006370 <HAL_SPI_Receive+0x132>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006378:	d875      	bhi.n	8006466 <HAL_SPI_Receive+0x228>
 800637a:	e037      	b.n	80063ec <HAL_SPI_Receive+0x1ae>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d117      	bne.n	80063ba <HAL_SPI_Receive+0x17c>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f103 020c 	add.w	r2, r3, #12
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80063b8:	e018      	b.n	80063ec <HAL_SPI_Receive+0x1ae>
 80063ba:	f7fd f9c1 	bl	8003740 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d803      	bhi.n	80063d2 <HAL_SPI_Receive+0x194>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Receive+0x19a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <HAL_SPI_Receive+0x1ae>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80063e8:	2303      	movs	r3, #3
 80063ea:	e05c      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1c1      	bne.n	800637c <HAL_SPI_Receive+0x13e>
 80063f8:	e03b      	b.n	8006472 <HAL_SPI_Receive+0x234>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d115      	bne.n	8006434 <HAL_SPI_Receive+0x1f6>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006412:	b292      	uxth	r2, r2
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	1c9a      	adds	r2, r3, #2
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006432:	e018      	b.n	8006466 <HAL_SPI_Receive+0x228>
 8006434:	f7fd f984 	bl	8003740 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d803      	bhi.n	800644c <HAL_SPI_Receive+0x20e>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d102      	bne.n	8006452 <HAL_SPI_Receive+0x214>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <HAL_SPI_Receive+0x228>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006462:	2303      	movs	r3, #3
 8006464:	e01f      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1c3      	bne.n	80063fa <HAL_SPI_Receive+0x1bc>
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fb56 	bl	8006b28 <SPI_EndRxTransaction>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Receive+0x24a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	661a      	str	r2, [r3, #96]	@ 0x60
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_SPI_Receive+0x266>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <HAL_SPI_Receive+0x268>
 80064a4:	2300      	movs	r3, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_SPI_TransmitReceive>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b08a      	sub	sp, #40	@ 0x28
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	807b      	strh	r3, [r7, #2]
 80064bc:	2301      	movs	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c0:	f7fd f93e 	bl	8003740 <HAL_GetTick>
 80064c4:	6238      	str	r0, [r7, #32]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	82fb      	strh	r3, [r7, #22]
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	82bb      	strh	r3, [r7, #20]
 80064dc:	7ffb      	ldrb	r3, [r7, #31]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d00c      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x4e>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064e8:	d106      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x4a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x4a>
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d001      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x4e>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e1f3      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_SPI_TransmitReceive+0x60>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_TransmitReceive+0x60>
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x64>
 800650e:	2301      	movs	r3, #1
 8006510:	e1e8      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x72>
 800651c:	2302      	movs	r3, #2
 800651e:	e1e1      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b04      	cmp	r3, #4
 8006532:	d003      	beq.n	800653c <HAL_SPI_TransmitReceive+0x8e>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2205      	movs	r2, #5
 8006538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	661a      	str	r2, [r3, #96]	@ 0x60
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	641a      	str	r2, [r3, #64]	@ 0x40
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	887a      	ldrh	r2, [r7, #2]
 800654c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	639a      	str	r2, [r3, #56]	@ 0x38
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	887a      	ldrh	r2, [r7, #2]
 8006568:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	651a      	str	r2, [r3, #80]	@ 0x50
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800657e:	d802      	bhi.n	8006586 <HAL_SPI_TransmitReceive+0xd8>
 8006580:	8abb      	ldrh	r3, [r7, #20]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d908      	bls.n	8006598 <HAL_SPI_TransmitReceive+0xea>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e007      	b.n	80065a8 <HAL_SPI_TransmitReceive+0xfa>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065a6:	605a      	str	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	d007      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x118>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065ce:	f240 8083 	bls.w	80066d8 <HAL_SPI_TransmitReceive+0x22a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x132>
 80065da:	8afb      	ldrh	r3, [r7, #22]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d16f      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x212>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	881a      	ldrh	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60da      	str	r2, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006604:	e05c      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x212>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b02      	cmp	r3, #2
 8006612:	d11b      	bne.n	800664c <HAL_SPI_TransmitReceive+0x19e>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_SPI_TransmitReceive+0x19e>
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	2b01      	cmp	r3, #1
 8006622:	d113      	bne.n	800664c <HAL_SPI_TransmitReceive+0x19e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	639a      	str	r2, [r3, #56]	@ 0x38
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006648:	2300      	movs	r3, #0
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d11c      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x1e6>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d016      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x1e6>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006670:	b292      	uxth	r2, r2
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	1c9a      	adds	r2, r3, #2
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	641a      	str	r2, [r3, #64]	@ 0x40
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006690:	2301      	movs	r3, #1
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
 8006694:	f7fd f854 	bl	8003740 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d80d      	bhi.n	80066c0 <HAL_SPI_TransmitReceive+0x212>
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d009      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x212>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80066bc:	2303      	movs	r3, #3
 80066be:	e111      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d19d      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x158>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d197      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x158>
 80066d6:	e0e5      	b.n	80068a4 <HAL_SPI_TransmitReceive+0x3f6>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x23a>
 80066e0:	8afb      	ldrh	r3, [r7, #22]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f040 80d1 	bne.w	800688a <HAL_SPI_TransmitReceive+0x3dc>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d912      	bls.n	8006718 <HAL_SPI_TransmitReceive+0x26a>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b02      	subs	r3, #2
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006716:	e0b8      	b.n	800688a <HAL_SPI_TransmitReceive+0x3dc>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800673e:	e0a4      	b.n	800688a <HAL_SPI_TransmitReceive+0x3dc>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b02      	cmp	r3, #2
 800674c:	d134      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x30a>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02f      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x30a>
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	2b01      	cmp	r3, #1
 800675c:	d12c      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x30a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	d912      	bls.n	800678e <HAL_SPI_TransmitReceive+0x2e0>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	@ 0x38
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b02      	subs	r3, #2
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800678c:	e012      	b.n	80067b4 <HAL_SPI_TransmitReceive+0x306>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d148      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x3aa>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d042      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x3aa>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d923      	bls.n	8006826 <HAL_SPI_TransmitReceive+0x378>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	b292      	uxth	r2, r2
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	1c9a      	adds	r2, r3, #2
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b02      	subs	r3, #2
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d81f      	bhi.n	8006854 <HAL_SPI_TransmitReceive+0x3a6>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006822:	605a      	str	r2, [r3, #4]
 8006824:	e016      	b.n	8006854 <HAL_SPI_TransmitReceive+0x3a6>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f103 020c 	add.w	r2, r3, #12
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	641a      	str	r2, [r3, #64]	@ 0x40
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006854:	2301      	movs	r3, #1
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
 8006858:	f7fc ff72 	bl	8003740 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006864:	429a      	cmp	r2, r3
 8006866:	d803      	bhi.n	8006870 <HAL_SPI_TransmitReceive+0x3c2>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d102      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x3c8>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <HAL_SPI_TransmitReceive+0x3dc>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006886:	2303      	movs	r3, #3
 8006888:	e02c      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	f47f af55 	bne.w	8006740 <HAL_SPI_TransmitReceive+0x292>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f47f af4e 	bne.w	8006740 <HAL_SPI_TransmitReceive+0x292>
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f995 	bl	8006bd8 <SPI_EndRxTxTransaction>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_SPI_TransmitReceive+0x418>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80068c2:	2301      	movs	r3, #1
 80068c4:	e00e      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0x434>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x436>
 80068e2:	2300      	movs	r3, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	3728      	adds	r7, #40	@ 0x28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SPI_WaitFlagStateUntilTimeout>:
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	f7fc ff20 	bl	8003740 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4413      	add	r3, r2
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	f7fc ff18 	bl	8003740 <HAL_GetTick>
 8006910:	61b8      	str	r0, [r7, #24]
 8006912:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	0d1b      	lsrs	r3, r3, #20
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	e054      	b.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d050      	beq.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xe2>
 800692c:	f7fc ff08 	bl	8003740 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	429a      	cmp	r2, r3
 800693a:	d902      	bls.n	8006942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d13d      	bne.n	80069be <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800695a:	d111      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006964:	d004      	beq.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800696e:	d107      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006988:	d10f      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xbe>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80069ba:	2303      	movs	r3, #3
 80069bc:	e017      	b.n	80069ee <SPI_WaitFlagStateUntilTimeout+0x102>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d19b      	bne.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x38>
 80069ec:	2300      	movs	r3, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	3720      	adds	r7, #32
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000000 	.word	0x20000000

080069fc <SPI_WaitFifoStateUntilTimeout>:
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	@ 0x28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]
 8006a0e:	f7fc fe97 	bl	8003740 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	1a9b      	subs	r3, r3, r2
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a1e:	f7fc fe8f 	bl	8003740 <HAL_GetTick>
 8006a22:	6238      	str	r0, [r7, #32]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	00da      	lsls	r2, r3, #3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	0d1b      	lsrs	r3, r3, #20
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e060      	b.n	8006b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a4c:	d107      	bne.n	8006a5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	75fb      	strb	r3, [r7, #23]
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d050      	beq.n	8006b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006a66:	f7fc fe6b 	bl	8003740 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d902      	bls.n	8006a7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13d      	bne.n	8006af8 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a8a:	605a      	str	r2, [r3, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a94:	d111      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9e:	d004      	beq.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0xae>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa8:	d107      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac2:	d10f      	bne.n	8006ae4 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006af4:	2303      	movs	r3, #3
 8006af6:	e010      	b.n	8006b1a <SPI_WaitFifoStateUntilTimeout+0x11e>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x106>
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d196      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	@ 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000000 	.word	0x20000000

08006b28 <SPI_EndRxTransaction>:
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b3c:	d111      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b46:	d004      	beq.n	8006b52 <SPI_EndRxTransaction+0x2a>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b50:	d107      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2180      	movs	r1, #128	@ 0x80
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff febd 	bl	80068ec <SPI_WaitFlagStateUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <SPI_EndRxTransaction+0x60>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b84:	2303      	movs	r3, #3
 8006b86:	e023      	b.n	8006bd0 <SPI_EndRxTransaction+0xa8>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b90:	d11d      	bne.n	8006bce <SPI_EndRxTransaction+0xa6>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b9a:	d004      	beq.n	8006ba6 <SPI_EndRxTransaction+0x7e>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba4:	d113      	bne.n	8006bce <SPI_EndRxTransaction+0xa6>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ff22 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <SPI_EndRxTransaction+0xa6>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	661a      	str	r2, [r3, #96]	@ 0x60
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e000      	b.n	8006bd0 <SPI_EndRxTransaction+0xa8>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SPI_EndRxTxTransaction>:
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff ff03 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <SPI_EndRxTxTransaction+0x34>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e027      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	@ 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fe68 	bl	80068ec <SPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x5a>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e014      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fedc 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <SPI_EndRxTxTransaction+0x82>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c4e:	f043 0220 	orr.w	r2, r3, #32
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c56:	2303      	movs	r3, #3
 8006c58:	e000      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_Base_Init>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_TIM_Base_Init+0x12>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e049      	b.n	8006d0a <HAL_TIM_Base_Init+0xa6>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_TIM_Base_Init+0x2c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc f900 	bl	8002e90 <HAL_TIM_Base_MspInit>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f000 ff52 	bl	8007b4c <TIM_Base_SetConfig>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_TIM_Base_Start_IT>:
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d001      	beq.n	8006d2c <HAL_TIM_Base_Start_IT+0x18>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e04a      	b.n	8006dc2 <HAL_TIM_Base_Start_IT+0xae>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a21      	ldr	r2, [pc, #132]	@ (8006dd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x6c>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d56:	d013      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x6c>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x6c>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x6c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1a      	ldr	r2, [pc, #104]	@ (8006ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x6c>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a19      	ldr	r2, [pc, #100]	@ (8006de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d115      	bne.n	8006dac <HAL_TIM_Base_Start_IT+0x98>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	4b17      	ldr	r3, [pc, #92]	@ (8006de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d015      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0xaa>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d98:	d011      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0xaa>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e008      	b.n	8006dbe <HAL_TIM_Base_Start_IT+0xaa>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e000      	b.n	8006dc0 <HAL_TIM_Base_Start_IT+0xac>
 8006dbe:	bf00      	nop
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	00010007 	.word	0x00010007

08006de8 <HAL_TIM_PWM_Init>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_Init+0x12>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e049      	b.n	8006e8e <HAL_TIM_PWM_Init+0xa6>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_TIM_PWM_Init+0x2c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f841 	bl	8006e96 <HAL_TIM_PWM_MspInit>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f000 fe90 	bl	8007b4c <TIM_Base_SetConfig>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_TIM_PWM_MspInit>:
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_TIM_PWM_Start>:
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <HAL_TIM_PWM_Start+0x24>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e03c      	b.n	8006f4a <HAL_TIM_PWM_Start+0x9e>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d109      	bne.n	8006eea <HAL_TIM_PWM_Start+0x3e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	e02f      	b.n	8006f4a <HAL_TIM_PWM_Start+0x9e>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d109      	bne.n	8006f04 <HAL_TIM_PWM_Start+0x58>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e022      	b.n	8006f4a <HAL_TIM_PWM_Start+0x9e>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b0c      	cmp	r3, #12
 8006f08:	d109      	bne.n	8006f1e <HAL_TIM_PWM_Start+0x72>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	bf14      	ite	ne
 8006f16:	2301      	movne	r3, #1
 8006f18:	2300      	moveq	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	e015      	b.n	8006f4a <HAL_TIM_PWM_Start+0x9e>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d109      	bne.n	8006f38 <HAL_TIM_PWM_Start+0x8c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	bf14      	ite	ne
 8006f30:	2301      	movne	r3, #1
 8006f32:	2300      	moveq	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e008      	b.n	8006f4a <HAL_TIM_PWM_Start+0x9e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_TIM_PWM_Start+0xa6>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e097      	b.n	8007082 <HAL_TIM_PWM_Start+0x1d6>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_PWM_Start+0xb6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f60:	e023      	b.n	8006faa <HAL_TIM_PWM_Start+0xfe>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_PWM_Start+0xc6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f70:	e01b      	b.n	8006faa <HAL_TIM_PWM_Start+0xfe>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_PWM_Start+0xd6>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f80:	e013      	b.n	8006faa <HAL_TIM_PWM_Start+0xfe>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_PWM_Start+0xe6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f90:	e00b      	b.n	8006faa <HAL_TIM_PWM_Start+0xfe>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0xf6>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fa0:	e003      	b.n	8006faa <HAL_TIM_PWM_Start+0xfe>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f9f8 	bl	80083a8 <TIM_CCxChannelCmd>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a33      	ldr	r2, [pc, #204]	@ (800708c <HAL_TIM_PWM_Start+0x1e0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIM_PWM_Start+0x13e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a32      	ldr	r2, [pc, #200]	@ (8007090 <HAL_TIM_PWM_Start+0x1e4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIM_PWM_Start+0x13e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <HAL_TIM_PWM_Start+0x1e8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIM_PWM_Start+0x13e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2f      	ldr	r2, [pc, #188]	@ (8007098 <HAL_TIM_PWM_Start+0x1ec>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIM_PWM_Start+0x13e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800709c <HAL_TIM_PWM_Start+0x1f0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_PWM_Start+0x142>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_TIM_PWM_Start+0x144>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_TIM_PWM_Start+0x158>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a20      	ldr	r2, [pc, #128]	@ (800708c <HAL_TIM_PWM_Start+0x1e0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d018      	beq.n	8007040 <HAL_TIM_PWM_Start+0x194>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007016:	d013      	beq.n	8007040 <HAL_TIM_PWM_Start+0x194>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a20      	ldr	r2, [pc, #128]	@ (80070a0 <HAL_TIM_PWM_Start+0x1f4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_TIM_PWM_Start+0x194>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1f      	ldr	r2, [pc, #124]	@ (80070a4 <HAL_TIM_PWM_Start+0x1f8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_TIM_PWM_Start+0x194>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a17      	ldr	r2, [pc, #92]	@ (8007090 <HAL_TIM_PWM_Start+0x1e4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIM_PWM_Start+0x194>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <HAL_TIM_PWM_Start+0x1e8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d115      	bne.n	800706c <HAL_TIM_PWM_Start+0x1c0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	4b18      	ldr	r3, [pc, #96]	@ (80070a8 <HAL_TIM_PWM_Start+0x1fc>)
 8007048:	4013      	ands	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b06      	cmp	r3, #6
 8007050:	d015      	beq.n	800707e <HAL_TIM_PWM_Start+0x1d2>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007058:	d011      	beq.n	800707e <HAL_TIM_PWM_Start+0x1d2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e008      	b.n	800707e <HAL_TIM_PWM_Start+0x1d2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e000      	b.n	8007080 <HAL_TIM_PWM_Start+0x1d4>
 800707e:	bf00      	nop
 8007080:	2300      	movs	r3, #0
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40013400 	.word	0x40013400
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	00010007 	.word	0x00010007

080070ac <HAL_TIM_PWM_Stop>:
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 f972 	bl	80083a8 <TIM_CCxChannelCmd>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3e      	ldr	r2, [pc, #248]	@ (80071c4 <HAL_TIM_PWM_Stop+0x118>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_PWM_Stop+0x4a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a3d      	ldr	r2, [pc, #244]	@ (80071c8 <HAL_TIM_PWM_Stop+0x11c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_PWM_Stop+0x4a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a3b      	ldr	r2, [pc, #236]	@ (80071cc <HAL_TIM_PWM_Stop+0x120>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_PWM_Stop+0x4a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3a      	ldr	r2, [pc, #232]	@ (80071d0 <HAL_TIM_PWM_Stop+0x124>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PWM_Stop+0x4a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a38      	ldr	r2, [pc, #224]	@ (80071d4 <HAL_TIM_PWM_Stop+0x128>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_PWM_Stop+0x4e>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <HAL_TIM_PWM_Stop+0x50>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d017      	beq.n	8007130 <HAL_TIM_PWM_Stop+0x84>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	f241 1311 	movw	r3, #4369	@ 0x1111
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10f      	bne.n	8007130 <HAL_TIM_PWM_Stop+0x84>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	f244 4344 	movw	r3, #17476	@ 0x4444
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d107      	bne.n	8007130 <HAL_TIM_PWM_Stop+0x84>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800712e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6a1a      	ldr	r2, [r3, #32]
 8007136:	f241 1311 	movw	r3, #4369	@ 0x1111
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_TIM_PWM_Stop+0xb4>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	f244 4344 	movw	r3, #17476	@ 0x4444
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <HAL_TIM_PWM_Stop+0xb4>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_TIM_PWM_Stop+0xc4>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800716e:	e023      	b.n	80071b8 <HAL_TIM_PWM_Stop+0x10c>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b04      	cmp	r3, #4
 8007174:	d104      	bne.n	8007180 <HAL_TIM_PWM_Stop+0xd4>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800717e:	e01b      	b.n	80071b8 <HAL_TIM_PWM_Stop+0x10c>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b08      	cmp	r3, #8
 8007184:	d104      	bne.n	8007190 <HAL_TIM_PWM_Stop+0xe4>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800718e:	e013      	b.n	80071b8 <HAL_TIM_PWM_Stop+0x10c>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d104      	bne.n	80071a0 <HAL_TIM_PWM_Stop+0xf4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800719e:	e00b      	b.n	80071b8 <HAL_TIM_PWM_Stop+0x10c>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d104      	bne.n	80071b0 <HAL_TIM_PWM_Stop+0x104>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ae:	e003      	b.n	80071b8 <HAL_TIM_PWM_Stop+0x10c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071b8:	2300      	movs	r3, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40012c00 	.word	0x40012c00
 80071c8:	40013400 	.word	0x40013400
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800

080071d8 <HAL_TIM_Encoder_Init>:
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_TIM_Encoder_Init+0x14>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e097      	b.n	800731c <HAL_TIM_Encoder_Init+0x144>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <HAL_TIM_Encoder_Init+0x2e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fb fe65 	bl	8002ed0 <HAL_TIM_Encoder_MspInit>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800721c:	f023 0307 	bic.w	r3, r3, #7
 8007220:	6093      	str	r3, [r2, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 fc8d 	bl	8007b4c <TIM_Base_SetConfig>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	4313      	orrs	r3, r2
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007278:	f023 030c 	bic.w	r3, r3, #12
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007284:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	4313      	orrs	r3, r2
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	011a      	lsls	r2, r3, #4
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	031b      	lsls	r3, r3, #12
 80072a8:	4313      	orrs	r3, r2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	4313      	orrs	r3, r2
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	609a      	str	r2, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	619a      	str	r2, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	621a      	str	r2, [r3, #32]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800731a:	2300      	movs	r3, #0
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_TIM_Encoder_Start>:
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007334:	73fb      	strb	r3, [r7, #15]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800733c:	73bb      	strb	r3, [r7, #14]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007344:	737b      	strb	r3, [r7, #13]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800734c:	733b      	strb	r3, [r7, #12]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d110      	bne.n	8007376 <HAL_TIM_Encoder_Start+0x52>
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d102      	bne.n	8007360 <HAL_TIM_Encoder_Start+0x3c>
 800735a:	7b7b      	ldrb	r3, [r7, #13]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_TIM_Encoder_Start+0x40>
 8007360:	2301      	movs	r3, #1
 8007362:	e069      	b.n	8007438 <HAL_TIM_Encoder_Start+0x114>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007374:	e031      	b.n	80073da <HAL_TIM_Encoder_Start+0xb6>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d110      	bne.n	800739e <HAL_TIM_Encoder_Start+0x7a>
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d102      	bne.n	8007388 <HAL_TIM_Encoder_Start+0x64>
 8007382:	7b3b      	ldrb	r3, [r7, #12]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d001      	beq.n	800738c <HAL_TIM_Encoder_Start+0x68>
 8007388:	2301      	movs	r3, #1
 800738a:	e055      	b.n	8007438 <HAL_TIM_Encoder_Start+0x114>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800739c:	e01d      	b.n	80073da <HAL_TIM_Encoder_Start+0xb6>
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d108      	bne.n	80073b6 <HAL_TIM_Encoder_Start+0x92>
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d105      	bne.n	80073b6 <HAL_TIM_Encoder_Start+0x92>
 80073aa:	7b7b      	ldrb	r3, [r7, #13]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d102      	bne.n	80073b6 <HAL_TIM_Encoder_Start+0x92>
 80073b0:	7b3b      	ldrb	r3, [r7, #12]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_TIM_Encoder_Start+0x96>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e03e      	b.n	8007438 <HAL_TIM_Encoder_Start+0x114>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_TIM_Encoder_Start+0xc4>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d008      	beq.n	80073f8 <HAL_TIM_Encoder_Start+0xd4>
 80073e6:	e00f      	b.n	8007408 <HAL_TIM_Encoder_Start+0xe4>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2201      	movs	r2, #1
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 ffd9 	bl	80083a8 <TIM_CCxChannelCmd>
 80073f6:	e016      	b.n	8007426 <HAL_TIM_Encoder_Start+0x102>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	2104      	movs	r1, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f000 ffd1 	bl	80083a8 <TIM_CCxChannelCmd>
 8007406:	e00e      	b.n	8007426 <HAL_TIM_Encoder_Start+0x102>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2201      	movs	r2, #1
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f000 ffc9 	bl	80083a8 <TIM_CCxChannelCmd>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2201      	movs	r2, #1
 800741c:	2104      	movs	r1, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f000 ffc2 	bl	80083a8 <TIM_CCxChannelCmd>
 8007424:	bf00      	nop
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	2300      	movs	r3, #0
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_TIM_IRQHandler>:
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	60bb      	str	r3, [r7, #8]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x64>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x64>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0202 	mvn.w	r2, #2
 8007474:	611a      	str	r2, [r3, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	771a      	strb	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x52>
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb40 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0x5e>
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb32 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb43 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0204 	mvn.w	r2, #4
 80074c0:	611a      	str	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	771a      	strb	r2, [r3, #28]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x9e>
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fb1a 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0xaa>
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fb0c 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb1d 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d020      	beq.n	800753c <HAL_TIM_IRQHandler+0xfc>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01b      	beq.n	800753c <HAL_TIM_IRQHandler+0xfc>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0208 	mvn.w	r2, #8
 800750c:	611a      	str	r2, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2204      	movs	r2, #4
 8007512:	771a      	strb	r2, [r3, #28]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0xea>
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 faf4 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0xf6>
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fae6 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 faf7 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <HAL_TIM_IRQHandler+0x148>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01b      	beq.n	8007588 <HAL_TIM_IRQHandler+0x148>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0210 	mvn.w	r2, #16
 8007558:	611a      	str	r2, [r3, #16]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2208      	movs	r2, #8
 800755e:	771a      	strb	r2, [r3, #28]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x136>
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 face 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0x142>
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fac0 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fad1 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00c      	beq.n	80075ac <HAL_TIM_IRQHandler+0x16c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <HAL_TIM_IRQHandler+0x16c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0201 	mvn.w	r2, #1
 80075a4:	611a      	str	r2, [r3, #16]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa fe96 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x180>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00c      	beq.n	80075da <HAL_TIM_IRQHandler+0x19a>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_TIM_IRQHandler+0x19a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075d2:	611a      	str	r2, [r3, #16]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f937 	bl	8008848 <HAL_TIMEx_BreakCallback>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <HAL_TIM_IRQHandler+0x1be>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <HAL_TIM_IRQHandler+0x1be>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075f6:	611a      	str	r2, [r3, #16]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f92f 	bl	800885c <HAL_TIMEx_Break2Callback>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <HAL_TIM_IRQHandler+0x1e2>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <HAL_TIM_IRQHandler+0x1e2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800761a:	611a      	str	r2, [r3, #16]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa8b 	bl	8007b38 <HAL_TIM_TriggerCallback>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_TIM_IRQHandler+0x206>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <HAL_TIM_IRQHandler+0x206>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f06f 0220 	mvn.w	r2, #32
 800763e:	611a      	str	r2, [r3, #16]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f8f7 	bl	8008834 <HAL_TIMEx_CommutCallback>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00c      	beq.n	800766a <HAL_TIM_IRQHandler+0x22a>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <HAL_TIM_IRQHandler+0x22a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007662:	611a      	str	r2, [r3, #16]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f903 	bl	8008870 <HAL_TIMEx_EncoderIndexCallback>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <HAL_TIM_IRQHandler+0x24e>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_TIM_IRQHandler+0x24e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007686:	611a      	str	r2, [r3, #16]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f8fb 	bl	8008884 <HAL_TIMEx_DirectionChangeCallback>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x272>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x272>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80076aa:	611a      	str	r2, [r3, #16]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f8f3 	bl	8008898 <HAL_TIMEx_IndexErrorCallback>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x296>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x296>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80076ce:	611a      	str	r2, [r3, #16]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f8eb 	bl	80088ac <HAL_TIMEx_TransitionErrorCallback>
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_TIM_PWM_ConfigChannel>:
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	2300      	movs	r3, #0
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e0ff      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b14      	cmp	r3, #20
 800770a:	f200 80f0 	bhi.w	80078ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800770e:	a201      	add	r2, pc, #4	@ (adr r2, 8007714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007769 	.word	0x08007769
 8007718:	080078ef 	.word	0x080078ef
 800771c:	080078ef 	.word	0x080078ef
 8007720:	080078ef 	.word	0x080078ef
 8007724:	080077a9 	.word	0x080077a9
 8007728:	080078ef 	.word	0x080078ef
 800772c:	080078ef 	.word	0x080078ef
 8007730:	080078ef 	.word	0x080078ef
 8007734:	080077eb 	.word	0x080077eb
 8007738:	080078ef 	.word	0x080078ef
 800773c:	080078ef 	.word	0x080078ef
 8007740:	080078ef 	.word	0x080078ef
 8007744:	0800782b 	.word	0x0800782b
 8007748:	080078ef 	.word	0x080078ef
 800774c:	080078ef 	.word	0x080078ef
 8007750:	080078ef 	.word	0x080078ef
 8007754:	0800786d 	.word	0x0800786d
 8007758:	080078ef 	.word	0x080078ef
 800775c:	080078ef 	.word	0x080078ef
 8007760:	080078ef 	.word	0x080078ef
 8007764:	080078ad 	.word	0x080078ad
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa88 	bl	8007c84 <TIM_OC1_SetConfig>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0208 	orr.w	r2, r2, #8
 8007782:	619a      	str	r2, [r3, #24]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0204 	bic.w	r2, r2, #4
 8007792:	619a      	str	r2, [r3, #24]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	619a      	str	r2, [r3, #24]
 80077a6:	e0a5      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 faf8 	bl	8007da4 <TIM_OC2_SetConfig>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c2:	619a      	str	r2, [r3, #24]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077d2:	619a      	str	r2, [r3, #24]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6999      	ldr	r1, [r3, #24]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	619a      	str	r2, [r3, #24]
 80077e8:	e084      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fb61 	bl	8007eb8 <TIM_OC3_SetConfig>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0208 	orr.w	r2, r2, #8
 8007804:	61da      	str	r2, [r3, #28]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0204 	bic.w	r2, r2, #4
 8007814:	61da      	str	r2, [r3, #28]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	61da      	str	r2, [r3, #28]
 8007828:	e064      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fbc9 	bl	8007fc8 <TIM_OC4_SetConfig>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007844:	61da      	str	r2, [r3, #28]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007854:	61da      	str	r2, [r3, #28]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69d9      	ldr	r1, [r3, #28]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	021a      	lsls	r2, r3, #8
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	61da      	str	r2, [r3, #28]
 800786a:	e043      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fc32 	bl	80080dc <TIM_OC5_SetConfig>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0208 	orr.w	r2, r2, #8
 8007886:	651a      	str	r2, [r3, #80]	@ 0x50
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0204 	bic.w	r2, r2, #4
 8007896:	651a      	str	r2, [r3, #80]	@ 0x50
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80078aa:	e023      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fc76 	bl	80081a4 <TIM_OC6_SetConfig>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	021a      	lsls	r2, r3, #8
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80078ec:	e002      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x214>
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
 80078f2:	bf00      	nop
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <HAL_TIM_ConfigClockSource>:
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIM_ConfigClockSource+0x1c>
 8007920:	2302      	movs	r3, #2
 8007922:	e0de      	b.n	8007ae2 <HAL_TIM_ConfigClockSource+0x1da>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60bb      	str	r3, [r7, #8]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a63      	ldr	r2, [pc, #396]	@ (8007aec <HAL_TIM_ConfigClockSource+0x1e4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f000 80a9 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007964:	4a61      	ldr	r2, [pc, #388]	@ (8007aec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	f200 80ae 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 800796c:	4a60      	ldr	r2, [pc, #384]	@ (8007af0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f000 80a1 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007974:	4a5e      	ldr	r2, [pc, #376]	@ (8007af0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f200 80a6 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 800797c:	4a5d      	ldr	r2, [pc, #372]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f000 8099 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007984:	4a5b      	ldr	r2, [pc, #364]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f200 809e 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 800798c:	4a5a      	ldr	r2, [pc, #360]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f000 8091 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007994:	4a58      	ldr	r2, [pc, #352]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	f200 8096 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 800799c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079a0:	f000 8089 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 80079a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079a8:	f200 808e 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b0:	d03e      	beq.n	8007a30 <HAL_TIM_ConfigClockSource+0x128>
 80079b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b6:	f200 8087 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079be:	f000 8086 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1c6>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c6:	d87f      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079c8:	2b70      	cmp	r3, #112	@ 0x70
 80079ca:	d01a      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0xfa>
 80079cc:	2b70      	cmp	r3, #112	@ 0x70
 80079ce:	d87b      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079d0:	2b60      	cmp	r3, #96	@ 0x60
 80079d2:	d050      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x16e>
 80079d4:	2b60      	cmp	r3, #96	@ 0x60
 80079d6:	d877      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079d8:	2b50      	cmp	r3, #80	@ 0x50
 80079da:	d03c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x14e>
 80079dc:	2b50      	cmp	r3, #80	@ 0x50
 80079de:	d873      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	d058      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x18e>
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d86f      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079e8:	2b30      	cmp	r3, #48	@ 0x30
 80079ea:	d064      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d86b      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d060      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d867      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d05c      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d05a      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007a00:	e062      	b.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6899      	ldr	r1, [r3, #8]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f000 fca9 	bl	8008368 <TIM_ETR_SetConfig>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	609a      	str	r2, [r3, #8]
 8007a2e:	e04f      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	6899      	ldr	r1, [r3, #8]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f000 fc92 	bl	8008368 <TIM_ETR_SetConfig>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a52:	609a      	str	r2, [r3, #8]
 8007a54:	e03c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 fc04 	bl	8008270 <TIM_TI1_ConfigInputStage>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2150      	movs	r1, #80	@ 0x50
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fc5d 	bl	800832e <TIM_ITRx_SetConfig>
 8007a74:	e02c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 fc23 	bl	80082ce <TIM_TI2_ConfigInputStage>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2160      	movs	r1, #96	@ 0x60
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fc4d 	bl	800832e <TIM_ITRx_SetConfig>
 8007a94:	e01c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f000 fbe4 	bl	8008270 <TIM_TI1_ConfigInputStage>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2140      	movs	r1, #64	@ 0x40
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fc3d 	bl	800832e <TIM_ITRx_SetConfig>
 8007ab4:	e00c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 fc34 	bl	800832e <TIM_ITRx_SetConfig>
 8007ac6:	e003      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
 8007acc:	e000      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1c8>
 8007ace:	bf00      	nop
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	00100070 	.word	0x00100070
 8007af0:	00100040 	.word	0x00100040
 8007af4:	00100030 	.word	0x00100030
 8007af8:	00100020 	.word	0x00100020

08007afc <HAL_TIM_OC_DelayElapsedCallback>:
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_IC_CaptureCallback>:
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_TriggerCallback>:
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <TIM_Base_SetConfig>:
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a42      	ldr	r2, [pc, #264]	@ (8007c68 <TIM_Base_SetConfig+0x11c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6a:	d00b      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c6c <TIM_Base_SetConfig+0x120>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a3e      	ldr	r2, [pc, #248]	@ (8007c70 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8007c74 <TIM_Base_SetConfig+0x128>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d108      	bne.n	8007b96 <TIM_Base_SetConfig+0x4a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a33      	ldr	r2, [pc, #204]	@ (8007c68 <TIM_Base_SetConfig+0x11c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01b      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba4:	d017      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	@ (8007c6c <TIM_Base_SetConfig+0x120>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8007c70 <TIM_Base_SetConfig+0x124>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00f      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007c74 <TIM_Base_SetConfig+0x128>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c78 <TIM_Base_SetConfig+0x12c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d007      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8007c7c <TIM_Base_SetConfig+0x130>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007c80 <TIM_Base_SetConfig+0x134>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d108      	bne.n	8007be8 <TIM_Base_SetConfig+0x9c>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a16      	ldr	r2, [pc, #88]	@ (8007c68 <TIM_Base_SetConfig+0x11c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00f      	beq.n	8007c34 <TIM_Base_SetConfig+0xe8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a17      	ldr	r2, [pc, #92]	@ (8007c74 <TIM_Base_SetConfig+0x128>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00b      	beq.n	8007c34 <TIM_Base_SetConfig+0xe8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <TIM_Base_SetConfig+0x12c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d007      	beq.n	8007c34 <TIM_Base_SetConfig+0xe8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <TIM_Base_SetConfig+0x130>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_Base_SetConfig+0xe8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a14      	ldr	r2, [pc, #80]	@ (8007c80 <TIM_Base_SetConfig+0x134>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <TIM_Base_SetConfig+0xf0>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	615a      	str	r2, [r3, #20]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <TIM_Base_SetConfig+0x10e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40013400 	.word	0x40013400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800

08007c84 <TIM_OC1_SetConfig>:
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f023 0201 	bic.w	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	621a      	str	r2, [r3, #32]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f023 0302 	bic.w	r3, r3, #2
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a2c      	ldr	r2, [pc, #176]	@ (8007d90 <TIM_OC1_SetConfig+0x10c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00f      	beq.n	8007d04 <TIM_OC1_SetConfig+0x80>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8007d94 <TIM_OC1_SetConfig+0x110>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <TIM_OC1_SetConfig+0x80>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a2a      	ldr	r2, [pc, #168]	@ (8007d98 <TIM_OC1_SetConfig+0x114>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d007      	beq.n	8007d04 <TIM_OC1_SetConfig+0x80>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a29      	ldr	r2, [pc, #164]	@ (8007d9c <TIM_OC1_SetConfig+0x118>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC1_SetConfig+0x80>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a28      	ldr	r2, [pc, #160]	@ (8007da0 <TIM_OC1_SetConfig+0x11c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d10c      	bne.n	8007d1e <TIM_OC1_SetConfig+0x9a>
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f023 0308 	bic.w	r3, r3, #8
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a1b      	ldr	r2, [pc, #108]	@ (8007d90 <TIM_OC1_SetConfig+0x10c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00f      	beq.n	8007d46 <TIM_OC1_SetConfig+0xc2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a1a      	ldr	r2, [pc, #104]	@ (8007d94 <TIM_OC1_SetConfig+0x110>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00b      	beq.n	8007d46 <TIM_OC1_SetConfig+0xc2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a19      	ldr	r2, [pc, #100]	@ (8007d98 <TIM_OC1_SetConfig+0x114>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d007      	beq.n	8007d46 <TIM_OC1_SetConfig+0xc2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a18      	ldr	r2, [pc, #96]	@ (8007d9c <TIM_OC1_SetConfig+0x118>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d003      	beq.n	8007d46 <TIM_OC1_SetConfig+0xc2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <TIM_OC1_SetConfig+0x11c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d111      	bne.n	8007d6a <TIM_OC1_SetConfig+0xe6>
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	605a      	str	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	619a      	str	r2, [r3, #24]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	621a      	str	r2, [r3, #32]
 8007d84:	bf00      	nop
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	40013400 	.word	0x40013400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400
 8007da0:	40014800 	.word	0x40014800

08007da4 <TIM_OC2_SetConfig>:
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f023 0210 	bic.w	r2, r3, #16
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	621a      	str	r2, [r3, #32]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f023 0320 	bic.w	r3, r3, #32
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a28      	ldr	r2, [pc, #160]	@ (8007ea4 <TIM_OC2_SetConfig+0x100>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC2_SetConfig+0x6c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ea8 <TIM_OC2_SetConfig+0x104>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10d      	bne.n	8007e2c <TIM_OC2_SetConfig+0x88>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea4 <TIM_OC2_SetConfig+0x100>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_OC2_SetConfig+0xb0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea8 <TIM_OC2_SetConfig+0x104>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_OC2_SetConfig+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007eac <TIM_OC2_SetConfig+0x108>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_OC2_SetConfig+0xb0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb0 <TIM_OC2_SetConfig+0x10c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC2_SetConfig+0xb0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a19      	ldr	r2, [pc, #100]	@ (8007eb4 <TIM_OC2_SetConfig+0x110>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d113      	bne.n	8007e7c <TIM_OC2_SetConfig+0xd8>
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	619a      	str	r2, [r3, #24]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	621a      	str	r2, [r3, #32]
 8007e96:	bf00      	nop
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40012c00 	.word	0x40012c00
 8007ea8:	40013400 	.word	0x40013400
 8007eac:	40014000 	.word	0x40014000
 8007eb0:	40014400 	.word	0x40014400
 8007eb4:	40014800 	.word	0x40014800

08007eb8 <TIM_OC3_SetConfig>:
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	621a      	str	r2, [r3, #32]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a27      	ldr	r2, [pc, #156]	@ (8007fb4 <TIM_OC3_SetConfig+0xfc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d003      	beq.n	8007f22 <TIM_OC3_SetConfig+0x6a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a26      	ldr	r2, [pc, #152]	@ (8007fb8 <TIM_OC3_SetConfig+0x100>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d10d      	bne.n	8007f3e <TIM_OC3_SetConfig+0x86>
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <TIM_OC3_SetConfig+0xfc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00f      	beq.n	8007f66 <TIM_OC3_SetConfig+0xae>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <TIM_OC3_SetConfig+0x100>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00b      	beq.n	8007f66 <TIM_OC3_SetConfig+0xae>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	@ (8007fbc <TIM_OC3_SetConfig+0x104>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d007      	beq.n	8007f66 <TIM_OC3_SetConfig+0xae>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <TIM_OC3_SetConfig+0x108>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_OC3_SetConfig+0xae>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <TIM_OC3_SetConfig+0x10c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d113      	bne.n	8007f8e <TIM_OC3_SetConfig+0xd6>
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	605a      	str	r2, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	61da      	str	r2, [r3, #28]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	621a      	str	r2, [r3, #32]
 8007fa8:	bf00      	nop
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40013400 	.word	0x40013400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40014400 	.word	0x40014400
 8007fc4:	40014800 	.word	0x40014800

08007fc8 <TIM_OC4_SetConfig>:
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	621a      	str	r2, [r3, #32]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a28      	ldr	r2, [pc, #160]	@ (80080c8 <TIM_OC4_SetConfig+0x100>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_OC4_SetConfig+0x6c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a27      	ldr	r2, [pc, #156]	@ (80080cc <TIM_OC4_SetConfig+0x104>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d10d      	bne.n	8008050 <TIM_OC4_SetConfig+0x88>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <TIM_OC4_SetConfig+0x100>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00f      	beq.n	8008078 <TIM_OC4_SetConfig+0xb0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <TIM_OC4_SetConfig+0x104>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_OC4_SetConfig+0xb0>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <TIM_OC4_SetConfig+0x108>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_OC4_SetConfig+0xb0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1a      	ldr	r2, [pc, #104]	@ (80080d4 <TIM_OC4_SetConfig+0x10c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_OC4_SetConfig+0xb0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a19      	ldr	r2, [pc, #100]	@ (80080d8 <TIM_OC4_SetConfig+0x110>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d113      	bne.n	80080a0 <TIM_OC4_SetConfig+0xd8>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800807e:	613b      	str	r3, [r7, #16]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	019b      	lsls	r3, r3, #6
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	019b      	lsls	r3, r3, #6
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	61da      	str	r2, [r3, #28]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40012c00 	.word	0x40012c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	40014000 	.word	0x40014000
 80080d4:	40014400 	.word	0x40014400
 80080d8:	40014800 	.word	0x40014800

080080dc <TIM_OC5_SetConfig>:
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	621a      	str	r2, [r3, #32]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800810a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a17      	ldr	r2, [pc, #92]	@ (8008190 <TIM_OC5_SetConfig+0xb4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00f      	beq.n	8008156 <TIM_OC5_SetConfig+0x7a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a16      	ldr	r2, [pc, #88]	@ (8008194 <TIM_OC5_SetConfig+0xb8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00b      	beq.n	8008156 <TIM_OC5_SetConfig+0x7a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a15      	ldr	r2, [pc, #84]	@ (8008198 <TIM_OC5_SetConfig+0xbc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d007      	beq.n	8008156 <TIM_OC5_SetConfig+0x7a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a14      	ldr	r2, [pc, #80]	@ (800819c <TIM_OC5_SetConfig+0xc0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_OC5_SetConfig+0x7a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a13      	ldr	r2, [pc, #76]	@ (80081a0 <TIM_OC5_SetConfig+0xc4>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d109      	bne.n	800816a <TIM_OC5_SetConfig+0x8e>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	651a      	str	r2, [r3, #80]	@ 0x50
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	649a      	str	r2, [r3, #72]	@ 0x48
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	621a      	str	r2, [r3, #32]
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40013400 	.word	0x40013400
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800

080081a4 <TIM_OC6_SetConfig>:
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	051b      	lsls	r3, r3, #20
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a18      	ldr	r2, [pc, #96]	@ (800825c <TIM_OC6_SetConfig+0xb8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00f      	beq.n	8008220 <TIM_OC6_SetConfig+0x7c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a17      	ldr	r2, [pc, #92]	@ (8008260 <TIM_OC6_SetConfig+0xbc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00b      	beq.n	8008220 <TIM_OC6_SetConfig+0x7c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a16      	ldr	r2, [pc, #88]	@ (8008264 <TIM_OC6_SetConfig+0xc0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d007      	beq.n	8008220 <TIM_OC6_SetConfig+0x7c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a15      	ldr	r2, [pc, #84]	@ (8008268 <TIM_OC6_SetConfig+0xc4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d003      	beq.n	8008220 <TIM_OC6_SetConfig+0x7c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a14      	ldr	r2, [pc, #80]	@ (800826c <TIM_OC6_SetConfig+0xc8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d109      	bne.n	8008234 <TIM_OC6_SetConfig+0x90>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	029b      	lsls	r3, r3, #10
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	621a      	str	r2, [r3, #32]
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40013400 	.word	0x40013400
 8008264:	40014000 	.word	0x40014000
 8008268:	40014400 	.word	0x40014400
 800826c:	40014800 	.word	0x40014800

08008270 <TIM_TI1_ConfigInputStage>:
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f023 0201 	bic.w	r2, r3, #1
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	621a      	str	r2, [r3, #32]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	011b      	lsls	r3, r3, #4
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 030a 	bic.w	r3, r3, #10
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	619a      	str	r2, [r3, #24]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	621a      	str	r2, [r3, #32]
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <TIM_TI2_ConfigInputStage>:
 80082ce:	b480      	push	{r7}
 80082d0:	b087      	sub	sp, #28
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f023 0210 	bic.w	r2, r3, #16
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	621a      	str	r2, [r3, #32]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	619a      	str	r2, [r3, #24]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <TIM_ITRx_SetConfig>:
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	f043 0307 	orr.w	r3, r3, #7
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	609a      	str	r2, [r3, #8]
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <TIM_ETR_SetConfig>:
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	021a      	lsls	r2, r3, #8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	431a      	orrs	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	609a      	str	r2, [r3, #8]
 800839c:	bf00      	nop
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <TIM_CCxChannelCmd>:
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2201      	movs	r2, #1
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1a      	ldr	r2, [r3, #32]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	43db      	mvns	r3, r3
 80083ca:	401a      	ands	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	621a      	str	r2, [r3, #32]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	fa01 f303 	lsl.w	r3, r1, r3
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <HAL_TIMEx_PWMN_Start>:
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <HAL_TIMEx_PWMN_Start+0x24>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	e022      	b.n	800845e <HAL_TIMEx_PWMN_Start+0x6a>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d109      	bne.n	8008432 <HAL_TIMEx_PWMN_Start+0x3e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	bf14      	ite	ne
 800842a:	2301      	movne	r3, #1
 800842c:	2300      	moveq	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e015      	b.n	800845e <HAL_TIMEx_PWMN_Start+0x6a>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d109      	bne.n	800844c <HAL_TIMEx_PWMN_Start+0x58>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e008      	b.n	800845e <HAL_TIMEx_PWMN_Start+0x6a>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_TIMEx_PWMN_Start+0x72>
 8008462:	2301      	movs	r3, #1
 8008464:	e069      	b.n	800853a <HAL_TIMEx_PWMN_Start+0x146>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <HAL_TIMEx_PWMN_Start+0x82>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008474:	e013      	b.n	800849e <HAL_TIMEx_PWMN_Start+0xaa>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d104      	bne.n	8008486 <HAL_TIMEx_PWMN_Start+0x92>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008484:	e00b      	b.n	800849e <HAL_TIMEx_PWMN_Start+0xaa>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d104      	bne.n	8008496 <HAL_TIMEx_PWMN_Start+0xa2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008494:	e003      	b.n	800849e <HAL_TIMEx_PWMN_Start+0xaa>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2204      	movs	r2, #4
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fa0a 	bl	80088c0 <TIM_CCxNChannelCmd>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a20      	ldr	r2, [pc, #128]	@ (8008544 <HAL_TIMEx_PWMN_Start+0x150>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d018      	beq.n	80084f8 <HAL_TIMEx_PWMN_Start+0x104>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ce:	d013      	beq.n	80084f8 <HAL_TIMEx_PWMN_Start+0x104>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <HAL_TIMEx_PWMN_Start+0x154>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00e      	beq.n	80084f8 <HAL_TIMEx_PWMN_Start+0x104>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <HAL_TIMEx_PWMN_Start+0x158>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d009      	beq.n	80084f8 <HAL_TIMEx_PWMN_Start+0x104>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <HAL_TIMEx_PWMN_Start+0x15c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d004      	beq.n	80084f8 <HAL_TIMEx_PWMN_Start+0x104>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a18      	ldr	r2, [pc, #96]	@ (8008554 <HAL_TIMEx_PWMN_Start+0x160>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d115      	bne.n	8008524 <HAL_TIMEx_PWMN_Start+0x130>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	4b16      	ldr	r3, [pc, #88]	@ (8008558 <HAL_TIMEx_PWMN_Start+0x164>)
 8008500:	4013      	ands	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b06      	cmp	r3, #6
 8008508:	d015      	beq.n	8008536 <HAL_TIMEx_PWMN_Start+0x142>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008510:	d011      	beq.n	8008536 <HAL_TIMEx_PWMN_Start+0x142>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0201 	orr.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e008      	b.n	8008536 <HAL_TIMEx_PWMN_Start+0x142>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0201 	orr.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e000      	b.n	8008538 <HAL_TIMEx_PWMN_Start+0x144>
 8008536:	bf00      	nop
 8008538:	2300      	movs	r3, #0
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40000400 	.word	0x40000400
 800854c:	40000800 	.word	0x40000800
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	00010007 	.word	0x00010007

0800855c <HAL_TIMEx_PWMN_Stop>:
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f9a6 	bl	80088c0 <TIM_CCxNChannelCmd>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <HAL_TIMEx_PWMN_Stop+0x48>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a1a      	ldr	r2, [r3, #32]
 800858a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_TIMEx_PWMN_Stop+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10f      	bne.n	80085d4 <HAL_TIMEx_PWMN_Stop+0x78>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6a1a      	ldr	r2, [r3, #32]
 80085ba:	f244 4344 	movw	r3, #17476	@ 0x4444
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d107      	bne.n	80085d4 <HAL_TIMEx_PWMN_Stop+0x78>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <HAL_TIMEx_PWMN_Stop+0x88>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e2:	e013      	b.n	800860c <HAL_TIMEx_PWMN_Stop+0xb0>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d104      	bne.n	80085f4 <HAL_TIMEx_PWMN_Stop+0x98>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f2:	e00b      	b.n	800860c <HAL_TIMEx_PWMN_Stop+0xb0>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d104      	bne.n	8008604 <HAL_TIMEx_PWMN_Stop+0xa8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008602:	e003      	b.n	800860c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800860c:	2300      	movs	r3, #0
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_TIMEx_MasterConfigSynchronization>:
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e065      	b.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a2c      	ldr	r2, [pc, #176]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a2b      	ldr	r2, [pc, #172]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d108      	bne.n	8008676 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800867c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	605a      	str	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1b      	ldr	r2, [pc, #108]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d018      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a6:	d013      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a18      	ldr	r2, [pc, #96]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00e      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a17      	ldr	r2, [pc, #92]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d009      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a12      	ldr	r2, [pc, #72]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d004      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a13      	ldr	r2, [pc, #76]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10c      	bne.n	80086ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80086fa:	2300      	movs	r3, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40013400 	.word	0x40013400
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40014000 	.word	0x40014000

0800871c <HAL_TIMEx_ConfigBreakDeadTime>:
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008734:	2302      	movs	r3, #2
 8008736:	e073      	b.n	8008820 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a19      	ldr	r2, [pc, #100]	@ (800882c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d11c      	bne.n	800880e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087de:	051b      	lsls	r3, r3, #20
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	645a      	str	r2, [r3, #68]	@ 0x44
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800881e:	2300      	movs	r3, #0
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40013400 	.word	0x40013400

08008834 <HAL_TIMEx_CommutCallback>:
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_BreakCallback>:
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIMEx_Break2Callback>:
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIMEx_EncoderIndexCallback>:
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIMEx_DirectionChangeCallback>:
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIMEx_IndexErrorCallback>:
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_TransitionErrorCallback>:
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <TIM_CCxNChannelCmd>:
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	2204      	movs	r2, #4
 80088d4:	fa02 f303 	lsl.w	r3, r2, r3
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a1a      	ldr	r2, [r3, #32]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	401a      	ands	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	621a      	str	r2, [r3, #32]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1a      	ldr	r2, [r3, #32]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	fa01 f303 	lsl.w	r3, r1, r3
 80088f8:	431a      	orrs	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	621a      	str	r2, [r3, #32]
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_UART_Init>:
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_UART_Init+0x12>
 8008918:	2301      	movs	r3, #1
 800891a:	e042      	b.n	80089a2 <HAL_UART_Init+0x98>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_UART_Init+0x2a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fa fc12 	bl	8003158 <HAL_UART_MspInit>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2224      	movs	r2, #36	@ 0x24
 8008938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <HAL_UART_Init+0x50>
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fee5 	bl	8009724 <UART_AdvFeatureConfig>
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc16 	bl	800918c <UART_SetConfig>
 8008960:	4603      	mov	r3, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_UART_Init+0x60>
 8008966:	2301      	movs	r3, #1
 8008968:	e01b      	b.n	80089a2 <HAL_UART_Init+0x98>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0201 	orr.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 ff64 	bl	8009868 <UART_CheckIdleState>
 80089a0:	4603      	mov	r3, r0
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_UART_Transmit>:
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b08a      	sub	sp, #40	@ 0x28
 80089ae:	af02      	add	r7, sp, #8
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d17b      	bne.n	8008abc <HAL_UART_Transmit+0x112>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_UART_Transmit+0x26>
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_UART_Transmit+0x2a>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e074      	b.n	8008abe <HAL_UART_Transmit+0x114>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2221      	movs	r2, #33	@ 0x21
 80089e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80089e4:	f7fa feac 	bl	8003740 <HAL_GetTick>
 80089e8:	6178      	str	r0, [r7, #20]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a02:	d108      	bne.n	8008a16 <HAL_UART_Transmit+0x6c>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <HAL_UART_Transmit+0x6c>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	e003      	b.n	8008a1e <HAL_UART_Transmit+0x74>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	e030      	b.n	8008a82 <HAL_UART_Transmit+0xd8>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2180      	movs	r1, #128	@ 0x80
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 ffc6 	bl	80099bc <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <HAL_UART_Transmit+0x98>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e03d      	b.n	8008abe <HAL_UART_Transmit+0x114>
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <HAL_UART_Transmit+0xb6>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	e007      	b.n	8008a70 <HAL_UART_Transmit+0xc6>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1c8      	bne.n	8008a20 <HAL_UART_Transmit+0x76>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2200      	movs	r2, #0
 8008a96:	2140      	movs	r1, #64	@ 0x40
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 ff8f 	bl	80099bc <UART_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_UART_Transmit+0x106>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008aac:	2303      	movs	r3, #3
 8008aae:	e006      	b.n	8008abe <HAL_UART_Transmit+0x114>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e000      	b.n	8008abe <HAL_UART_Transmit+0x114>
 8008abc:	2302      	movs	r3, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <HAL_UART_IRQHandler>:
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b0ba      	sub	sp, #232	@ 0xe8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008aee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008af2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008af6:	4013      	ands	r3, r2
 8008af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11b      	bne.n	8008b3c <HAL_UART_IRQHandler+0x74>
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d015      	beq.n	8008b3c <HAL_UART_IRQHandler+0x74>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d105      	bne.n	8008b28 <HAL_UART_IRQHandler+0x60>
 8008b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <HAL_UART_IRQHandler+0x74>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8300 	beq.w	8009132 <HAL_UART_IRQHandler+0x66a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
 8008b3a:	e2fa      	b.n	8009132 <HAL_UART_IRQHandler+0x66a>
 8008b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 8123 	beq.w	8008d8c <HAL_UART_IRQHandler+0x2c4>
 8008b46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008d80 <HAL_UART_IRQHandler+0x2b8>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_UART_IRQHandler+0x98>
 8008b52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b56:	4b8b      	ldr	r3, [pc, #556]	@ (8008d84 <HAL_UART_IRQHandler+0x2bc>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8116 	beq.w	8008d8c <HAL_UART_IRQHandler+0x2c4>
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d011      	beq.n	8008b90 <HAL_UART_IRQHandler+0xc8>
 8008b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <HAL_UART_IRQHandler+0xc8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	621a      	str	r2, [r3, #32]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b86:	f043 0201 	orr.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d011      	beq.n	8008bc0 <HAL_UART_IRQHandler+0xf8>
 8008b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <HAL_UART_IRQHandler+0xf8>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2202      	movs	r2, #2
 8008bae:	621a      	str	r2, [r3, #32]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb6:	f043 0204 	orr.w	r2, r3, #4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d011      	beq.n	8008bf0 <HAL_UART_IRQHandler+0x128>
 8008bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <HAL_UART_IRQHandler+0x128>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2204      	movs	r2, #4
 8008bde:	621a      	str	r2, [r3, #32]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be6:	f043 0202 	orr.w	r2, r3, #2
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d017      	beq.n	8008c2c <HAL_UART_IRQHandler+0x164>
 8008bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <HAL_UART_IRQHandler+0x14c>
 8008c08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008d80 <HAL_UART_IRQHandler+0x2b8>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <HAL_UART_IRQHandler+0x164>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	621a      	str	r2, [r3, #32]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c22:	f043 0208 	orr.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d012      	beq.n	8008c5e <HAL_UART_IRQHandler+0x196>
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00c      	beq.n	8008c5e <HAL_UART_IRQHandler+0x196>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c4c:	621a      	str	r2, [r3, #32]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c54:	f043 0220 	orr.w	r2, r3, #32
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8266 	beq.w	8009136 <HAL_UART_IRQHandler+0x66e>
 8008c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d013      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1d6>
 8008c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <HAL_UART_IRQHandler+0x1c6>
 8008c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1d6>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_UART_IRQHandler+0x1d6>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb2:	2b40      	cmp	r3, #64	@ 0x40
 8008cb4:	d005      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x1fa>
 8008cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d054      	beq.n	8008d6c <HAL_UART_IRQHandler+0x2a4>
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fee7 	bl	8009a96 <UART_EndRxTransfer>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d146      	bne.n	8008d64 <HAL_UART_IRQHandler+0x29c>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1d9      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x20e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d017      	beq.n	8008d5c <HAL_UART_IRQHandler+0x294>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d32:	4a15      	ldr	r2, [pc, #84]	@ (8008d88 <HAL_UART_IRQHandler+0x2c0>)
 8008d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fa ff0e 	bl	8003b5e <HAL_DMA_Abort_IT>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d019      	beq.n	8008d7c <HAL_UART_IRQHandler+0x2b4>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008d56:	4610      	mov	r0, r2
 8008d58:	4798      	blx	r3
 8008d5a:	e00f      	b.n	8008d7c <HAL_UART_IRQHandler+0x2b4>
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f9ff 	bl	8009160 <HAL_UART_ErrorCallback>
 8008d62:	e00b      	b.n	8008d7c <HAL_UART_IRQHandler+0x2b4>
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f9fb 	bl	8009160 <HAL_UART_ErrorCallback>
 8008d6a:	e007      	b.n	8008d7c <HAL_UART_IRQHandler+0x2b4>
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f9f7 	bl	8009160 <HAL_UART_ErrorCallback>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008d7a:	e1dc      	b.n	8009136 <HAL_UART_IRQHandler+0x66e>
 8008d7c:	bf00      	nop
 8008d7e:	e1da      	b.n	8009136 <HAL_UART_IRQHandler+0x66e>
 8008d80:	10000001 	.word	0x10000001
 8008d84:	04000120 	.word	0x04000120
 8008d88:	08009b63 	.word	0x08009b63
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	f040 8170 	bne.w	8009076 <HAL_UART_IRQHandler+0x5ae>
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8169 	beq.w	8009076 <HAL_UART_IRQHandler+0x5ae>
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8162 	beq.w	8009076 <HAL_UART_IRQHandler+0x5ae>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2210      	movs	r2, #16
 8008db8:	621a      	str	r2, [r3, #32]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc4:	2b40      	cmp	r3, #64	@ 0x40
 8008dc6:	f040 80d8 	bne.w	8008f7a <HAL_UART_IRQHandler+0x4b2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8008dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80af 	beq.w	8008f40 <HAL_UART_IRQHandler+0x478>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008de8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dec:	429a      	cmp	r2, r3
 8008dee:	f080 80a7 	bcs.w	8008f40 <HAL_UART_IRQHandler+0x478>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008df8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f040 8087 	bne.w	8008f1e <HAL_UART_IRQHandler+0x456>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1da      	bne.n	8008e10 <HAL_UART_IRQHandler+0x348>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3308      	adds	r3, #8
 8008e60:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e6c:	f023 0301 	bic.w	r3, r3, #1
 8008e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e1      	bne.n	8008e5a <HAL_UART_IRQHandler+0x392>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008eba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ebe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ec0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e3      	bne.n	8008e96 <HAL_UART_IRQHandler+0x3ce>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eec:	f023 0310 	bic.w	r3, r3, #16
 8008ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f00:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e4      	bne.n	8008edc <HAL_UART_IRQHandler+0x414>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fa fdc7 	bl	8003aac <HAL_DMA_Abort>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f91b 	bl	8009174 <HAL_UARTEx_RxEventCallback>
 8008f3e:	e0fc      	b.n	800913a <HAL_UART_IRQHandler+0x672>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	f040 80f5 	bne.w	800913a <HAL_UART_IRQHandler+0x672>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	f040 80eb 	bne.w	800913a <HAL_UART_IRQHandler+0x672>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f8fe 	bl	8009174 <HAL_UARTEx_RxEventCallback>
 8008f78:	e0df      	b.n	800913a <HAL_UART_IRQHandler+0x672>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80d1 	beq.w	800913e <HAL_UART_IRQHandler+0x676>
 8008f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 80cc 	beq.w	800913e <HAL_UART_IRQHandler+0x676>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fca:	643a      	str	r2, [r7, #64]	@ 0x40
 8008fcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e4      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x4de>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	623b      	str	r3, [r7, #32]
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009004:	633a      	str	r2, [r7, #48]	@ 0x30
 8009006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800900a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e1      	bne.n	8008fdc <HAL_UART_IRQHandler+0x514>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	675a      	str	r2, [r3, #116]	@ 0x74
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	613b      	str	r3, [r7, #16]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f023 0310 	bic.w	r3, r3, #16
 8009040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	61ba      	str	r2, [r7, #24]
 8009052:	69b9      	ldr	r1, [r7, #24]
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e4      	bne.n	800902c <HAL_UART_IRQHandler+0x564>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	671a      	str	r2, [r3, #112]	@ 0x70
 8009068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f880 	bl	8009174 <HAL_UARTEx_RxEventCallback>
 8009074:	e063      	b.n	800913e <HAL_UART_IRQHandler+0x676>
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800907a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <HAL_UART_IRQHandler+0x5d8>
 8009082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <HAL_UART_IRQHandler+0x5d8>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009096:	621a      	str	r2, [r3, #32]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fd9f 	bl	8009bdc <HAL_UARTEx_WakeupCallback>
 800909e:	e051      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 80090a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d014      	beq.n	80090d6 <HAL_UART_IRQHandler+0x60e>
 80090ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <HAL_UART_IRQHandler+0x5fc>
 80090b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <HAL_UART_IRQHandler+0x60e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d03a      	beq.n	8009142 <HAL_UART_IRQHandler+0x67a>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	e035      	b.n	8009142 <HAL_UART_IRQHandler+0x67a>
 80090d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d009      	beq.n	80090f6 <HAL_UART_IRQHandler+0x62e>
 80090e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_UART_IRQHandler+0x62e>
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fd49 	bl	8009b86 <UART_EndTransmit_IT>
 80090f4:	e026      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d009      	beq.n	8009116 <HAL_UART_IRQHandler+0x64e>
 8009102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009106:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_UART_IRQHandler+0x64e>
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fd78 	bl	8009c04 <HAL_UARTEx_TxFifoEmptyCallback>
 8009114:	e016      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 8009116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d010      	beq.n	8009144 <HAL_UART_IRQHandler+0x67c>
 8009122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009126:	2b00      	cmp	r3, #0
 8009128:	da0c      	bge.n	8009144 <HAL_UART_IRQHandler+0x67c>
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fd60 	bl	8009bf0 <HAL_UARTEx_RxFifoFullCallback>
 8009130:	e008      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 8009132:	bf00      	nop
 8009134:	e006      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 8009136:	bf00      	nop
 8009138:	e004      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 800913a:	bf00      	nop
 800913c:	e002      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_UART_IRQHandler+0x67c>
 8009142:	bf00      	nop
 8009144:	37e8      	adds	r7, #232	@ 0xe8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop

0800914c <HAL_UART_TxCpltCallback>:
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UART_ErrorCallback>:
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_UARTEx_RxEventCallback>:
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	807b      	strh	r3, [r7, #2]
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <UART_SetConfig>:
 800918c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009190:	b08c      	sub	sp, #48	@ 0x30
 8009192:	af00      	add	r7, sp, #0
 8009194:	6178      	str	r0, [r7, #20]
 8009196:	2300      	movs	r3, #0
 8009198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4bab      	ldr	r3, [pc, #684]	@ (8009468 <UART_SetConfig+0x2dc>)
 80091bc:	4013      	ands	r3, r2
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	430b      	orrs	r3, r1
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4aa0      	ldr	r2, [pc, #640]	@ (800946c <UART_SetConfig+0x2e0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <UART_SetConfig+0x6c>
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009202:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800920c:	430b      	orrs	r3, r1
 800920e:	6093      	str	r3, [r2, #8]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009216:	f023 010f 	bic.w	r1, r3, #15
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a91      	ldr	r2, [pc, #580]	@ (8009470 <UART_SetConfig+0x2e4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d125      	bne.n	800927c <UART_SetConfig+0xf0>
 8009230:	4b90      	ldr	r3, [pc, #576]	@ (8009474 <UART_SetConfig+0x2e8>)
 8009232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	2b03      	cmp	r3, #3
 800923c:	d81a      	bhi.n	8009274 <UART_SetConfig+0xe8>
 800923e:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <UART_SetConfig+0xb8>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	08009255 	.word	0x08009255
 8009248:	08009265 	.word	0x08009265
 800924c:	0800925d 	.word	0x0800925d
 8009250:	0800926d 	.word	0x0800926d
 8009254:	2301      	movs	r3, #1
 8009256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800925a:	e0d6      	b.n	800940a <UART_SetConfig+0x27e>
 800925c:	2302      	movs	r3, #2
 800925e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009262:	e0d2      	b.n	800940a <UART_SetConfig+0x27e>
 8009264:	2304      	movs	r3, #4
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800926a:	e0ce      	b.n	800940a <UART_SetConfig+0x27e>
 800926c:	2308      	movs	r3, #8
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009272:	e0ca      	b.n	800940a <UART_SetConfig+0x27e>
 8009274:	2310      	movs	r3, #16
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800927a:	e0c6      	b.n	800940a <UART_SetConfig+0x27e>
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a7d      	ldr	r2, [pc, #500]	@ (8009478 <UART_SetConfig+0x2ec>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d138      	bne.n	80092f8 <UART_SetConfig+0x16c>
 8009286:	4b7b      	ldr	r3, [pc, #492]	@ (8009474 <UART_SetConfig+0x2e8>)
 8009288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800928c:	f003 030c 	and.w	r3, r3, #12
 8009290:	2b0c      	cmp	r3, #12
 8009292:	d82d      	bhi.n	80092f0 <UART_SetConfig+0x164>
 8009294:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <UART_SetConfig+0x110>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092d1 	.word	0x080092d1
 80092a0:	080092f1 	.word	0x080092f1
 80092a4:	080092f1 	.word	0x080092f1
 80092a8:	080092f1 	.word	0x080092f1
 80092ac:	080092e1 	.word	0x080092e1
 80092b0:	080092f1 	.word	0x080092f1
 80092b4:	080092f1 	.word	0x080092f1
 80092b8:	080092f1 	.word	0x080092f1
 80092bc:	080092d9 	.word	0x080092d9
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	080092f1 	.word	0x080092f1
 80092c8:	080092f1 	.word	0x080092f1
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092d6:	e098      	b.n	800940a <UART_SetConfig+0x27e>
 80092d8:	2302      	movs	r3, #2
 80092da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092de:	e094      	b.n	800940a <UART_SetConfig+0x27e>
 80092e0:	2304      	movs	r3, #4
 80092e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e6:	e090      	b.n	800940a <UART_SetConfig+0x27e>
 80092e8:	2308      	movs	r3, #8
 80092ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ee:	e08c      	b.n	800940a <UART_SetConfig+0x27e>
 80092f0:	2310      	movs	r3, #16
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092f6:	e088      	b.n	800940a <UART_SetConfig+0x27e>
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a5f      	ldr	r2, [pc, #380]	@ (800947c <UART_SetConfig+0x2f0>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d125      	bne.n	800934e <UART_SetConfig+0x1c2>
 8009302:	4b5c      	ldr	r3, [pc, #368]	@ (8009474 <UART_SetConfig+0x2e8>)
 8009304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009308:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d016      	beq.n	800933e <UART_SetConfig+0x1b2>
 8009310:	2b30      	cmp	r3, #48	@ 0x30
 8009312:	d818      	bhi.n	8009346 <UART_SetConfig+0x1ba>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d00a      	beq.n	800932e <UART_SetConfig+0x1a2>
 8009318:	2b20      	cmp	r3, #32
 800931a:	d814      	bhi.n	8009346 <UART_SetConfig+0x1ba>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <UART_SetConfig+0x19a>
 8009320:	2b10      	cmp	r3, #16
 8009322:	d008      	beq.n	8009336 <UART_SetConfig+0x1aa>
 8009324:	e00f      	b.n	8009346 <UART_SetConfig+0x1ba>
 8009326:	2300      	movs	r3, #0
 8009328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932c:	e06d      	b.n	800940a <UART_SetConfig+0x27e>
 800932e:	2302      	movs	r3, #2
 8009330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009334:	e069      	b.n	800940a <UART_SetConfig+0x27e>
 8009336:	2304      	movs	r3, #4
 8009338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933c:	e065      	b.n	800940a <UART_SetConfig+0x27e>
 800933e:	2308      	movs	r3, #8
 8009340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009344:	e061      	b.n	800940a <UART_SetConfig+0x27e>
 8009346:	2310      	movs	r3, #16
 8009348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800934c:	e05d      	b.n	800940a <UART_SetConfig+0x27e>
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a4b      	ldr	r2, [pc, #300]	@ (8009480 <UART_SetConfig+0x2f4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d125      	bne.n	80093a4 <UART_SetConfig+0x218>
 8009358:	4b46      	ldr	r3, [pc, #280]	@ (8009474 <UART_SetConfig+0x2e8>)
 800935a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009362:	2bc0      	cmp	r3, #192	@ 0xc0
 8009364:	d016      	beq.n	8009394 <UART_SetConfig+0x208>
 8009366:	2bc0      	cmp	r3, #192	@ 0xc0
 8009368:	d818      	bhi.n	800939c <UART_SetConfig+0x210>
 800936a:	2b80      	cmp	r3, #128	@ 0x80
 800936c:	d00a      	beq.n	8009384 <UART_SetConfig+0x1f8>
 800936e:	2b80      	cmp	r3, #128	@ 0x80
 8009370:	d814      	bhi.n	800939c <UART_SetConfig+0x210>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <UART_SetConfig+0x1f0>
 8009376:	2b40      	cmp	r3, #64	@ 0x40
 8009378:	d008      	beq.n	800938c <UART_SetConfig+0x200>
 800937a:	e00f      	b.n	800939c <UART_SetConfig+0x210>
 800937c:	2300      	movs	r3, #0
 800937e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009382:	e042      	b.n	800940a <UART_SetConfig+0x27e>
 8009384:	2302      	movs	r3, #2
 8009386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938a:	e03e      	b.n	800940a <UART_SetConfig+0x27e>
 800938c:	2304      	movs	r3, #4
 800938e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009392:	e03a      	b.n	800940a <UART_SetConfig+0x27e>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800939a:	e036      	b.n	800940a <UART_SetConfig+0x27e>
 800939c:	2310      	movs	r3, #16
 800939e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093a2:	e032      	b.n	800940a <UART_SetConfig+0x27e>
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a30      	ldr	r2, [pc, #192]	@ (800946c <UART_SetConfig+0x2e0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d12a      	bne.n	8009404 <UART_SetConfig+0x278>
 80093ae:	4b31      	ldr	r3, [pc, #196]	@ (8009474 <UART_SetConfig+0x2e8>)
 80093b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093bc:	d01a      	beq.n	80093f4 <UART_SetConfig+0x268>
 80093be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093c2:	d81b      	bhi.n	80093fc <UART_SetConfig+0x270>
 80093c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c8:	d00c      	beq.n	80093e4 <UART_SetConfig+0x258>
 80093ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ce:	d815      	bhi.n	80093fc <UART_SetConfig+0x270>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <UART_SetConfig+0x250>
 80093d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d8:	d008      	beq.n	80093ec <UART_SetConfig+0x260>
 80093da:	e00f      	b.n	80093fc <UART_SetConfig+0x270>
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e2:	e012      	b.n	800940a <UART_SetConfig+0x27e>
 80093e4:	2302      	movs	r3, #2
 80093e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ea:	e00e      	b.n	800940a <UART_SetConfig+0x27e>
 80093ec:	2304      	movs	r3, #4
 80093ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093f2:	e00a      	b.n	800940a <UART_SetConfig+0x27e>
 80093f4:	2308      	movs	r3, #8
 80093f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093fa:	e006      	b.n	800940a <UART_SetConfig+0x27e>
 80093fc:	2310      	movs	r3, #16
 80093fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009402:	e002      	b.n	800940a <UART_SetConfig+0x27e>
 8009404:	2310      	movs	r3, #16
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a17      	ldr	r2, [pc, #92]	@ (800946c <UART_SetConfig+0x2e0>)
 8009410:	4293      	cmp	r3, r2
 8009412:	f040 80a8 	bne.w	8009566 <UART_SetConfig+0x3da>
 8009416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800941a:	2b08      	cmp	r3, #8
 800941c:	d834      	bhi.n	8009488 <UART_SetConfig+0x2fc>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <UART_SetConfig+0x298>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009449 	.word	0x08009449
 8009428:	08009489 	.word	0x08009489
 800942c:	08009451 	.word	0x08009451
 8009430:	08009489 	.word	0x08009489
 8009434:	08009457 	.word	0x08009457
 8009438:	08009489 	.word	0x08009489
 800943c:	08009489 	.word	0x08009489
 8009440:	08009489 	.word	0x08009489
 8009444:	0800945f 	.word	0x0800945f
 8009448:	f7fc fa46 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 800944c:	6278      	str	r0, [r7, #36]	@ 0x24
 800944e:	e021      	b.n	8009494 <UART_SetConfig+0x308>
 8009450:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <UART_SetConfig+0x2f8>)
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
 8009454:	e01e      	b.n	8009494 <UART_SetConfig+0x308>
 8009456:	f7fc f9d3 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 800945a:	6278      	str	r0, [r7, #36]	@ 0x24
 800945c:	e01a      	b.n	8009494 <UART_SetConfig+0x308>
 800945e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
 8009464:	e016      	b.n	8009494 <UART_SetConfig+0x308>
 8009466:	bf00      	nop
 8009468:	cfff69f3 	.word	0xcfff69f3
 800946c:	40008000 	.word	0x40008000
 8009470:	40013800 	.word	0x40013800
 8009474:	40021000 	.word	0x40021000
 8009478:	40004400 	.word	0x40004400
 800947c:	40004800 	.word	0x40004800
 8009480:	40004c00 	.word	0x40004c00
 8009484:	00f42400 	.word	0x00f42400
 8009488:	2300      	movs	r3, #0
 800948a:	627b      	str	r3, [r7, #36]	@ 0x24
 800948c:	2301      	movs	r3, #1
 800948e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009492:	bf00      	nop
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 812a 	beq.w	80096f0 <UART_SetConfig+0x564>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	4a9e      	ldr	r2, [pc, #632]	@ (800971c <UART_SetConfig+0x590>)
 80094a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4413      	add	r3, r2
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d305      	bcc.n	80094cc <UART_SetConfig+0x340>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	031b      	lsls	r3, r3, #12
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d903      	bls.n	80094d4 <UART_SetConfig+0x348>
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094d2:	e10d      	b.n	80096f0 <UART_SetConfig+0x564>
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	2200      	movs	r2, #0
 80094d8:	60bb      	str	r3, [r7, #8]
 80094da:	60fa      	str	r2, [r7, #12]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	4a8e      	ldr	r2, [pc, #568]	@ (800971c <UART_SetConfig+0x590>)
 80094e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2200      	movs	r2, #0
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094f6:	f7f7 fb9f 	bl	8000c38 <__aeabi_uldivmod>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4610      	mov	r0, r2
 8009500:	4619      	mov	r1, r3
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	020b      	lsls	r3, r1, #8
 800950c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009510:	0202      	lsls	r2, r0, #8
 8009512:	6979      	ldr	r1, [r7, #20]
 8009514:	6849      	ldr	r1, [r1, #4]
 8009516:	0849      	lsrs	r1, r1, #1
 8009518:	2000      	movs	r0, #0
 800951a:	460c      	mov	r4, r1
 800951c:	4605      	mov	r5, r0
 800951e:	eb12 0804 	adds.w	r8, r2, r4
 8009522:	eb43 0905 	adc.w	r9, r3, r5
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	469a      	mov	sl, r3
 800952e:	4693      	mov	fp, r2
 8009530:	4652      	mov	r2, sl
 8009532:	465b      	mov	r3, fp
 8009534:	4640      	mov	r0, r8
 8009536:	4649      	mov	r1, r9
 8009538:	f7f7 fb7e 	bl	8000c38 <__aeabi_uldivmod>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4613      	mov	r3, r2
 8009542:	623b      	str	r3, [r7, #32]
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800954a:	d308      	bcc.n	800955e <UART_SetConfig+0x3d2>
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009552:	d204      	bcs.n	800955e <UART_SetConfig+0x3d2>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	60da      	str	r2, [r3, #12]
 800955c:	e0c8      	b.n	80096f0 <UART_SetConfig+0x564>
 800955e:	2301      	movs	r3, #1
 8009560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009564:	e0c4      	b.n	80096f0 <UART_SetConfig+0x564>
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800956e:	d167      	bne.n	8009640 <UART_SetConfig+0x4b4>
 8009570:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009574:	2b08      	cmp	r3, #8
 8009576:	d828      	bhi.n	80095ca <UART_SetConfig+0x43e>
 8009578:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <UART_SetConfig+0x3f4>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095a5 	.word	0x080095a5
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095b5 	.word	0x080095b5
 800958c:	080095cb 	.word	0x080095cb
 8009590:	080095bb 	.word	0x080095bb
 8009594:	080095cb 	.word	0x080095cb
 8009598:	080095cb 	.word	0x080095cb
 800959c:	080095cb 	.word	0x080095cb
 80095a0:	080095c3 	.word	0x080095c3
 80095a4:	f7fc f998 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 80095a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095aa:	e014      	b.n	80095d6 <UART_SetConfig+0x44a>
 80095ac:	f7fc f9aa 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 80095b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80095b2:	e010      	b.n	80095d6 <UART_SetConfig+0x44a>
 80095b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009720 <UART_SetConfig+0x594>)
 80095b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b8:	e00d      	b.n	80095d6 <UART_SetConfig+0x44a>
 80095ba:	f7fc f921 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 80095be:	6278      	str	r0, [r7, #36]	@ 0x24
 80095c0:	e009      	b.n	80095d6 <UART_SetConfig+0x44a>
 80095c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095c8:	e005      	b.n	80095d6 <UART_SetConfig+0x44a>
 80095ca:	2300      	movs	r3, #0
 80095cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095d4:	bf00      	nop
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 8089 	beq.w	80096f0 <UART_SetConfig+0x564>
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e2:	4a4e      	ldr	r2, [pc, #312]	@ (800971c <UART_SetConfig+0x590>)
 80095e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095e8:	461a      	mov	r2, r3
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f0:	005a      	lsls	r2, r3, #1
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	085b      	lsrs	r3, r3, #1
 80095f8:	441a      	add	r2, r3
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009602:	623b      	str	r3, [r7, #32]
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	2b0f      	cmp	r3, #15
 8009608:	d916      	bls.n	8009638 <UART_SetConfig+0x4ac>
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009610:	d212      	bcs.n	8009638 <UART_SetConfig+0x4ac>
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f023 030f 	bic.w	r3, r3, #15
 800961a:	83fb      	strh	r3, [r7, #30]
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	b29b      	uxth	r3, r3
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	b29a      	uxth	r2, r3
 8009628:	8bfb      	ldrh	r3, [r7, #30]
 800962a:	4313      	orrs	r3, r2
 800962c:	83fb      	strh	r3, [r7, #30]
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	8bfa      	ldrh	r2, [r7, #30]
 8009634:	60da      	str	r2, [r3, #12]
 8009636:	e05b      	b.n	80096f0 <UART_SetConfig+0x564>
 8009638:	2301      	movs	r3, #1
 800963a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800963e:	e057      	b.n	80096f0 <UART_SetConfig+0x564>
 8009640:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009644:	2b08      	cmp	r3, #8
 8009646:	d828      	bhi.n	800969a <UART_SetConfig+0x50e>
 8009648:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <UART_SetConfig+0x4c4>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009675 	.word	0x08009675
 8009654:	0800967d 	.word	0x0800967d
 8009658:	08009685 	.word	0x08009685
 800965c:	0800969b 	.word	0x0800969b
 8009660:	0800968b 	.word	0x0800968b
 8009664:	0800969b 	.word	0x0800969b
 8009668:	0800969b 	.word	0x0800969b
 800966c:	0800969b 	.word	0x0800969b
 8009670:	08009693 	.word	0x08009693
 8009674:	f7fc f930 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8009678:	6278      	str	r0, [r7, #36]	@ 0x24
 800967a:	e014      	b.n	80096a6 <UART_SetConfig+0x51a>
 800967c:	f7fc f942 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 8009680:	6278      	str	r0, [r7, #36]	@ 0x24
 8009682:	e010      	b.n	80096a6 <UART_SetConfig+0x51a>
 8009684:	4b26      	ldr	r3, [pc, #152]	@ (8009720 <UART_SetConfig+0x594>)
 8009686:	627b      	str	r3, [r7, #36]	@ 0x24
 8009688:	e00d      	b.n	80096a6 <UART_SetConfig+0x51a>
 800968a:	f7fc f8b9 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 800968e:	6278      	str	r0, [r7, #36]	@ 0x24
 8009690:	e009      	b.n	80096a6 <UART_SetConfig+0x51a>
 8009692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009696:	627b      	str	r3, [r7, #36]	@ 0x24
 8009698:	e005      	b.n	80096a6 <UART_SetConfig+0x51a>
 800969a:	2300      	movs	r3, #0
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
 800969e:	2301      	movs	r3, #1
 80096a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096a4:	bf00      	nop
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d021      	beq.n	80096f0 <UART_SetConfig+0x564>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	4a1a      	ldr	r2, [pc, #104]	@ (800971c <UART_SetConfig+0x590>)
 80096b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096b6:	461a      	mov	r2, r3
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	085b      	lsrs	r3, r3, #1
 80096c4:	441a      	add	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ce:	623b      	str	r3, [r7, #32]
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	2b0f      	cmp	r3, #15
 80096d4:	d909      	bls.n	80096ea <UART_SetConfig+0x55e>
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096dc:	d205      	bcs.n	80096ea <UART_SetConfig+0x55e>
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60da      	str	r2, [r3, #12]
 80096e8:	e002      	b.n	80096f0 <UART_SetConfig+0x564>
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2200      	movs	r2, #0
 8009704:	675a      	str	r2, [r3, #116]	@ 0x74
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2200      	movs	r2, #0
 800970a:	679a      	str	r2, [r3, #120]	@ 0x78
 800970c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009710:	4618      	mov	r0, r3
 8009712:	3730      	adds	r7, #48	@ 0x30
 8009714:	46bd      	mov	sp, r7
 8009716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800971a:	bf00      	nop
 800971c:	0800e314 	.word	0x0800e314
 8009720:	00f42400 	.word	0x00f42400

08009724 <UART_AdvFeatureConfig>:
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0x2a>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0x4c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <UART_AdvFeatureConfig+0x6e>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <UART_AdvFeatureConfig+0x90>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <UART_AdvFeatureConfig+0xb2>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	609a      	str	r2, [r3, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <UART_AdvFeatureConfig+0xd4>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	609a      	str	r2, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01a      	beq.n	800983a <UART_AdvFeatureConfig+0x116>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009822:	d10a      	bne.n	800983a <UART_AdvFeatureConfig+0x116>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <UART_AdvFeatureConfig+0x138>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <UART_CheckIdleState>:
 8009868:	b580      	push	{r7, lr}
 800986a:	b098      	sub	sp, #96	@ 0x60
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009878:	f7f9 ff62 	bl	8003740 <HAL_GetTick>
 800987c:	6578      	str	r0, [r7, #84]	@ 0x54
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0308 	and.w	r3, r3, #8
 8009888:	2b08      	cmp	r3, #8
 800988a:	d12f      	bne.n	80098ec <UART_CheckIdleState+0x84>
 800988c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009894:	2200      	movs	r2, #0
 8009896:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f88e 	bl	80099bc <UART_WaitOnFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d022      	beq.n	80098ec <UART_CheckIdleState+0x84>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80098c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e6      	bne.n	80098a6 <UART_CheckIdleState+0x3e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80098e8:	2303      	movs	r3, #3
 80098ea:	e063      	b.n	80099b4 <UART_CheckIdleState+0x14c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d149      	bne.n	800998e <UART_CheckIdleState+0x126>
 80098fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009902:	2200      	movs	r2, #0
 8009904:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f857 	bl	80099bc <UART_WaitOnFlagUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d03c      	beq.n	800998e <UART_CheckIdleState+0x126>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	627b      	str	r3, [r7, #36]	@ 0x24
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	623b      	str	r3, [r7, #32]
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009932:	633b      	str	r3, [r7, #48]	@ 0x30
 8009934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e6      	bne.n	8009914 <UART_CheckIdleState+0xac>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	613b      	str	r3, [r7, #16]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009966:	61fa      	str	r2, [r7, #28]
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	69b9      	ldr	r1, [r7, #24]
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e5      	bne.n	8009946 <UART_CheckIdleState+0xde>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800998a:	2303      	movs	r3, #3
 800998c:	e012      	b.n	80099b4 <UART_CheckIdleState+0x14c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80099b2:	2300      	movs	r3, #0
 80099b4:	4618      	mov	r0, r3
 80099b6:	3758      	adds	r7, #88	@ 0x58
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <UART_WaitOnFlagUntilTimeout>:
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71fb      	strb	r3, [r7, #7]
 80099cc:	e04f      	b.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d04b      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80099d6:	f7f9 feb3 	bl	8003740 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d302      	bcc.n	80099ec <UART_WaitOnFlagUntilTimeout+0x30>
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <UART_WaitOnFlagUntilTimeout+0x34>
 80099ec:	2303      	movs	r3, #3
 80099ee:	e04e      	b.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xd2>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0304 	and.w	r3, r3, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d037      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b80      	cmp	r3, #128	@ 0x80
 8009a02:	d034      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b40      	cmp	r3, #64	@ 0x40
 8009a08:	d031      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d110      	bne.n	8009a3a <UART_WaitOnFlagUntilTimeout+0x7e>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	621a      	str	r2, [r3, #32]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f838 	bl	8009a96 <UART_EndRxTransfer>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2208      	movs	r2, #8
 8009a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009a36:	2301      	movs	r3, #1
 8009a38:	e029      	b.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xd2>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a48:	d111      	bne.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a52:	621a      	str	r2, [r3, #32]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 f81e 	bl	8009a96 <UART_EndRxTransfer>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e00f      	b.n	8009a8e <UART_WaitOnFlagUntilTimeout+0xd2>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69da      	ldr	r2, [r3, #28]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	4013      	ands	r3, r2
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	bf0c      	ite	eq
 8009a7e:	2301      	moveq	r3, #1
 8009a80:	2300      	movne	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	461a      	mov	r2, r3
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d0a0      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0x12>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <UART_EndRxTransfer>:
 8009a96:	b480      	push	{r7}
 8009a98:	b095      	sub	sp, #84	@ 0x54
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e6      	bne.n	8009a9e <UART_EndRxTransfer+0x8>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	623b      	str	r3, [r7, #32]
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009af8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e3      	bne.n	8009ad0 <UART_EndRxTransfer+0x3a>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d118      	bne.n	8009b42 <UART_EndRxTransfer+0xac>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	60bb      	str	r3, [r7, #8]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f023 0310 	bic.w	r3, r3, #16
 8009b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b2e:	61bb      	str	r3, [r7, #24]
 8009b30:	617a      	str	r2, [r7, #20]
 8009b32:	6979      	ldr	r1, [r7, #20]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e6      	bne.n	8009b10 <UART_EndRxTransfer+0x7a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b56:	bf00      	nop
 8009b58:	3754      	adds	r7, #84	@ 0x54
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <UART_DMAAbortOnError>:
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff faf1 	bl	8009160 <HAL_UART_ErrorCallback>
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_EndTransmit_IT>:
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b088      	sub	sp, #32
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	60bb      	str	r3, [r7, #8]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	617a      	str	r2, [r7, #20]
 8009bb0:	6979      	ldr	r1, [r7, #20]
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e6      	bne.n	8009b8e <UART_EndTransmit_IT+0x8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	679a      	str	r2, [r3, #120]	@ 0x78
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fabc 	bl	800914c <HAL_UART_TxCpltCallback>
 8009bd4:	bf00      	nop
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <HAL_UARTEx_WakeupCallback>:
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UARTEx_RxFifoFullCallback>:
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_UARTEx_DisableFifoMode>:
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_UARTEx_DisableFifoMode+0x16>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e027      	b.n	8009c7e <HAL_UARTEx_DisableFifoMode+0x66>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2224      	movs	r2, #36	@ 0x24
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0201 	bic.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	665a      	str	r2, [r3, #100]	@ 0x64
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <HAL_UARTEx_SetTxFifoThreshold>:
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e02d      	b.n	8009cfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2224      	movs	r2, #36	@ 0x24
 8009cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0201 	bic.w	r2, r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f850 	bl	8009d84 <UARTEx_SetNbDataToProcess>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <HAL_UARTEx_SetRxFifoThreshold>:
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d101      	bne.n	8009d1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e02d      	b.n	8009d7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2224      	movs	r2, #36	@ 0x24
 8009d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 0201 	bic.w	r2, r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	609a      	str	r2, [r3, #8]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f812 	bl	8009d84 <UARTEx_SetNbDataToProcess>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <UARTEx_SetNbDataToProcess>:
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <UARTEx_SetNbDataToProcess+0x22>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009da4:	e031      	b.n	8009e0a <UARTEx_SetNbDataToProcess+0x86>
 8009da6:	2308      	movs	r3, #8
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	2308      	movs	r3, #8
 8009dac:	73bb      	strb	r3, [r7, #14]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	0e5b      	lsrs	r3, r3, #25
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	737b      	strb	r3, [r7, #13]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	0f5b      	lsrs	r3, r3, #29
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	733b      	strb	r3, [r7, #12]
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	7b3a      	ldrb	r2, [r7, #12]
 8009dd2:	4911      	ldr	r1, [pc, #68]	@ (8009e18 <UARTEx_SetNbDataToProcess+0x94>)
 8009dd4:	5c8a      	ldrb	r2, [r1, r2]
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	7b3a      	ldrb	r2, [r7, #12]
 8009ddc:	490f      	ldr	r1, [pc, #60]	@ (8009e1c <UARTEx_SetNbDataToProcess+0x98>)
 8009dde:	5c8a      	ldrb	r2, [r1, r2]
 8009de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	7b7a      	ldrb	r2, [r7, #13]
 8009df0:	4909      	ldr	r1, [pc, #36]	@ (8009e18 <UARTEx_SetNbDataToProcess+0x94>)
 8009df2:	5c8a      	ldrb	r2, [r1, r2]
 8009df4:	fb02 f303 	mul.w	r3, r2, r3
 8009df8:	7b7a      	ldrb	r2, [r7, #13]
 8009dfa:	4908      	ldr	r1, [pc, #32]	@ (8009e1c <UARTEx_SetNbDataToProcess+0x98>)
 8009dfc:	5c8a      	ldrb	r2, [r1, r2]
 8009dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	0800e32c 	.word	0x0800e32c
 8009e1c:	0800e334 	.word	0x0800e334

08009e20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e32:	2b84      	cmp	r3, #132	@ 0x84
 8009e34:	d005      	beq.n	8009e42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	3303      	adds	r3, #3
 8009e40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e42:	68fb      	ldr	r3, [r7, #12]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e54:	f000 fa5c 	bl	800a310 <vTaskStartScheduler>
  
  return osOK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e60:	b087      	sub	sp, #28
 8009e62:	af02      	add	r7, sp, #8
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685c      	ldr	r4, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e74:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff ffcf 	bl	8009e20 <makeFreeRtosPriority>
 8009e82:	4602      	mov	r2, r0
 8009e84:	f107 030c 	add.w	r3, r7, #12
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	9200      	str	r2, [sp, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	4632      	mov	r2, r6
 8009e90:	4629      	mov	r1, r5
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 f8d2 	bl	800a03c <xTaskCreate>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d001      	beq.n	8009ea2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e000      	b.n	8009ea4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <osDelay+0x16>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	e000      	b.n	8009ec4 <osDelay+0x18>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 f9ed 	bl	800a2a4 <vTaskDelay>
  
  return osOK;
 8009eca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 0208 	add.w	r2, r3, #8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f103 0208 	add.w	r2, r3, #8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0208 	add.w	r2, r3, #8
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d103      	bne.n	8009f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e00c      	b.n	8009fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e002      	b.n	8009fa4 <vListInsert+0x2e>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d2f6      	bcs.n	8009f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	601a      	str	r2, [r3, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6892      	ldr	r2, [r2, #8]
 8009ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6852      	ldr	r2, [r2, #4]
 800a008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d103      	bne.n	800a01c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1e5a      	subs	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08c      	sub	sp, #48	@ 0x30
 800a040:	af04      	add	r7, sp, #16
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	4613      	mov	r3, r2
 800a04a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fe91 	bl	800ad78 <pvPortMalloc>
 800a056:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00e      	beq.n	800a07c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a05e:	2054      	movs	r0, #84	@ 0x54
 800a060:	f000 fe8a 	bl	800ad78 <pvPortMalloc>
 800a064:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	631a      	str	r2, [r3, #48]	@ 0x30
 800a072:	e005      	b.n	800a080 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a074:	6978      	ldr	r0, [r7, #20]
 800a076:	f000 ff4d 	bl	800af14 <vPortFree>
 800a07a:	e001      	b.n	800a080 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d013      	beq.n	800a0ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a086:	88fa      	ldrh	r2, [r7, #6]
 800a088:	2300      	movs	r3, #0
 800a08a:	9303      	str	r3, [sp, #12]
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	9302      	str	r3, [sp, #8]
 800a090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f80e 	bl	800a0be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0a2:	69f8      	ldr	r0, [r7, #28]
 800a0a4:	f000 f894 	bl	800a1d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	61bb      	str	r3, [r7, #24]
 800a0ac:	e002      	b.n	800a0b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
	}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b088      	sub	sp, #32
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	f023 0307 	bic.w	r3, r3, #7
 800a0e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d01f      	beq.n	800a14e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	e012      	b.n	800a13a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	7819      	ldrb	r1, [r3, #0]
 800a11c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	3334      	adds	r3, #52	@ 0x34
 800a124:	460a      	mov	r2, r1
 800a126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d006      	beq.n	800a142 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	2b0f      	cmp	r3, #15
 800a13e:	d9e9      	bls.n	800a114 <prvInitialiseNewTask+0x56>
 800a140:	e000      	b.n	800a144 <prvInitialiseNewTask+0x86>
			{
				break;
 800a142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a14c:	e003      	b.n	800a156 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	2b06      	cmp	r3, #6
 800a15a:	d901      	bls.n	800a160 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a15c:	2306      	movs	r3, #6
 800a15e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a164:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a16a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	2200      	movs	r2, #0
 800a170:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	3304      	adds	r3, #4
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fecc 	bl	8009f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	3318      	adds	r3, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fec7 	bl	8009f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a18a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	f1c3 0207 	rsb	r2, r3, #7
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	2200      	movs	r2, #0
 800a1a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	68f9      	ldr	r1, [r7, #12]
 800a1ae:	69b8      	ldr	r0, [r7, #24]
 800a1b0:	f000 fbd4 	bl	800a95c <pxPortInitialiseStack>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1d8:	f000 fcee 	bl	800abb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a288 <prvAddNewTaskToReadyList+0xb8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	4a29      	ldr	r2, [pc, #164]	@ (800a288 <prvAddNewTaskToReadyList+0xb8>)
 800a1e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1e6:	4b29      	ldr	r3, [pc, #164]	@ (800a28c <prvAddNewTaskToReadyList+0xbc>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ee:	4a27      	ldr	r2, [pc, #156]	@ (800a28c <prvAddNewTaskToReadyList+0xbc>)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1f4:	4b24      	ldr	r3, [pc, #144]	@ (800a288 <prvAddNewTaskToReadyList+0xb8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d110      	bne.n	800a21e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1fc:	f000 faaa 	bl	800a754 <prvInitialiseTaskLists>
 800a200:	e00d      	b.n	800a21e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a202:	4b23      	ldr	r3, [pc, #140]	@ (800a290 <prvAddNewTaskToReadyList+0xc0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d109      	bne.n	800a21e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a20a:	4b20      	ldr	r3, [pc, #128]	@ (800a28c <prvAddNewTaskToReadyList+0xbc>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	429a      	cmp	r2, r3
 800a216:	d802      	bhi.n	800a21e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a218:	4a1c      	ldr	r2, [pc, #112]	@ (800a28c <prvAddNewTaskToReadyList+0xbc>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a21e:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <prvAddNewTaskToReadyList+0xc4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	4a1b      	ldr	r2, [pc, #108]	@ (800a294 <prvAddNewTaskToReadyList+0xc4>)
 800a226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22c:	2201      	movs	r2, #1
 800a22e:	409a      	lsls	r2, r3
 800a230:	4b19      	ldr	r3, [pc, #100]	@ (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4313      	orrs	r3, r2
 800a236:	4a18      	ldr	r2, [pc, #96]	@ (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4a15      	ldr	r2, [pc, #84]	@ (800a29c <prvAddNewTaskToReadyList+0xcc>)
 800a248:	441a      	add	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4610      	mov	r0, r2
 800a252:	f7ff fe6c 	bl	8009f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a256:	f000 fce1 	bl	800ac1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a25a:	4b0d      	ldr	r3, [pc, #52]	@ (800a290 <prvAddNewTaskToReadyList+0xc0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00e      	beq.n	800a280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a262:	4b0a      	ldr	r3, [pc, #40]	@ (800a28c <prvAddNewTaskToReadyList+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d207      	bcs.n	800a280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a270:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a0 <prvAddNewTaskToReadyList+0xd0>)
 800a272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000068c 	.word	0x2000068c
 800a28c:	2000058c 	.word	0x2000058c
 800a290:	20000698 	.word	0x20000698
 800a294:	200006a8 	.word	0x200006a8
 800a298:	20000694 	.word	0x20000694
 800a29c:	20000590 	.word	0x20000590
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d018      	beq.n	800a2e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2b6:	4b14      	ldr	r3, [pc, #80]	@ (800a308 <vTaskDelay+0x64>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <vTaskDelay+0x32>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	60bb      	str	r3, [r7, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	e7fd      	b.n	800a2d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2d6:	f000 f863 	bl	800a3a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2da:	2100      	movs	r1, #0
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fad7 	bl	800a890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2e2:	f000 f86b 	bl	800a3bc <xTaskResumeAll>
 800a2e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d107      	bne.n	800a2fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a2ee:	4b07      	ldr	r3, [pc, #28]	@ (800a30c <vTaskDelay+0x68>)
 800a2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2fe:	bf00      	nop
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	200006b4 	.word	0x200006b4
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a316:	4b1c      	ldr	r3, [pc, #112]	@ (800a388 <vTaskStartScheduler+0x78>)
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	2300      	movs	r3, #0
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	2300      	movs	r3, #0
 800a320:	2280      	movs	r2, #128	@ 0x80
 800a322:	491a      	ldr	r1, [pc, #104]	@ (800a38c <vTaskStartScheduler+0x7c>)
 800a324:	481a      	ldr	r0, [pc, #104]	@ (800a390 <vTaskStartScheduler+0x80>)
 800a326:	f7ff fe89 	bl	800a03c <xTaskCreate>
 800a32a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d116      	bne.n	800a360 <vTaskStartScheduler+0x50>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60bb      	str	r3, [r7, #8]
}
 800a344:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a346:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <vTaskStartScheduler+0x84>)
 800a348:	f04f 32ff 	mov.w	r2, #4294967295
 800a34c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a34e:	4b12      	ldr	r3, [pc, #72]	@ (800a398 <vTaskStartScheduler+0x88>)
 800a350:	2201      	movs	r2, #1
 800a352:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <vTaskStartScheduler+0x8c>)
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a35a:	f000 fb89 	bl	800aa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a35e:	e00f      	b.n	800a380 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d10b      	bne.n	800a380 <vTaskStartScheduler+0x70>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	607b      	str	r3, [r7, #4]
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <vTaskStartScheduler+0x6c>
}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	200006b0 	.word	0x200006b0
 800a38c:	0800e294 	.word	0x0800e294
 800a390:	0800a725 	.word	0x0800a725
 800a394:	200006ac 	.word	0x200006ac
 800a398:	20000698 	.word	0x20000698
 800a39c:	20000690 	.word	0x20000690

0800a3a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <vTaskSuspendAll+0x18>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	4a03      	ldr	r2, [pc, #12]	@ (800a3b8 <vTaskSuspendAll+0x18>)
 800a3ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3ae:	bf00      	nop
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	200006b4 	.word	0x200006b4

0800a3bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3ca:	4b42      	ldr	r3, [pc, #264]	@ (800a4d4 <xTaskResumeAll+0x118>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <xTaskResumeAll+0x2e>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	603b      	str	r3, [r7, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3ea:	f000 fbe5 	bl	800abb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3ee:	4b39      	ldr	r3, [pc, #228]	@ (800a4d4 <xTaskResumeAll+0x118>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	4a37      	ldr	r2, [pc, #220]	@ (800a4d4 <xTaskResumeAll+0x118>)
 800a3f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f8:	4b36      	ldr	r3, [pc, #216]	@ (800a4d4 <xTaskResumeAll+0x118>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d161      	bne.n	800a4c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a400:	4b35      	ldr	r3, [pc, #212]	@ (800a4d8 <xTaskResumeAll+0x11c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d05d      	beq.n	800a4c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a408:	e02e      	b.n	800a468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40a:	4b34      	ldr	r3, [pc, #208]	@ (800a4dc <xTaskResumeAll+0x120>)
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3318      	adds	r3, #24
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fde6 	bl	8009fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3304      	adds	r3, #4
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff fde1 	bl	8009fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	2201      	movs	r2, #1
 800a42c:	409a      	lsls	r2, r3
 800a42e:	4b2c      	ldr	r3, [pc, #176]	@ (800a4e0 <xTaskResumeAll+0x124>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4313      	orrs	r3, r2
 800a434:	4a2a      	ldr	r2, [pc, #168]	@ (800a4e0 <xTaskResumeAll+0x124>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4a27      	ldr	r2, [pc, #156]	@ (800a4e4 <xTaskResumeAll+0x128>)
 800a446:	441a      	add	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7ff fd6d 	bl	8009f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a458:	4b23      	ldr	r3, [pc, #140]	@ (800a4e8 <xTaskResumeAll+0x12c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45e:	429a      	cmp	r2, r3
 800a460:	d302      	bcc.n	800a468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a462:	4b22      	ldr	r3, [pc, #136]	@ (800a4ec <xTaskResumeAll+0x130>)
 800a464:	2201      	movs	r2, #1
 800a466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a468:	4b1c      	ldr	r3, [pc, #112]	@ (800a4dc <xTaskResumeAll+0x120>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1cc      	bne.n	800a40a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a476:	f000 f9eb 	bl	800a850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a47a:	4b1d      	ldr	r3, [pc, #116]	@ (800a4f0 <xTaskResumeAll+0x134>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d010      	beq.n	800a4a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a486:	f000 f837 	bl	800a4f8 <xTaskIncrementTick>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a490:	4b16      	ldr	r3, [pc, #88]	@ (800a4ec <xTaskResumeAll+0x130>)
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3b01      	subs	r3, #1
 800a49a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f1      	bne.n	800a486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a4a2:	4b13      	ldr	r3, [pc, #76]	@ (800a4f0 <xTaskResumeAll+0x134>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4a8:	4b10      	ldr	r3, [pc, #64]	@ (800a4ec <xTaskResumeAll+0x130>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d009      	beq.n	800a4c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f4 <xTaskResumeAll+0x138>)
 800a4b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c4:	f000 fbaa 	bl	800ac1c <vPortExitCritical>

	return xAlreadyYielded;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200006b4 	.word	0x200006b4
 800a4d8:	2000068c 	.word	0x2000068c
 800a4dc:	2000064c 	.word	0x2000064c
 800a4e0:	20000694 	.word	0x20000694
 800a4e4:	20000590 	.word	0x20000590
 800a4e8:	2000058c 	.word	0x2000058c
 800a4ec:	200006a0 	.word	0x200006a0
 800a4f0:	2000069c 	.word	0x2000069c
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a502:	4b4f      	ldr	r3, [pc, #316]	@ (800a640 <xTaskIncrementTick+0x148>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f040 808f 	bne.w	800a62a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a50c:	4b4d      	ldr	r3, [pc, #308]	@ (800a644 <xTaskIncrementTick+0x14c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a514:	4a4b      	ldr	r2, [pc, #300]	@ (800a644 <xTaskIncrementTick+0x14c>)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d121      	bne.n	800a564 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a520:	4b49      	ldr	r3, [pc, #292]	@ (800a648 <xTaskIncrementTick+0x150>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00b      	beq.n	800a542 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	603b      	str	r3, [r7, #0]
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	e7fd      	b.n	800a53e <xTaskIncrementTick+0x46>
 800a542:	4b41      	ldr	r3, [pc, #260]	@ (800a648 <xTaskIncrementTick+0x150>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	4b40      	ldr	r3, [pc, #256]	@ (800a64c <xTaskIncrementTick+0x154>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3e      	ldr	r2, [pc, #248]	@ (800a648 <xTaskIncrementTick+0x150>)
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	4a3e      	ldr	r2, [pc, #248]	@ (800a64c <xTaskIncrementTick+0x154>)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	4b3e      	ldr	r3, [pc, #248]	@ (800a650 <xTaskIncrementTick+0x158>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	4a3c      	ldr	r2, [pc, #240]	@ (800a650 <xTaskIncrementTick+0x158>)
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	f000 f976 	bl	800a850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a564:	4b3b      	ldr	r3, [pc, #236]	@ (800a654 <xTaskIncrementTick+0x15c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d348      	bcc.n	800a600 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a56e:	4b36      	ldr	r3, [pc, #216]	@ (800a648 <xTaskIncrementTick+0x150>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a578:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <xTaskIncrementTick+0x15c>)
 800a57a:	f04f 32ff 	mov.w	r2, #4294967295
 800a57e:	601a      	str	r2, [r3, #0]
					break;
 800a580:	e03e      	b.n	800a600 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a582:	4b31      	ldr	r3, [pc, #196]	@ (800a648 <xTaskIncrementTick+0x150>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d203      	bcs.n	800a5a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a59a:	4a2e      	ldr	r2, [pc, #184]	@ (800a654 <xTaskIncrementTick+0x15c>)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5a0:	e02e      	b.n	800a600 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fd1e 	bl	8009fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	3318      	adds	r3, #24
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff fd15 	bl	8009fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	409a      	lsls	r2, r3
 800a5c6:	4b24      	ldr	r3, [pc, #144]	@ (800a658 <xTaskIncrementTick+0x160>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	4a22      	ldr	r2, [pc, #136]	@ (800a658 <xTaskIncrementTick+0x160>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a1f      	ldr	r2, [pc, #124]	@ (800a65c <xTaskIncrementTick+0x164>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7ff fca1 	bl	8009f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a660 <xTaskIncrementTick+0x168>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d3b9      	bcc.n	800a56e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5fe:	e7b6      	b.n	800a56e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a600:	4b17      	ldr	r3, [pc, #92]	@ (800a660 <xTaskIncrementTick+0x168>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a606:	4915      	ldr	r1, [pc, #84]	@ (800a65c <xTaskIncrementTick+0x164>)
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	440b      	add	r3, r1
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d901      	bls.n	800a61c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a61c:	4b11      	ldr	r3, [pc, #68]	@ (800a664 <xTaskIncrementTick+0x16c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d007      	beq.n	800a634 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	e004      	b.n	800a634 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a62a:	4b0f      	ldr	r3, [pc, #60]	@ (800a668 <xTaskIncrementTick+0x170>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3301      	adds	r3, #1
 800a630:	4a0d      	ldr	r2, [pc, #52]	@ (800a668 <xTaskIncrementTick+0x170>)
 800a632:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a634:	697b      	ldr	r3, [r7, #20]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	200006b4 	.word	0x200006b4
 800a644:	20000690 	.word	0x20000690
 800a648:	20000644 	.word	0x20000644
 800a64c:	20000648 	.word	0x20000648
 800a650:	200006a4 	.word	0x200006a4
 800a654:	200006ac 	.word	0x200006ac
 800a658:	20000694 	.word	0x20000694
 800a65c:	20000590 	.word	0x20000590
 800a660:	2000058c 	.word	0x2000058c
 800a664:	200006a0 	.word	0x200006a0
 800a668:	2000069c 	.word	0x2000069c

0800a66c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a672:	4b27      	ldr	r3, [pc, #156]	@ (800a710 <vTaskSwitchContext+0xa4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a67a:	4b26      	ldr	r3, [pc, #152]	@ (800a714 <vTaskSwitchContext+0xa8>)
 800a67c:	2201      	movs	r2, #1
 800a67e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a680:	e040      	b.n	800a704 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a682:	4b24      	ldr	r3, [pc, #144]	@ (800a714 <vTaskSwitchContext+0xa8>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a688:	4b23      	ldr	r3, [pc, #140]	@ (800a718 <vTaskSwitchContext+0xac>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	fab3 f383 	clz	r3, r3
 800a694:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a696:	7afb      	ldrb	r3, [r7, #11]
 800a698:	f1c3 031f 	rsb	r3, r3, #31
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	491f      	ldr	r1, [pc, #124]	@ (800a71c <vTaskSwitchContext+0xb0>)
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <vTaskSwitchContext+0x5e>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	607b      	str	r3, [r7, #4]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <vTaskSwitchContext+0x5a>
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4a11      	ldr	r2, [pc, #68]	@ (800a71c <vTaskSwitchContext+0xb0>)
 800a6d6:	4413      	add	r3, r2
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	605a      	str	r2, [r3, #4]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d104      	bne.n	800a6fa <vTaskSwitchContext+0x8e>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	4a07      	ldr	r2, [pc, #28]	@ (800a720 <vTaskSwitchContext+0xb4>)
 800a702:	6013      	str	r3, [r2, #0]
}
 800a704:	bf00      	nop
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	200006b4 	.word	0x200006b4
 800a714:	200006a0 	.word	0x200006a0
 800a718:	20000694 	.word	0x20000694
 800a71c:	20000590 	.word	0x20000590
 800a720:	2000058c 	.word	0x2000058c

0800a724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a72c:	f000 f852 	bl	800a7d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a730:	4b06      	ldr	r3, [pc, #24]	@ (800a74c <prvIdleTask+0x28>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d9f9      	bls.n	800a72c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a738:	4b05      	ldr	r3, [pc, #20]	@ (800a750 <prvIdleTask+0x2c>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a748:	e7f0      	b.n	800a72c <prvIdleTask+0x8>
 800a74a:	bf00      	nop
 800a74c:	20000590 	.word	0x20000590
 800a750:	e000ed04 	.word	0xe000ed04

0800a754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a75a:	2300      	movs	r3, #0
 800a75c:	607b      	str	r3, [r7, #4]
 800a75e:	e00c      	b.n	800a77a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a12      	ldr	r2, [pc, #72]	@ (800a7b4 <prvInitialiseTaskLists+0x60>)
 800a76c:	4413      	add	r3, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fbb0 	bl	8009ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3301      	adds	r3, #1
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b06      	cmp	r3, #6
 800a77e:	d9ef      	bls.n	800a760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a780:	480d      	ldr	r0, [pc, #52]	@ (800a7b8 <prvInitialiseTaskLists+0x64>)
 800a782:	f7ff fba7 	bl	8009ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a786:	480d      	ldr	r0, [pc, #52]	@ (800a7bc <prvInitialiseTaskLists+0x68>)
 800a788:	f7ff fba4 	bl	8009ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a78c:	480c      	ldr	r0, [pc, #48]	@ (800a7c0 <prvInitialiseTaskLists+0x6c>)
 800a78e:	f7ff fba1 	bl	8009ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a792:	480c      	ldr	r0, [pc, #48]	@ (800a7c4 <prvInitialiseTaskLists+0x70>)
 800a794:	f7ff fb9e 	bl	8009ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a798:	480b      	ldr	r0, [pc, #44]	@ (800a7c8 <prvInitialiseTaskLists+0x74>)
 800a79a:	f7ff fb9b 	bl	8009ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a79e:	4b0b      	ldr	r3, [pc, #44]	@ (800a7cc <prvInitialiseTaskLists+0x78>)
 800a7a0:	4a05      	ldr	r2, [pc, #20]	@ (800a7b8 <prvInitialiseTaskLists+0x64>)
 800a7a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <prvInitialiseTaskLists+0x7c>)
 800a7a6:	4a05      	ldr	r2, [pc, #20]	@ (800a7bc <prvInitialiseTaskLists+0x68>)
 800a7a8:	601a      	str	r2, [r3, #0]
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000590 	.word	0x20000590
 800a7b8:	2000061c 	.word	0x2000061c
 800a7bc:	20000630 	.word	0x20000630
 800a7c0:	2000064c 	.word	0x2000064c
 800a7c4:	20000660 	.word	0x20000660
 800a7c8:	20000678 	.word	0x20000678
 800a7cc:	20000644 	.word	0x20000644
 800a7d0:	20000648 	.word	0x20000648

0800a7d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7da:	e019      	b.n	800a810 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7dc:	f000 f9ec 	bl	800abb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e0:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <prvCheckTasksWaitingTermination+0x50>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff fbfb 	bl	8009fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <prvCheckTasksWaitingTermination+0x54>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	4a0b      	ldr	r2, [pc, #44]	@ (800a828 <prvCheckTasksWaitingTermination+0x54>)
 800a7fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a82c <prvCheckTasksWaitingTermination+0x58>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3b01      	subs	r3, #1
 800a802:	4a0a      	ldr	r2, [pc, #40]	@ (800a82c <prvCheckTasksWaitingTermination+0x58>)
 800a804:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a806:	f000 fa09 	bl	800ac1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f810 	bl	800a830 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a810:	4b06      	ldr	r3, [pc, #24]	@ (800a82c <prvCheckTasksWaitingTermination+0x58>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e1      	bne.n	800a7dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000660 	.word	0x20000660
 800a828:	2000068c 	.word	0x2000068c
 800a82c:	20000674 	.word	0x20000674

0800a830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fb69 	bl	800af14 <vPortFree>
			vPortFree( pxTCB );
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fb66 	bl	800af14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a856:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <prvResetNextTaskUnblockTime+0x38>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a860:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <prvResetNextTaskUnblockTime+0x3c>)
 800a862:	f04f 32ff 	mov.w	r2, #4294967295
 800a866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a868:	e008      	b.n	800a87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a86a:	4b07      	ldr	r3, [pc, #28]	@ (800a888 <prvResetNextTaskUnblockTime+0x38>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4a04      	ldr	r2, [pc, #16]	@ (800a88c <prvResetNextTaskUnblockTime+0x3c>)
 800a87a:	6013      	str	r3, [r2, #0]
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20000644 	.word	0x20000644
 800a88c:	200006ac 	.word	0x200006ac

0800a890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a89a:	4b29      	ldr	r3, [pc, #164]	@ (800a940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8a0:	4b28      	ldr	r3, [pc, #160]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff fb9e 	bl	8009fe8 <uxListRemove>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10b      	bne.n	800a8ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a8b2:	4b24      	ldr	r3, [pc, #144]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	43da      	mvns	r2, r3
 800a8c0:	4b21      	ldr	r3, [pc, #132]	@ (800a948 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	4a20      	ldr	r2, [pc, #128]	@ (800a948 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d0:	d10a      	bne.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x58>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4619      	mov	r1, r3
 800a8e0:	481a      	ldr	r0, [pc, #104]	@ (800a94c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a8e2:	f7ff fb24 	bl	8009f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8e6:	e026      	b.n	800a936 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8f0:	4b14      	ldr	r3, [pc, #80]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d209      	bcs.n	800a914 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a900:	4b13      	ldr	r3, [pc, #76]	@ (800a950 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4b0f      	ldr	r3, [pc, #60]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3304      	adds	r3, #4
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f7ff fb32 	bl	8009f76 <vListInsert>
}
 800a912:	e010      	b.n	800a936 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a914:	4b0f      	ldr	r3, [pc, #60]	@ (800a954 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	4b0a      	ldr	r3, [pc, #40]	@ (800a944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f7ff fb28 	bl	8009f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a926:	4b0c      	ldr	r3, [pc, #48]	@ (800a958 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d202      	bcs.n	800a936 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a930:	4a09      	ldr	r2, [pc, #36]	@ (800a958 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	6013      	str	r3, [r2, #0]
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000690 	.word	0x20000690
 800a944:	2000058c 	.word	0x2000058c
 800a948:	20000694 	.word	0x20000694
 800a94c:	20000678 	.word	0x20000678
 800a950:	20000648 	.word	0x20000648
 800a954:	20000644 	.word	0x20000644
 800a958:	200006ac 	.word	0x200006ac

0800a95c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3b04      	subs	r3, #4
 800a96c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3b04      	subs	r3, #4
 800a97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f023 0201 	bic.w	r2, r3, #1
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3b04      	subs	r3, #4
 800a98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a98c:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c0 <pxPortInitialiseStack+0x64>)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3b14      	subs	r3, #20
 800a996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3b04      	subs	r3, #4
 800a9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f06f 0202 	mvn.w	r2, #2
 800a9aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3b20      	subs	r3, #32
 800a9b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	0800a9c5 	.word	0x0800a9c5

0800a9c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9ce:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <prvTaskExitError+0x58>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d00b      	beq.n	800a9f0 <prvTaskExitError+0x2c>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	bf00      	nop
 800a9ee:	e7fd      	b.n	800a9ec <prvTaskExitError+0x28>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60bb      	str	r3, [r7, #8]
}
 800aa02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa04:	bf00      	nop
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0fc      	beq.n	800aa06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	2000000c 	.word	0x2000000c

0800aa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa20:	4b07      	ldr	r3, [pc, #28]	@ (800aa40 <pxCurrentTCBConst2>)
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f380 8809 	msr	PSP, r0
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	4770      	bx	lr
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst2>:
 800aa40:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa48:	4808      	ldr	r0, [pc, #32]	@ (800aa6c <prvPortStartFirstTask+0x24>)
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f380 8808 	msr	MSP, r0
 800aa52:	f04f 0000 	mov.w	r0, #0
 800aa56:	f380 8814 	msr	CONTROL, r0
 800aa5a:	b662      	cpsie	i
 800aa5c:	b661      	cpsie	f
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	df00      	svc	0
 800aa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa6a:	bf00      	nop
 800aa6c:	e000ed08 	.word	0xe000ed08

0800aa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa76:	4b47      	ldr	r3, [pc, #284]	@ (800ab94 <xPortStartScheduler+0x124>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a47      	ldr	r2, [pc, #284]	@ (800ab98 <xPortStartScheduler+0x128>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10b      	bne.n	800aa98 <xPortStartScheduler+0x28>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	bf00      	nop
 800aa96:	e7fd      	b.n	800aa94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa98:	4b3e      	ldr	r3, [pc, #248]	@ (800ab94 <xPortStartScheduler+0x124>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab9c <xPortStartScheduler+0x12c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d10b      	bne.n	800aaba <xPortStartScheduler+0x4a>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60fb      	str	r3, [r7, #12]
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop
 800aab8:	e7fd      	b.n	800aab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaba:	4b39      	ldr	r3, [pc, #228]	@ (800aba0 <xPortStartScheduler+0x130>)
 800aabc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	22ff      	movs	r2, #255	@ 0xff
 800aaca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	4b31      	ldr	r3, [pc, #196]	@ (800aba4 <xPortStartScheduler+0x134>)
 800aae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aae2:	4b31      	ldr	r3, [pc, #196]	@ (800aba8 <xPortStartScheduler+0x138>)
 800aae4:	2207      	movs	r2, #7
 800aae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aae8:	e009      	b.n	800aafe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aaea:	4b2f      	ldr	r3, [pc, #188]	@ (800aba8 <xPortStartScheduler+0x138>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	4a2d      	ldr	r2, [pc, #180]	@ (800aba8 <xPortStartScheduler+0x138>)
 800aaf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab06:	2b80      	cmp	r3, #128	@ 0x80
 800ab08:	d0ef      	beq.n	800aaea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab0a:	4b27      	ldr	r3, [pc, #156]	@ (800aba8 <xPortStartScheduler+0x138>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f1c3 0307 	rsb	r3, r3, #7
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d00b      	beq.n	800ab2e <xPortStartScheduler+0xbe>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aba8 <xPortStartScheduler+0x138>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	4a1c      	ldr	r2, [pc, #112]	@ (800aba8 <xPortStartScheduler+0x138>)
 800ab36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab38:	4b1b      	ldr	r3, [pc, #108]	@ (800aba8 <xPortStartScheduler+0x138>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab40:	4a19      	ldr	r2, [pc, #100]	@ (800aba8 <xPortStartScheduler+0x138>)
 800ab42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab4c:	4b17      	ldr	r3, [pc, #92]	@ (800abac <xPortStartScheduler+0x13c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a16      	ldr	r2, [pc, #88]	@ (800abac <xPortStartScheduler+0x13c>)
 800ab52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab58:	4b14      	ldr	r3, [pc, #80]	@ (800abac <xPortStartScheduler+0x13c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a13      	ldr	r2, [pc, #76]	@ (800abac <xPortStartScheduler+0x13c>)
 800ab5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab64:	f000 f8da 	bl	800ad1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab68:	4b11      	ldr	r3, [pc, #68]	@ (800abb0 <xPortStartScheduler+0x140>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab6e:	f000 f8f9 	bl	800ad64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab72:	4b10      	ldr	r3, [pc, #64]	@ (800abb4 <xPortStartScheduler+0x144>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a0f      	ldr	r2, [pc, #60]	@ (800abb4 <xPortStartScheduler+0x144>)
 800ab78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab7e:	f7ff ff63 	bl	800aa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab82:	f7ff fd73 	bl	800a66c <vTaskSwitchContext>
	prvTaskExitError();
 800ab86:	f7ff ff1d 	bl	800a9c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00
 800ab98:	410fc271 	.word	0x410fc271
 800ab9c:	410fc270 	.word	0x410fc270
 800aba0:	e000e400 	.word	0xe000e400
 800aba4:	200006b8 	.word	0x200006b8
 800aba8:	200006bc 	.word	0x200006bc
 800abac:	e000ed20 	.word	0xe000ed20
 800abb0:	2000000c 	.word	0x2000000c
 800abb4:	e000ef34 	.word	0xe000ef34

0800abb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abd2:	4b10      	ldr	r3, [pc, #64]	@ (800ac14 <vPortEnterCritical+0x5c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3301      	adds	r3, #1
 800abd8:	4a0e      	ldr	r2, [pc, #56]	@ (800ac14 <vPortEnterCritical+0x5c>)
 800abda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abdc:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <vPortEnterCritical+0x5c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d110      	bne.n	800ac06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abe4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac18 <vPortEnterCritical+0x60>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <vPortEnterCritical+0x4e>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	603b      	str	r3, [r7, #0]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <vPortEnterCritical+0x4a>
	}
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	2000000c 	.word	0x2000000c
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac22:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <vPortExitCritical+0x50>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <vPortExitCritical+0x26>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	607b      	str	r3, [r7, #4]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac42:	4b0a      	ldr	r3, [pc, #40]	@ (800ac6c <vPortExitCritical+0x50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a08      	ldr	r2, [pc, #32]	@ (800ac6c <vPortExitCritical+0x50>)
 800ac4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <vPortExitCritical+0x50>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <vPortExitCritical+0x44>
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	2000000c 	.word	0x2000000c

0800ac70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac70:	f3ef 8009 	mrs	r0, PSP
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4b15      	ldr	r3, [pc, #84]	@ (800acd0 <pxCurrentTCBConst>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	f01e 0f10 	tst.w	lr, #16
 800ac80:	bf08      	it	eq
 800ac82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	6010      	str	r0, [r2, #0]
 800ac8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac94:	f380 8811 	msr	BASEPRI, r0
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f7ff fce4 	bl	800a66c <vTaskSwitchContext>
 800aca4:	f04f 0000 	mov.w	r0, #0
 800aca8:	f380 8811 	msr	BASEPRI, r0
 800acac:	bc09      	pop	{r0, r3}
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	6808      	ldr	r0, [r1, #0]
 800acb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb6:	f01e 0f10 	tst.w	lr, #16
 800acba:	bf08      	it	eq
 800acbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acc0:	f380 8809 	msr	PSP, r0
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	f3af 8000 	nop.w

0800acd0 <pxCurrentTCBConst>:
 800acd0:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	607b      	str	r3, [r7, #4]
}
 800acf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acf2:	f7ff fc01 	bl	800a4f8 <xTaskIncrementTick>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acfc:	4b06      	ldr	r3, [pc, #24]	@ (800ad18 <SysTick_Handler+0x40>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	2300      	movs	r3, #0
 800ad06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f383 8811 	msr	BASEPRI, r3
}
 800ad0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad20:	4b0b      	ldr	r3, [pc, #44]	@ (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad26:	4b0b      	ldr	r3, [pc, #44]	@ (800ad54 <vPortSetupTimerInterrupt+0x38>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad58 <vPortSetupTimerInterrupt+0x3c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a0a      	ldr	r2, [pc, #40]	@ (800ad5c <vPortSetupTimerInterrupt+0x40>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	099b      	lsrs	r3, r3, #6
 800ad38:	4a09      	ldr	r2, [pc, #36]	@ (800ad60 <vPortSetupTimerInterrupt+0x44>)
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad3e:	4b04      	ldr	r3, [pc, #16]	@ (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	e000e010 	.word	0xe000e010
 800ad54:	e000e018 	.word	0xe000e018
 800ad58:	20000000 	.word	0x20000000
 800ad5c:	10624dd3 	.word	0x10624dd3
 800ad60:	e000e014 	.word	0xe000e014

0800ad64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad74 <vPortEnableVFP+0x10>
 800ad68:	6801      	ldr	r1, [r0, #0]
 800ad6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad6e:	6001      	str	r1, [r0, #0]
 800ad70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad72:	bf00      	nop
 800ad74:	e000ed88 	.word	0xe000ed88

0800ad78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	@ 0x28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad84:	f7ff fb0c 	bl	800a3a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad88:	4b5c      	ldr	r3, [pc, #368]	@ (800aefc <pvPortMalloc+0x184>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad90:	f000 f924 	bl	800afdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad94:	4b5a      	ldr	r3, [pc, #360]	@ (800af00 <pvPortMalloc+0x188>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8095 	bne.w	800aecc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01e      	beq.n	800ade6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ada8:	2208      	movs	r2, #8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d015      	beq.n	800ade6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f023 0307 	bic.w	r3, r3, #7
 800adc0:	3308      	adds	r3, #8
 800adc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00b      	beq.n	800ade6 <pvPortMalloc+0x6e>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	617b      	str	r3, [r7, #20]
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	e7fd      	b.n	800ade2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d06f      	beq.n	800aecc <pvPortMalloc+0x154>
 800adec:	4b45      	ldr	r3, [pc, #276]	@ (800af04 <pvPortMalloc+0x18c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d86a      	bhi.n	800aecc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800adf6:	4b44      	ldr	r3, [pc, #272]	@ (800af08 <pvPortMalloc+0x190>)
 800adf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adfa:	4b43      	ldr	r3, [pc, #268]	@ (800af08 <pvPortMalloc+0x190>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae00:	e004      	b.n	800ae0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d903      	bls.n	800ae1e <pvPortMalloc+0xa6>
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1f1      	bne.n	800ae02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae1e:	4b37      	ldr	r3, [pc, #220]	@ (800aefc <pvPortMalloc+0x184>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d051      	beq.n	800aecc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	4413      	add	r3, r2
 800ae30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	1ad2      	subs	r2, r2, r3
 800ae42:	2308      	movs	r3, #8
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d920      	bls.n	800ae8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4413      	add	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <pvPortMalloc+0xfc>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	613b      	str	r3, [r7, #16]
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	e7fd      	b.n	800ae70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae86:	69b8      	ldr	r0, [r7, #24]
 800ae88:	f000 f90a 	bl	800b0a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae8c:	4b1d      	ldr	r3, [pc, #116]	@ (800af04 <pvPortMalloc+0x18c>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	4a1b      	ldr	r2, [pc, #108]	@ (800af04 <pvPortMalloc+0x18c>)
 800ae98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae9a:	4b1a      	ldr	r3, [pc, #104]	@ (800af04 <pvPortMalloc+0x18c>)
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	4b1b      	ldr	r3, [pc, #108]	@ (800af0c <pvPortMalloc+0x194>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d203      	bcs.n	800aeae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aea6:	4b17      	ldr	r3, [pc, #92]	@ (800af04 <pvPortMalloc+0x18c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a18      	ldr	r2, [pc, #96]	@ (800af0c <pvPortMalloc+0x194>)
 800aeac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	4b13      	ldr	r3, [pc, #76]	@ (800af00 <pvPortMalloc+0x188>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aec2:	4b13      	ldr	r3, [pc, #76]	@ (800af10 <pvPortMalloc+0x198>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3301      	adds	r3, #1
 800aec8:	4a11      	ldr	r2, [pc, #68]	@ (800af10 <pvPortMalloc+0x198>)
 800aeca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aecc:	f7ff fa76 	bl	800a3bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f003 0307 	and.w	r3, r3, #7
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00b      	beq.n	800aef2 <pvPortMalloc+0x17a>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	60fb      	str	r3, [r7, #12]
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	e7fd      	b.n	800aeee <pvPortMalloc+0x176>
	return pvReturn;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3728      	adds	r7, #40	@ 0x28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	200054e8 	.word	0x200054e8
 800af00:	200054fc 	.word	0x200054fc
 800af04:	200054ec 	.word	0x200054ec
 800af08:	200054e0 	.word	0x200054e0
 800af0c:	200054f0 	.word	0x200054f0
 800af10:	200054f4 	.word	0x200054f4

0800af14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d04f      	beq.n	800afc6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af26:	2308      	movs	r3, #8
 800af28:	425b      	negs	r3, r3
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4413      	add	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b25      	ldr	r3, [pc, #148]	@ (800afd0 <vPortFree+0xbc>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4013      	ands	r3, r2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10b      	bne.n	800af5a <vPortFree+0x46>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60fb      	str	r3, [r7, #12]
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	e7fd      	b.n	800af56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00b      	beq.n	800af7a <vPortFree+0x66>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	60bb      	str	r3, [r7, #8]
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	4b14      	ldr	r3, [pc, #80]	@ (800afd0 <vPortFree+0xbc>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4013      	ands	r3, r2
 800af84:	2b00      	cmp	r3, #0
 800af86:	d01e      	beq.n	800afc6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11a      	bne.n	800afc6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	4b0e      	ldr	r3, [pc, #56]	@ (800afd0 <vPortFree+0xbc>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	43db      	mvns	r3, r3
 800af9a:	401a      	ands	r2, r3
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afa0:	f7ff f9fe 	bl	800a3a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	4b0a      	ldr	r3, [pc, #40]	@ (800afd4 <vPortFree+0xc0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4413      	add	r3, r2
 800afae:	4a09      	ldr	r2, [pc, #36]	@ (800afd4 <vPortFree+0xc0>)
 800afb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afb2:	6938      	ldr	r0, [r7, #16]
 800afb4:	f000 f874 	bl	800b0a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afb8:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <vPortFree+0xc4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3301      	adds	r3, #1
 800afbe:	4a06      	ldr	r2, [pc, #24]	@ (800afd8 <vPortFree+0xc4>)
 800afc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800afc2:	f7ff f9fb 	bl	800a3bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afc6:	bf00      	nop
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200054fc 	.word	0x200054fc
 800afd4:	200054ec 	.word	0x200054ec
 800afd8:	200054f8 	.word	0x200054f8

0800afdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afe2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800afe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afe8:	4b27      	ldr	r3, [pc, #156]	@ (800b088 <prvHeapInit+0xac>)
 800afea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00c      	beq.n	800b010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3307      	adds	r3, #7
 800affa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f023 0307 	bic.w	r3, r3, #7
 800b002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	4a1f      	ldr	r2, [pc, #124]	@ (800b088 <prvHeapInit+0xac>)
 800b00c:	4413      	add	r3, r2
 800b00e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b014:	4a1d      	ldr	r2, [pc, #116]	@ (800b08c <prvHeapInit+0xb0>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b01a:	4b1c      	ldr	r3, [pc, #112]	@ (800b08c <prvHeapInit+0xb0>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	4413      	add	r3, r2
 800b026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b028:	2208      	movs	r2, #8
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f023 0307 	bic.w	r3, r3, #7
 800b036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4a15      	ldr	r2, [pc, #84]	@ (800b090 <prvHeapInit+0xb4>)
 800b03c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b03e:	4b14      	ldr	r3, [pc, #80]	@ (800b090 <prvHeapInit+0xb4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2200      	movs	r2, #0
 800b044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b046:	4b12      	ldr	r3, [pc, #72]	@ (800b090 <prvHeapInit+0xb4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b05c:	4b0c      	ldr	r3, [pc, #48]	@ (800b090 <prvHeapInit+0xb4>)
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4a0a      	ldr	r2, [pc, #40]	@ (800b094 <prvHeapInit+0xb8>)
 800b06a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4a09      	ldr	r2, [pc, #36]	@ (800b098 <prvHeapInit+0xbc>)
 800b072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b074:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <prvHeapInit+0xc0>)
 800b076:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b07a:	601a      	str	r2, [r3, #0]
}
 800b07c:	bf00      	nop
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	200006c0 	.word	0x200006c0
 800b08c:	200054e0 	.word	0x200054e0
 800b090:	200054e8 	.word	0x200054e8
 800b094:	200054f0 	.word	0x200054f0
 800b098:	200054ec 	.word	0x200054ec
 800b09c:	200054fc 	.word	0x200054fc

0800b0a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0a8:	4b28      	ldr	r3, [pc, #160]	@ (800b14c <prvInsertBlockIntoFreeList+0xac>)
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	e002      	b.n	800b0b4 <prvInsertBlockIntoFreeList+0x14>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d8f7      	bhi.n	800b0ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d108      	bne.n	800b0e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	441a      	add	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	441a      	add	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d118      	bne.n	800b128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b15      	ldr	r3, [pc, #84]	@ (800b150 <prvInsertBlockIntoFreeList+0xb0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d00d      	beq.n	800b11e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	441a      	add	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	e008      	b.n	800b130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <prvInsertBlockIntoFreeList+0xb0>)
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	e003      	b.n	800b130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d002      	beq.n	800b13e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b13e:	bf00      	nop
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	200054e0 	.word	0x200054e0
 800b150:	200054e8 	.word	0x200054e8

0800b154 <__cvt>:
 800b154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	ec57 6b10 	vmov	r6, r7, d0
 800b15c:	2f00      	cmp	r7, #0
 800b15e:	460c      	mov	r4, r1
 800b160:	4619      	mov	r1, r3
 800b162:	463b      	mov	r3, r7
 800b164:	bfbb      	ittet	lt
 800b166:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b16a:	461f      	movlt	r7, r3
 800b16c:	2300      	movge	r3, #0
 800b16e:	232d      	movlt	r3, #45	@ 0x2d
 800b170:	700b      	strb	r3, [r1, #0]
 800b172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b174:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b178:	4691      	mov	r9, r2
 800b17a:	f023 0820 	bic.w	r8, r3, #32
 800b17e:	bfbc      	itt	lt
 800b180:	4632      	movlt	r2, r6
 800b182:	4616      	movlt	r6, r2
 800b184:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b188:	d005      	beq.n	800b196 <__cvt+0x42>
 800b18a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b18e:	d100      	bne.n	800b192 <__cvt+0x3e>
 800b190:	3401      	adds	r4, #1
 800b192:	2102      	movs	r1, #2
 800b194:	e000      	b.n	800b198 <__cvt+0x44>
 800b196:	2103      	movs	r1, #3
 800b198:	ab03      	add	r3, sp, #12
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	ab02      	add	r3, sp, #8
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	ec47 6b10 	vmov	d0, r6, r7
 800b1a4:	4653      	mov	r3, sl
 800b1a6:	4622      	mov	r2, r4
 800b1a8:	f000 ff4e 	bl	800c048 <_dtoa_r>
 800b1ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	d119      	bne.n	800b1e8 <__cvt+0x94>
 800b1b4:	f019 0f01 	tst.w	r9, #1
 800b1b8:	d00e      	beq.n	800b1d8 <__cvt+0x84>
 800b1ba:	eb00 0904 	add.w	r9, r0, r4
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	f7f5 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 800b1ca:	b108      	cbz	r0, 800b1d0 <__cvt+0x7c>
 800b1cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1d0:	2230      	movs	r2, #48	@ 0x30
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	454b      	cmp	r3, r9
 800b1d6:	d31e      	bcc.n	800b216 <__cvt+0xc2>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1dc:	1b5b      	subs	r3, r3, r5
 800b1de:	4628      	mov	r0, r5
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	b004      	add	sp, #16
 800b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1ec:	eb00 0904 	add.w	r9, r0, r4
 800b1f0:	d1e5      	bne.n	800b1be <__cvt+0x6a>
 800b1f2:	7803      	ldrb	r3, [r0, #0]
 800b1f4:	2b30      	cmp	r3, #48	@ 0x30
 800b1f6:	d10a      	bne.n	800b20e <__cvt+0xba>
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f5 fc8a 	bl	8000b18 <__aeabi_dcmpeq>
 800b204:	b918      	cbnz	r0, 800b20e <__cvt+0xba>
 800b206:	f1c4 0401 	rsb	r4, r4, #1
 800b20a:	f8ca 4000 	str.w	r4, [sl]
 800b20e:	f8da 3000 	ldr.w	r3, [sl]
 800b212:	4499      	add	r9, r3
 800b214:	e7d3      	b.n	800b1be <__cvt+0x6a>
 800b216:	1c59      	adds	r1, r3, #1
 800b218:	9103      	str	r1, [sp, #12]
 800b21a:	701a      	strb	r2, [r3, #0]
 800b21c:	e7d9      	b.n	800b1d2 <__cvt+0x7e>

0800b21e <__exponent>:
 800b21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b220:	2900      	cmp	r1, #0
 800b222:	bfba      	itte	lt
 800b224:	4249      	neglt	r1, r1
 800b226:	232d      	movlt	r3, #45	@ 0x2d
 800b228:	232b      	movge	r3, #43	@ 0x2b
 800b22a:	2909      	cmp	r1, #9
 800b22c:	7002      	strb	r2, [r0, #0]
 800b22e:	7043      	strb	r3, [r0, #1]
 800b230:	dd29      	ble.n	800b286 <__exponent+0x68>
 800b232:	f10d 0307 	add.w	r3, sp, #7
 800b236:	461d      	mov	r5, r3
 800b238:	270a      	movs	r7, #10
 800b23a:	461a      	mov	r2, r3
 800b23c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b240:	fb07 1416 	mls	r4, r7, r6, r1
 800b244:	3430      	adds	r4, #48	@ 0x30
 800b246:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b24a:	460c      	mov	r4, r1
 800b24c:	2c63      	cmp	r4, #99	@ 0x63
 800b24e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b252:	4631      	mov	r1, r6
 800b254:	dcf1      	bgt.n	800b23a <__exponent+0x1c>
 800b256:	3130      	adds	r1, #48	@ 0x30
 800b258:	1e94      	subs	r4, r2, #2
 800b25a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b25e:	1c41      	adds	r1, r0, #1
 800b260:	4623      	mov	r3, r4
 800b262:	42ab      	cmp	r3, r5
 800b264:	d30a      	bcc.n	800b27c <__exponent+0x5e>
 800b266:	f10d 0309 	add.w	r3, sp, #9
 800b26a:	1a9b      	subs	r3, r3, r2
 800b26c:	42ac      	cmp	r4, r5
 800b26e:	bf88      	it	hi
 800b270:	2300      	movhi	r3, #0
 800b272:	3302      	adds	r3, #2
 800b274:	4403      	add	r3, r0
 800b276:	1a18      	subs	r0, r3, r0
 800b278:	b003      	add	sp, #12
 800b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b280:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b284:	e7ed      	b.n	800b262 <__exponent+0x44>
 800b286:	2330      	movs	r3, #48	@ 0x30
 800b288:	3130      	adds	r1, #48	@ 0x30
 800b28a:	7083      	strb	r3, [r0, #2]
 800b28c:	70c1      	strb	r1, [r0, #3]
 800b28e:	1d03      	adds	r3, r0, #4
 800b290:	e7f1      	b.n	800b276 <__exponent+0x58>
	...

0800b294 <_printf_float>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	b08d      	sub	sp, #52	@ 0x34
 800b29a:	460c      	mov	r4, r1
 800b29c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b2a0:	4616      	mov	r6, r2
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	f000 fdbf 	bl	800be28 <_localeconv_r>
 800b2aa:	6803      	ldr	r3, [r0, #0]
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f5 f806 	bl	80002c0 <strlen>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2bc:	9005      	str	r0, [sp, #20]
 800b2be:	3307      	adds	r3, #7
 800b2c0:	f023 0307 	bic.w	r3, r3, #7
 800b2c4:	f103 0208 	add.w	r2, r3, #8
 800b2c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2cc:	f8d4 b000 	ldr.w	fp, [r4]
 800b2d0:	f8c8 2000 	str.w	r2, [r8]
 800b2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2ea:	4b9c      	ldr	r3, [pc, #624]	@ (800b55c <_printf_float+0x2c8>)
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f0:	f7f5 fc44 	bl	8000b7c <__aeabi_dcmpun>
 800b2f4:	bb70      	cbnz	r0, 800b354 <_printf_float+0xc0>
 800b2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2fa:	4b98      	ldr	r3, [pc, #608]	@ (800b55c <_printf_float+0x2c8>)
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	f7f5 fc1e 	bl	8000b40 <__aeabi_dcmple>
 800b304:	bb30      	cbnz	r0, 800b354 <_printf_float+0xc0>
 800b306:	2200      	movs	r2, #0
 800b308:	2300      	movs	r3, #0
 800b30a:	4640      	mov	r0, r8
 800b30c:	4649      	mov	r1, r9
 800b30e:	f7f5 fc0d 	bl	8000b2c <__aeabi_dcmplt>
 800b312:	b110      	cbz	r0, 800b31a <_printf_float+0x86>
 800b314:	232d      	movs	r3, #45	@ 0x2d
 800b316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b31a:	4a91      	ldr	r2, [pc, #580]	@ (800b560 <_printf_float+0x2cc>)
 800b31c:	4b91      	ldr	r3, [pc, #580]	@ (800b564 <_printf_float+0x2d0>)
 800b31e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b322:	bf94      	ite	ls
 800b324:	4690      	movls	r8, r2
 800b326:	4698      	movhi	r8, r3
 800b328:	2303      	movs	r3, #3
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	f02b 0304 	bic.w	r3, fp, #4
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	9700      	str	r7, [sp, #0]
 800b338:	4633      	mov	r3, r6
 800b33a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b33c:	4621      	mov	r1, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f9d2 	bl	800b6e8 <_printf_common>
 800b344:	3001      	adds	r0, #1
 800b346:	f040 808d 	bne.w	800b464 <_printf_float+0x1d0>
 800b34a:	f04f 30ff 	mov.w	r0, #4294967295
 800b34e:	b00d      	add	sp, #52	@ 0x34
 800b350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	f7f5 fc0e 	bl	8000b7c <__aeabi_dcmpun>
 800b360:	b140      	cbz	r0, 800b374 <_printf_float+0xe0>
 800b362:	464b      	mov	r3, r9
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfbc      	itt	lt
 800b368:	232d      	movlt	r3, #45	@ 0x2d
 800b36a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b36e:	4a7e      	ldr	r2, [pc, #504]	@ (800b568 <_printf_float+0x2d4>)
 800b370:	4b7e      	ldr	r3, [pc, #504]	@ (800b56c <_printf_float+0x2d8>)
 800b372:	e7d4      	b.n	800b31e <_printf_float+0x8a>
 800b374:	6863      	ldr	r3, [r4, #4]
 800b376:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b37a:	9206      	str	r2, [sp, #24]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	d13b      	bne.n	800b3f8 <_printf_float+0x164>
 800b380:	2306      	movs	r3, #6
 800b382:	6063      	str	r3, [r4, #4]
 800b384:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b388:	2300      	movs	r3, #0
 800b38a:	6022      	str	r2, [r4, #0]
 800b38c:	9303      	str	r3, [sp, #12]
 800b38e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b390:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b394:	ab09      	add	r3, sp, #36	@ 0x24
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	ec49 8b10 	vmov	d0, r8, r9
 800b39e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f7ff fed6 	bl	800b154 <__cvt>
 800b3a8:	9b06      	ldr	r3, [sp, #24]
 800b3aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3ac:	2b47      	cmp	r3, #71	@ 0x47
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	d129      	bne.n	800b406 <_printf_float+0x172>
 800b3b2:	1cc8      	adds	r0, r1, #3
 800b3b4:	db02      	blt.n	800b3bc <_printf_float+0x128>
 800b3b6:	6863      	ldr	r3, [r4, #4]
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	dd41      	ble.n	800b440 <_printf_float+0x1ac>
 800b3bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3c0:	fa5f fa8a 	uxtb.w	sl, sl
 800b3c4:	3901      	subs	r1, #1
 800b3c6:	4652      	mov	r2, sl
 800b3c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3ce:	f7ff ff26 	bl	800b21e <__exponent>
 800b3d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3d4:	1813      	adds	r3, r2, r0
 800b3d6:	2a01      	cmp	r2, #1
 800b3d8:	4681      	mov	r9, r0
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	dc02      	bgt.n	800b3e4 <_printf_float+0x150>
 800b3de:	6822      	ldr	r2, [r4, #0]
 800b3e0:	07d2      	lsls	r2, r2, #31
 800b3e2:	d501      	bpl.n	800b3e8 <_printf_float+0x154>
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0a2      	beq.n	800b336 <_printf_float+0xa2>
 800b3f0:	232d      	movs	r3, #45	@ 0x2d
 800b3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f6:	e79e      	b.n	800b336 <_printf_float+0xa2>
 800b3f8:	9a06      	ldr	r2, [sp, #24]
 800b3fa:	2a47      	cmp	r2, #71	@ 0x47
 800b3fc:	d1c2      	bne.n	800b384 <_printf_float+0xf0>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1c0      	bne.n	800b384 <_printf_float+0xf0>
 800b402:	2301      	movs	r3, #1
 800b404:	e7bd      	b.n	800b382 <_printf_float+0xee>
 800b406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b40a:	d9db      	bls.n	800b3c4 <_printf_float+0x130>
 800b40c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b410:	d118      	bne.n	800b444 <_printf_float+0x1b0>
 800b412:	2900      	cmp	r1, #0
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	dd0b      	ble.n	800b430 <_printf_float+0x19c>
 800b418:	6121      	str	r1, [r4, #16]
 800b41a:	b913      	cbnz	r3, 800b422 <_printf_float+0x18e>
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	07d0      	lsls	r0, r2, #31
 800b420:	d502      	bpl.n	800b428 <_printf_float+0x194>
 800b422:	3301      	adds	r3, #1
 800b424:	440b      	add	r3, r1
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b42a:	f04f 0900 	mov.w	r9, #0
 800b42e:	e7db      	b.n	800b3e8 <_printf_float+0x154>
 800b430:	b913      	cbnz	r3, 800b438 <_printf_float+0x1a4>
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	07d2      	lsls	r2, r2, #31
 800b436:	d501      	bpl.n	800b43c <_printf_float+0x1a8>
 800b438:	3302      	adds	r3, #2
 800b43a:	e7f4      	b.n	800b426 <_printf_float+0x192>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e7f2      	b.n	800b426 <_printf_float+0x192>
 800b440:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b446:	4299      	cmp	r1, r3
 800b448:	db05      	blt.n	800b456 <_printf_float+0x1c2>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	6121      	str	r1, [r4, #16]
 800b44e:	07d8      	lsls	r0, r3, #31
 800b450:	d5ea      	bpl.n	800b428 <_printf_float+0x194>
 800b452:	1c4b      	adds	r3, r1, #1
 800b454:	e7e7      	b.n	800b426 <_printf_float+0x192>
 800b456:	2900      	cmp	r1, #0
 800b458:	bfd4      	ite	le
 800b45a:	f1c1 0202 	rsble	r2, r1, #2
 800b45e:	2201      	movgt	r2, #1
 800b460:	4413      	add	r3, r2
 800b462:	e7e0      	b.n	800b426 <_printf_float+0x192>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	055a      	lsls	r2, r3, #21
 800b468:	d407      	bmi.n	800b47a <_printf_float+0x1e6>
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	4642      	mov	r2, r8
 800b46e:	4631      	mov	r1, r6
 800b470:	4628      	mov	r0, r5
 800b472:	47b8      	blx	r7
 800b474:	3001      	adds	r0, #1
 800b476:	d12b      	bne.n	800b4d0 <_printf_float+0x23c>
 800b478:	e767      	b.n	800b34a <_printf_float+0xb6>
 800b47a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b47e:	f240 80dd 	bls.w	800b63c <_printf_float+0x3a8>
 800b482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b486:	2200      	movs	r2, #0
 800b488:	2300      	movs	r3, #0
 800b48a:	f7f5 fb45 	bl	8000b18 <__aeabi_dcmpeq>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d033      	beq.n	800b4fa <_printf_float+0x266>
 800b492:	4a37      	ldr	r2, [pc, #220]	@ (800b570 <_printf_float+0x2dc>)
 800b494:	2301      	movs	r3, #1
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f af54 	beq.w	800b34a <_printf_float+0xb6>
 800b4a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b4a6:	4543      	cmp	r3, r8
 800b4a8:	db02      	blt.n	800b4b0 <_printf_float+0x21c>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	07d8      	lsls	r0, r3, #31
 800b4ae:	d50f      	bpl.n	800b4d0 <_printf_float+0x23c>
 800b4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af45 	beq.w	800b34a <_printf_float+0xb6>
 800b4c0:	f04f 0900 	mov.w	r9, #0
 800b4c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4c8:	f104 0a1a 	add.w	sl, r4, #26
 800b4cc:	45c8      	cmp	r8, r9
 800b4ce:	dc09      	bgt.n	800b4e4 <_printf_float+0x250>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	079b      	lsls	r3, r3, #30
 800b4d4:	f100 8103 	bmi.w	800b6de <_printf_float+0x44a>
 800b4d8:	68e0      	ldr	r0, [r4, #12]
 800b4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4dc:	4298      	cmp	r0, r3
 800b4de:	bfb8      	it	lt
 800b4e0:	4618      	movlt	r0, r3
 800b4e2:	e734      	b.n	800b34e <_printf_float+0xba>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	47b8      	blx	r7
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f43f af2b 	beq.w	800b34a <_printf_float+0xb6>
 800b4f4:	f109 0901 	add.w	r9, r9, #1
 800b4f8:	e7e8      	b.n	800b4cc <_printf_float+0x238>
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dc39      	bgt.n	800b574 <_printf_float+0x2e0>
 800b500:	4a1b      	ldr	r2, [pc, #108]	@ (800b570 <_printf_float+0x2dc>)
 800b502:	2301      	movs	r3, #1
 800b504:	4631      	mov	r1, r6
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f af1d 	beq.w	800b34a <_printf_float+0xb6>
 800b510:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b514:	ea59 0303 	orrs.w	r3, r9, r3
 800b518:	d102      	bne.n	800b520 <_printf_float+0x28c>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	07d9      	lsls	r1, r3, #31
 800b51e:	d5d7      	bpl.n	800b4d0 <_printf_float+0x23c>
 800b520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f af0d 	beq.w	800b34a <_printf_float+0xb6>
 800b530:	f04f 0a00 	mov.w	sl, #0
 800b534:	f104 0b1a 	add.w	fp, r4, #26
 800b538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53a:	425b      	negs	r3, r3
 800b53c:	4553      	cmp	r3, sl
 800b53e:	dc01      	bgt.n	800b544 <_printf_float+0x2b0>
 800b540:	464b      	mov	r3, r9
 800b542:	e793      	b.n	800b46c <_printf_float+0x1d8>
 800b544:	2301      	movs	r3, #1
 800b546:	465a      	mov	r2, fp
 800b548:	4631      	mov	r1, r6
 800b54a:	4628      	mov	r0, r5
 800b54c:	47b8      	blx	r7
 800b54e:	3001      	adds	r0, #1
 800b550:	f43f aefb 	beq.w	800b34a <_printf_float+0xb6>
 800b554:	f10a 0a01 	add.w	sl, sl, #1
 800b558:	e7ee      	b.n	800b538 <_printf_float+0x2a4>
 800b55a:	bf00      	nop
 800b55c:	7fefffff 	.word	0x7fefffff
 800b560:	0800e33c 	.word	0x0800e33c
 800b564:	0800e340 	.word	0x0800e340
 800b568:	0800e344 	.word	0x0800e344
 800b56c:	0800e348 	.word	0x0800e348
 800b570:	0800e34c 	.word	0x0800e34c
 800b574:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b57a:	4553      	cmp	r3, sl
 800b57c:	bfa8      	it	ge
 800b57e:	4653      	movge	r3, sl
 800b580:	2b00      	cmp	r3, #0
 800b582:	4699      	mov	r9, r3
 800b584:	dc36      	bgt.n	800b5f4 <_printf_float+0x360>
 800b586:	f04f 0b00 	mov.w	fp, #0
 800b58a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b58e:	f104 021a 	add.w	r2, r4, #26
 800b592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b594:	9306      	str	r3, [sp, #24]
 800b596:	eba3 0309 	sub.w	r3, r3, r9
 800b59a:	455b      	cmp	r3, fp
 800b59c:	dc31      	bgt.n	800b602 <_printf_float+0x36e>
 800b59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a0:	459a      	cmp	sl, r3
 800b5a2:	dc3a      	bgt.n	800b61a <_printf_float+0x386>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	07da      	lsls	r2, r3, #31
 800b5a8:	d437      	bmi.n	800b61a <_printf_float+0x386>
 800b5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ac:	ebaa 0903 	sub.w	r9, sl, r3
 800b5b0:	9b06      	ldr	r3, [sp, #24]
 800b5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800b5b6:	4599      	cmp	r9, r3
 800b5b8:	bfa8      	it	ge
 800b5ba:	4699      	movge	r9, r3
 800b5bc:	f1b9 0f00 	cmp.w	r9, #0
 800b5c0:	dc33      	bgt.n	800b62a <_printf_float+0x396>
 800b5c2:	f04f 0800 	mov.w	r8, #0
 800b5c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5ca:	f104 0b1a 	add.w	fp, r4, #26
 800b5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b5d4:	eba3 0309 	sub.w	r3, r3, r9
 800b5d8:	4543      	cmp	r3, r8
 800b5da:	f77f af79 	ble.w	800b4d0 <_printf_float+0x23c>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	465a      	mov	r2, fp
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	47b8      	blx	r7
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	f43f aeae 	beq.w	800b34a <_printf_float+0xb6>
 800b5ee:	f108 0801 	add.w	r8, r8, #1
 800b5f2:	e7ec      	b.n	800b5ce <_printf_float+0x33a>
 800b5f4:	4642      	mov	r2, r8
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	47b8      	blx	r7
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d1c2      	bne.n	800b586 <_printf_float+0x2f2>
 800b600:	e6a3      	b.n	800b34a <_printf_float+0xb6>
 800b602:	2301      	movs	r3, #1
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	9206      	str	r2, [sp, #24]
 800b60a:	47b8      	blx	r7
 800b60c:	3001      	adds	r0, #1
 800b60e:	f43f ae9c 	beq.w	800b34a <_printf_float+0xb6>
 800b612:	9a06      	ldr	r2, [sp, #24]
 800b614:	f10b 0b01 	add.w	fp, fp, #1
 800b618:	e7bb      	b.n	800b592 <_printf_float+0x2fe>
 800b61a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b61e:	4631      	mov	r1, r6
 800b620:	4628      	mov	r0, r5
 800b622:	47b8      	blx	r7
 800b624:	3001      	adds	r0, #1
 800b626:	d1c0      	bne.n	800b5aa <_printf_float+0x316>
 800b628:	e68f      	b.n	800b34a <_printf_float+0xb6>
 800b62a:	9a06      	ldr	r2, [sp, #24]
 800b62c:	464b      	mov	r3, r9
 800b62e:	4442      	add	r2, r8
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	d1c3      	bne.n	800b5c2 <_printf_float+0x32e>
 800b63a:	e686      	b.n	800b34a <_printf_float+0xb6>
 800b63c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b640:	f1ba 0f01 	cmp.w	sl, #1
 800b644:	dc01      	bgt.n	800b64a <_printf_float+0x3b6>
 800b646:	07db      	lsls	r3, r3, #31
 800b648:	d536      	bpl.n	800b6b8 <_printf_float+0x424>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4642      	mov	r2, r8
 800b64e:	4631      	mov	r1, r6
 800b650:	4628      	mov	r0, r5
 800b652:	47b8      	blx	r7
 800b654:	3001      	adds	r0, #1
 800b656:	f43f ae78 	beq.w	800b34a <_printf_float+0xb6>
 800b65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	f43f ae70 	beq.w	800b34a <_printf_float+0xb6>
 800b66a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b676:	f7f5 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800b67a:	b9c0      	cbnz	r0, 800b6ae <_printf_float+0x41a>
 800b67c:	4653      	mov	r3, sl
 800b67e:	f108 0201 	add.w	r2, r8, #1
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	d10c      	bne.n	800b6a6 <_printf_float+0x412>
 800b68c:	e65d      	b.n	800b34a <_printf_float+0xb6>
 800b68e:	2301      	movs	r3, #1
 800b690:	465a      	mov	r2, fp
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	f43f ae56 	beq.w	800b34a <_printf_float+0xb6>
 800b69e:	f108 0801 	add.w	r8, r8, #1
 800b6a2:	45d0      	cmp	r8, sl
 800b6a4:	dbf3      	blt.n	800b68e <_printf_float+0x3fa>
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6ac:	e6df      	b.n	800b46e <_printf_float+0x1da>
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	f104 0b1a 	add.w	fp, r4, #26
 800b6b6:	e7f4      	b.n	800b6a2 <_printf_float+0x40e>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	e7e1      	b.n	800b682 <_printf_float+0x3ee>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	464a      	mov	r2, r9
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	47b8      	blx	r7
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	f43f ae3e 	beq.w	800b34a <_printf_float+0xb6>
 800b6ce:	f108 0801 	add.w	r8, r8, #1
 800b6d2:	68e3      	ldr	r3, [r4, #12]
 800b6d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6d6:	1a5b      	subs	r3, r3, r1
 800b6d8:	4543      	cmp	r3, r8
 800b6da:	dcf0      	bgt.n	800b6be <_printf_float+0x42a>
 800b6dc:	e6fc      	b.n	800b4d8 <_printf_float+0x244>
 800b6de:	f04f 0800 	mov.w	r8, #0
 800b6e2:	f104 0919 	add.w	r9, r4, #25
 800b6e6:	e7f4      	b.n	800b6d2 <_printf_float+0x43e>

0800b6e8 <_printf_common>:
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	4698      	mov	r8, r3
 800b6f0:	688a      	ldr	r2, [r1, #8]
 800b6f2:	690b      	ldr	r3, [r1, #16]
 800b6f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	bfb8      	it	lt
 800b6fc:	4613      	movlt	r3, r2
 800b6fe:	6033      	str	r3, [r6, #0]
 800b700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b704:	4607      	mov	r7, r0
 800b706:	460c      	mov	r4, r1
 800b708:	b10a      	cbz	r2, 800b70e <_printf_common+0x26>
 800b70a:	3301      	adds	r3, #1
 800b70c:	6033      	str	r3, [r6, #0]
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	0699      	lsls	r1, r3, #26
 800b712:	bf42      	ittt	mi
 800b714:	6833      	ldrmi	r3, [r6, #0]
 800b716:	3302      	addmi	r3, #2
 800b718:	6033      	strmi	r3, [r6, #0]
 800b71a:	6825      	ldr	r5, [r4, #0]
 800b71c:	f015 0506 	ands.w	r5, r5, #6
 800b720:	d106      	bne.n	800b730 <_printf_common+0x48>
 800b722:	f104 0a19 	add.w	sl, r4, #25
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	6832      	ldr	r2, [r6, #0]
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dc26      	bgt.n	800b77e <_printf_common+0x96>
 800b730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	3b00      	subs	r3, #0
 800b738:	bf18      	it	ne
 800b73a:	2301      	movne	r3, #1
 800b73c:	0692      	lsls	r2, r2, #26
 800b73e:	d42b      	bmi.n	800b798 <_printf_common+0xb0>
 800b740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b744:	4641      	mov	r1, r8
 800b746:	4638      	mov	r0, r7
 800b748:	47c8      	blx	r9
 800b74a:	3001      	adds	r0, #1
 800b74c:	d01e      	beq.n	800b78c <_printf_common+0xa4>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	6922      	ldr	r2, [r4, #16]
 800b752:	f003 0306 	and.w	r3, r3, #6
 800b756:	2b04      	cmp	r3, #4
 800b758:	bf02      	ittt	eq
 800b75a:	68e5      	ldreq	r5, [r4, #12]
 800b75c:	6833      	ldreq	r3, [r6, #0]
 800b75e:	1aed      	subeq	r5, r5, r3
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	bf0c      	ite	eq
 800b764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b768:	2500      	movne	r5, #0
 800b76a:	4293      	cmp	r3, r2
 800b76c:	bfc4      	itt	gt
 800b76e:	1a9b      	subgt	r3, r3, r2
 800b770:	18ed      	addgt	r5, r5, r3
 800b772:	2600      	movs	r6, #0
 800b774:	341a      	adds	r4, #26
 800b776:	42b5      	cmp	r5, r6
 800b778:	d11a      	bne.n	800b7b0 <_printf_common+0xc8>
 800b77a:	2000      	movs	r0, #0
 800b77c:	e008      	b.n	800b790 <_printf_common+0xa8>
 800b77e:	2301      	movs	r3, #1
 800b780:	4652      	mov	r2, sl
 800b782:	4641      	mov	r1, r8
 800b784:	4638      	mov	r0, r7
 800b786:	47c8      	blx	r9
 800b788:	3001      	adds	r0, #1
 800b78a:	d103      	bne.n	800b794 <_printf_common+0xac>
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b794:	3501      	adds	r5, #1
 800b796:	e7c6      	b.n	800b726 <_printf_common+0x3e>
 800b798:	18e1      	adds	r1, r4, r3
 800b79a:	1c5a      	adds	r2, r3, #1
 800b79c:	2030      	movs	r0, #48	@ 0x30
 800b79e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7a2:	4422      	add	r2, r4
 800b7a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7ac:	3302      	adds	r3, #2
 800b7ae:	e7c7      	b.n	800b740 <_printf_common+0x58>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4641      	mov	r1, r8
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	47c8      	blx	r9
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d0e6      	beq.n	800b78c <_printf_common+0xa4>
 800b7be:	3601      	adds	r6, #1
 800b7c0:	e7d9      	b.n	800b776 <_printf_common+0x8e>
	...

0800b7c4 <_printf_i>:
 800b7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c8:	7e0f      	ldrb	r7, [r1, #24]
 800b7ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7cc:	2f78      	cmp	r7, #120	@ 0x78
 800b7ce:	4691      	mov	r9, r2
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	469a      	mov	sl, r3
 800b7d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7da:	d807      	bhi.n	800b7ec <_printf_i+0x28>
 800b7dc:	2f62      	cmp	r7, #98	@ 0x62
 800b7de:	d80a      	bhi.n	800b7f6 <_printf_i+0x32>
 800b7e0:	2f00      	cmp	r7, #0
 800b7e2:	f000 80d2 	beq.w	800b98a <_printf_i+0x1c6>
 800b7e6:	2f58      	cmp	r7, #88	@ 0x58
 800b7e8:	f000 80b9 	beq.w	800b95e <_printf_i+0x19a>
 800b7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7f4:	e03a      	b.n	800b86c <_printf_i+0xa8>
 800b7f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7fa:	2b15      	cmp	r3, #21
 800b7fc:	d8f6      	bhi.n	800b7ec <_printf_i+0x28>
 800b7fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b804 <_printf_i+0x40>)
 800b800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b804:	0800b85d 	.word	0x0800b85d
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b7ed 	.word	0x0800b7ed
 800b810:	0800b7ed 	.word	0x0800b7ed
 800b814:	0800b7ed 	.word	0x0800b7ed
 800b818:	0800b7ed 	.word	0x0800b7ed
 800b81c:	0800b871 	.word	0x0800b871
 800b820:	0800b7ed 	.word	0x0800b7ed
 800b824:	0800b7ed 	.word	0x0800b7ed
 800b828:	0800b7ed 	.word	0x0800b7ed
 800b82c:	0800b7ed 	.word	0x0800b7ed
 800b830:	0800b971 	.word	0x0800b971
 800b834:	0800b89b 	.word	0x0800b89b
 800b838:	0800b92b 	.word	0x0800b92b
 800b83c:	0800b7ed 	.word	0x0800b7ed
 800b840:	0800b7ed 	.word	0x0800b7ed
 800b844:	0800b993 	.word	0x0800b993
 800b848:	0800b7ed 	.word	0x0800b7ed
 800b84c:	0800b89b 	.word	0x0800b89b
 800b850:	0800b7ed 	.word	0x0800b7ed
 800b854:	0800b7ed 	.word	0x0800b7ed
 800b858:	0800b933 	.word	0x0800b933
 800b85c:	6833      	ldr	r3, [r6, #0]
 800b85e:	1d1a      	adds	r2, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6032      	str	r2, [r6, #0]
 800b864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b86c:	2301      	movs	r3, #1
 800b86e:	e09d      	b.n	800b9ac <_printf_i+0x1e8>
 800b870:	6833      	ldr	r3, [r6, #0]
 800b872:	6820      	ldr	r0, [r4, #0]
 800b874:	1d19      	adds	r1, r3, #4
 800b876:	6031      	str	r1, [r6, #0]
 800b878:	0606      	lsls	r6, r0, #24
 800b87a:	d501      	bpl.n	800b880 <_printf_i+0xbc>
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	e003      	b.n	800b888 <_printf_i+0xc4>
 800b880:	0645      	lsls	r5, r0, #25
 800b882:	d5fb      	bpl.n	800b87c <_printf_i+0xb8>
 800b884:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b888:	2d00      	cmp	r5, #0
 800b88a:	da03      	bge.n	800b894 <_printf_i+0xd0>
 800b88c:	232d      	movs	r3, #45	@ 0x2d
 800b88e:	426d      	negs	r5, r5
 800b890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b894:	4859      	ldr	r0, [pc, #356]	@ (800b9fc <_printf_i+0x238>)
 800b896:	230a      	movs	r3, #10
 800b898:	e011      	b.n	800b8be <_printf_i+0xfa>
 800b89a:	6821      	ldr	r1, [r4, #0]
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	0608      	lsls	r0, r1, #24
 800b8a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8a4:	d402      	bmi.n	800b8ac <_printf_i+0xe8>
 800b8a6:	0649      	lsls	r1, r1, #25
 800b8a8:	bf48      	it	mi
 800b8aa:	b2ad      	uxthmi	r5, r5
 800b8ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8ae:	4853      	ldr	r0, [pc, #332]	@ (800b9fc <_printf_i+0x238>)
 800b8b0:	6033      	str	r3, [r6, #0]
 800b8b2:	bf14      	ite	ne
 800b8b4:	230a      	movne	r3, #10
 800b8b6:	2308      	moveq	r3, #8
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8be:	6866      	ldr	r6, [r4, #4]
 800b8c0:	60a6      	str	r6, [r4, #8]
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	bfa2      	ittt	ge
 800b8c6:	6821      	ldrge	r1, [r4, #0]
 800b8c8:	f021 0104 	bicge.w	r1, r1, #4
 800b8cc:	6021      	strge	r1, [r4, #0]
 800b8ce:	b90d      	cbnz	r5, 800b8d4 <_printf_i+0x110>
 800b8d0:	2e00      	cmp	r6, #0
 800b8d2:	d04b      	beq.n	800b96c <_printf_i+0x1a8>
 800b8d4:	4616      	mov	r6, r2
 800b8d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8da:	fb03 5711 	mls	r7, r3, r1, r5
 800b8de:	5dc7      	ldrb	r7, [r0, r7]
 800b8e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8e4:	462f      	mov	r7, r5
 800b8e6:	42bb      	cmp	r3, r7
 800b8e8:	460d      	mov	r5, r1
 800b8ea:	d9f4      	bls.n	800b8d6 <_printf_i+0x112>
 800b8ec:	2b08      	cmp	r3, #8
 800b8ee:	d10b      	bne.n	800b908 <_printf_i+0x144>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	07df      	lsls	r7, r3, #31
 800b8f4:	d508      	bpl.n	800b908 <_printf_i+0x144>
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	6861      	ldr	r1, [r4, #4]
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	bfde      	ittt	le
 800b8fe:	2330      	movle	r3, #48	@ 0x30
 800b900:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b904:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b908:	1b92      	subs	r2, r2, r6
 800b90a:	6122      	str	r2, [r4, #16]
 800b90c:	f8cd a000 	str.w	sl, [sp]
 800b910:	464b      	mov	r3, r9
 800b912:	aa03      	add	r2, sp, #12
 800b914:	4621      	mov	r1, r4
 800b916:	4640      	mov	r0, r8
 800b918:	f7ff fee6 	bl	800b6e8 <_printf_common>
 800b91c:	3001      	adds	r0, #1
 800b91e:	d14a      	bne.n	800b9b6 <_printf_i+0x1f2>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295
 800b924:	b004      	add	sp, #16
 800b926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	f043 0320 	orr.w	r3, r3, #32
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	4833      	ldr	r0, [pc, #204]	@ (800ba00 <_printf_i+0x23c>)
 800b934:	2778      	movs	r7, #120	@ 0x78
 800b936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	6831      	ldr	r1, [r6, #0]
 800b93e:	061f      	lsls	r7, r3, #24
 800b940:	f851 5b04 	ldr.w	r5, [r1], #4
 800b944:	d402      	bmi.n	800b94c <_printf_i+0x188>
 800b946:	065f      	lsls	r7, r3, #25
 800b948:	bf48      	it	mi
 800b94a:	b2ad      	uxthmi	r5, r5
 800b94c:	6031      	str	r1, [r6, #0]
 800b94e:	07d9      	lsls	r1, r3, #31
 800b950:	bf44      	itt	mi
 800b952:	f043 0320 	orrmi.w	r3, r3, #32
 800b956:	6023      	strmi	r3, [r4, #0]
 800b958:	b11d      	cbz	r5, 800b962 <_printf_i+0x19e>
 800b95a:	2310      	movs	r3, #16
 800b95c:	e7ac      	b.n	800b8b8 <_printf_i+0xf4>
 800b95e:	4827      	ldr	r0, [pc, #156]	@ (800b9fc <_printf_i+0x238>)
 800b960:	e7e9      	b.n	800b936 <_printf_i+0x172>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	f023 0320 	bic.w	r3, r3, #32
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	e7f6      	b.n	800b95a <_printf_i+0x196>
 800b96c:	4616      	mov	r6, r2
 800b96e:	e7bd      	b.n	800b8ec <_printf_i+0x128>
 800b970:	6833      	ldr	r3, [r6, #0]
 800b972:	6825      	ldr	r5, [r4, #0]
 800b974:	6961      	ldr	r1, [r4, #20]
 800b976:	1d18      	adds	r0, r3, #4
 800b978:	6030      	str	r0, [r6, #0]
 800b97a:	062e      	lsls	r6, r5, #24
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	d501      	bpl.n	800b984 <_printf_i+0x1c0>
 800b980:	6019      	str	r1, [r3, #0]
 800b982:	e002      	b.n	800b98a <_printf_i+0x1c6>
 800b984:	0668      	lsls	r0, r5, #25
 800b986:	d5fb      	bpl.n	800b980 <_printf_i+0x1bc>
 800b988:	8019      	strh	r1, [r3, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	6123      	str	r3, [r4, #16]
 800b98e:	4616      	mov	r6, r2
 800b990:	e7bc      	b.n	800b90c <_printf_i+0x148>
 800b992:	6833      	ldr	r3, [r6, #0]
 800b994:	1d1a      	adds	r2, r3, #4
 800b996:	6032      	str	r2, [r6, #0]
 800b998:	681e      	ldr	r6, [r3, #0]
 800b99a:	6862      	ldr	r2, [r4, #4]
 800b99c:	2100      	movs	r1, #0
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7f4 fc3e 	bl	8000220 <memchr>
 800b9a4:	b108      	cbz	r0, 800b9aa <_printf_i+0x1e6>
 800b9a6:	1b80      	subs	r0, r0, r6
 800b9a8:	6060      	str	r0, [r4, #4]
 800b9aa:	6863      	ldr	r3, [r4, #4]
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9b4:	e7aa      	b.n	800b90c <_printf_i+0x148>
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	4632      	mov	r2, r6
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	4640      	mov	r0, r8
 800b9be:	47d0      	blx	sl
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d0ad      	beq.n	800b920 <_printf_i+0x15c>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	079b      	lsls	r3, r3, #30
 800b9c8:	d413      	bmi.n	800b9f2 <_printf_i+0x22e>
 800b9ca:	68e0      	ldr	r0, [r4, #12]
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	4298      	cmp	r0, r3
 800b9d0:	bfb8      	it	lt
 800b9d2:	4618      	movlt	r0, r3
 800b9d4:	e7a6      	b.n	800b924 <_printf_i+0x160>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	4632      	mov	r2, r6
 800b9da:	4649      	mov	r1, r9
 800b9dc:	4640      	mov	r0, r8
 800b9de:	47d0      	blx	sl
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d09d      	beq.n	800b920 <_printf_i+0x15c>
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	68e3      	ldr	r3, [r4, #12]
 800b9e8:	9903      	ldr	r1, [sp, #12]
 800b9ea:	1a5b      	subs	r3, r3, r1
 800b9ec:	42ab      	cmp	r3, r5
 800b9ee:	dcf2      	bgt.n	800b9d6 <_printf_i+0x212>
 800b9f0:	e7eb      	b.n	800b9ca <_printf_i+0x206>
 800b9f2:	2500      	movs	r5, #0
 800b9f4:	f104 0619 	add.w	r6, r4, #25
 800b9f8:	e7f5      	b.n	800b9e6 <_printf_i+0x222>
 800b9fa:	bf00      	nop
 800b9fc:	0800e34e 	.word	0x0800e34e
 800ba00:	0800e35f 	.word	0x0800e35f

0800ba04 <std>:
 800ba04:	2300      	movs	r3, #0
 800ba06:	b510      	push	{r4, lr}
 800ba08:	4604      	mov	r4, r0
 800ba0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba12:	6083      	str	r3, [r0, #8]
 800ba14:	8181      	strh	r1, [r0, #12]
 800ba16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba18:	81c2      	strh	r2, [r0, #14]
 800ba1a:	6183      	str	r3, [r0, #24]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	2208      	movs	r2, #8
 800ba20:	305c      	adds	r0, #92	@ 0x5c
 800ba22:	f000 f9f9 	bl	800be18 <memset>
 800ba26:	4b0d      	ldr	r3, [pc, #52]	@ (800ba5c <std+0x58>)
 800ba28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba60 <std+0x5c>)
 800ba2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <std+0x60>)
 800ba30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <std+0x64>)
 800ba34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <std+0x68>)
 800ba38:	6224      	str	r4, [r4, #32]
 800ba3a:	429c      	cmp	r4, r3
 800ba3c:	d006      	beq.n	800ba4c <std+0x48>
 800ba3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba42:	4294      	cmp	r4, r2
 800ba44:	d002      	beq.n	800ba4c <std+0x48>
 800ba46:	33d0      	adds	r3, #208	@ 0xd0
 800ba48:	429c      	cmp	r4, r3
 800ba4a:	d105      	bne.n	800ba58 <std+0x54>
 800ba4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba54:	f000 ba5c 	b.w	800bf10 <__retarget_lock_init_recursive>
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800bc69 	.word	0x0800bc69
 800ba60:	0800bc8b 	.word	0x0800bc8b
 800ba64:	0800bcc3 	.word	0x0800bcc3
 800ba68:	0800bce7 	.word	0x0800bce7
 800ba6c:	20005500 	.word	0x20005500

0800ba70 <stdio_exit_handler>:
 800ba70:	4a02      	ldr	r2, [pc, #8]	@ (800ba7c <stdio_exit_handler+0xc>)
 800ba72:	4903      	ldr	r1, [pc, #12]	@ (800ba80 <stdio_exit_handler+0x10>)
 800ba74:	4803      	ldr	r0, [pc, #12]	@ (800ba84 <stdio_exit_handler+0x14>)
 800ba76:	f000 b869 	b.w	800bb4c <_fwalk_sglue>
 800ba7a:	bf00      	nop
 800ba7c:	20000010 	.word	0x20000010
 800ba80:	0800d861 	.word	0x0800d861
 800ba84:	20000020 	.word	0x20000020

0800ba88 <cleanup_stdio>:
 800ba88:	6841      	ldr	r1, [r0, #4]
 800ba8a:	4b0c      	ldr	r3, [pc, #48]	@ (800babc <cleanup_stdio+0x34>)
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	4604      	mov	r4, r0
 800ba92:	d001      	beq.n	800ba98 <cleanup_stdio+0x10>
 800ba94:	f001 fee4 	bl	800d860 <_fflush_r>
 800ba98:	68a1      	ldr	r1, [r4, #8]
 800ba9a:	4b09      	ldr	r3, [pc, #36]	@ (800bac0 <cleanup_stdio+0x38>)
 800ba9c:	4299      	cmp	r1, r3
 800ba9e:	d002      	beq.n	800baa6 <cleanup_stdio+0x1e>
 800baa0:	4620      	mov	r0, r4
 800baa2:	f001 fedd 	bl	800d860 <_fflush_r>
 800baa6:	68e1      	ldr	r1, [r4, #12]
 800baa8:	4b06      	ldr	r3, [pc, #24]	@ (800bac4 <cleanup_stdio+0x3c>)
 800baaa:	4299      	cmp	r1, r3
 800baac:	d004      	beq.n	800bab8 <cleanup_stdio+0x30>
 800baae:	4620      	mov	r0, r4
 800bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bab4:	f001 bed4 	b.w	800d860 <_fflush_r>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	bf00      	nop
 800babc:	20005500 	.word	0x20005500
 800bac0:	20005568 	.word	0x20005568
 800bac4:	200055d0 	.word	0x200055d0

0800bac8 <global_stdio_init.part.0>:
 800bac8:	b510      	push	{r4, lr}
 800baca:	4b0b      	ldr	r3, [pc, #44]	@ (800baf8 <global_stdio_init.part.0+0x30>)
 800bacc:	4c0b      	ldr	r4, [pc, #44]	@ (800bafc <global_stdio_init.part.0+0x34>)
 800bace:	4a0c      	ldr	r2, [pc, #48]	@ (800bb00 <global_stdio_init.part.0+0x38>)
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	4620      	mov	r0, r4
 800bad4:	2200      	movs	r2, #0
 800bad6:	2104      	movs	r1, #4
 800bad8:	f7ff ff94 	bl	800ba04 <std>
 800badc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bae0:	2201      	movs	r2, #1
 800bae2:	2109      	movs	r1, #9
 800bae4:	f7ff ff8e 	bl	800ba04 <std>
 800bae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baec:	2202      	movs	r2, #2
 800baee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf2:	2112      	movs	r1, #18
 800baf4:	f7ff bf86 	b.w	800ba04 <std>
 800baf8:	20005638 	.word	0x20005638
 800bafc:	20005500 	.word	0x20005500
 800bb00:	0800ba71 	.word	0x0800ba71

0800bb04 <__sfp_lock_acquire>:
 800bb04:	4801      	ldr	r0, [pc, #4]	@ (800bb0c <__sfp_lock_acquire+0x8>)
 800bb06:	f000 ba04 	b.w	800bf12 <__retarget_lock_acquire_recursive>
 800bb0a:	bf00      	nop
 800bb0c:	20005641 	.word	0x20005641

0800bb10 <__sfp_lock_release>:
 800bb10:	4801      	ldr	r0, [pc, #4]	@ (800bb18 <__sfp_lock_release+0x8>)
 800bb12:	f000 b9ff 	b.w	800bf14 <__retarget_lock_release_recursive>
 800bb16:	bf00      	nop
 800bb18:	20005641 	.word	0x20005641

0800bb1c <__sinit>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4604      	mov	r4, r0
 800bb20:	f7ff fff0 	bl	800bb04 <__sfp_lock_acquire>
 800bb24:	6a23      	ldr	r3, [r4, #32]
 800bb26:	b11b      	cbz	r3, 800bb30 <__sinit+0x14>
 800bb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb2c:	f7ff bff0 	b.w	800bb10 <__sfp_lock_release>
 800bb30:	4b04      	ldr	r3, [pc, #16]	@ (800bb44 <__sinit+0x28>)
 800bb32:	6223      	str	r3, [r4, #32]
 800bb34:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <__sinit+0x2c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f5      	bne.n	800bb28 <__sinit+0xc>
 800bb3c:	f7ff ffc4 	bl	800bac8 <global_stdio_init.part.0>
 800bb40:	e7f2      	b.n	800bb28 <__sinit+0xc>
 800bb42:	bf00      	nop
 800bb44:	0800ba89 	.word	0x0800ba89
 800bb48:	20005638 	.word	0x20005638

0800bb4c <_fwalk_sglue>:
 800bb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb50:	4607      	mov	r7, r0
 800bb52:	4688      	mov	r8, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	2600      	movs	r6, #0
 800bb58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb5c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb60:	d505      	bpl.n	800bb6e <_fwalk_sglue+0x22>
 800bb62:	6824      	ldr	r4, [r4, #0]
 800bb64:	2c00      	cmp	r4, #0
 800bb66:	d1f7      	bne.n	800bb58 <_fwalk_sglue+0xc>
 800bb68:	4630      	mov	r0, r6
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d907      	bls.n	800bb84 <_fwalk_sglue+0x38>
 800bb74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	d003      	beq.n	800bb84 <_fwalk_sglue+0x38>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4638      	mov	r0, r7
 800bb80:	47c0      	blx	r8
 800bb82:	4306      	orrs	r6, r0
 800bb84:	3568      	adds	r5, #104	@ 0x68
 800bb86:	e7e9      	b.n	800bb5c <_fwalk_sglue+0x10>

0800bb88 <iprintf>:
 800bb88:	b40f      	push	{r0, r1, r2, r3}
 800bb8a:	b507      	push	{r0, r1, r2, lr}
 800bb8c:	4906      	ldr	r1, [pc, #24]	@ (800bba8 <iprintf+0x20>)
 800bb8e:	ab04      	add	r3, sp, #16
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb96:	6881      	ldr	r1, [r0, #8]
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	f001 fcc5 	bl	800d528 <_vfiprintf_r>
 800bb9e:	b003      	add	sp, #12
 800bba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba4:	b004      	add	sp, #16
 800bba6:	4770      	bx	lr
 800bba8:	2000001c 	.word	0x2000001c

0800bbac <_puts_r>:
 800bbac:	6a03      	ldr	r3, [r0, #32]
 800bbae:	b570      	push	{r4, r5, r6, lr}
 800bbb0:	6884      	ldr	r4, [r0, #8]
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	b90b      	cbnz	r3, 800bbbc <_puts_r+0x10>
 800bbb8:	f7ff ffb0 	bl	800bb1c <__sinit>
 800bbbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbbe:	07db      	lsls	r3, r3, #31
 800bbc0:	d405      	bmi.n	800bbce <_puts_r+0x22>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	0598      	lsls	r0, r3, #22
 800bbc6:	d402      	bmi.n	800bbce <_puts_r+0x22>
 800bbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbca:	f000 f9a2 	bl	800bf12 <__retarget_lock_acquire_recursive>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	0719      	lsls	r1, r3, #28
 800bbd2:	d502      	bpl.n	800bbda <_puts_r+0x2e>
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d135      	bne.n	800bc46 <_puts_r+0x9a>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f000 f8c5 	bl	800bd6c <__swsetup_r>
 800bbe2:	b380      	cbz	r0, 800bc46 <_puts_r+0x9a>
 800bbe4:	f04f 35ff 	mov.w	r5, #4294967295
 800bbe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbea:	07da      	lsls	r2, r3, #31
 800bbec:	d405      	bmi.n	800bbfa <_puts_r+0x4e>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	059b      	lsls	r3, r3, #22
 800bbf2:	d402      	bmi.n	800bbfa <_puts_r+0x4e>
 800bbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbf6:	f000 f98d 	bl	800bf14 <__retarget_lock_release_recursive>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	da04      	bge.n	800bc0c <_puts_r+0x60>
 800bc02:	69a2      	ldr	r2, [r4, #24]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	dc17      	bgt.n	800bc38 <_puts_r+0x8c>
 800bc08:	290a      	cmp	r1, #10
 800bc0a:	d015      	beq.n	800bc38 <_puts_r+0x8c>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	6022      	str	r2, [r4, #0]
 800bc12:	7019      	strb	r1, [r3, #0]
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	d1ed      	bne.n	800bbfe <_puts_r+0x52>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	da11      	bge.n	800bc4a <_puts_r+0x9e>
 800bc26:	4622      	mov	r2, r4
 800bc28:	210a      	movs	r1, #10
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f000 f85f 	bl	800bcee <__swbuf_r>
 800bc30:	3001      	adds	r0, #1
 800bc32:	d0d7      	beq.n	800bbe4 <_puts_r+0x38>
 800bc34:	250a      	movs	r5, #10
 800bc36:	e7d7      	b.n	800bbe8 <_puts_r+0x3c>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f000 f857 	bl	800bcee <__swbuf_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	d1e7      	bne.n	800bc14 <_puts_r+0x68>
 800bc44:	e7ce      	b.n	800bbe4 <_puts_r+0x38>
 800bc46:	3e01      	subs	r6, #1
 800bc48:	e7e4      	b.n	800bc14 <_puts_r+0x68>
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	6022      	str	r2, [r4, #0]
 800bc50:	220a      	movs	r2, #10
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e7ee      	b.n	800bc34 <_puts_r+0x88>
	...

0800bc58 <puts>:
 800bc58:	4b02      	ldr	r3, [pc, #8]	@ (800bc64 <puts+0xc>)
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	f7ff bfa5 	b.w	800bbac <_puts_r>
 800bc62:	bf00      	nop
 800bc64:	2000001c 	.word	0x2000001c

0800bc68 <__sread>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	f000 f900 	bl	800be74 <_read_r>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	bfab      	itete	ge
 800bc78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc7a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc7c:	181b      	addge	r3, r3, r0
 800bc7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc82:	bfac      	ite	ge
 800bc84:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc86:	81a3      	strhlt	r3, [r4, #12]
 800bc88:	bd10      	pop	{r4, pc}

0800bc8a <__swrite>:
 800bc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8e:	461f      	mov	r7, r3
 800bc90:	898b      	ldrh	r3, [r1, #12]
 800bc92:	05db      	lsls	r3, r3, #23
 800bc94:	4605      	mov	r5, r0
 800bc96:	460c      	mov	r4, r1
 800bc98:	4616      	mov	r6, r2
 800bc9a:	d505      	bpl.n	800bca8 <__swrite+0x1e>
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	2302      	movs	r3, #2
 800bca2:	2200      	movs	r2, #0
 800bca4:	f000 f8d4 	bl	800be50 <_lseek_r>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcb2:	81a3      	strh	r3, [r4, #12]
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	4628      	mov	r0, r5
 800bcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcbe:	f000 b8eb 	b.w	800be98 <_write_r>

0800bcc2 <__sseek>:
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcca:	f000 f8c1 	bl	800be50 <_lseek_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	bf15      	itete	ne
 800bcd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcde:	81a3      	strheq	r3, [r4, #12]
 800bce0:	bf18      	it	ne
 800bce2:	81a3      	strhne	r3, [r4, #12]
 800bce4:	bd10      	pop	{r4, pc}

0800bce6 <__sclose>:
 800bce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcea:	f000 b8a1 	b.w	800be30 <_close_r>

0800bcee <__swbuf_r>:
 800bcee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf0:	460e      	mov	r6, r1
 800bcf2:	4614      	mov	r4, r2
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	b118      	cbz	r0, 800bd00 <__swbuf_r+0x12>
 800bcf8:	6a03      	ldr	r3, [r0, #32]
 800bcfa:	b90b      	cbnz	r3, 800bd00 <__swbuf_r+0x12>
 800bcfc:	f7ff ff0e 	bl	800bb1c <__sinit>
 800bd00:	69a3      	ldr	r3, [r4, #24]
 800bd02:	60a3      	str	r3, [r4, #8]
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	071a      	lsls	r2, r3, #28
 800bd08:	d501      	bpl.n	800bd0e <__swbuf_r+0x20>
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	b943      	cbnz	r3, 800bd20 <__swbuf_r+0x32>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4628      	mov	r0, r5
 800bd12:	f000 f82b 	bl	800bd6c <__swsetup_r>
 800bd16:	b118      	cbz	r0, 800bd20 <__swbuf_r+0x32>
 800bd18:	f04f 37ff 	mov.w	r7, #4294967295
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	6922      	ldr	r2, [r4, #16]
 800bd24:	1a98      	subs	r0, r3, r2
 800bd26:	6963      	ldr	r3, [r4, #20]
 800bd28:	b2f6      	uxtb	r6, r6
 800bd2a:	4283      	cmp	r3, r0
 800bd2c:	4637      	mov	r7, r6
 800bd2e:	dc05      	bgt.n	800bd3c <__swbuf_r+0x4e>
 800bd30:	4621      	mov	r1, r4
 800bd32:	4628      	mov	r0, r5
 800bd34:	f001 fd94 	bl	800d860 <_fflush_r>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d1ed      	bne.n	800bd18 <__swbuf_r+0x2a>
 800bd3c:	68a3      	ldr	r3, [r4, #8]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	60a3      	str	r3, [r4, #8]
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	6022      	str	r2, [r4, #0]
 800bd48:	701e      	strb	r6, [r3, #0]
 800bd4a:	6962      	ldr	r2, [r4, #20]
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d004      	beq.n	800bd5c <__swbuf_r+0x6e>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	07db      	lsls	r3, r3, #31
 800bd56:	d5e1      	bpl.n	800bd1c <__swbuf_r+0x2e>
 800bd58:	2e0a      	cmp	r6, #10
 800bd5a:	d1df      	bne.n	800bd1c <__swbuf_r+0x2e>
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f001 fd7e 	bl	800d860 <_fflush_r>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d0d9      	beq.n	800bd1c <__swbuf_r+0x2e>
 800bd68:	e7d6      	b.n	800bd18 <__swbuf_r+0x2a>
	...

0800bd6c <__swsetup_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4b29      	ldr	r3, [pc, #164]	@ (800be14 <__swsetup_r+0xa8>)
 800bd70:	4605      	mov	r5, r0
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	460c      	mov	r4, r1
 800bd76:	b118      	cbz	r0, 800bd80 <__swsetup_r+0x14>
 800bd78:	6a03      	ldr	r3, [r0, #32]
 800bd7a:	b90b      	cbnz	r3, 800bd80 <__swsetup_r+0x14>
 800bd7c:	f7ff fece 	bl	800bb1c <__sinit>
 800bd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd84:	0719      	lsls	r1, r3, #28
 800bd86:	d422      	bmi.n	800bdce <__swsetup_r+0x62>
 800bd88:	06da      	lsls	r2, r3, #27
 800bd8a:	d407      	bmi.n	800bd9c <__swsetup_r+0x30>
 800bd8c:	2209      	movs	r2, #9
 800bd8e:	602a      	str	r2, [r5, #0]
 800bd90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd94:	81a3      	strh	r3, [r4, #12]
 800bd96:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9a:	e033      	b.n	800be04 <__swsetup_r+0x98>
 800bd9c:	0758      	lsls	r0, r3, #29
 800bd9e:	d512      	bpl.n	800bdc6 <__swsetup_r+0x5a>
 800bda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bda2:	b141      	cbz	r1, 800bdb6 <__swsetup_r+0x4a>
 800bda4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <__swsetup_r+0x46>
 800bdac:	4628      	mov	r0, r5
 800bdae:	f000 ff0f 	bl	800cbd0 <_free_r>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	6923      	ldr	r3, [r4, #16]
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	f043 0308 	orr.w	r3, r3, #8
 800bdcc:	81a3      	strh	r3, [r4, #12]
 800bdce:	6923      	ldr	r3, [r4, #16]
 800bdd0:	b94b      	cbnz	r3, 800bde6 <__swsetup_r+0x7a>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bddc:	d003      	beq.n	800bde6 <__swsetup_r+0x7a>
 800bdde:	4621      	mov	r1, r4
 800bde0:	4628      	mov	r0, r5
 800bde2:	f001 fd8b 	bl	800d8fc <__smakebuf_r>
 800bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdea:	f013 0201 	ands.w	r2, r3, #1
 800bdee:	d00a      	beq.n	800be06 <__swsetup_r+0x9a>
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	60a2      	str	r2, [r4, #8]
 800bdf4:	6962      	ldr	r2, [r4, #20]
 800bdf6:	4252      	negs	r2, r2
 800bdf8:	61a2      	str	r2, [r4, #24]
 800bdfa:	6922      	ldr	r2, [r4, #16]
 800bdfc:	b942      	cbnz	r2, 800be10 <__swsetup_r+0xa4>
 800bdfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be02:	d1c5      	bne.n	800bd90 <__swsetup_r+0x24>
 800be04:	bd38      	pop	{r3, r4, r5, pc}
 800be06:	0799      	lsls	r1, r3, #30
 800be08:	bf58      	it	pl
 800be0a:	6962      	ldrpl	r2, [r4, #20]
 800be0c:	60a2      	str	r2, [r4, #8]
 800be0e:	e7f4      	b.n	800bdfa <__swsetup_r+0x8e>
 800be10:	2000      	movs	r0, #0
 800be12:	e7f7      	b.n	800be04 <__swsetup_r+0x98>
 800be14:	2000001c 	.word	0x2000001c

0800be18 <memset>:
 800be18:	4402      	add	r2, r0
 800be1a:	4603      	mov	r3, r0
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d100      	bne.n	800be22 <memset+0xa>
 800be20:	4770      	bx	lr
 800be22:	f803 1b01 	strb.w	r1, [r3], #1
 800be26:	e7f9      	b.n	800be1c <memset+0x4>

0800be28 <_localeconv_r>:
 800be28:	4800      	ldr	r0, [pc, #0]	@ (800be2c <_localeconv_r+0x4>)
 800be2a:	4770      	bx	lr
 800be2c:	2000015c 	.word	0x2000015c

0800be30 <_close_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d06      	ldr	r5, [pc, #24]	@ (800be4c <_close_r+0x1c>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	602b      	str	r3, [r5, #0]
 800be3c:	f7f6 fe34 	bl	8002aa8 <_close>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d102      	bne.n	800be4a <_close_r+0x1a>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	b103      	cbz	r3, 800be4a <_close_r+0x1a>
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	2000563c 	.word	0x2000563c

0800be50 <_lseek_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d07      	ldr	r5, [pc, #28]	@ (800be70 <_lseek_r+0x20>)
 800be54:	4604      	mov	r4, r0
 800be56:	4608      	mov	r0, r1
 800be58:	4611      	mov	r1, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	602a      	str	r2, [r5, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	f7f6 fe49 	bl	8002af6 <_lseek>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_lseek_r+0x1e>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_lseek_r+0x1e>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	2000563c 	.word	0x2000563c

0800be74 <_read_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4d07      	ldr	r5, [pc, #28]	@ (800be94 <_read_r+0x20>)
 800be78:	4604      	mov	r4, r0
 800be7a:	4608      	mov	r0, r1
 800be7c:	4611      	mov	r1, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	602a      	str	r2, [r5, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	f7f6 fdf3 	bl	8002a6e <_read>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_read_r+0x1e>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_read_r+0x1e>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	2000563c 	.word	0x2000563c

0800be98 <_write_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_write_r+0x20>)
 800be9c:	4604      	mov	r4, r0
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f6 f8a4 	bl	8001ff4 <_write>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_write_r+0x1e>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_write_r+0x1e>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	2000563c 	.word	0x2000563c

0800bebc <__errno>:
 800bebc:	4b01      	ldr	r3, [pc, #4]	@ (800bec4 <__errno+0x8>)
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	2000001c 	.word	0x2000001c

0800bec8 <__libc_init_array>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	4d0d      	ldr	r5, [pc, #52]	@ (800bf00 <__libc_init_array+0x38>)
 800becc:	4c0d      	ldr	r4, [pc, #52]	@ (800bf04 <__libc_init_array+0x3c>)
 800bece:	1b64      	subs	r4, r4, r5
 800bed0:	10a4      	asrs	r4, r4, #2
 800bed2:	2600      	movs	r6, #0
 800bed4:	42a6      	cmp	r6, r4
 800bed6:	d109      	bne.n	800beec <__libc_init_array+0x24>
 800bed8:	4d0b      	ldr	r5, [pc, #44]	@ (800bf08 <__libc_init_array+0x40>)
 800beda:	4c0c      	ldr	r4, [pc, #48]	@ (800bf0c <__libc_init_array+0x44>)
 800bedc:	f001 fe2c 	bl	800db38 <_init>
 800bee0:	1b64      	subs	r4, r4, r5
 800bee2:	10a4      	asrs	r4, r4, #2
 800bee4:	2600      	movs	r6, #0
 800bee6:	42a6      	cmp	r6, r4
 800bee8:	d105      	bne.n	800bef6 <__libc_init_array+0x2e>
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef0:	4798      	blx	r3
 800bef2:	3601      	adds	r6, #1
 800bef4:	e7ee      	b.n	800bed4 <__libc_init_array+0xc>
 800bef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800befa:	4798      	blx	r3
 800befc:	3601      	adds	r6, #1
 800befe:	e7f2      	b.n	800bee6 <__libc_init_array+0x1e>
 800bf00:	0800e6b8 	.word	0x0800e6b8
 800bf04:	0800e6b8 	.word	0x0800e6b8
 800bf08:	0800e6b8 	.word	0x0800e6b8
 800bf0c:	0800e6bc 	.word	0x0800e6bc

0800bf10 <__retarget_lock_init_recursive>:
 800bf10:	4770      	bx	lr

0800bf12 <__retarget_lock_acquire_recursive>:
 800bf12:	4770      	bx	lr

0800bf14 <__retarget_lock_release_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <memcpy>:
 800bf16:	440a      	add	r2, r1
 800bf18:	4291      	cmp	r1, r2
 800bf1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf1e:	d100      	bne.n	800bf22 <memcpy+0xc>
 800bf20:	4770      	bx	lr
 800bf22:	b510      	push	{r4, lr}
 800bf24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2c:	4291      	cmp	r1, r2
 800bf2e:	d1f9      	bne.n	800bf24 <memcpy+0xe>
 800bf30:	bd10      	pop	{r4, pc}

0800bf32 <quorem>:
 800bf32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf36:	6903      	ldr	r3, [r0, #16]
 800bf38:	690c      	ldr	r4, [r1, #16]
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	db7e      	blt.n	800c03e <quorem+0x10c>
 800bf40:	3c01      	subs	r4, #1
 800bf42:	f101 0814 	add.w	r8, r1, #20
 800bf46:	00a3      	lsls	r3, r4, #2
 800bf48:	f100 0514 	add.w	r5, r0, #20
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf64:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf68:	d32e      	bcc.n	800bfc8 <quorem+0x96>
 800bf6a:	f04f 0a00 	mov.w	sl, #0
 800bf6e:	46c4      	mov	ip, r8
 800bf70:	46ae      	mov	lr, r5
 800bf72:	46d3      	mov	fp, sl
 800bf74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf78:	b298      	uxth	r0, r3
 800bf7a:	fb06 a000 	mla	r0, r6, r0, sl
 800bf7e:	0c02      	lsrs	r2, r0, #16
 800bf80:	0c1b      	lsrs	r3, r3, #16
 800bf82:	fb06 2303 	mla	r3, r6, r3, r2
 800bf86:	f8de 2000 	ldr.w	r2, [lr]
 800bf8a:	b280      	uxth	r0, r0
 800bf8c:	b292      	uxth	r2, r2
 800bf8e:	1a12      	subs	r2, r2, r0
 800bf90:	445a      	add	r2, fp
 800bf92:	f8de 0000 	ldr.w	r0, [lr]
 800bf96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bfa4:	b292      	uxth	r2, r2
 800bfa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bfaa:	45e1      	cmp	r9, ip
 800bfac:	f84e 2b04 	str.w	r2, [lr], #4
 800bfb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bfb4:	d2de      	bcs.n	800bf74 <quorem+0x42>
 800bfb6:	9b00      	ldr	r3, [sp, #0]
 800bfb8:	58eb      	ldr	r3, [r5, r3]
 800bfba:	b92b      	cbnz	r3, 800bfc8 <quorem+0x96>
 800bfbc:	9b01      	ldr	r3, [sp, #4]
 800bfbe:	3b04      	subs	r3, #4
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	d32f      	bcc.n	800c026 <quorem+0xf4>
 800bfc6:	613c      	str	r4, [r7, #16]
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f001 f97b 	bl	800d2c4 <__mcmp>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	db25      	blt.n	800c01e <quorem+0xec>
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfda:	f8d1 c000 	ldr.w	ip, [r1]
 800bfde:	fa1f fe82 	uxth.w	lr, r2
 800bfe2:	fa1f f38c 	uxth.w	r3, ip
 800bfe6:	eba3 030e 	sub.w	r3, r3, lr
 800bfea:	4403      	add	r3, r0
 800bfec:	0c12      	lsrs	r2, r2, #16
 800bfee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bff2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bffc:	45c1      	cmp	r9, r8
 800bffe:	f841 3b04 	str.w	r3, [r1], #4
 800c002:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c006:	d2e6      	bcs.n	800bfd6 <quorem+0xa4>
 800c008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c00c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c010:	b922      	cbnz	r2, 800c01c <quorem+0xea>
 800c012:	3b04      	subs	r3, #4
 800c014:	429d      	cmp	r5, r3
 800c016:	461a      	mov	r2, r3
 800c018:	d30b      	bcc.n	800c032 <quorem+0x100>
 800c01a:	613c      	str	r4, [r7, #16]
 800c01c:	3601      	adds	r6, #1
 800c01e:	4630      	mov	r0, r6
 800c020:	b003      	add	sp, #12
 800c022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	3b04      	subs	r3, #4
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	d1cb      	bne.n	800bfc6 <quorem+0x94>
 800c02e:	3c01      	subs	r4, #1
 800c030:	e7c6      	b.n	800bfc0 <quorem+0x8e>
 800c032:	6812      	ldr	r2, [r2, #0]
 800c034:	3b04      	subs	r3, #4
 800c036:	2a00      	cmp	r2, #0
 800c038:	d1ef      	bne.n	800c01a <quorem+0xe8>
 800c03a:	3c01      	subs	r4, #1
 800c03c:	e7ea      	b.n	800c014 <quorem+0xe2>
 800c03e:	2000      	movs	r0, #0
 800c040:	e7ee      	b.n	800c020 <quorem+0xee>
 800c042:	0000      	movs	r0, r0
 800c044:	0000      	movs	r0, r0
	...

0800c048 <_dtoa_r>:
 800c048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	69c7      	ldr	r7, [r0, #28]
 800c04e:	b099      	sub	sp, #100	@ 0x64
 800c050:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c054:	ec55 4b10 	vmov	r4, r5, d0
 800c058:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c05a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c05c:	4683      	mov	fp, r0
 800c05e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c060:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c062:	b97f      	cbnz	r7, 800c084 <_dtoa_r+0x3c>
 800c064:	2010      	movs	r0, #16
 800c066:	f000 fdfd 	bl	800cc64 <malloc>
 800c06a:	4602      	mov	r2, r0
 800c06c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c070:	b920      	cbnz	r0, 800c07c <_dtoa_r+0x34>
 800c072:	4ba7      	ldr	r3, [pc, #668]	@ (800c310 <_dtoa_r+0x2c8>)
 800c074:	21ef      	movs	r1, #239	@ 0xef
 800c076:	48a7      	ldr	r0, [pc, #668]	@ (800c314 <_dtoa_r+0x2cc>)
 800c078:	f001 fcae 	bl	800d9d8 <__assert_func>
 800c07c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c080:	6007      	str	r7, [r0, #0]
 800c082:	60c7      	str	r7, [r0, #12]
 800c084:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c088:	6819      	ldr	r1, [r3, #0]
 800c08a:	b159      	cbz	r1, 800c0a4 <_dtoa_r+0x5c>
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	604a      	str	r2, [r1, #4]
 800c090:	2301      	movs	r3, #1
 800c092:	4093      	lsls	r3, r2
 800c094:	608b      	str	r3, [r1, #8]
 800c096:	4658      	mov	r0, fp
 800c098:	f000 feda 	bl	800ce50 <_Bfree>
 800c09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	1e2b      	subs	r3, r5, #0
 800c0a6:	bfb9      	ittee	lt
 800c0a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0ac:	9303      	strlt	r3, [sp, #12]
 800c0ae:	2300      	movge	r3, #0
 800c0b0:	6033      	strge	r3, [r6, #0]
 800c0b2:	9f03      	ldr	r7, [sp, #12]
 800c0b4:	4b98      	ldr	r3, [pc, #608]	@ (800c318 <_dtoa_r+0x2d0>)
 800c0b6:	bfbc      	itt	lt
 800c0b8:	2201      	movlt	r2, #1
 800c0ba:	6032      	strlt	r2, [r6, #0]
 800c0bc:	43bb      	bics	r3, r7
 800c0be:	d112      	bne.n	800c0e6 <_dtoa_r+0x9e>
 800c0c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0cc:	4323      	orrs	r3, r4
 800c0ce:	f000 854d 	beq.w	800cb6c <_dtoa_r+0xb24>
 800c0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c32c <_dtoa_r+0x2e4>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 854f 	beq.w	800cb7c <_dtoa_r+0xb34>
 800c0de:	f10a 0303 	add.w	r3, sl, #3
 800c0e2:	f000 bd49 	b.w	800cb78 <_dtoa_r+0xb30>
 800c0e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	ec51 0b17 	vmov	r0, r1, d7
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c0f6:	f7f4 fd0f 	bl	8000b18 <__aeabi_dcmpeq>
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	b158      	cbz	r0, 800c116 <_dtoa_r+0xce>
 800c0fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c100:	2301      	movs	r3, #1
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c106:	b113      	cbz	r3, 800c10e <_dtoa_r+0xc6>
 800c108:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c10a:	4b84      	ldr	r3, [pc, #528]	@ (800c31c <_dtoa_r+0x2d4>)
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c330 <_dtoa_r+0x2e8>
 800c112:	f000 bd33 	b.w	800cb7c <_dtoa_r+0xb34>
 800c116:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c11a:	aa16      	add	r2, sp, #88	@ 0x58
 800c11c:	a917      	add	r1, sp, #92	@ 0x5c
 800c11e:	4658      	mov	r0, fp
 800c120:	f001 f980 	bl	800d424 <__d2b>
 800c124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c128:	4681      	mov	r9, r0
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	d077      	beq.n	800c21e <_dtoa_r+0x1d6>
 800c12e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c130:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c13c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c148:	4619      	mov	r1, r3
 800c14a:	2200      	movs	r2, #0
 800c14c:	4b74      	ldr	r3, [pc, #464]	@ (800c320 <_dtoa_r+0x2d8>)
 800c14e:	f7f4 f8c3 	bl	80002d8 <__aeabi_dsub>
 800c152:	a369      	add	r3, pc, #420	@ (adr r3, 800c2f8 <_dtoa_r+0x2b0>)
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	f7f4 fa76 	bl	8000648 <__aeabi_dmul>
 800c15c:	a368      	add	r3, pc, #416	@ (adr r3, 800c300 <_dtoa_r+0x2b8>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	f7f4 f8bb 	bl	80002dc <__adddf3>
 800c166:	4604      	mov	r4, r0
 800c168:	4630      	mov	r0, r6
 800c16a:	460d      	mov	r5, r1
 800c16c:	f7f4 fa02 	bl	8000574 <__aeabi_i2d>
 800c170:	a365      	add	r3, pc, #404	@ (adr r3, 800c308 <_dtoa_r+0x2c0>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 fa67 	bl	8000648 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 f8ab 	bl	80002dc <__adddf3>
 800c186:	4604      	mov	r4, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	f7f4 fd0d 	bl	8000ba8 <__aeabi_d2iz>
 800c18e:	2200      	movs	r2, #0
 800c190:	4607      	mov	r7, r0
 800c192:	2300      	movs	r3, #0
 800c194:	4620      	mov	r0, r4
 800c196:	4629      	mov	r1, r5
 800c198:	f7f4 fcc8 	bl	8000b2c <__aeabi_dcmplt>
 800c19c:	b140      	cbz	r0, 800c1b0 <_dtoa_r+0x168>
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f7f4 f9e8 	bl	8000574 <__aeabi_i2d>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	f7f4 fcb6 	bl	8000b18 <__aeabi_dcmpeq>
 800c1ac:	b900      	cbnz	r0, 800c1b0 <_dtoa_r+0x168>
 800c1ae:	3f01      	subs	r7, #1
 800c1b0:	2f16      	cmp	r7, #22
 800c1b2:	d851      	bhi.n	800c258 <_dtoa_r+0x210>
 800c1b4:	4b5b      	ldr	r3, [pc, #364]	@ (800c324 <_dtoa_r+0x2dc>)
 800c1b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1c2:	f7f4 fcb3 	bl	8000b2c <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d048      	beq.n	800c25c <_dtoa_r+0x214>
 800c1ca:	3f01      	subs	r7, #1
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1d2:	1b9b      	subs	r3, r3, r6
 800c1d4:	1e5a      	subs	r2, r3, #1
 800c1d6:	bf44      	itt	mi
 800c1d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1dc:	2300      	movmi	r3, #0
 800c1de:	9208      	str	r2, [sp, #32]
 800c1e0:	bf54      	ite	pl
 800c1e2:	f04f 0800 	movpl.w	r8, #0
 800c1e6:	9308      	strmi	r3, [sp, #32]
 800c1e8:	2f00      	cmp	r7, #0
 800c1ea:	db39      	blt.n	800c260 <_dtoa_r+0x218>
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c1f0:	443b      	add	r3, r7
 800c1f2:	9308      	str	r3, [sp, #32]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1fa:	2b09      	cmp	r3, #9
 800c1fc:	d864      	bhi.n	800c2c8 <_dtoa_r+0x280>
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	bfc4      	itt	gt
 800c202:	3b04      	subgt	r3, #4
 800c204:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c208:	f1a3 0302 	sub.w	r3, r3, #2
 800c20c:	bfcc      	ite	gt
 800c20e:	2400      	movgt	r4, #0
 800c210:	2401      	movle	r4, #1
 800c212:	2b03      	cmp	r3, #3
 800c214:	d863      	bhi.n	800c2de <_dtoa_r+0x296>
 800c216:	e8df f003 	tbb	[pc, r3]
 800c21a:	372a      	.short	0x372a
 800c21c:	5535      	.short	0x5535
 800c21e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c222:	441e      	add	r6, r3
 800c224:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c228:	2b20      	cmp	r3, #32
 800c22a:	bfc1      	itttt	gt
 800c22c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c230:	409f      	lslgt	r7, r3
 800c232:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c236:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c23a:	bfd6      	itet	le
 800c23c:	f1c3 0320 	rsble	r3, r3, #32
 800c240:	ea47 0003 	orrgt.w	r0, r7, r3
 800c244:	fa04 f003 	lslle.w	r0, r4, r3
 800c248:	f7f4 f984 	bl	8000554 <__aeabi_ui2d>
 800c24c:	2201      	movs	r2, #1
 800c24e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c252:	3e01      	subs	r6, #1
 800c254:	9214      	str	r2, [sp, #80]	@ 0x50
 800c256:	e777      	b.n	800c148 <_dtoa_r+0x100>
 800c258:	2301      	movs	r3, #1
 800c25a:	e7b8      	b.n	800c1ce <_dtoa_r+0x186>
 800c25c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c25e:	e7b7      	b.n	800c1d0 <_dtoa_r+0x188>
 800c260:	427b      	negs	r3, r7
 800c262:	930a      	str	r3, [sp, #40]	@ 0x28
 800c264:	2300      	movs	r3, #0
 800c266:	eba8 0807 	sub.w	r8, r8, r7
 800c26a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c26c:	e7c4      	b.n	800c1f8 <_dtoa_r+0x1b0>
 800c26e:	2300      	movs	r3, #0
 800c270:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	dc35      	bgt.n	800c2e4 <_dtoa_r+0x29c>
 800c278:	2301      	movs	r3, #1
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	9307      	str	r3, [sp, #28]
 800c27e:	461a      	mov	r2, r3
 800c280:	920e      	str	r2, [sp, #56]	@ 0x38
 800c282:	e00b      	b.n	800c29c <_dtoa_r+0x254>
 800c284:	2301      	movs	r3, #1
 800c286:	e7f3      	b.n	800c270 <_dtoa_r+0x228>
 800c288:	2300      	movs	r3, #0
 800c28a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c28e:	18fb      	adds	r3, r7, r3
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	2b01      	cmp	r3, #1
 800c296:	9307      	str	r3, [sp, #28]
 800c298:	bfb8      	it	lt
 800c29a:	2301      	movlt	r3, #1
 800c29c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	f102 0514 	add.w	r5, r2, #20
 800c2a8:	429d      	cmp	r5, r3
 800c2aa:	d91f      	bls.n	800c2ec <_dtoa_r+0x2a4>
 800c2ac:	6041      	str	r1, [r0, #4]
 800c2ae:	4658      	mov	r0, fp
 800c2b0:	f000 fd8e 	bl	800cdd0 <_Balloc>
 800c2b4:	4682      	mov	sl, r0
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d13c      	bne.n	800c334 <_dtoa_r+0x2ec>
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c328 <_dtoa_r+0x2e0>)
 800c2bc:	4602      	mov	r2, r0
 800c2be:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2c2:	e6d8      	b.n	800c076 <_dtoa_r+0x2e>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e7e0      	b.n	800c28a <_dtoa_r+0x242>
 800c2c8:	2401      	movs	r4, #1
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	9307      	str	r3, [sp, #28]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2312      	movs	r3, #18
 800c2dc:	e7d0      	b.n	800c280 <_dtoa_r+0x238>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2e2:	e7f5      	b.n	800c2d0 <_dtoa_r+0x288>
 800c2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	9307      	str	r3, [sp, #28]
 800c2ea:	e7d7      	b.n	800c29c <_dtoa_r+0x254>
 800c2ec:	3101      	adds	r1, #1
 800c2ee:	0052      	lsls	r2, r2, #1
 800c2f0:	e7d8      	b.n	800c2a4 <_dtoa_r+0x25c>
 800c2f2:	bf00      	nop
 800c2f4:	f3af 8000 	nop.w
 800c2f8:	636f4361 	.word	0x636f4361
 800c2fc:	3fd287a7 	.word	0x3fd287a7
 800c300:	8b60c8b3 	.word	0x8b60c8b3
 800c304:	3fc68a28 	.word	0x3fc68a28
 800c308:	509f79fb 	.word	0x509f79fb
 800c30c:	3fd34413 	.word	0x3fd34413
 800c310:	0800e37d 	.word	0x0800e37d
 800c314:	0800e394 	.word	0x0800e394
 800c318:	7ff00000 	.word	0x7ff00000
 800c31c:	0800e34d 	.word	0x0800e34d
 800c320:	3ff80000 	.word	0x3ff80000
 800c324:	0800e490 	.word	0x0800e490
 800c328:	0800e3ec 	.word	0x0800e3ec
 800c32c:	0800e379 	.word	0x0800e379
 800c330:	0800e34c 	.word	0x0800e34c
 800c334:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c338:	6018      	str	r0, [r3, #0]
 800c33a:	9b07      	ldr	r3, [sp, #28]
 800c33c:	2b0e      	cmp	r3, #14
 800c33e:	f200 80a4 	bhi.w	800c48a <_dtoa_r+0x442>
 800c342:	2c00      	cmp	r4, #0
 800c344:	f000 80a1 	beq.w	800c48a <_dtoa_r+0x442>
 800c348:	2f00      	cmp	r7, #0
 800c34a:	dd33      	ble.n	800c3b4 <_dtoa_r+0x36c>
 800c34c:	4bad      	ldr	r3, [pc, #692]	@ (800c604 <_dtoa_r+0x5bc>)
 800c34e:	f007 020f 	and.w	r2, r7, #15
 800c352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c356:	ed93 7b00 	vldr	d7, [r3]
 800c35a:	05f8      	lsls	r0, r7, #23
 800c35c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c360:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c364:	d516      	bpl.n	800c394 <_dtoa_r+0x34c>
 800c366:	4ba8      	ldr	r3, [pc, #672]	@ (800c608 <_dtoa_r+0x5c0>)
 800c368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c36c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c370:	f7f4 fa94 	bl	800089c <__aeabi_ddiv>
 800c374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c378:	f004 040f 	and.w	r4, r4, #15
 800c37c:	2603      	movs	r6, #3
 800c37e:	4da2      	ldr	r5, [pc, #648]	@ (800c608 <_dtoa_r+0x5c0>)
 800c380:	b954      	cbnz	r4, 800c398 <_dtoa_r+0x350>
 800c382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c38a:	f7f4 fa87 	bl	800089c <__aeabi_ddiv>
 800c38e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c392:	e028      	b.n	800c3e6 <_dtoa_r+0x39e>
 800c394:	2602      	movs	r6, #2
 800c396:	e7f2      	b.n	800c37e <_dtoa_r+0x336>
 800c398:	07e1      	lsls	r1, r4, #31
 800c39a:	d508      	bpl.n	800c3ae <_dtoa_r+0x366>
 800c39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3a4:	f7f4 f950 	bl	8000648 <__aeabi_dmul>
 800c3a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3ac:	3601      	adds	r6, #1
 800c3ae:	1064      	asrs	r4, r4, #1
 800c3b0:	3508      	adds	r5, #8
 800c3b2:	e7e5      	b.n	800c380 <_dtoa_r+0x338>
 800c3b4:	f000 80d2 	beq.w	800c55c <_dtoa_r+0x514>
 800c3b8:	427c      	negs	r4, r7
 800c3ba:	4b92      	ldr	r3, [pc, #584]	@ (800c604 <_dtoa_r+0x5bc>)
 800c3bc:	4d92      	ldr	r5, [pc, #584]	@ (800c608 <_dtoa_r+0x5c0>)
 800c3be:	f004 020f 	and.w	r2, r4, #15
 800c3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ce:	f7f4 f93b 	bl	8000648 <__aeabi_dmul>
 800c3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d6:	1124      	asrs	r4, r4, #4
 800c3d8:	2300      	movs	r3, #0
 800c3da:	2602      	movs	r6, #2
 800c3dc:	2c00      	cmp	r4, #0
 800c3de:	f040 80b2 	bne.w	800c546 <_dtoa_r+0x4fe>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1d3      	bne.n	800c38e <_dtoa_r+0x346>
 800c3e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 80b7 	beq.w	800c560 <_dtoa_r+0x518>
 800c3f2:	4b86      	ldr	r3, [pc, #536]	@ (800c60c <_dtoa_r+0x5c4>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7f4 fb97 	bl	8000b2c <__aeabi_dcmplt>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	f000 80ae 	beq.w	800c560 <_dtoa_r+0x518>
 800c404:	9b07      	ldr	r3, [sp, #28]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 80aa 	beq.w	800c560 <_dtoa_r+0x518>
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dd37      	ble.n	800c482 <_dtoa_r+0x43a>
 800c412:	1e7b      	subs	r3, r7, #1
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	4620      	mov	r0, r4
 800c418:	4b7d      	ldr	r3, [pc, #500]	@ (800c610 <_dtoa_r+0x5c8>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 f913 	bl	8000648 <__aeabi_dmul>
 800c422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c426:	9c00      	ldr	r4, [sp, #0]
 800c428:	3601      	adds	r6, #1
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7f4 f8a2 	bl	8000574 <__aeabi_i2d>
 800c430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c434:	f7f4 f908 	bl	8000648 <__aeabi_dmul>
 800c438:	4b76      	ldr	r3, [pc, #472]	@ (800c614 <_dtoa_r+0x5cc>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	f7f3 ff4e 	bl	80002dc <__adddf3>
 800c440:	4605      	mov	r5, r0
 800c442:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c446:	2c00      	cmp	r4, #0
 800c448:	f040 808d 	bne.w	800c566 <_dtoa_r+0x51e>
 800c44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c450:	4b71      	ldr	r3, [pc, #452]	@ (800c618 <_dtoa_r+0x5d0>)
 800c452:	2200      	movs	r2, #0
 800c454:	f7f3 ff40 	bl	80002d8 <__aeabi_dsub>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c460:	462a      	mov	r2, r5
 800c462:	4633      	mov	r3, r6
 800c464:	f7f4 fb80 	bl	8000b68 <__aeabi_dcmpgt>
 800c468:	2800      	cmp	r0, #0
 800c46a:	f040 828b 	bne.w	800c984 <_dtoa_r+0x93c>
 800c46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c472:	462a      	mov	r2, r5
 800c474:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c478:	f7f4 fb58 	bl	8000b2c <__aeabi_dcmplt>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f040 8128 	bne.w	800c6d2 <_dtoa_r+0x68a>
 800c482:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c48a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f2c0 815a 	blt.w	800c746 <_dtoa_r+0x6fe>
 800c492:	2f0e      	cmp	r7, #14
 800c494:	f300 8157 	bgt.w	800c746 <_dtoa_r+0x6fe>
 800c498:	4b5a      	ldr	r3, [pc, #360]	@ (800c604 <_dtoa_r+0x5bc>)
 800c49a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c49e:	ed93 7b00 	vldr	d7, [r3]
 800c4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	ed8d 7b00 	vstr	d7, [sp]
 800c4aa:	da03      	bge.n	800c4b4 <_dtoa_r+0x46c>
 800c4ac:	9b07      	ldr	r3, [sp, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f340 8101 	ble.w	800c6b6 <_dtoa_r+0x66e>
 800c4b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4b8:	4656      	mov	r6, sl
 800c4ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f4 f9eb 	bl	800089c <__aeabi_ddiv>
 800c4c6:	f7f4 fb6f 	bl	8000ba8 <__aeabi_d2iz>
 800c4ca:	4680      	mov	r8, r0
 800c4cc:	f7f4 f852 	bl	8000574 <__aeabi_i2d>
 800c4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d4:	f7f4 f8b8 	bl	8000648 <__aeabi_dmul>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4e4:	f7f3 fef8 	bl	80002d8 <__aeabi_dsub>
 800c4e8:	f806 4b01 	strb.w	r4, [r6], #1
 800c4ec:	9d07      	ldr	r5, [sp, #28]
 800c4ee:	eba6 040a 	sub.w	r4, r6, sl
 800c4f2:	42a5      	cmp	r5, r4
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	f040 8117 	bne.w	800c72a <_dtoa_r+0x6e2>
 800c4fc:	f7f3 feee 	bl	80002dc <__adddf3>
 800c500:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c504:	4604      	mov	r4, r0
 800c506:	460d      	mov	r5, r1
 800c508:	f7f4 fb2e 	bl	8000b68 <__aeabi_dcmpgt>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f040 80f9 	bne.w	800c704 <_dtoa_r+0x6bc>
 800c512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800c51e:	b118      	cbz	r0, 800c528 <_dtoa_r+0x4e0>
 800c520:	f018 0f01 	tst.w	r8, #1
 800c524:	f040 80ee 	bne.w	800c704 <_dtoa_r+0x6bc>
 800c528:	4649      	mov	r1, r9
 800c52a:	4658      	mov	r0, fp
 800c52c:	f000 fc90 	bl	800ce50 <_Bfree>
 800c530:	2300      	movs	r3, #0
 800c532:	7033      	strb	r3, [r6, #0]
 800c534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c536:	3701      	adds	r7, #1
 800c538:	601f      	str	r7, [r3, #0]
 800c53a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 831d 	beq.w	800cb7c <_dtoa_r+0xb34>
 800c542:	601e      	str	r6, [r3, #0]
 800c544:	e31a      	b.n	800cb7c <_dtoa_r+0xb34>
 800c546:	07e2      	lsls	r2, r4, #31
 800c548:	d505      	bpl.n	800c556 <_dtoa_r+0x50e>
 800c54a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c54e:	f7f4 f87b 	bl	8000648 <__aeabi_dmul>
 800c552:	3601      	adds	r6, #1
 800c554:	2301      	movs	r3, #1
 800c556:	1064      	asrs	r4, r4, #1
 800c558:	3508      	adds	r5, #8
 800c55a:	e73f      	b.n	800c3dc <_dtoa_r+0x394>
 800c55c:	2602      	movs	r6, #2
 800c55e:	e742      	b.n	800c3e6 <_dtoa_r+0x39e>
 800c560:	9c07      	ldr	r4, [sp, #28]
 800c562:	9704      	str	r7, [sp, #16]
 800c564:	e761      	b.n	800c42a <_dtoa_r+0x3e2>
 800c566:	4b27      	ldr	r3, [pc, #156]	@ (800c604 <_dtoa_r+0x5bc>)
 800c568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c56e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c572:	4454      	add	r4, sl
 800c574:	2900      	cmp	r1, #0
 800c576:	d053      	beq.n	800c620 <_dtoa_r+0x5d8>
 800c578:	4928      	ldr	r1, [pc, #160]	@ (800c61c <_dtoa_r+0x5d4>)
 800c57a:	2000      	movs	r0, #0
 800c57c:	f7f4 f98e 	bl	800089c <__aeabi_ddiv>
 800c580:	4633      	mov	r3, r6
 800c582:	462a      	mov	r2, r5
 800c584:	f7f3 fea8 	bl	80002d8 <__aeabi_dsub>
 800c588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c58c:	4656      	mov	r6, sl
 800c58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c592:	f7f4 fb09 	bl	8000ba8 <__aeabi_d2iz>
 800c596:	4605      	mov	r5, r0
 800c598:	f7f3 ffec 	bl	8000574 <__aeabi_i2d>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5a4:	f7f3 fe98 	bl	80002d8 <__aeabi_dsub>
 800c5a8:	3530      	adds	r5, #48	@ 0x30
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5b2:	f806 5b01 	strb.w	r5, [r6], #1
 800c5b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5ba:	f7f4 fab7 	bl	8000b2c <__aeabi_dcmplt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d171      	bne.n	800c6a6 <_dtoa_r+0x65e>
 800c5c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5c6:	4911      	ldr	r1, [pc, #68]	@ (800c60c <_dtoa_r+0x5c4>)
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	f7f3 fe85 	bl	80002d8 <__aeabi_dsub>
 800c5ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5d2:	f7f4 faab 	bl	8000b2c <__aeabi_dcmplt>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f040 8095 	bne.w	800c706 <_dtoa_r+0x6be>
 800c5dc:	42a6      	cmp	r6, r4
 800c5de:	f43f af50 	beq.w	800c482 <_dtoa_r+0x43a>
 800c5e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c610 <_dtoa_r+0x5c8>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f7f4 f82d 	bl	8000648 <__aeabi_dmul>
 800c5ee:	4b08      	ldr	r3, [pc, #32]	@ (800c610 <_dtoa_r+0x5c8>)
 800c5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5fa:	f7f4 f825 	bl	8000648 <__aeabi_dmul>
 800c5fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c602:	e7c4      	b.n	800c58e <_dtoa_r+0x546>
 800c604:	0800e490 	.word	0x0800e490
 800c608:	0800e468 	.word	0x0800e468
 800c60c:	3ff00000 	.word	0x3ff00000
 800c610:	40240000 	.word	0x40240000
 800c614:	401c0000 	.word	0x401c0000
 800c618:	40140000 	.word	0x40140000
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	4631      	mov	r1, r6
 800c622:	4628      	mov	r0, r5
 800c624:	f7f4 f810 	bl	8000648 <__aeabi_dmul>
 800c628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c62c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c62e:	4656      	mov	r6, sl
 800c630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c634:	f7f4 fab8 	bl	8000ba8 <__aeabi_d2iz>
 800c638:	4605      	mov	r5, r0
 800c63a:	f7f3 ff9b 	bl	8000574 <__aeabi_i2d>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c646:	f7f3 fe47 	bl	80002d8 <__aeabi_dsub>
 800c64a:	3530      	adds	r5, #48	@ 0x30
 800c64c:	f806 5b01 	strb.w	r5, [r6], #1
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	42a6      	cmp	r6, r4
 800c656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c65a:	f04f 0200 	mov.w	r2, #0
 800c65e:	d124      	bne.n	800c6aa <_dtoa_r+0x662>
 800c660:	4bac      	ldr	r3, [pc, #688]	@ (800c914 <_dtoa_r+0x8cc>)
 800c662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c666:	f7f3 fe39 	bl	80002dc <__adddf3>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c672:	f7f4 fa79 	bl	8000b68 <__aeabi_dcmpgt>
 800c676:	2800      	cmp	r0, #0
 800c678:	d145      	bne.n	800c706 <_dtoa_r+0x6be>
 800c67a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c67e:	49a5      	ldr	r1, [pc, #660]	@ (800c914 <_dtoa_r+0x8cc>)
 800c680:	2000      	movs	r0, #0
 800c682:	f7f3 fe29 	bl	80002d8 <__aeabi_dsub>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c68e:	f7f4 fa4d 	bl	8000b2c <__aeabi_dcmplt>
 800c692:	2800      	cmp	r0, #0
 800c694:	f43f aef5 	beq.w	800c482 <_dtoa_r+0x43a>
 800c698:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c69a:	1e73      	subs	r3, r6, #1
 800c69c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c69e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6a2:	2b30      	cmp	r3, #48	@ 0x30
 800c6a4:	d0f8      	beq.n	800c698 <_dtoa_r+0x650>
 800c6a6:	9f04      	ldr	r7, [sp, #16]
 800c6a8:	e73e      	b.n	800c528 <_dtoa_r+0x4e0>
 800c6aa:	4b9b      	ldr	r3, [pc, #620]	@ (800c918 <_dtoa_r+0x8d0>)
 800c6ac:	f7f3 ffcc 	bl	8000648 <__aeabi_dmul>
 800c6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6b4:	e7bc      	b.n	800c630 <_dtoa_r+0x5e8>
 800c6b6:	d10c      	bne.n	800c6d2 <_dtoa_r+0x68a>
 800c6b8:	4b98      	ldr	r3, [pc, #608]	@ (800c91c <_dtoa_r+0x8d4>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6c0:	f7f3 ffc2 	bl	8000648 <__aeabi_dmul>
 800c6c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c8:	f7f4 fa44 	bl	8000b54 <__aeabi_dcmpge>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f000 8157 	beq.w	800c980 <_dtoa_r+0x938>
 800c6d2:	2400      	movs	r4, #0
 800c6d4:	4625      	mov	r5, r4
 800c6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6d8:	43db      	mvns	r3, r3
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	4656      	mov	r6, sl
 800c6de:	2700      	movs	r7, #0
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4658      	mov	r0, fp
 800c6e4:	f000 fbb4 	bl	800ce50 <_Bfree>
 800c6e8:	2d00      	cmp	r5, #0
 800c6ea:	d0dc      	beq.n	800c6a6 <_dtoa_r+0x65e>
 800c6ec:	b12f      	cbz	r7, 800c6fa <_dtoa_r+0x6b2>
 800c6ee:	42af      	cmp	r7, r5
 800c6f0:	d003      	beq.n	800c6fa <_dtoa_r+0x6b2>
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	4658      	mov	r0, fp
 800c6f6:	f000 fbab 	bl	800ce50 <_Bfree>
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f000 fba7 	bl	800ce50 <_Bfree>
 800c702:	e7d0      	b.n	800c6a6 <_dtoa_r+0x65e>
 800c704:	9704      	str	r7, [sp, #16]
 800c706:	4633      	mov	r3, r6
 800c708:	461e      	mov	r6, r3
 800c70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c70e:	2a39      	cmp	r2, #57	@ 0x39
 800c710:	d107      	bne.n	800c722 <_dtoa_r+0x6da>
 800c712:	459a      	cmp	sl, r3
 800c714:	d1f8      	bne.n	800c708 <_dtoa_r+0x6c0>
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	3201      	adds	r2, #1
 800c71a:	9204      	str	r2, [sp, #16]
 800c71c:	2230      	movs	r2, #48	@ 0x30
 800c71e:	f88a 2000 	strb.w	r2, [sl]
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	3201      	adds	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	e7bd      	b.n	800c6a6 <_dtoa_r+0x65e>
 800c72a:	4b7b      	ldr	r3, [pc, #492]	@ (800c918 <_dtoa_r+0x8d0>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	f7f3 ff8b 	bl	8000648 <__aeabi_dmul>
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	4604      	mov	r4, r0
 800c738:	460d      	mov	r5, r1
 800c73a:	f7f4 f9ed 	bl	8000b18 <__aeabi_dcmpeq>
 800c73e:	2800      	cmp	r0, #0
 800c740:	f43f aebb 	beq.w	800c4ba <_dtoa_r+0x472>
 800c744:	e6f0      	b.n	800c528 <_dtoa_r+0x4e0>
 800c746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c748:	2a00      	cmp	r2, #0
 800c74a:	f000 80db 	beq.w	800c904 <_dtoa_r+0x8bc>
 800c74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c750:	2a01      	cmp	r2, #1
 800c752:	f300 80bf 	bgt.w	800c8d4 <_dtoa_r+0x88c>
 800c756:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c758:	2a00      	cmp	r2, #0
 800c75a:	f000 80b7 	beq.w	800c8cc <_dtoa_r+0x884>
 800c75e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c762:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c764:	4646      	mov	r6, r8
 800c766:	9a08      	ldr	r2, [sp, #32]
 800c768:	2101      	movs	r1, #1
 800c76a:	441a      	add	r2, r3
 800c76c:	4658      	mov	r0, fp
 800c76e:	4498      	add	r8, r3
 800c770:	9208      	str	r2, [sp, #32]
 800c772:	f000 fc21 	bl	800cfb8 <__i2b>
 800c776:	4605      	mov	r5, r0
 800c778:	b15e      	cbz	r6, 800c792 <_dtoa_r+0x74a>
 800c77a:	9b08      	ldr	r3, [sp, #32]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd08      	ble.n	800c792 <_dtoa_r+0x74a>
 800c780:	42b3      	cmp	r3, r6
 800c782:	9a08      	ldr	r2, [sp, #32]
 800c784:	bfa8      	it	ge
 800c786:	4633      	movge	r3, r6
 800c788:	eba8 0803 	sub.w	r8, r8, r3
 800c78c:	1af6      	subs	r6, r6, r3
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	9308      	str	r3, [sp, #32]
 800c792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c794:	b1f3      	cbz	r3, 800c7d4 <_dtoa_r+0x78c>
 800c796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 80b7 	beq.w	800c90c <_dtoa_r+0x8c4>
 800c79e:	b18c      	cbz	r4, 800c7c4 <_dtoa_r+0x77c>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	f000 fcc7 	bl	800d138 <__pow5mult>
 800c7aa:	464a      	mov	r2, r9
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	f000 fc17 	bl	800cfe4 <__multiply>
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	9004      	str	r0, [sp, #16]
 800c7ba:	4658      	mov	r0, fp
 800c7bc:	f000 fb48 	bl	800ce50 <_Bfree>
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	4699      	mov	r9, r3
 800c7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c6:	1b1a      	subs	r2, r3, r4
 800c7c8:	d004      	beq.n	800c7d4 <_dtoa_r+0x78c>
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	f000 fcb3 	bl	800d138 <__pow5mult>
 800c7d2:	4681      	mov	r9, r0
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	4658      	mov	r0, fp
 800c7d8:	f000 fbee 	bl	800cfb8 <__i2b>
 800c7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7de:	4604      	mov	r4, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 81cf 	beq.w	800cb84 <_dtoa_r+0xb3c>
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4658      	mov	r0, fp
 800c7ec:	f000 fca4 	bl	800d138 <__pow5mult>
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	f300 8095 	bgt.w	800c924 <_dtoa_r+0x8dc>
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 8087 	bne.w	800c910 <_dtoa_r+0x8c8>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f040 8089 	bne.w	800c920 <_dtoa_r+0x8d8>
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c814:	0d1b      	lsrs	r3, r3, #20
 800c816:	051b      	lsls	r3, r3, #20
 800c818:	b12b      	cbz	r3, 800c826 <_dtoa_r+0x7de>
 800c81a:	9b08      	ldr	r3, [sp, #32]
 800c81c:	3301      	adds	r3, #1
 800c81e:	9308      	str	r3, [sp, #32]
 800c820:	f108 0801 	add.w	r8, r8, #1
 800c824:	2301      	movs	r3, #1
 800c826:	930a      	str	r3, [sp, #40]	@ 0x28
 800c828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 81b0 	beq.w	800cb90 <_dtoa_r+0xb48>
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c836:	6918      	ldr	r0, [r3, #16]
 800c838:	f000 fb72 	bl	800cf20 <__hi0bits>
 800c83c:	f1c0 0020 	rsb	r0, r0, #32
 800c840:	9b08      	ldr	r3, [sp, #32]
 800c842:	4418      	add	r0, r3
 800c844:	f010 001f 	ands.w	r0, r0, #31
 800c848:	d077      	beq.n	800c93a <_dtoa_r+0x8f2>
 800c84a:	f1c0 0320 	rsb	r3, r0, #32
 800c84e:	2b04      	cmp	r3, #4
 800c850:	dd6b      	ble.n	800c92a <_dtoa_r+0x8e2>
 800c852:	9b08      	ldr	r3, [sp, #32]
 800c854:	f1c0 001c 	rsb	r0, r0, #28
 800c858:	4403      	add	r3, r0
 800c85a:	4480      	add	r8, r0
 800c85c:	4406      	add	r6, r0
 800c85e:	9308      	str	r3, [sp, #32]
 800c860:	f1b8 0f00 	cmp.w	r8, #0
 800c864:	dd05      	ble.n	800c872 <_dtoa_r+0x82a>
 800c866:	4649      	mov	r1, r9
 800c868:	4642      	mov	r2, r8
 800c86a:	4658      	mov	r0, fp
 800c86c:	f000 fcbe 	bl	800d1ec <__lshift>
 800c870:	4681      	mov	r9, r0
 800c872:	9b08      	ldr	r3, [sp, #32]
 800c874:	2b00      	cmp	r3, #0
 800c876:	dd05      	ble.n	800c884 <_dtoa_r+0x83c>
 800c878:	4621      	mov	r1, r4
 800c87a:	461a      	mov	r2, r3
 800c87c:	4658      	mov	r0, fp
 800c87e:	f000 fcb5 	bl	800d1ec <__lshift>
 800c882:	4604      	mov	r4, r0
 800c884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c886:	2b00      	cmp	r3, #0
 800c888:	d059      	beq.n	800c93e <_dtoa_r+0x8f6>
 800c88a:	4621      	mov	r1, r4
 800c88c:	4648      	mov	r0, r9
 800c88e:	f000 fd19 	bl	800d2c4 <__mcmp>
 800c892:	2800      	cmp	r0, #0
 800c894:	da53      	bge.n	800c93e <_dtoa_r+0x8f6>
 800c896:	1e7b      	subs	r3, r7, #1
 800c898:	9304      	str	r3, [sp, #16]
 800c89a:	4649      	mov	r1, r9
 800c89c:	2300      	movs	r3, #0
 800c89e:	220a      	movs	r2, #10
 800c8a0:	4658      	mov	r0, fp
 800c8a2:	f000 faf7 	bl	800ce94 <__multadd>
 800c8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8a8:	4681      	mov	r9, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 8172 	beq.w	800cb94 <_dtoa_r+0xb4c>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	220a      	movs	r2, #10
 800c8b6:	4658      	mov	r0, fp
 800c8b8:	f000 faec 	bl	800ce94 <__multadd>
 800c8bc:	9b00      	ldr	r3, [sp, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	dc67      	bgt.n	800c994 <_dtoa_r+0x94c>
 800c8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	dc41      	bgt.n	800c94e <_dtoa_r+0x906>
 800c8ca:	e063      	b.n	800c994 <_dtoa_r+0x94c>
 800c8cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8d2:	e746      	b.n	800c762 <_dtoa_r+0x71a>
 800c8d4:	9b07      	ldr	r3, [sp, #28]
 800c8d6:	1e5c      	subs	r4, r3, #1
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8da:	42a3      	cmp	r3, r4
 800c8dc:	bfbf      	itttt	lt
 800c8de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c8e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c8e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c8e4:	1ae3      	sublt	r3, r4, r3
 800c8e6:	bfb4      	ite	lt
 800c8e8:	18d2      	addlt	r2, r2, r3
 800c8ea:	1b1c      	subge	r4, r3, r4
 800c8ec:	9b07      	ldr	r3, [sp, #28]
 800c8ee:	bfbc      	itt	lt
 800c8f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c8f2:	2400      	movlt	r4, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfb5      	itete	lt
 800c8f8:	eba8 0603 	sublt.w	r6, r8, r3
 800c8fc:	9b07      	ldrge	r3, [sp, #28]
 800c8fe:	2300      	movlt	r3, #0
 800c900:	4646      	movge	r6, r8
 800c902:	e730      	b.n	800c766 <_dtoa_r+0x71e>
 800c904:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c906:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c908:	4646      	mov	r6, r8
 800c90a:	e735      	b.n	800c778 <_dtoa_r+0x730>
 800c90c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c90e:	e75c      	b.n	800c7ca <_dtoa_r+0x782>
 800c910:	2300      	movs	r3, #0
 800c912:	e788      	b.n	800c826 <_dtoa_r+0x7de>
 800c914:	3fe00000 	.word	0x3fe00000
 800c918:	40240000 	.word	0x40240000
 800c91c:	40140000 	.word	0x40140000
 800c920:	9b02      	ldr	r3, [sp, #8]
 800c922:	e780      	b.n	800c826 <_dtoa_r+0x7de>
 800c924:	2300      	movs	r3, #0
 800c926:	930a      	str	r3, [sp, #40]	@ 0x28
 800c928:	e782      	b.n	800c830 <_dtoa_r+0x7e8>
 800c92a:	d099      	beq.n	800c860 <_dtoa_r+0x818>
 800c92c:	9a08      	ldr	r2, [sp, #32]
 800c92e:	331c      	adds	r3, #28
 800c930:	441a      	add	r2, r3
 800c932:	4498      	add	r8, r3
 800c934:	441e      	add	r6, r3
 800c936:	9208      	str	r2, [sp, #32]
 800c938:	e792      	b.n	800c860 <_dtoa_r+0x818>
 800c93a:	4603      	mov	r3, r0
 800c93c:	e7f6      	b.n	800c92c <_dtoa_r+0x8e4>
 800c93e:	9b07      	ldr	r3, [sp, #28]
 800c940:	9704      	str	r7, [sp, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dc20      	bgt.n	800c988 <_dtoa_r+0x940>
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	dd1e      	ble.n	800c98c <_dtoa_r+0x944>
 800c94e:	9b00      	ldr	r3, [sp, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	f47f aec0 	bne.w	800c6d6 <_dtoa_r+0x68e>
 800c956:	4621      	mov	r1, r4
 800c958:	2205      	movs	r2, #5
 800c95a:	4658      	mov	r0, fp
 800c95c:	f000 fa9a 	bl	800ce94 <__multadd>
 800c960:	4601      	mov	r1, r0
 800c962:	4604      	mov	r4, r0
 800c964:	4648      	mov	r0, r9
 800c966:	f000 fcad 	bl	800d2c4 <__mcmp>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f77f aeb3 	ble.w	800c6d6 <_dtoa_r+0x68e>
 800c970:	4656      	mov	r6, sl
 800c972:	2331      	movs	r3, #49	@ 0x31
 800c974:	f806 3b01 	strb.w	r3, [r6], #1
 800c978:	9b04      	ldr	r3, [sp, #16]
 800c97a:	3301      	adds	r3, #1
 800c97c:	9304      	str	r3, [sp, #16]
 800c97e:	e6ae      	b.n	800c6de <_dtoa_r+0x696>
 800c980:	9c07      	ldr	r4, [sp, #28]
 800c982:	9704      	str	r7, [sp, #16]
 800c984:	4625      	mov	r5, r4
 800c986:	e7f3      	b.n	800c970 <_dtoa_r+0x928>
 800c988:	9b07      	ldr	r3, [sp, #28]
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 8104 	beq.w	800cb9c <_dtoa_r+0xb54>
 800c994:	2e00      	cmp	r6, #0
 800c996:	dd05      	ble.n	800c9a4 <_dtoa_r+0x95c>
 800c998:	4629      	mov	r1, r5
 800c99a:	4632      	mov	r2, r6
 800c99c:	4658      	mov	r0, fp
 800c99e:	f000 fc25 	bl	800d1ec <__lshift>
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d05a      	beq.n	800ca60 <_dtoa_r+0xa18>
 800c9aa:	6869      	ldr	r1, [r5, #4]
 800c9ac:	4658      	mov	r0, fp
 800c9ae:	f000 fa0f 	bl	800cdd0 <_Balloc>
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	b928      	cbnz	r0, 800c9c2 <_dtoa_r+0x97a>
 800c9b6:	4b84      	ldr	r3, [pc, #528]	@ (800cbc8 <_dtoa_r+0xb80>)
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9be:	f7ff bb5a 	b.w	800c076 <_dtoa_r+0x2e>
 800c9c2:	692a      	ldr	r2, [r5, #16]
 800c9c4:	3202      	adds	r2, #2
 800c9c6:	0092      	lsls	r2, r2, #2
 800c9c8:	f105 010c 	add.w	r1, r5, #12
 800c9cc:	300c      	adds	r0, #12
 800c9ce:	f7ff faa2 	bl	800bf16 <memcpy>
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4658      	mov	r0, fp
 800c9d8:	f000 fc08 	bl	800d1ec <__lshift>
 800c9dc:	f10a 0301 	add.w	r3, sl, #1
 800c9e0:	9307      	str	r3, [sp, #28]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	4453      	add	r3, sl
 800c9e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	462f      	mov	r7, r5
 800c9f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	4648      	mov	r0, r9
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	f7ff fa98 	bl	800bf32 <quorem>
 800ca02:	4639      	mov	r1, r7
 800ca04:	9002      	str	r0, [sp, #8]
 800ca06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca0a:	4648      	mov	r0, r9
 800ca0c:	f000 fc5a 	bl	800d2c4 <__mcmp>
 800ca10:	462a      	mov	r2, r5
 800ca12:	9008      	str	r0, [sp, #32]
 800ca14:	4621      	mov	r1, r4
 800ca16:	4658      	mov	r0, fp
 800ca18:	f000 fc70 	bl	800d2fc <__mdiff>
 800ca1c:	68c2      	ldr	r2, [r0, #12]
 800ca1e:	4606      	mov	r6, r0
 800ca20:	bb02      	cbnz	r2, 800ca64 <_dtoa_r+0xa1c>
 800ca22:	4601      	mov	r1, r0
 800ca24:	4648      	mov	r0, r9
 800ca26:	f000 fc4d 	bl	800d2c4 <__mcmp>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4658      	mov	r0, fp
 800ca30:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca32:	f000 fa0d 	bl	800ce50 <_Bfree>
 800ca36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca3a:	9e07      	ldr	r6, [sp, #28]
 800ca3c:	ea43 0102 	orr.w	r1, r3, r2
 800ca40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca42:	4319      	orrs	r1, r3
 800ca44:	d110      	bne.n	800ca68 <_dtoa_r+0xa20>
 800ca46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca4a:	d029      	beq.n	800caa0 <_dtoa_r+0xa58>
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dd02      	ble.n	800ca58 <_dtoa_r+0xa10>
 800ca52:	9b02      	ldr	r3, [sp, #8]
 800ca54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca58:	9b00      	ldr	r3, [sp, #0]
 800ca5a:	f883 8000 	strb.w	r8, [r3]
 800ca5e:	e63f      	b.n	800c6e0 <_dtoa_r+0x698>
 800ca60:	4628      	mov	r0, r5
 800ca62:	e7bb      	b.n	800c9dc <_dtoa_r+0x994>
 800ca64:	2201      	movs	r2, #1
 800ca66:	e7e1      	b.n	800ca2c <_dtoa_r+0x9e4>
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	db04      	blt.n	800ca78 <_dtoa_r+0xa30>
 800ca6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca70:	430b      	orrs	r3, r1
 800ca72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca74:	430b      	orrs	r3, r1
 800ca76:	d120      	bne.n	800caba <_dtoa_r+0xa72>
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	dded      	ble.n	800ca58 <_dtoa_r+0xa10>
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	2201      	movs	r2, #1
 800ca80:	4658      	mov	r0, fp
 800ca82:	f000 fbb3 	bl	800d1ec <__lshift>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4681      	mov	r9, r0
 800ca8a:	f000 fc1b 	bl	800d2c4 <__mcmp>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	dc03      	bgt.n	800ca9a <_dtoa_r+0xa52>
 800ca92:	d1e1      	bne.n	800ca58 <_dtoa_r+0xa10>
 800ca94:	f018 0f01 	tst.w	r8, #1
 800ca98:	d0de      	beq.n	800ca58 <_dtoa_r+0xa10>
 800ca9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca9e:	d1d8      	bne.n	800ca52 <_dtoa_r+0xa0a>
 800caa0:	9a00      	ldr	r2, [sp, #0]
 800caa2:	2339      	movs	r3, #57	@ 0x39
 800caa4:	7013      	strb	r3, [r2, #0]
 800caa6:	4633      	mov	r3, r6
 800caa8:	461e      	mov	r6, r3
 800caaa:	3b01      	subs	r3, #1
 800caac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cab0:	2a39      	cmp	r2, #57	@ 0x39
 800cab2:	d052      	beq.n	800cb5a <_dtoa_r+0xb12>
 800cab4:	3201      	adds	r2, #1
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	e612      	b.n	800c6e0 <_dtoa_r+0x698>
 800caba:	2a00      	cmp	r2, #0
 800cabc:	dd07      	ble.n	800cace <_dtoa_r+0xa86>
 800cabe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cac2:	d0ed      	beq.n	800caa0 <_dtoa_r+0xa58>
 800cac4:	9a00      	ldr	r2, [sp, #0]
 800cac6:	f108 0301 	add.w	r3, r8, #1
 800caca:	7013      	strb	r3, [r2, #0]
 800cacc:	e608      	b.n	800c6e0 <_dtoa_r+0x698>
 800cace:	9b07      	ldr	r3, [sp, #28]
 800cad0:	9a07      	ldr	r2, [sp, #28]
 800cad2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cad8:	4293      	cmp	r3, r2
 800cada:	d028      	beq.n	800cb2e <_dtoa_r+0xae6>
 800cadc:	4649      	mov	r1, r9
 800cade:	2300      	movs	r3, #0
 800cae0:	220a      	movs	r2, #10
 800cae2:	4658      	mov	r0, fp
 800cae4:	f000 f9d6 	bl	800ce94 <__multadd>
 800cae8:	42af      	cmp	r7, r5
 800caea:	4681      	mov	r9, r0
 800caec:	f04f 0300 	mov.w	r3, #0
 800caf0:	f04f 020a 	mov.w	r2, #10
 800caf4:	4639      	mov	r1, r7
 800caf6:	4658      	mov	r0, fp
 800caf8:	d107      	bne.n	800cb0a <_dtoa_r+0xac2>
 800cafa:	f000 f9cb 	bl	800ce94 <__multadd>
 800cafe:	4607      	mov	r7, r0
 800cb00:	4605      	mov	r5, r0
 800cb02:	9b07      	ldr	r3, [sp, #28]
 800cb04:	3301      	adds	r3, #1
 800cb06:	9307      	str	r3, [sp, #28]
 800cb08:	e774      	b.n	800c9f4 <_dtoa_r+0x9ac>
 800cb0a:	f000 f9c3 	bl	800ce94 <__multadd>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4607      	mov	r7, r0
 800cb12:	2300      	movs	r3, #0
 800cb14:	220a      	movs	r2, #10
 800cb16:	4658      	mov	r0, fp
 800cb18:	f000 f9bc 	bl	800ce94 <__multadd>
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	e7f0      	b.n	800cb02 <_dtoa_r+0xaba>
 800cb20:	9b00      	ldr	r3, [sp, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bfcc      	ite	gt
 800cb26:	461e      	movgt	r6, r3
 800cb28:	2601      	movle	r6, #1
 800cb2a:	4456      	add	r6, sl
 800cb2c:	2700      	movs	r7, #0
 800cb2e:	4649      	mov	r1, r9
 800cb30:	2201      	movs	r2, #1
 800cb32:	4658      	mov	r0, fp
 800cb34:	f000 fb5a 	bl	800d1ec <__lshift>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4681      	mov	r9, r0
 800cb3c:	f000 fbc2 	bl	800d2c4 <__mcmp>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	dcb0      	bgt.n	800caa6 <_dtoa_r+0xa5e>
 800cb44:	d102      	bne.n	800cb4c <_dtoa_r+0xb04>
 800cb46:	f018 0f01 	tst.w	r8, #1
 800cb4a:	d1ac      	bne.n	800caa6 <_dtoa_r+0xa5e>
 800cb4c:	4633      	mov	r3, r6
 800cb4e:	461e      	mov	r6, r3
 800cb50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb54:	2a30      	cmp	r2, #48	@ 0x30
 800cb56:	d0fa      	beq.n	800cb4e <_dtoa_r+0xb06>
 800cb58:	e5c2      	b.n	800c6e0 <_dtoa_r+0x698>
 800cb5a:	459a      	cmp	sl, r3
 800cb5c:	d1a4      	bne.n	800caa8 <_dtoa_r+0xa60>
 800cb5e:	9b04      	ldr	r3, [sp, #16]
 800cb60:	3301      	adds	r3, #1
 800cb62:	9304      	str	r3, [sp, #16]
 800cb64:	2331      	movs	r3, #49	@ 0x31
 800cb66:	f88a 3000 	strb.w	r3, [sl]
 800cb6a:	e5b9      	b.n	800c6e0 <_dtoa_r+0x698>
 800cb6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cbcc <_dtoa_r+0xb84>
 800cb72:	b11b      	cbz	r3, 800cb7c <_dtoa_r+0xb34>
 800cb74:	f10a 0308 	add.w	r3, sl, #8
 800cb78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb7a:	6013      	str	r3, [r2, #0]
 800cb7c:	4650      	mov	r0, sl
 800cb7e:	b019      	add	sp, #100	@ 0x64
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	f77f ae37 	ble.w	800c7fa <_dtoa_r+0x7b2>
 800cb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb90:	2001      	movs	r0, #1
 800cb92:	e655      	b.n	800c840 <_dtoa_r+0x7f8>
 800cb94:	9b00      	ldr	r3, [sp, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f77f aed6 	ble.w	800c948 <_dtoa_r+0x900>
 800cb9c:	4656      	mov	r6, sl
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4648      	mov	r0, r9
 800cba2:	f7ff f9c6 	bl	800bf32 <quorem>
 800cba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbaa:	f806 8b01 	strb.w	r8, [r6], #1
 800cbae:	9b00      	ldr	r3, [sp, #0]
 800cbb0:	eba6 020a 	sub.w	r2, r6, sl
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	ddb3      	ble.n	800cb20 <_dtoa_r+0xad8>
 800cbb8:	4649      	mov	r1, r9
 800cbba:	2300      	movs	r3, #0
 800cbbc:	220a      	movs	r2, #10
 800cbbe:	4658      	mov	r0, fp
 800cbc0:	f000 f968 	bl	800ce94 <__multadd>
 800cbc4:	4681      	mov	r9, r0
 800cbc6:	e7ea      	b.n	800cb9e <_dtoa_r+0xb56>
 800cbc8:	0800e3ec 	.word	0x0800e3ec
 800cbcc:	0800e370 	.word	0x0800e370

0800cbd0 <_free_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	d041      	beq.n	800cc5c <_free_r+0x8c>
 800cbd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbdc:	1f0c      	subs	r4, r1, #4
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	bfb8      	it	lt
 800cbe2:	18e4      	addlt	r4, r4, r3
 800cbe4:	f000 f8e8 	bl	800cdb8 <__malloc_lock>
 800cbe8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc60 <_free_r+0x90>)
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	b933      	cbnz	r3, 800cbfc <_free_r+0x2c>
 800cbee:	6063      	str	r3, [r4, #4]
 800cbf0:	6014      	str	r4, [r2, #0]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbf8:	f000 b8e4 	b.w	800cdc4 <__malloc_unlock>
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	d908      	bls.n	800cc12 <_free_r+0x42>
 800cc00:	6820      	ldr	r0, [r4, #0]
 800cc02:	1821      	adds	r1, r4, r0
 800cc04:	428b      	cmp	r3, r1
 800cc06:	bf01      	itttt	eq
 800cc08:	6819      	ldreq	r1, [r3, #0]
 800cc0a:	685b      	ldreq	r3, [r3, #4]
 800cc0c:	1809      	addeq	r1, r1, r0
 800cc0e:	6021      	streq	r1, [r4, #0]
 800cc10:	e7ed      	b.n	800cbee <_free_r+0x1e>
 800cc12:	461a      	mov	r2, r3
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	b10b      	cbz	r3, 800cc1c <_free_r+0x4c>
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d9fa      	bls.n	800cc12 <_free_r+0x42>
 800cc1c:	6811      	ldr	r1, [r2, #0]
 800cc1e:	1850      	adds	r0, r2, r1
 800cc20:	42a0      	cmp	r0, r4
 800cc22:	d10b      	bne.n	800cc3c <_free_r+0x6c>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	4401      	add	r1, r0
 800cc28:	1850      	adds	r0, r2, r1
 800cc2a:	4283      	cmp	r3, r0
 800cc2c:	6011      	str	r1, [r2, #0]
 800cc2e:	d1e0      	bne.n	800cbf2 <_free_r+0x22>
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	6053      	str	r3, [r2, #4]
 800cc36:	4408      	add	r0, r1
 800cc38:	6010      	str	r0, [r2, #0]
 800cc3a:	e7da      	b.n	800cbf2 <_free_r+0x22>
 800cc3c:	d902      	bls.n	800cc44 <_free_r+0x74>
 800cc3e:	230c      	movs	r3, #12
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	e7d6      	b.n	800cbf2 <_free_r+0x22>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	1821      	adds	r1, r4, r0
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	bf04      	itt	eq
 800cc4c:	6819      	ldreq	r1, [r3, #0]
 800cc4e:	685b      	ldreq	r3, [r3, #4]
 800cc50:	6063      	str	r3, [r4, #4]
 800cc52:	bf04      	itt	eq
 800cc54:	1809      	addeq	r1, r1, r0
 800cc56:	6021      	streq	r1, [r4, #0]
 800cc58:	6054      	str	r4, [r2, #4]
 800cc5a:	e7ca      	b.n	800cbf2 <_free_r+0x22>
 800cc5c:	bd38      	pop	{r3, r4, r5, pc}
 800cc5e:	bf00      	nop
 800cc60:	20005648 	.word	0x20005648

0800cc64 <malloc>:
 800cc64:	4b02      	ldr	r3, [pc, #8]	@ (800cc70 <malloc+0xc>)
 800cc66:	4601      	mov	r1, r0
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f000 b825 	b.w	800ccb8 <_malloc_r>
 800cc6e:	bf00      	nop
 800cc70:	2000001c 	.word	0x2000001c

0800cc74 <sbrk_aligned>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	4e0f      	ldr	r6, [pc, #60]	@ (800ccb4 <sbrk_aligned+0x40>)
 800cc78:	460c      	mov	r4, r1
 800cc7a:	6831      	ldr	r1, [r6, #0]
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	b911      	cbnz	r1, 800cc86 <sbrk_aligned+0x12>
 800cc80:	f000 fe9a 	bl	800d9b8 <_sbrk_r>
 800cc84:	6030      	str	r0, [r6, #0]
 800cc86:	4621      	mov	r1, r4
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f000 fe95 	bl	800d9b8 <_sbrk_r>
 800cc8e:	1c43      	adds	r3, r0, #1
 800cc90:	d103      	bne.n	800cc9a <sbrk_aligned+0x26>
 800cc92:	f04f 34ff 	mov.w	r4, #4294967295
 800cc96:	4620      	mov	r0, r4
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	1cc4      	adds	r4, r0, #3
 800cc9c:	f024 0403 	bic.w	r4, r4, #3
 800cca0:	42a0      	cmp	r0, r4
 800cca2:	d0f8      	beq.n	800cc96 <sbrk_aligned+0x22>
 800cca4:	1a21      	subs	r1, r4, r0
 800cca6:	4628      	mov	r0, r5
 800cca8:	f000 fe86 	bl	800d9b8 <_sbrk_r>
 800ccac:	3001      	adds	r0, #1
 800ccae:	d1f2      	bne.n	800cc96 <sbrk_aligned+0x22>
 800ccb0:	e7ef      	b.n	800cc92 <sbrk_aligned+0x1e>
 800ccb2:	bf00      	nop
 800ccb4:	20005644 	.word	0x20005644

0800ccb8 <_malloc_r>:
 800ccb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccbc:	1ccd      	adds	r5, r1, #3
 800ccbe:	f025 0503 	bic.w	r5, r5, #3
 800ccc2:	3508      	adds	r5, #8
 800ccc4:	2d0c      	cmp	r5, #12
 800ccc6:	bf38      	it	cc
 800ccc8:	250c      	movcc	r5, #12
 800ccca:	2d00      	cmp	r5, #0
 800cccc:	4606      	mov	r6, r0
 800ccce:	db01      	blt.n	800ccd4 <_malloc_r+0x1c>
 800ccd0:	42a9      	cmp	r1, r5
 800ccd2:	d904      	bls.n	800ccde <_malloc_r+0x26>
 800ccd4:	230c      	movs	r3, #12
 800ccd6:	6033      	str	r3, [r6, #0]
 800ccd8:	2000      	movs	r0, #0
 800ccda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdb4 <_malloc_r+0xfc>
 800cce2:	f000 f869 	bl	800cdb8 <__malloc_lock>
 800cce6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccea:	461c      	mov	r4, r3
 800ccec:	bb44      	cbnz	r4, 800cd40 <_malloc_r+0x88>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f7ff ffbf 	bl	800cc74 <sbrk_aligned>
 800ccf6:	1c43      	adds	r3, r0, #1
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	d158      	bne.n	800cdae <_malloc_r+0xf6>
 800ccfc:	f8d8 4000 	ldr.w	r4, [r8]
 800cd00:	4627      	mov	r7, r4
 800cd02:	2f00      	cmp	r7, #0
 800cd04:	d143      	bne.n	800cd8e <_malloc_r+0xd6>
 800cd06:	2c00      	cmp	r4, #0
 800cd08:	d04b      	beq.n	800cda2 <_malloc_r+0xea>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	4630      	mov	r0, r6
 800cd10:	eb04 0903 	add.w	r9, r4, r3
 800cd14:	f000 fe50 	bl	800d9b8 <_sbrk_r>
 800cd18:	4581      	cmp	r9, r0
 800cd1a:	d142      	bne.n	800cda2 <_malloc_r+0xea>
 800cd1c:	6821      	ldr	r1, [r4, #0]
 800cd1e:	1a6d      	subs	r5, r5, r1
 800cd20:	4629      	mov	r1, r5
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7ff ffa6 	bl	800cc74 <sbrk_aligned>
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d03a      	beq.n	800cda2 <_malloc_r+0xea>
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	442b      	add	r3, r5
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	f8d8 3000 	ldr.w	r3, [r8]
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	bb62      	cbnz	r2, 800cd94 <_malloc_r+0xdc>
 800cd3a:	f8c8 7000 	str.w	r7, [r8]
 800cd3e:	e00f      	b.n	800cd60 <_malloc_r+0xa8>
 800cd40:	6822      	ldr	r2, [r4, #0]
 800cd42:	1b52      	subs	r2, r2, r5
 800cd44:	d420      	bmi.n	800cd88 <_malloc_r+0xd0>
 800cd46:	2a0b      	cmp	r2, #11
 800cd48:	d917      	bls.n	800cd7a <_malloc_r+0xc2>
 800cd4a:	1961      	adds	r1, r4, r5
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	6025      	str	r5, [r4, #0]
 800cd50:	bf18      	it	ne
 800cd52:	6059      	strne	r1, [r3, #4]
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	bf08      	it	eq
 800cd58:	f8c8 1000 	streq.w	r1, [r8]
 800cd5c:	5162      	str	r2, [r4, r5]
 800cd5e:	604b      	str	r3, [r1, #4]
 800cd60:	4630      	mov	r0, r6
 800cd62:	f000 f82f 	bl	800cdc4 <__malloc_unlock>
 800cd66:	f104 000b 	add.w	r0, r4, #11
 800cd6a:	1d23      	adds	r3, r4, #4
 800cd6c:	f020 0007 	bic.w	r0, r0, #7
 800cd70:	1ac2      	subs	r2, r0, r3
 800cd72:	bf1c      	itt	ne
 800cd74:	1a1b      	subne	r3, r3, r0
 800cd76:	50a3      	strne	r3, [r4, r2]
 800cd78:	e7af      	b.n	800ccda <_malloc_r+0x22>
 800cd7a:	6862      	ldr	r2, [r4, #4]
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	bf0c      	ite	eq
 800cd80:	f8c8 2000 	streq.w	r2, [r8]
 800cd84:	605a      	strne	r2, [r3, #4]
 800cd86:	e7eb      	b.n	800cd60 <_malloc_r+0xa8>
 800cd88:	4623      	mov	r3, r4
 800cd8a:	6864      	ldr	r4, [r4, #4]
 800cd8c:	e7ae      	b.n	800ccec <_malloc_r+0x34>
 800cd8e:	463c      	mov	r4, r7
 800cd90:	687f      	ldr	r7, [r7, #4]
 800cd92:	e7b6      	b.n	800cd02 <_malloc_r+0x4a>
 800cd94:	461a      	mov	r2, r3
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d1fb      	bne.n	800cd94 <_malloc_r+0xdc>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6053      	str	r3, [r2, #4]
 800cda0:	e7de      	b.n	800cd60 <_malloc_r+0xa8>
 800cda2:	230c      	movs	r3, #12
 800cda4:	6033      	str	r3, [r6, #0]
 800cda6:	4630      	mov	r0, r6
 800cda8:	f000 f80c 	bl	800cdc4 <__malloc_unlock>
 800cdac:	e794      	b.n	800ccd8 <_malloc_r+0x20>
 800cdae:	6005      	str	r5, [r0, #0]
 800cdb0:	e7d6      	b.n	800cd60 <_malloc_r+0xa8>
 800cdb2:	bf00      	nop
 800cdb4:	20005648 	.word	0x20005648

0800cdb8 <__malloc_lock>:
 800cdb8:	4801      	ldr	r0, [pc, #4]	@ (800cdc0 <__malloc_lock+0x8>)
 800cdba:	f7ff b8aa 	b.w	800bf12 <__retarget_lock_acquire_recursive>
 800cdbe:	bf00      	nop
 800cdc0:	20005640 	.word	0x20005640

0800cdc4 <__malloc_unlock>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	@ (800cdcc <__malloc_unlock+0x8>)
 800cdc6:	f7ff b8a5 	b.w	800bf14 <__retarget_lock_release_recursive>
 800cdca:	bf00      	nop
 800cdcc:	20005640 	.word	0x20005640

0800cdd0 <_Balloc>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	69c6      	ldr	r6, [r0, #28]
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	b976      	cbnz	r6, 800cdf8 <_Balloc+0x28>
 800cdda:	2010      	movs	r0, #16
 800cddc:	f7ff ff42 	bl	800cc64 <malloc>
 800cde0:	4602      	mov	r2, r0
 800cde2:	61e0      	str	r0, [r4, #28]
 800cde4:	b920      	cbnz	r0, 800cdf0 <_Balloc+0x20>
 800cde6:	4b18      	ldr	r3, [pc, #96]	@ (800ce48 <_Balloc+0x78>)
 800cde8:	4818      	ldr	r0, [pc, #96]	@ (800ce4c <_Balloc+0x7c>)
 800cdea:	216b      	movs	r1, #107	@ 0x6b
 800cdec:	f000 fdf4 	bl	800d9d8 <__assert_func>
 800cdf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdf4:	6006      	str	r6, [r0, #0]
 800cdf6:	60c6      	str	r6, [r0, #12]
 800cdf8:	69e6      	ldr	r6, [r4, #28]
 800cdfa:	68f3      	ldr	r3, [r6, #12]
 800cdfc:	b183      	cbz	r3, 800ce20 <_Balloc+0x50>
 800cdfe:	69e3      	ldr	r3, [r4, #28]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce06:	b9b8      	cbnz	r0, 800ce38 <_Balloc+0x68>
 800ce08:	2101      	movs	r1, #1
 800ce0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce0e:	1d72      	adds	r2, r6, #5
 800ce10:	0092      	lsls	r2, r2, #2
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fdfe 	bl	800da14 <_calloc_r>
 800ce18:	b160      	cbz	r0, 800ce34 <_Balloc+0x64>
 800ce1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce1e:	e00e      	b.n	800ce3e <_Balloc+0x6e>
 800ce20:	2221      	movs	r2, #33	@ 0x21
 800ce22:	2104      	movs	r1, #4
 800ce24:	4620      	mov	r0, r4
 800ce26:	f000 fdf5 	bl	800da14 <_calloc_r>
 800ce2a:	69e3      	ldr	r3, [r4, #28]
 800ce2c:	60f0      	str	r0, [r6, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e4      	bne.n	800cdfe <_Balloc+0x2e>
 800ce34:	2000      	movs	r0, #0
 800ce36:	bd70      	pop	{r4, r5, r6, pc}
 800ce38:	6802      	ldr	r2, [r0, #0]
 800ce3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce44:	e7f7      	b.n	800ce36 <_Balloc+0x66>
 800ce46:	bf00      	nop
 800ce48:	0800e37d 	.word	0x0800e37d
 800ce4c:	0800e3fd 	.word	0x0800e3fd

0800ce50 <_Bfree>:
 800ce50:	b570      	push	{r4, r5, r6, lr}
 800ce52:	69c6      	ldr	r6, [r0, #28]
 800ce54:	4605      	mov	r5, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	b976      	cbnz	r6, 800ce78 <_Bfree+0x28>
 800ce5a:	2010      	movs	r0, #16
 800ce5c:	f7ff ff02 	bl	800cc64 <malloc>
 800ce60:	4602      	mov	r2, r0
 800ce62:	61e8      	str	r0, [r5, #28]
 800ce64:	b920      	cbnz	r0, 800ce70 <_Bfree+0x20>
 800ce66:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <_Bfree+0x3c>)
 800ce68:	4809      	ldr	r0, [pc, #36]	@ (800ce90 <_Bfree+0x40>)
 800ce6a:	218f      	movs	r1, #143	@ 0x8f
 800ce6c:	f000 fdb4 	bl	800d9d8 <__assert_func>
 800ce70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce74:	6006      	str	r6, [r0, #0]
 800ce76:	60c6      	str	r6, [r0, #12]
 800ce78:	b13c      	cbz	r4, 800ce8a <_Bfree+0x3a>
 800ce7a:	69eb      	ldr	r3, [r5, #28]
 800ce7c:	6862      	ldr	r2, [r4, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce84:	6021      	str	r1, [r4, #0]
 800ce86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
 800ce8c:	0800e37d 	.word	0x0800e37d
 800ce90:	0800e3fd 	.word	0x0800e3fd

0800ce94 <__multadd>:
 800ce94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce98:	690d      	ldr	r5, [r1, #16]
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	461e      	mov	r6, r3
 800cea0:	f101 0c14 	add.w	ip, r1, #20
 800cea4:	2000      	movs	r0, #0
 800cea6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceaa:	b299      	uxth	r1, r3
 800ceac:	fb02 6101 	mla	r1, r2, r1, r6
 800ceb0:	0c1e      	lsrs	r6, r3, #16
 800ceb2:	0c0b      	lsrs	r3, r1, #16
 800ceb4:	fb02 3306 	mla	r3, r2, r6, r3
 800ceb8:	b289      	uxth	r1, r1
 800ceba:	3001      	adds	r0, #1
 800cebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cec0:	4285      	cmp	r5, r0
 800cec2:	f84c 1b04 	str.w	r1, [ip], #4
 800cec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceca:	dcec      	bgt.n	800cea6 <__multadd+0x12>
 800cecc:	b30e      	cbz	r6, 800cf12 <__multadd+0x7e>
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	42ab      	cmp	r3, r5
 800ced2:	dc19      	bgt.n	800cf08 <__multadd+0x74>
 800ced4:	6861      	ldr	r1, [r4, #4]
 800ced6:	4638      	mov	r0, r7
 800ced8:	3101      	adds	r1, #1
 800ceda:	f7ff ff79 	bl	800cdd0 <_Balloc>
 800cede:	4680      	mov	r8, r0
 800cee0:	b928      	cbnz	r0, 800ceee <__multadd+0x5a>
 800cee2:	4602      	mov	r2, r0
 800cee4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf18 <__multadd+0x84>)
 800cee6:	480d      	ldr	r0, [pc, #52]	@ (800cf1c <__multadd+0x88>)
 800cee8:	21ba      	movs	r1, #186	@ 0xba
 800ceea:	f000 fd75 	bl	800d9d8 <__assert_func>
 800ceee:	6922      	ldr	r2, [r4, #16]
 800cef0:	3202      	adds	r2, #2
 800cef2:	f104 010c 	add.w	r1, r4, #12
 800cef6:	0092      	lsls	r2, r2, #2
 800cef8:	300c      	adds	r0, #12
 800cefa:	f7ff f80c 	bl	800bf16 <memcpy>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4638      	mov	r0, r7
 800cf02:	f7ff ffa5 	bl	800ce50 <_Bfree>
 800cf06:	4644      	mov	r4, r8
 800cf08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf0c:	3501      	adds	r5, #1
 800cf0e:	615e      	str	r6, [r3, #20]
 800cf10:	6125      	str	r5, [r4, #16]
 800cf12:	4620      	mov	r0, r4
 800cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf18:	0800e3ec 	.word	0x0800e3ec
 800cf1c:	0800e3fd 	.word	0x0800e3fd

0800cf20 <__hi0bits>:
 800cf20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf24:	4603      	mov	r3, r0
 800cf26:	bf36      	itet	cc
 800cf28:	0403      	lslcc	r3, r0, #16
 800cf2a:	2000      	movcs	r0, #0
 800cf2c:	2010      	movcc	r0, #16
 800cf2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf32:	bf3c      	itt	cc
 800cf34:	021b      	lslcc	r3, r3, #8
 800cf36:	3008      	addcc	r0, #8
 800cf38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf3c:	bf3c      	itt	cc
 800cf3e:	011b      	lslcc	r3, r3, #4
 800cf40:	3004      	addcc	r0, #4
 800cf42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf46:	bf3c      	itt	cc
 800cf48:	009b      	lslcc	r3, r3, #2
 800cf4a:	3002      	addcc	r0, #2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	db05      	blt.n	800cf5c <__hi0bits+0x3c>
 800cf50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf54:	f100 0001 	add.w	r0, r0, #1
 800cf58:	bf08      	it	eq
 800cf5a:	2020      	moveq	r0, #32
 800cf5c:	4770      	bx	lr

0800cf5e <__lo0bits>:
 800cf5e:	6803      	ldr	r3, [r0, #0]
 800cf60:	4602      	mov	r2, r0
 800cf62:	f013 0007 	ands.w	r0, r3, #7
 800cf66:	d00b      	beq.n	800cf80 <__lo0bits+0x22>
 800cf68:	07d9      	lsls	r1, r3, #31
 800cf6a:	d421      	bmi.n	800cfb0 <__lo0bits+0x52>
 800cf6c:	0798      	lsls	r0, r3, #30
 800cf6e:	bf49      	itett	mi
 800cf70:	085b      	lsrmi	r3, r3, #1
 800cf72:	089b      	lsrpl	r3, r3, #2
 800cf74:	2001      	movmi	r0, #1
 800cf76:	6013      	strmi	r3, [r2, #0]
 800cf78:	bf5c      	itt	pl
 800cf7a:	6013      	strpl	r3, [r2, #0]
 800cf7c:	2002      	movpl	r0, #2
 800cf7e:	4770      	bx	lr
 800cf80:	b299      	uxth	r1, r3
 800cf82:	b909      	cbnz	r1, 800cf88 <__lo0bits+0x2a>
 800cf84:	0c1b      	lsrs	r3, r3, #16
 800cf86:	2010      	movs	r0, #16
 800cf88:	b2d9      	uxtb	r1, r3
 800cf8a:	b909      	cbnz	r1, 800cf90 <__lo0bits+0x32>
 800cf8c:	3008      	adds	r0, #8
 800cf8e:	0a1b      	lsrs	r3, r3, #8
 800cf90:	0719      	lsls	r1, r3, #28
 800cf92:	bf04      	itt	eq
 800cf94:	091b      	lsreq	r3, r3, #4
 800cf96:	3004      	addeq	r0, #4
 800cf98:	0799      	lsls	r1, r3, #30
 800cf9a:	bf04      	itt	eq
 800cf9c:	089b      	lsreq	r3, r3, #2
 800cf9e:	3002      	addeq	r0, #2
 800cfa0:	07d9      	lsls	r1, r3, #31
 800cfa2:	d403      	bmi.n	800cfac <__lo0bits+0x4e>
 800cfa4:	085b      	lsrs	r3, r3, #1
 800cfa6:	f100 0001 	add.w	r0, r0, #1
 800cfaa:	d003      	beq.n	800cfb4 <__lo0bits+0x56>
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	4770      	bx	lr
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	4770      	bx	lr
 800cfb4:	2020      	movs	r0, #32
 800cfb6:	4770      	bx	lr

0800cfb8 <__i2b>:
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	f7ff ff07 	bl	800cdd0 <_Balloc>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	b928      	cbnz	r0, 800cfd2 <__i2b+0x1a>
 800cfc6:	4b05      	ldr	r3, [pc, #20]	@ (800cfdc <__i2b+0x24>)
 800cfc8:	4805      	ldr	r0, [pc, #20]	@ (800cfe0 <__i2b+0x28>)
 800cfca:	f240 1145 	movw	r1, #325	@ 0x145
 800cfce:	f000 fd03 	bl	800d9d8 <__assert_func>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	6144      	str	r4, [r0, #20]
 800cfd6:	6103      	str	r3, [r0, #16]
 800cfd8:	bd10      	pop	{r4, pc}
 800cfda:	bf00      	nop
 800cfdc:	0800e3ec 	.word	0x0800e3ec
 800cfe0:	0800e3fd 	.word	0x0800e3fd

0800cfe4 <__multiply>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	4614      	mov	r4, r2
 800cfea:	690a      	ldr	r2, [r1, #16]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	bfa8      	it	ge
 800cff2:	4623      	movge	r3, r4
 800cff4:	460f      	mov	r7, r1
 800cff6:	bfa4      	itt	ge
 800cff8:	460c      	movge	r4, r1
 800cffa:	461f      	movge	r7, r3
 800cffc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d000:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d004:	68a3      	ldr	r3, [r4, #8]
 800d006:	6861      	ldr	r1, [r4, #4]
 800d008:	eb0a 0609 	add.w	r6, sl, r9
 800d00c:	42b3      	cmp	r3, r6
 800d00e:	b085      	sub	sp, #20
 800d010:	bfb8      	it	lt
 800d012:	3101      	addlt	r1, #1
 800d014:	f7ff fedc 	bl	800cdd0 <_Balloc>
 800d018:	b930      	cbnz	r0, 800d028 <__multiply+0x44>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b44      	ldr	r3, [pc, #272]	@ (800d130 <__multiply+0x14c>)
 800d01e:	4845      	ldr	r0, [pc, #276]	@ (800d134 <__multiply+0x150>)
 800d020:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d024:	f000 fcd8 	bl	800d9d8 <__assert_func>
 800d028:	f100 0514 	add.w	r5, r0, #20
 800d02c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d030:	462b      	mov	r3, r5
 800d032:	2200      	movs	r2, #0
 800d034:	4543      	cmp	r3, r8
 800d036:	d321      	bcc.n	800d07c <__multiply+0x98>
 800d038:	f107 0114 	add.w	r1, r7, #20
 800d03c:	f104 0214 	add.w	r2, r4, #20
 800d040:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d044:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d048:	9302      	str	r3, [sp, #8]
 800d04a:	1b13      	subs	r3, r2, r4
 800d04c:	3b15      	subs	r3, #21
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	3304      	adds	r3, #4
 800d054:	f104 0715 	add.w	r7, r4, #21
 800d058:	42ba      	cmp	r2, r7
 800d05a:	bf38      	it	cc
 800d05c:	2304      	movcc	r3, #4
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	9b02      	ldr	r3, [sp, #8]
 800d062:	9103      	str	r1, [sp, #12]
 800d064:	428b      	cmp	r3, r1
 800d066:	d80c      	bhi.n	800d082 <__multiply+0x9e>
 800d068:	2e00      	cmp	r6, #0
 800d06a:	dd03      	ble.n	800d074 <__multiply+0x90>
 800d06c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d070:	2b00      	cmp	r3, #0
 800d072:	d05b      	beq.n	800d12c <__multiply+0x148>
 800d074:	6106      	str	r6, [r0, #16]
 800d076:	b005      	add	sp, #20
 800d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	f843 2b04 	str.w	r2, [r3], #4
 800d080:	e7d8      	b.n	800d034 <__multiply+0x50>
 800d082:	f8b1 a000 	ldrh.w	sl, [r1]
 800d086:	f1ba 0f00 	cmp.w	sl, #0
 800d08a:	d024      	beq.n	800d0d6 <__multiply+0xf2>
 800d08c:	f104 0e14 	add.w	lr, r4, #20
 800d090:	46a9      	mov	r9, r5
 800d092:	f04f 0c00 	mov.w	ip, #0
 800d096:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d09a:	f8d9 3000 	ldr.w	r3, [r9]
 800d09e:	fa1f fb87 	uxth.w	fp, r7
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d0ac:	f8d9 7000 	ldr.w	r7, [r9]
 800d0b0:	4463      	add	r3, ip
 800d0b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d0ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0c4:	4572      	cmp	r2, lr
 800d0c6:	f849 3b04 	str.w	r3, [r9], #4
 800d0ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0ce:	d8e2      	bhi.n	800d096 <__multiply+0xb2>
 800d0d0:	9b01      	ldr	r3, [sp, #4]
 800d0d2:	f845 c003 	str.w	ip, [r5, r3]
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0dc:	3104      	adds	r1, #4
 800d0de:	f1b9 0f00 	cmp.w	r9, #0
 800d0e2:	d021      	beq.n	800d128 <__multiply+0x144>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	f104 0c14 	add.w	ip, r4, #20
 800d0ea:	46ae      	mov	lr, r5
 800d0ec:	f04f 0a00 	mov.w	sl, #0
 800d0f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d0f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d0f8:	fb09 770b 	mla	r7, r9, fp, r7
 800d0fc:	4457      	add	r7, sl
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d104:	f84e 3b04 	str.w	r3, [lr], #4
 800d108:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d10c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d110:	f8be 3000 	ldrh.w	r3, [lr]
 800d114:	fb09 330a 	mla	r3, r9, sl, r3
 800d118:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d11c:	4562      	cmp	r2, ip
 800d11e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d122:	d8e5      	bhi.n	800d0f0 <__multiply+0x10c>
 800d124:	9f01      	ldr	r7, [sp, #4]
 800d126:	51eb      	str	r3, [r5, r7]
 800d128:	3504      	adds	r5, #4
 800d12a:	e799      	b.n	800d060 <__multiply+0x7c>
 800d12c:	3e01      	subs	r6, #1
 800d12e:	e79b      	b.n	800d068 <__multiply+0x84>
 800d130:	0800e3ec 	.word	0x0800e3ec
 800d134:	0800e3fd 	.word	0x0800e3fd

0800d138 <__pow5mult>:
 800d138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d13c:	4615      	mov	r5, r2
 800d13e:	f012 0203 	ands.w	r2, r2, #3
 800d142:	4607      	mov	r7, r0
 800d144:	460e      	mov	r6, r1
 800d146:	d007      	beq.n	800d158 <__pow5mult+0x20>
 800d148:	4c25      	ldr	r4, [pc, #148]	@ (800d1e0 <__pow5mult+0xa8>)
 800d14a:	3a01      	subs	r2, #1
 800d14c:	2300      	movs	r3, #0
 800d14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d152:	f7ff fe9f 	bl	800ce94 <__multadd>
 800d156:	4606      	mov	r6, r0
 800d158:	10ad      	asrs	r5, r5, #2
 800d15a:	d03d      	beq.n	800d1d8 <__pow5mult+0xa0>
 800d15c:	69fc      	ldr	r4, [r7, #28]
 800d15e:	b97c      	cbnz	r4, 800d180 <__pow5mult+0x48>
 800d160:	2010      	movs	r0, #16
 800d162:	f7ff fd7f 	bl	800cc64 <malloc>
 800d166:	4602      	mov	r2, r0
 800d168:	61f8      	str	r0, [r7, #28]
 800d16a:	b928      	cbnz	r0, 800d178 <__pow5mult+0x40>
 800d16c:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e4 <__pow5mult+0xac>)
 800d16e:	481e      	ldr	r0, [pc, #120]	@ (800d1e8 <__pow5mult+0xb0>)
 800d170:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d174:	f000 fc30 	bl	800d9d8 <__assert_func>
 800d178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d17c:	6004      	str	r4, [r0, #0]
 800d17e:	60c4      	str	r4, [r0, #12]
 800d180:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d188:	b94c      	cbnz	r4, 800d19e <__pow5mult+0x66>
 800d18a:	f240 2171 	movw	r1, #625	@ 0x271
 800d18e:	4638      	mov	r0, r7
 800d190:	f7ff ff12 	bl	800cfb8 <__i2b>
 800d194:	2300      	movs	r3, #0
 800d196:	f8c8 0008 	str.w	r0, [r8, #8]
 800d19a:	4604      	mov	r4, r0
 800d19c:	6003      	str	r3, [r0, #0]
 800d19e:	f04f 0900 	mov.w	r9, #0
 800d1a2:	07eb      	lsls	r3, r5, #31
 800d1a4:	d50a      	bpl.n	800d1bc <__pow5mult+0x84>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7ff ff1a 	bl	800cfe4 <__multiply>
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	f7ff fe4b 	bl	800ce50 <_Bfree>
 800d1ba:	4646      	mov	r6, r8
 800d1bc:	106d      	asrs	r5, r5, #1
 800d1be:	d00b      	beq.n	800d1d8 <__pow5mult+0xa0>
 800d1c0:	6820      	ldr	r0, [r4, #0]
 800d1c2:	b938      	cbnz	r0, 800d1d4 <__pow5mult+0x9c>
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	f7ff ff0b 	bl	800cfe4 <__multiply>
 800d1ce:	6020      	str	r0, [r4, #0]
 800d1d0:	f8c0 9000 	str.w	r9, [r0]
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	e7e4      	b.n	800d1a2 <__pow5mult+0x6a>
 800d1d8:	4630      	mov	r0, r6
 800d1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1de:	bf00      	nop
 800d1e0:	0800e458 	.word	0x0800e458
 800d1e4:	0800e37d 	.word	0x0800e37d
 800d1e8:	0800e3fd 	.word	0x0800e3fd

0800d1ec <__lshift>:
 800d1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	6849      	ldr	r1, [r1, #4]
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1fa:	68a3      	ldr	r3, [r4, #8]
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	4691      	mov	r9, r2
 800d200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d204:	f108 0601 	add.w	r6, r8, #1
 800d208:	42b3      	cmp	r3, r6
 800d20a:	db0b      	blt.n	800d224 <__lshift+0x38>
 800d20c:	4638      	mov	r0, r7
 800d20e:	f7ff fddf 	bl	800cdd0 <_Balloc>
 800d212:	4605      	mov	r5, r0
 800d214:	b948      	cbnz	r0, 800d22a <__lshift+0x3e>
 800d216:	4602      	mov	r2, r0
 800d218:	4b28      	ldr	r3, [pc, #160]	@ (800d2bc <__lshift+0xd0>)
 800d21a:	4829      	ldr	r0, [pc, #164]	@ (800d2c0 <__lshift+0xd4>)
 800d21c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d220:	f000 fbda 	bl	800d9d8 <__assert_func>
 800d224:	3101      	adds	r1, #1
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	e7ee      	b.n	800d208 <__lshift+0x1c>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f100 0114 	add.w	r1, r0, #20
 800d230:	f100 0210 	add.w	r2, r0, #16
 800d234:	4618      	mov	r0, r3
 800d236:	4553      	cmp	r3, sl
 800d238:	db33      	blt.n	800d2a2 <__lshift+0xb6>
 800d23a:	6920      	ldr	r0, [r4, #16]
 800d23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d240:	f104 0314 	add.w	r3, r4, #20
 800d244:	f019 091f 	ands.w	r9, r9, #31
 800d248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d24c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d250:	d02b      	beq.n	800d2aa <__lshift+0xbe>
 800d252:	f1c9 0e20 	rsb	lr, r9, #32
 800d256:	468a      	mov	sl, r1
 800d258:	2200      	movs	r2, #0
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	fa00 f009 	lsl.w	r0, r0, r9
 800d260:	4310      	orrs	r0, r2
 800d262:	f84a 0b04 	str.w	r0, [sl], #4
 800d266:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26a:	459c      	cmp	ip, r3
 800d26c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d270:	d8f3      	bhi.n	800d25a <__lshift+0x6e>
 800d272:	ebac 0304 	sub.w	r3, ip, r4
 800d276:	3b15      	subs	r3, #21
 800d278:	f023 0303 	bic.w	r3, r3, #3
 800d27c:	3304      	adds	r3, #4
 800d27e:	f104 0015 	add.w	r0, r4, #21
 800d282:	4584      	cmp	ip, r0
 800d284:	bf38      	it	cc
 800d286:	2304      	movcc	r3, #4
 800d288:	50ca      	str	r2, [r1, r3]
 800d28a:	b10a      	cbz	r2, 800d290 <__lshift+0xa4>
 800d28c:	f108 0602 	add.w	r6, r8, #2
 800d290:	3e01      	subs	r6, #1
 800d292:	4638      	mov	r0, r7
 800d294:	612e      	str	r6, [r5, #16]
 800d296:	4621      	mov	r1, r4
 800d298:	f7ff fdda 	bl	800ce50 <_Bfree>
 800d29c:	4628      	mov	r0, r5
 800d29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	e7c5      	b.n	800d236 <__lshift+0x4a>
 800d2aa:	3904      	subs	r1, #4
 800d2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2b4:	459c      	cmp	ip, r3
 800d2b6:	d8f9      	bhi.n	800d2ac <__lshift+0xc0>
 800d2b8:	e7ea      	b.n	800d290 <__lshift+0xa4>
 800d2ba:	bf00      	nop
 800d2bc:	0800e3ec 	.word	0x0800e3ec
 800d2c0:	0800e3fd 	.word	0x0800e3fd

0800d2c4 <__mcmp>:
 800d2c4:	690a      	ldr	r2, [r1, #16]
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	6900      	ldr	r0, [r0, #16]
 800d2ca:	1a80      	subs	r0, r0, r2
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	d10e      	bne.n	800d2ee <__mcmp+0x2a>
 800d2d0:	3314      	adds	r3, #20
 800d2d2:	3114      	adds	r1, #20
 800d2d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2e4:	4295      	cmp	r5, r2
 800d2e6:	d003      	beq.n	800d2f0 <__mcmp+0x2c>
 800d2e8:	d205      	bcs.n	800d2f6 <__mcmp+0x32>
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	bd30      	pop	{r4, r5, pc}
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d3f3      	bcc.n	800d2dc <__mcmp+0x18>
 800d2f4:	e7fb      	b.n	800d2ee <__mcmp+0x2a>
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	e7f9      	b.n	800d2ee <__mcmp+0x2a>
	...

0800d2fc <__mdiff>:
 800d2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	4689      	mov	r9, r1
 800d302:	4606      	mov	r6, r0
 800d304:	4611      	mov	r1, r2
 800d306:	4648      	mov	r0, r9
 800d308:	4614      	mov	r4, r2
 800d30a:	f7ff ffdb 	bl	800d2c4 <__mcmp>
 800d30e:	1e05      	subs	r5, r0, #0
 800d310:	d112      	bne.n	800d338 <__mdiff+0x3c>
 800d312:	4629      	mov	r1, r5
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff fd5b 	bl	800cdd0 <_Balloc>
 800d31a:	4602      	mov	r2, r0
 800d31c:	b928      	cbnz	r0, 800d32a <__mdiff+0x2e>
 800d31e:	4b3f      	ldr	r3, [pc, #252]	@ (800d41c <__mdiff+0x120>)
 800d320:	f240 2137 	movw	r1, #567	@ 0x237
 800d324:	483e      	ldr	r0, [pc, #248]	@ (800d420 <__mdiff+0x124>)
 800d326:	f000 fb57 	bl	800d9d8 <__assert_func>
 800d32a:	2301      	movs	r3, #1
 800d32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d330:	4610      	mov	r0, r2
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	bfbc      	itt	lt
 800d33a:	464b      	movlt	r3, r9
 800d33c:	46a1      	movlt	r9, r4
 800d33e:	4630      	mov	r0, r6
 800d340:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d344:	bfba      	itte	lt
 800d346:	461c      	movlt	r4, r3
 800d348:	2501      	movlt	r5, #1
 800d34a:	2500      	movge	r5, #0
 800d34c:	f7ff fd40 	bl	800cdd0 <_Balloc>
 800d350:	4602      	mov	r2, r0
 800d352:	b918      	cbnz	r0, 800d35c <__mdiff+0x60>
 800d354:	4b31      	ldr	r3, [pc, #196]	@ (800d41c <__mdiff+0x120>)
 800d356:	f240 2145 	movw	r1, #581	@ 0x245
 800d35a:	e7e3      	b.n	800d324 <__mdiff+0x28>
 800d35c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d360:	6926      	ldr	r6, [r4, #16]
 800d362:	60c5      	str	r5, [r0, #12]
 800d364:	f109 0310 	add.w	r3, r9, #16
 800d368:	f109 0514 	add.w	r5, r9, #20
 800d36c:	f104 0e14 	add.w	lr, r4, #20
 800d370:	f100 0b14 	add.w	fp, r0, #20
 800d374:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d378:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	46d9      	mov	r9, fp
 800d380:	f04f 0c00 	mov.w	ip, #0
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d38a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d38e:	9301      	str	r3, [sp, #4]
 800d390:	fa1f f38a 	uxth.w	r3, sl
 800d394:	4619      	mov	r1, r3
 800d396:	b283      	uxth	r3, r0
 800d398:	1acb      	subs	r3, r1, r3
 800d39a:	0c00      	lsrs	r0, r0, #16
 800d39c:	4463      	add	r3, ip
 800d39e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3ac:	4576      	cmp	r6, lr
 800d3ae:	f849 3b04 	str.w	r3, [r9], #4
 800d3b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3b6:	d8e5      	bhi.n	800d384 <__mdiff+0x88>
 800d3b8:	1b33      	subs	r3, r6, r4
 800d3ba:	3b15      	subs	r3, #21
 800d3bc:	f023 0303 	bic.w	r3, r3, #3
 800d3c0:	3415      	adds	r4, #21
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	42a6      	cmp	r6, r4
 800d3c6:	bf38      	it	cc
 800d3c8:	2304      	movcc	r3, #4
 800d3ca:	441d      	add	r5, r3
 800d3cc:	445b      	add	r3, fp
 800d3ce:	461e      	mov	r6, r3
 800d3d0:	462c      	mov	r4, r5
 800d3d2:	4544      	cmp	r4, r8
 800d3d4:	d30e      	bcc.n	800d3f4 <__mdiff+0xf8>
 800d3d6:	f108 0103 	add.w	r1, r8, #3
 800d3da:	1b49      	subs	r1, r1, r5
 800d3dc:	f021 0103 	bic.w	r1, r1, #3
 800d3e0:	3d03      	subs	r5, #3
 800d3e2:	45a8      	cmp	r8, r5
 800d3e4:	bf38      	it	cc
 800d3e6:	2100      	movcc	r1, #0
 800d3e8:	440b      	add	r3, r1
 800d3ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3ee:	b191      	cbz	r1, 800d416 <__mdiff+0x11a>
 800d3f0:	6117      	str	r7, [r2, #16]
 800d3f2:	e79d      	b.n	800d330 <__mdiff+0x34>
 800d3f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3f8:	46e6      	mov	lr, ip
 800d3fa:	0c08      	lsrs	r0, r1, #16
 800d3fc:	fa1c fc81 	uxtah	ip, ip, r1
 800d400:	4471      	add	r1, lr
 800d402:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d406:	b289      	uxth	r1, r1
 800d408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d40c:	f846 1b04 	str.w	r1, [r6], #4
 800d410:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d414:	e7dd      	b.n	800d3d2 <__mdiff+0xd6>
 800d416:	3f01      	subs	r7, #1
 800d418:	e7e7      	b.n	800d3ea <__mdiff+0xee>
 800d41a:	bf00      	nop
 800d41c:	0800e3ec 	.word	0x0800e3ec
 800d420:	0800e3fd 	.word	0x0800e3fd

0800d424 <__d2b>:
 800d424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d428:	460f      	mov	r7, r1
 800d42a:	2101      	movs	r1, #1
 800d42c:	ec59 8b10 	vmov	r8, r9, d0
 800d430:	4616      	mov	r6, r2
 800d432:	f7ff fccd 	bl	800cdd0 <_Balloc>
 800d436:	4604      	mov	r4, r0
 800d438:	b930      	cbnz	r0, 800d448 <__d2b+0x24>
 800d43a:	4602      	mov	r2, r0
 800d43c:	4b23      	ldr	r3, [pc, #140]	@ (800d4cc <__d2b+0xa8>)
 800d43e:	4824      	ldr	r0, [pc, #144]	@ (800d4d0 <__d2b+0xac>)
 800d440:	f240 310f 	movw	r1, #783	@ 0x30f
 800d444:	f000 fac8 	bl	800d9d8 <__assert_func>
 800d448:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d44c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d450:	b10d      	cbz	r5, 800d456 <__d2b+0x32>
 800d452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	f1b8 0300 	subs.w	r3, r8, #0
 800d45c:	d023      	beq.n	800d4a6 <__d2b+0x82>
 800d45e:	4668      	mov	r0, sp
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	f7ff fd7c 	bl	800cf5e <__lo0bits>
 800d466:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d46a:	b1d0      	cbz	r0, 800d4a2 <__d2b+0x7e>
 800d46c:	f1c0 0320 	rsb	r3, r0, #32
 800d470:	fa02 f303 	lsl.w	r3, r2, r3
 800d474:	430b      	orrs	r3, r1
 800d476:	40c2      	lsrs	r2, r0
 800d478:	6163      	str	r3, [r4, #20]
 800d47a:	9201      	str	r2, [sp, #4]
 800d47c:	9b01      	ldr	r3, [sp, #4]
 800d47e:	61a3      	str	r3, [r4, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	bf0c      	ite	eq
 800d484:	2201      	moveq	r2, #1
 800d486:	2202      	movne	r2, #2
 800d488:	6122      	str	r2, [r4, #16]
 800d48a:	b1a5      	cbz	r5, 800d4b6 <__d2b+0x92>
 800d48c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d490:	4405      	add	r5, r0
 800d492:	603d      	str	r5, [r7, #0]
 800d494:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d498:	6030      	str	r0, [r6, #0]
 800d49a:	4620      	mov	r0, r4
 800d49c:	b003      	add	sp, #12
 800d49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a2:	6161      	str	r1, [r4, #20]
 800d4a4:	e7ea      	b.n	800d47c <__d2b+0x58>
 800d4a6:	a801      	add	r0, sp, #4
 800d4a8:	f7ff fd59 	bl	800cf5e <__lo0bits>
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	6163      	str	r3, [r4, #20]
 800d4b0:	3020      	adds	r0, #32
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	e7e8      	b.n	800d488 <__d2b+0x64>
 800d4b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4be:	6038      	str	r0, [r7, #0]
 800d4c0:	6918      	ldr	r0, [r3, #16]
 800d4c2:	f7ff fd2d 	bl	800cf20 <__hi0bits>
 800d4c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ca:	e7e5      	b.n	800d498 <__d2b+0x74>
 800d4cc:	0800e3ec 	.word	0x0800e3ec
 800d4d0:	0800e3fd 	.word	0x0800e3fd

0800d4d4 <__sfputc_r>:
 800d4d4:	6893      	ldr	r3, [r2, #8]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	b410      	push	{r4}
 800d4dc:	6093      	str	r3, [r2, #8]
 800d4de:	da08      	bge.n	800d4f2 <__sfputc_r+0x1e>
 800d4e0:	6994      	ldr	r4, [r2, #24]
 800d4e2:	42a3      	cmp	r3, r4
 800d4e4:	db01      	blt.n	800d4ea <__sfputc_r+0x16>
 800d4e6:	290a      	cmp	r1, #10
 800d4e8:	d103      	bne.n	800d4f2 <__sfputc_r+0x1e>
 800d4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ee:	f7fe bbfe 	b.w	800bcee <__swbuf_r>
 800d4f2:	6813      	ldr	r3, [r2, #0]
 800d4f4:	1c58      	adds	r0, r3, #1
 800d4f6:	6010      	str	r0, [r2, #0]
 800d4f8:	7019      	strb	r1, [r3, #0]
 800d4fa:	4608      	mov	r0, r1
 800d4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <__sfputs_r>:
 800d502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d504:	4606      	mov	r6, r0
 800d506:	460f      	mov	r7, r1
 800d508:	4614      	mov	r4, r2
 800d50a:	18d5      	adds	r5, r2, r3
 800d50c:	42ac      	cmp	r4, r5
 800d50e:	d101      	bne.n	800d514 <__sfputs_r+0x12>
 800d510:	2000      	movs	r0, #0
 800d512:	e007      	b.n	800d524 <__sfputs_r+0x22>
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	463a      	mov	r2, r7
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7ff ffda 	bl	800d4d4 <__sfputc_r>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d1f3      	bne.n	800d50c <__sfputs_r+0xa>
 800d524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d528 <_vfiprintf_r>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	460d      	mov	r5, r1
 800d52e:	b09d      	sub	sp, #116	@ 0x74
 800d530:	4614      	mov	r4, r2
 800d532:	4698      	mov	r8, r3
 800d534:	4606      	mov	r6, r0
 800d536:	b118      	cbz	r0, 800d540 <_vfiprintf_r+0x18>
 800d538:	6a03      	ldr	r3, [r0, #32]
 800d53a:	b90b      	cbnz	r3, 800d540 <_vfiprintf_r+0x18>
 800d53c:	f7fe faee 	bl	800bb1c <__sinit>
 800d540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d542:	07d9      	lsls	r1, r3, #31
 800d544:	d405      	bmi.n	800d552 <_vfiprintf_r+0x2a>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	059a      	lsls	r2, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_vfiprintf_r+0x2a>
 800d54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d54e:	f7fe fce0 	bl	800bf12 <__retarget_lock_acquire_recursive>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	071b      	lsls	r3, r3, #28
 800d556:	d501      	bpl.n	800d55c <_vfiprintf_r+0x34>
 800d558:	692b      	ldr	r3, [r5, #16]
 800d55a:	b99b      	cbnz	r3, 800d584 <_vfiprintf_r+0x5c>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4630      	mov	r0, r6
 800d560:	f7fe fc04 	bl	800bd6c <__swsetup_r>
 800d564:	b170      	cbz	r0, 800d584 <_vfiprintf_r+0x5c>
 800d566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d568:	07dc      	lsls	r4, r3, #31
 800d56a:	d504      	bpl.n	800d576 <_vfiprintf_r+0x4e>
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	b01d      	add	sp, #116	@ 0x74
 800d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d576:	89ab      	ldrh	r3, [r5, #12]
 800d578:	0598      	lsls	r0, r3, #22
 800d57a:	d4f7      	bmi.n	800d56c <_vfiprintf_r+0x44>
 800d57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d57e:	f7fe fcc9 	bl	800bf14 <__retarget_lock_release_recursive>
 800d582:	e7f3      	b.n	800d56c <_vfiprintf_r+0x44>
 800d584:	2300      	movs	r3, #0
 800d586:	9309      	str	r3, [sp, #36]	@ 0x24
 800d588:	2320      	movs	r3, #32
 800d58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d592:	2330      	movs	r3, #48	@ 0x30
 800d594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d744 <_vfiprintf_r+0x21c>
 800d598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d59c:	f04f 0901 	mov.w	r9, #1
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	469a      	mov	sl, r3
 800d5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5a8:	b10a      	cbz	r2, 800d5ae <_vfiprintf_r+0x86>
 800d5aa:	2a25      	cmp	r2, #37	@ 0x25
 800d5ac:	d1f9      	bne.n	800d5a2 <_vfiprintf_r+0x7a>
 800d5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d5b2:	d00b      	beq.n	800d5cc <_vfiprintf_r+0xa4>
 800d5b4:	465b      	mov	r3, fp
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ffa1 	bl	800d502 <__sfputs_r>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	f000 80a7 	beq.w	800d714 <_vfiprintf_r+0x1ec>
 800d5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5c8:	445a      	add	r2, fp
 800d5ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 809f 	beq.w	800d714 <_vfiprintf_r+0x1ec>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5e0:	f10a 0a01 	add.w	sl, sl, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5ee:	4654      	mov	r4, sl
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f6:	4853      	ldr	r0, [pc, #332]	@ (800d744 <_vfiprintf_r+0x21c>)
 800d5f8:	f7f2 fe12 	bl	8000220 <memchr>
 800d5fc:	9a04      	ldr	r2, [sp, #16]
 800d5fe:	b9d8      	cbnz	r0, 800d638 <_vfiprintf_r+0x110>
 800d600:	06d1      	lsls	r1, r2, #27
 800d602:	bf44      	itt	mi
 800d604:	2320      	movmi	r3, #32
 800d606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d60a:	0713      	lsls	r3, r2, #28
 800d60c:	bf44      	itt	mi
 800d60e:	232b      	movmi	r3, #43	@ 0x2b
 800d610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d614:	f89a 3000 	ldrb.w	r3, [sl]
 800d618:	2b2a      	cmp	r3, #42	@ 0x2a
 800d61a:	d015      	beq.n	800d648 <_vfiprintf_r+0x120>
 800d61c:	9a07      	ldr	r2, [sp, #28]
 800d61e:	4654      	mov	r4, sl
 800d620:	2000      	movs	r0, #0
 800d622:	f04f 0c0a 	mov.w	ip, #10
 800d626:	4621      	mov	r1, r4
 800d628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d62c:	3b30      	subs	r3, #48	@ 0x30
 800d62e:	2b09      	cmp	r3, #9
 800d630:	d94b      	bls.n	800d6ca <_vfiprintf_r+0x1a2>
 800d632:	b1b0      	cbz	r0, 800d662 <_vfiprintf_r+0x13a>
 800d634:	9207      	str	r2, [sp, #28]
 800d636:	e014      	b.n	800d662 <_vfiprintf_r+0x13a>
 800d638:	eba0 0308 	sub.w	r3, r0, r8
 800d63c:	fa09 f303 	lsl.w	r3, r9, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	46a2      	mov	sl, r4
 800d646:	e7d2      	b.n	800d5ee <_vfiprintf_r+0xc6>
 800d648:	9b03      	ldr	r3, [sp, #12]
 800d64a:	1d19      	adds	r1, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	9103      	str	r1, [sp, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	bfbb      	ittet	lt
 800d654:	425b      	neglt	r3, r3
 800d656:	f042 0202 	orrlt.w	r2, r2, #2
 800d65a:	9307      	strge	r3, [sp, #28]
 800d65c:	9307      	strlt	r3, [sp, #28]
 800d65e:	bfb8      	it	lt
 800d660:	9204      	strlt	r2, [sp, #16]
 800d662:	7823      	ldrb	r3, [r4, #0]
 800d664:	2b2e      	cmp	r3, #46	@ 0x2e
 800d666:	d10a      	bne.n	800d67e <_vfiprintf_r+0x156>
 800d668:	7863      	ldrb	r3, [r4, #1]
 800d66a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d66c:	d132      	bne.n	800d6d4 <_vfiprintf_r+0x1ac>
 800d66e:	9b03      	ldr	r3, [sp, #12]
 800d670:	1d1a      	adds	r2, r3, #4
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	9203      	str	r2, [sp, #12]
 800d676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d67a:	3402      	adds	r4, #2
 800d67c:	9305      	str	r3, [sp, #20]
 800d67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d754 <_vfiprintf_r+0x22c>
 800d682:	7821      	ldrb	r1, [r4, #0]
 800d684:	2203      	movs	r2, #3
 800d686:	4650      	mov	r0, sl
 800d688:	f7f2 fdca 	bl	8000220 <memchr>
 800d68c:	b138      	cbz	r0, 800d69e <_vfiprintf_r+0x176>
 800d68e:	9b04      	ldr	r3, [sp, #16]
 800d690:	eba0 000a 	sub.w	r0, r0, sl
 800d694:	2240      	movs	r2, #64	@ 0x40
 800d696:	4082      	lsls	r2, r0
 800d698:	4313      	orrs	r3, r2
 800d69a:	3401      	adds	r4, #1
 800d69c:	9304      	str	r3, [sp, #16]
 800d69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a2:	4829      	ldr	r0, [pc, #164]	@ (800d748 <_vfiprintf_r+0x220>)
 800d6a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6a8:	2206      	movs	r2, #6
 800d6aa:	f7f2 fdb9 	bl	8000220 <memchr>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d03f      	beq.n	800d732 <_vfiprintf_r+0x20a>
 800d6b2:	4b26      	ldr	r3, [pc, #152]	@ (800d74c <_vfiprintf_r+0x224>)
 800d6b4:	bb1b      	cbnz	r3, 800d6fe <_vfiprintf_r+0x1d6>
 800d6b6:	9b03      	ldr	r3, [sp, #12]
 800d6b8:	3307      	adds	r3, #7
 800d6ba:	f023 0307 	bic.w	r3, r3, #7
 800d6be:	3308      	adds	r3, #8
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c4:	443b      	add	r3, r7
 800d6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c8:	e76a      	b.n	800d5a0 <_vfiprintf_r+0x78>
 800d6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e7a8      	b.n	800d626 <_vfiprintf_r+0xfe>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	3401      	adds	r4, #1
 800d6d8:	9305      	str	r3, [sp, #20]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f04f 0c0a 	mov.w	ip, #10
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e6:	3a30      	subs	r2, #48	@ 0x30
 800d6e8:	2a09      	cmp	r2, #9
 800d6ea:	d903      	bls.n	800d6f4 <_vfiprintf_r+0x1cc>
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0c6      	beq.n	800d67e <_vfiprintf_r+0x156>
 800d6f0:	9105      	str	r1, [sp, #20]
 800d6f2:	e7c4      	b.n	800d67e <_vfiprintf_r+0x156>
 800d6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e7f0      	b.n	800d6e0 <_vfiprintf_r+0x1b8>
 800d6fe:	ab03      	add	r3, sp, #12
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	462a      	mov	r2, r5
 800d704:	4b12      	ldr	r3, [pc, #72]	@ (800d750 <_vfiprintf_r+0x228>)
 800d706:	a904      	add	r1, sp, #16
 800d708:	4630      	mov	r0, r6
 800d70a:	f7fd fdc3 	bl	800b294 <_printf_float>
 800d70e:	4607      	mov	r7, r0
 800d710:	1c78      	adds	r0, r7, #1
 800d712:	d1d6      	bne.n	800d6c2 <_vfiprintf_r+0x19a>
 800d714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d716:	07d9      	lsls	r1, r3, #31
 800d718:	d405      	bmi.n	800d726 <_vfiprintf_r+0x1fe>
 800d71a:	89ab      	ldrh	r3, [r5, #12]
 800d71c:	059a      	lsls	r2, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_vfiprintf_r+0x1fe>
 800d720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d722:	f7fe fbf7 	bl	800bf14 <__retarget_lock_release_recursive>
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	065b      	lsls	r3, r3, #25
 800d72a:	f53f af1f 	bmi.w	800d56c <_vfiprintf_r+0x44>
 800d72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d730:	e71e      	b.n	800d570 <_vfiprintf_r+0x48>
 800d732:	ab03      	add	r3, sp, #12
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	462a      	mov	r2, r5
 800d738:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <_vfiprintf_r+0x228>)
 800d73a:	a904      	add	r1, sp, #16
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7fe f841 	bl	800b7c4 <_printf_i>
 800d742:	e7e4      	b.n	800d70e <_vfiprintf_r+0x1e6>
 800d744:	0800e558 	.word	0x0800e558
 800d748:	0800e562 	.word	0x0800e562
 800d74c:	0800b295 	.word	0x0800b295
 800d750:	0800d503 	.word	0x0800d503
 800d754:	0800e55e 	.word	0x0800e55e

0800d758 <__sflush_r>:
 800d758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	0716      	lsls	r6, r2, #28
 800d762:	4605      	mov	r5, r0
 800d764:	460c      	mov	r4, r1
 800d766:	d454      	bmi.n	800d812 <__sflush_r+0xba>
 800d768:	684b      	ldr	r3, [r1, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dc02      	bgt.n	800d774 <__sflush_r+0x1c>
 800d76e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d770:	2b00      	cmp	r3, #0
 800d772:	dd48      	ble.n	800d806 <__sflush_r+0xae>
 800d774:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d776:	2e00      	cmp	r6, #0
 800d778:	d045      	beq.n	800d806 <__sflush_r+0xae>
 800d77a:	2300      	movs	r3, #0
 800d77c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d780:	682f      	ldr	r7, [r5, #0]
 800d782:	6a21      	ldr	r1, [r4, #32]
 800d784:	602b      	str	r3, [r5, #0]
 800d786:	d030      	beq.n	800d7ea <__sflush_r+0x92>
 800d788:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	0759      	lsls	r1, r3, #29
 800d78e:	d505      	bpl.n	800d79c <__sflush_r+0x44>
 800d790:	6863      	ldr	r3, [r4, #4]
 800d792:	1ad2      	subs	r2, r2, r3
 800d794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d796:	b10b      	cbz	r3, 800d79c <__sflush_r+0x44>
 800d798:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d79a:	1ad2      	subs	r2, r2, r3
 800d79c:	2300      	movs	r3, #0
 800d79e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7a0:	6a21      	ldr	r1, [r4, #32]
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	47b0      	blx	r6
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	d106      	bne.n	800d7ba <__sflush_r+0x62>
 800d7ac:	6829      	ldr	r1, [r5, #0]
 800d7ae:	291d      	cmp	r1, #29
 800d7b0:	d82b      	bhi.n	800d80a <__sflush_r+0xb2>
 800d7b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d85c <__sflush_r+0x104>)
 800d7b4:	410a      	asrs	r2, r1
 800d7b6:	07d6      	lsls	r6, r2, #31
 800d7b8:	d427      	bmi.n	800d80a <__sflush_r+0xb2>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	6062      	str	r2, [r4, #4]
 800d7be:	04d9      	lsls	r1, r3, #19
 800d7c0:	6922      	ldr	r2, [r4, #16]
 800d7c2:	6022      	str	r2, [r4, #0]
 800d7c4:	d504      	bpl.n	800d7d0 <__sflush_r+0x78>
 800d7c6:	1c42      	adds	r2, r0, #1
 800d7c8:	d101      	bne.n	800d7ce <__sflush_r+0x76>
 800d7ca:	682b      	ldr	r3, [r5, #0]
 800d7cc:	b903      	cbnz	r3, 800d7d0 <__sflush_r+0x78>
 800d7ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7d2:	602f      	str	r7, [r5, #0]
 800d7d4:	b1b9      	cbz	r1, 800d806 <__sflush_r+0xae>
 800d7d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7da:	4299      	cmp	r1, r3
 800d7dc:	d002      	beq.n	800d7e4 <__sflush_r+0x8c>
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f7ff f9f6 	bl	800cbd0 <_free_r>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7e8:	e00d      	b.n	800d806 <__sflush_r+0xae>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b0      	blx	r6
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	1c50      	adds	r0, r2, #1
 800d7f4:	d1c9      	bne.n	800d78a <__sflush_r+0x32>
 800d7f6:	682b      	ldr	r3, [r5, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0c6      	beq.n	800d78a <__sflush_r+0x32>
 800d7fc:	2b1d      	cmp	r3, #29
 800d7fe:	d001      	beq.n	800d804 <__sflush_r+0xac>
 800d800:	2b16      	cmp	r3, #22
 800d802:	d11e      	bne.n	800d842 <__sflush_r+0xea>
 800d804:	602f      	str	r7, [r5, #0]
 800d806:	2000      	movs	r0, #0
 800d808:	e022      	b.n	800d850 <__sflush_r+0xf8>
 800d80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d80e:	b21b      	sxth	r3, r3
 800d810:	e01b      	b.n	800d84a <__sflush_r+0xf2>
 800d812:	690f      	ldr	r7, [r1, #16]
 800d814:	2f00      	cmp	r7, #0
 800d816:	d0f6      	beq.n	800d806 <__sflush_r+0xae>
 800d818:	0793      	lsls	r3, r2, #30
 800d81a:	680e      	ldr	r6, [r1, #0]
 800d81c:	bf08      	it	eq
 800d81e:	694b      	ldreq	r3, [r1, #20]
 800d820:	600f      	str	r7, [r1, #0]
 800d822:	bf18      	it	ne
 800d824:	2300      	movne	r3, #0
 800d826:	eba6 0807 	sub.w	r8, r6, r7
 800d82a:	608b      	str	r3, [r1, #8]
 800d82c:	f1b8 0f00 	cmp.w	r8, #0
 800d830:	dde9      	ble.n	800d806 <__sflush_r+0xae>
 800d832:	6a21      	ldr	r1, [r4, #32]
 800d834:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d836:	4643      	mov	r3, r8
 800d838:	463a      	mov	r2, r7
 800d83a:	4628      	mov	r0, r5
 800d83c:	47b0      	blx	r6
 800d83e:	2800      	cmp	r0, #0
 800d840:	dc08      	bgt.n	800d854 <__sflush_r+0xfc>
 800d842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d84a:	81a3      	strh	r3, [r4, #12]
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295
 800d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d854:	4407      	add	r7, r0
 800d856:	eba8 0800 	sub.w	r8, r8, r0
 800d85a:	e7e7      	b.n	800d82c <__sflush_r+0xd4>
 800d85c:	dfbffffe 	.word	0xdfbffffe

0800d860 <_fflush_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	690b      	ldr	r3, [r1, #16]
 800d864:	4605      	mov	r5, r0
 800d866:	460c      	mov	r4, r1
 800d868:	b913      	cbnz	r3, 800d870 <_fflush_r+0x10>
 800d86a:	2500      	movs	r5, #0
 800d86c:	4628      	mov	r0, r5
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	b118      	cbz	r0, 800d87a <_fflush_r+0x1a>
 800d872:	6a03      	ldr	r3, [r0, #32]
 800d874:	b90b      	cbnz	r3, 800d87a <_fflush_r+0x1a>
 800d876:	f7fe f951 	bl	800bb1c <__sinit>
 800d87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0f3      	beq.n	800d86a <_fflush_r+0xa>
 800d882:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d884:	07d0      	lsls	r0, r2, #31
 800d886:	d404      	bmi.n	800d892 <_fflush_r+0x32>
 800d888:	0599      	lsls	r1, r3, #22
 800d88a:	d402      	bmi.n	800d892 <_fflush_r+0x32>
 800d88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d88e:	f7fe fb40 	bl	800bf12 <__retarget_lock_acquire_recursive>
 800d892:	4628      	mov	r0, r5
 800d894:	4621      	mov	r1, r4
 800d896:	f7ff ff5f 	bl	800d758 <__sflush_r>
 800d89a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d89c:	07da      	lsls	r2, r3, #31
 800d89e:	4605      	mov	r5, r0
 800d8a0:	d4e4      	bmi.n	800d86c <_fflush_r+0xc>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d4e1      	bmi.n	800d86c <_fflush_r+0xc>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8aa:	f7fe fb33 	bl	800bf14 <__retarget_lock_release_recursive>
 800d8ae:	e7dd      	b.n	800d86c <_fflush_r+0xc>

0800d8b0 <__swhatbuf_r>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	b096      	sub	sp, #88	@ 0x58
 800d8bc:	4615      	mov	r5, r2
 800d8be:	461e      	mov	r6, r3
 800d8c0:	da0d      	bge.n	800d8de <__swhatbuf_r+0x2e>
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d8c8:	f04f 0100 	mov.w	r1, #0
 800d8cc:	bf14      	ite	ne
 800d8ce:	2340      	movne	r3, #64	@ 0x40
 800d8d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	6031      	str	r1, [r6, #0]
 800d8d8:	602b      	str	r3, [r5, #0]
 800d8da:	b016      	add	sp, #88	@ 0x58
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	466a      	mov	r2, sp
 800d8e0:	f000 f848 	bl	800d974 <_fstat_r>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	dbec      	blt.n	800d8c2 <__swhatbuf_r+0x12>
 800d8e8:	9901      	ldr	r1, [sp, #4]
 800d8ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8f2:	4259      	negs	r1, r3
 800d8f4:	4159      	adcs	r1, r3
 800d8f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8fa:	e7eb      	b.n	800d8d4 <__swhatbuf_r+0x24>

0800d8fc <__smakebuf_r>:
 800d8fc:	898b      	ldrh	r3, [r1, #12]
 800d8fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d900:	079d      	lsls	r5, r3, #30
 800d902:	4606      	mov	r6, r0
 800d904:	460c      	mov	r4, r1
 800d906:	d507      	bpl.n	800d918 <__smakebuf_r+0x1c>
 800d908:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	6123      	str	r3, [r4, #16]
 800d910:	2301      	movs	r3, #1
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	b003      	add	sp, #12
 800d916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d918:	ab01      	add	r3, sp, #4
 800d91a:	466a      	mov	r2, sp
 800d91c:	f7ff ffc8 	bl	800d8b0 <__swhatbuf_r>
 800d920:	9f00      	ldr	r7, [sp, #0]
 800d922:	4605      	mov	r5, r0
 800d924:	4639      	mov	r1, r7
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff f9c6 	bl	800ccb8 <_malloc_r>
 800d92c:	b948      	cbnz	r0, 800d942 <__smakebuf_r+0x46>
 800d92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d932:	059a      	lsls	r2, r3, #22
 800d934:	d4ee      	bmi.n	800d914 <__smakebuf_r+0x18>
 800d936:	f023 0303 	bic.w	r3, r3, #3
 800d93a:	f043 0302 	orr.w	r3, r3, #2
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	e7e2      	b.n	800d908 <__smakebuf_r+0xc>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	6020      	str	r0, [r4, #0]
 800d946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d94a:	81a3      	strh	r3, [r4, #12]
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d952:	b15b      	cbz	r3, 800d96c <__smakebuf_r+0x70>
 800d954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d958:	4630      	mov	r0, r6
 800d95a:	f000 f81d 	bl	800d998 <_isatty_r>
 800d95e:	b128      	cbz	r0, 800d96c <__smakebuf_r+0x70>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	f043 0301 	orr.w	r3, r3, #1
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	431d      	orrs	r5, r3
 800d970:	81a5      	strh	r5, [r4, #12]
 800d972:	e7cf      	b.n	800d914 <__smakebuf_r+0x18>

0800d974 <_fstat_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d07      	ldr	r5, [pc, #28]	@ (800d994 <_fstat_r+0x20>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	4611      	mov	r1, r2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f7f5 f89d 	bl	8002ac0 <_fstat>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	d102      	bne.n	800d990 <_fstat_r+0x1c>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	b103      	cbz	r3, 800d990 <_fstat_r+0x1c>
 800d98e:	6023      	str	r3, [r4, #0]
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	bf00      	nop
 800d994:	2000563c 	.word	0x2000563c

0800d998 <_isatty_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d06      	ldr	r5, [pc, #24]	@ (800d9b4 <_isatty_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f5 f89c 	bl	8002ae0 <_isatty>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_isatty_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_isatty_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	2000563c 	.word	0x2000563c

0800d9b8 <_sbrk_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d06      	ldr	r5, [pc, #24]	@ (800d9d4 <_sbrk_r+0x1c>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	602b      	str	r3, [r5, #0]
 800d9c4:	f7f5 f8a4 	bl	8002b10 <_sbrk>
 800d9c8:	1c43      	adds	r3, r0, #1
 800d9ca:	d102      	bne.n	800d9d2 <_sbrk_r+0x1a>
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	b103      	cbz	r3, 800d9d2 <_sbrk_r+0x1a>
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	2000563c 	.word	0x2000563c

0800d9d8 <__assert_func>:
 800d9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9da:	4614      	mov	r4, r2
 800d9dc:	461a      	mov	r2, r3
 800d9de:	4b09      	ldr	r3, [pc, #36]	@ (800da04 <__assert_func+0x2c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	68d8      	ldr	r0, [r3, #12]
 800d9e6:	b954      	cbnz	r4, 800d9fe <__assert_func+0x26>
 800d9e8:	4b07      	ldr	r3, [pc, #28]	@ (800da08 <__assert_func+0x30>)
 800d9ea:	461c      	mov	r4, r3
 800d9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9f0:	9100      	str	r1, [sp, #0]
 800d9f2:	462b      	mov	r3, r5
 800d9f4:	4905      	ldr	r1, [pc, #20]	@ (800da0c <__assert_func+0x34>)
 800d9f6:	f000 f841 	bl	800da7c <fiprintf>
 800d9fa:	f000 f851 	bl	800daa0 <abort>
 800d9fe:	4b04      	ldr	r3, [pc, #16]	@ (800da10 <__assert_func+0x38>)
 800da00:	e7f4      	b.n	800d9ec <__assert_func+0x14>
 800da02:	bf00      	nop
 800da04:	2000001c 	.word	0x2000001c
 800da08:	0800e5ae 	.word	0x0800e5ae
 800da0c:	0800e580 	.word	0x0800e580
 800da10:	0800e573 	.word	0x0800e573

0800da14 <_calloc_r>:
 800da14:	b570      	push	{r4, r5, r6, lr}
 800da16:	fba1 5402 	umull	r5, r4, r1, r2
 800da1a:	b93c      	cbnz	r4, 800da2c <_calloc_r+0x18>
 800da1c:	4629      	mov	r1, r5
 800da1e:	f7ff f94b 	bl	800ccb8 <_malloc_r>
 800da22:	4606      	mov	r6, r0
 800da24:	b928      	cbnz	r0, 800da32 <_calloc_r+0x1e>
 800da26:	2600      	movs	r6, #0
 800da28:	4630      	mov	r0, r6
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	220c      	movs	r2, #12
 800da2e:	6002      	str	r2, [r0, #0]
 800da30:	e7f9      	b.n	800da26 <_calloc_r+0x12>
 800da32:	462a      	mov	r2, r5
 800da34:	4621      	mov	r1, r4
 800da36:	f7fe f9ef 	bl	800be18 <memset>
 800da3a:	e7f5      	b.n	800da28 <_calloc_r+0x14>

0800da3c <__ascii_mbtowc>:
 800da3c:	b082      	sub	sp, #8
 800da3e:	b901      	cbnz	r1, 800da42 <__ascii_mbtowc+0x6>
 800da40:	a901      	add	r1, sp, #4
 800da42:	b142      	cbz	r2, 800da56 <__ascii_mbtowc+0x1a>
 800da44:	b14b      	cbz	r3, 800da5a <__ascii_mbtowc+0x1e>
 800da46:	7813      	ldrb	r3, [r2, #0]
 800da48:	600b      	str	r3, [r1, #0]
 800da4a:	7812      	ldrb	r2, [r2, #0]
 800da4c:	1e10      	subs	r0, r2, #0
 800da4e:	bf18      	it	ne
 800da50:	2001      	movne	r0, #1
 800da52:	b002      	add	sp, #8
 800da54:	4770      	bx	lr
 800da56:	4610      	mov	r0, r2
 800da58:	e7fb      	b.n	800da52 <__ascii_mbtowc+0x16>
 800da5a:	f06f 0001 	mvn.w	r0, #1
 800da5e:	e7f8      	b.n	800da52 <__ascii_mbtowc+0x16>

0800da60 <__ascii_wctomb>:
 800da60:	4603      	mov	r3, r0
 800da62:	4608      	mov	r0, r1
 800da64:	b141      	cbz	r1, 800da78 <__ascii_wctomb+0x18>
 800da66:	2aff      	cmp	r2, #255	@ 0xff
 800da68:	d904      	bls.n	800da74 <__ascii_wctomb+0x14>
 800da6a:	228a      	movs	r2, #138	@ 0x8a
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295
 800da72:	4770      	bx	lr
 800da74:	700a      	strb	r2, [r1, #0]
 800da76:	2001      	movs	r0, #1
 800da78:	4770      	bx	lr
	...

0800da7c <fiprintf>:
 800da7c:	b40e      	push	{r1, r2, r3}
 800da7e:	b503      	push	{r0, r1, lr}
 800da80:	4601      	mov	r1, r0
 800da82:	ab03      	add	r3, sp, #12
 800da84:	4805      	ldr	r0, [pc, #20]	@ (800da9c <fiprintf+0x20>)
 800da86:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8a:	6800      	ldr	r0, [r0, #0]
 800da8c:	9301      	str	r3, [sp, #4]
 800da8e:	f7ff fd4b 	bl	800d528 <_vfiprintf_r>
 800da92:	b002      	add	sp, #8
 800da94:	f85d eb04 	ldr.w	lr, [sp], #4
 800da98:	b003      	add	sp, #12
 800da9a:	4770      	bx	lr
 800da9c:	2000001c 	.word	0x2000001c

0800daa0 <abort>:
 800daa0:	b508      	push	{r3, lr}
 800daa2:	2006      	movs	r0, #6
 800daa4:	f000 f82c 	bl	800db00 <raise>
 800daa8:	2001      	movs	r0, #1
 800daaa:	f7f4 ffd5 	bl	8002a58 <_exit>

0800daae <_raise_r>:
 800daae:	291f      	cmp	r1, #31
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4605      	mov	r5, r0
 800dab4:	460c      	mov	r4, r1
 800dab6:	d904      	bls.n	800dac2 <_raise_r+0x14>
 800dab8:	2316      	movs	r3, #22
 800daba:	6003      	str	r3, [r0, #0]
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	bd38      	pop	{r3, r4, r5, pc}
 800dac2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dac4:	b112      	cbz	r2, 800dacc <_raise_r+0x1e>
 800dac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daca:	b94b      	cbnz	r3, 800dae0 <_raise_r+0x32>
 800dacc:	4628      	mov	r0, r5
 800dace:	f000 f831 	bl	800db34 <_getpid_r>
 800dad2:	4622      	mov	r2, r4
 800dad4:	4601      	mov	r1, r0
 800dad6:	4628      	mov	r0, r5
 800dad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dadc:	f000 b818 	b.w	800db10 <_kill_r>
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d00a      	beq.n	800dafa <_raise_r+0x4c>
 800dae4:	1c59      	adds	r1, r3, #1
 800dae6:	d103      	bne.n	800daf0 <_raise_r+0x42>
 800dae8:	2316      	movs	r3, #22
 800daea:	6003      	str	r3, [r0, #0]
 800daec:	2001      	movs	r0, #1
 800daee:	e7e7      	b.n	800dac0 <_raise_r+0x12>
 800daf0:	2100      	movs	r1, #0
 800daf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800daf6:	4620      	mov	r0, r4
 800daf8:	4798      	blx	r3
 800dafa:	2000      	movs	r0, #0
 800dafc:	e7e0      	b.n	800dac0 <_raise_r+0x12>
	...

0800db00 <raise>:
 800db00:	4b02      	ldr	r3, [pc, #8]	@ (800db0c <raise+0xc>)
 800db02:	4601      	mov	r1, r0
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	f7ff bfd2 	b.w	800daae <_raise_r>
 800db0a:	bf00      	nop
 800db0c:	2000001c 	.word	0x2000001c

0800db10 <_kill_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d07      	ldr	r5, [pc, #28]	@ (800db30 <_kill_r+0x20>)
 800db14:	2300      	movs	r3, #0
 800db16:	4604      	mov	r4, r0
 800db18:	4608      	mov	r0, r1
 800db1a:	4611      	mov	r1, r2
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	f7f4 ff8b 	bl	8002a38 <_kill>
 800db22:	1c43      	adds	r3, r0, #1
 800db24:	d102      	bne.n	800db2c <_kill_r+0x1c>
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	b103      	cbz	r3, 800db2c <_kill_r+0x1c>
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	bd38      	pop	{r3, r4, r5, pc}
 800db2e:	bf00      	nop
 800db30:	2000563c 	.word	0x2000563c

0800db34 <_getpid_r>:
 800db34:	f7f4 bf78 	b.w	8002a28 <_getpid>

0800db38 <_init>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	bf00      	nop
 800db3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3e:	bc08      	pop	{r3}
 800db40:	469e      	mov	lr, r3
 800db42:	4770      	bx	lr

0800db44 <_fini>:
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db46:	bf00      	nop
 800db48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4a:	bc08      	pop	{r3}
 800db4c:	469e      	mov	lr, r3
 800db4e:	4770      	bx	lr
