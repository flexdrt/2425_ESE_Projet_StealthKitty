
Code_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006588  08006588  00007588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00007674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800667c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000068  080066e4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  080066e4  0000849c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e9b  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337f  00000000  00000000  00020f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  000242b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001145  00000000  00000000  000258d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e4a  00000000  00000000  00026a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb44  00000000  00000000  00047867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd5df  00000000  00000000  000643ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013198a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006510  00000000  00000000  001319d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00137ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006570 	.word	0x08006570

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006570 	.word	0x08006570

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_initialization>:
#include "ADXL343_SPI.h"



uint8_t ADXL343_initialization(SPI_HandleTypeDef *hspi, ADXL343 *dev)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	dev->hspiHandle = hspi;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	601a      	str	r2, [r3, #0]
    uint8_t regAddr = ADXL343_REG_DEVICE_ID | 0x80; // 0x80 means READ 1 byte
 80005c0:	2300      	movs	r3, #0
 80005c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	737b      	strb	r3, [r7, #13]
    uint8_t regData;
    uint8_t errNum = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // Debug message
    printf("Starting ADXL343 initialization...\r\n");
 80005ce:	4845      	ldr	r0, [pc, #276]	@ (80006e4 <ADXL343_initialization+0x134>)
 80005d0:	f005 f96a 	bl	80058a8 <puts>

    HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4843      	ldr	r0, [pc, #268]	@ (80006e8 <ADXL343_initialization+0x138>)
 80005da:	f001 fa57 	bl	8001a8c <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	f107 010d 	add.w	r1, r7, #13
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	f002 fc2b 	bl	8002e46 <HAL_SPI_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Receive(dev->hspiHandle, &regData, 1, HAL_MAX_DELAY);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	f107 010c 	add.w	r1, r7, #12
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	f002 fd96 	bl	8003132 <HAL_SPI_Receive>
 8000606:	4603      	mov	r3, r0
 8000608:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	4836      	ldr	r0, [pc, #216]	@ (80006e8 <ADXL343_initialization+0x138>)
 8000610:	f001 fa3c 	bl	8001a8c <HAL_GPIO_WritePin>


    errNum += (status != HAL_OK);
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4413      	add	r3, r2
 8000626:	73fb      	strb	r3, [r7, #15]


    if (regData != ADXL343_DEVICE_ID)
 8000628:	7b3b      	ldrb	r3, [r7, #12]
 800062a:	22e5      	movs	r2, #229	@ 0xe5
 800062c:	4293      	cmp	r3, r2
 800062e:	d001      	beq.n	8000634 <ADXL343_initialization+0x84>
    {
    	return 255; //
 8000630:	23ff      	movs	r3, #255	@ 0xff
 8000632:	e053      	b.n	80006dc <ADXL343_initialization+0x12c>
    }

    // Set the register ADXL343_REG_POWER_CTL to enable measurement mode 0b00001000 = 0x08 p.26
    regAddr = ADXL343_REG_POWER_CTL; // No |0x80 means, WRITE 1 byte
 8000634:	232d      	movs	r3, #45	@ 0x2d
 8000636:	737b      	strb	r3, [r7, #13]
    regData = 0x08;
 8000638:	2308      	movs	r3, #8
 800063a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2110      	movs	r1, #16
 8000640:	4829      	ldr	r0, [pc, #164]	@ (80006e8 <ADXL343_initialization+0x138>)
 8000642:	f001 fa23 	bl	8001a8c <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f107 010d 	add.w	r1, r7, #13
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2201      	movs	r2, #1
 8000654:	f002 fbf7 	bl	8002e46 <HAL_SPI_Transmit>
 8000658:	4603      	mov	r3, r0
 800065a:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Transmit(dev->hspiHandle, &regData, 1, HAL_MAX_DELAY);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2201      	movs	r2, #1
 800066a:	f002 fbec 	bl	8002e46 <HAL_SPI_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	481c      	ldr	r0, [pc, #112]	@ (80006e8 <ADXL343_initialization+0x138>)
 8000678:	f001 fa08 	bl	8001a8c <HAL_GPIO_WritePin>

	regAddr = ADXL343_REG_POWER_CTL | 0x80;
 800067c:	232d      	movs	r3, #45	@ 0x2d
 800067e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <ADXL343_initialization+0x138>)
 800068c:	f001 f9fe 	bl	8001a8c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	f107 010d 	add.w	r1, r7, #13
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	2201      	movs	r2, #1
 800069e:	f002 fbd2 	bl	8002e46 <HAL_SPI_Transmit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Receive(dev->hspiHandle, &regData, 1, HAL_MAX_DELAY);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2201      	movs	r2, #1
 80006b4:	f002 fd3d 	bl	8003132 <HAL_SPI_Receive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <ADXL343_initialization+0x138>)
 80006c2:	f001 f9e3 	bl	8001a8c <HAL_GPIO_WritePin>

    errNum += (status != HAL_OK);
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4413      	add	r3, r2
 80006d8:	73fb      	strb	r3, [r7, #15]

    return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08006588 	.word	0x08006588
 80006e8:	48000800 	.word	0x48000800

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a3f      	ldr	r2, [pc, #252]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b3d      	ldr	r3, [pc, #244]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <MX_GPIO_Init+0x118>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a39      	ldr	r2, [pc, #228]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000720:	f043 0320 	orr.w	r3, r3, #32
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0320 	and.w	r3, r3, #32
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a33      	ldr	r2, [pc, #204]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_GPIO_Init+0x118>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a2d      	ldr	r2, [pc, #180]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_GPIO_Init+0x118>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f248 0112 	movw	r1, #32786	@ 0x8012
 8000768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076c:	f001 f98e 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2110      	movs	r1, #16
 8000774:	4824      	ldr	r0, [pc, #144]	@ (8000808 <MX_GPIO_Init+0x11c>)
 8000776:	f001 f989 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INT2_ADX_Pin|INT1_ADX_Pin|Status_Blue_Pin|Status_Red_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	f24e 0106 	movw	r1, #57350	@ 0xe006
 8000780:	4822      	ldr	r0, [pc, #136]	@ (800080c <MX_GPIO_Init+0x120>)
 8000782:	f001 f983 	bl	8001a8c <HAL_GPIO_WritePin>
                          |Bouton_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_TOF1_Pin|INT_TOF2_Pin;
 8000786:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	@ (8000808 <MX_GPIO_Init+0x11c>)
 800079e:	f000 fff3 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin|Status_Lidar_Pin;
 80007a2:	f248 0312 	movw	r3, #32786	@ 0x8012
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 ffe3 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80007c2:	2310      	movs	r3, #16
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <MX_GPIO_Init+0x11c>)
 80007da:	f000 ffd5 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = INT2_ADX_Pin|INT1_ADX_Pin|Status_Blue_Pin|Status_Red_Pin
 80007de:	f24e 0306 	movw	r3, #57350	@ 0xe006
 80007e2:	617b      	str	r3, [r7, #20]
                          |Bouton_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_GPIO_Init+0x120>)
 80007f8:	f000 ffc6 	bl	8001788 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800
 800080c:	48000400 	.word	0x48000400

08000810 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_I2C1_Init+0x74>)
 800084c:	f001 f950 	bl	8001af0 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 f931 	bl	8000abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <MX_I2C1_Init+0x74>)
 800085e:	f001 f9e2 	bl	8001c26 <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 f928 	bl	8000abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000870:	f001 fa24 	bl	8001cbc <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 f91f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000084 	.word	0x20000084
 8000888:	40005400 	.word	0x40005400
 800088c:	00503d58 	.word	0x00503d58

08000890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09a      	sub	sp, #104	@ 0x68
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2244      	movs	r2, #68	@ 0x44
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 f8d9 	bl	8005a68 <memset>
  if(i2cHandle->Instance==I2C1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000938 <HAL_I2C_MspInit+0xa8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d136      	bne.n	800092e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f81f 	bl	8002910 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f000 f8f0 	bl	8000abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <HAL_I2C_MspInit+0xac>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a16      	ldr	r2, [pc, #88]	@ (800093c <HAL_I2C_MspInit+0xac>)
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_I2C_MspInit+0xac>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_TOF_Pin|SDA_TOF_Pin;
 80008f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000906:	2304      	movs	r3, #4
 8000908:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <HAL_I2C_MspInit+0xb0>)
 8000912:	f000 ff39 	bl	8001788 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_I2C_MspInit+0xac>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <HAL_I2C_MspInit+0xac>)
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000920:	6593      	str	r3, [r2, #88]	@ 0x58
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_I2C_MspInit+0xac>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3768      	adds	r7, #104	@ 0x68
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40005400 	.word	0x40005400
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400

08000944 <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "ADXL343_SPI.h"
int _write(int file, char *ptr, int len) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	b29a      	uxth	r2, r3
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <_write+0x28>)
 800095c:	f003 fffe 	bl	800495c <HAL_UART_Transmit>
    return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200002b8 	.word	0x200002b8

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fd90 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f861 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f7ff feb5 	bl	80006ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000982:	f7ff ff45 	bl	8000810 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000986:	f000 f89f 	bl	8000ac8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800098a:	f000 fc79 	bl	8001280 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800098e:	f000 fa07 	bl	8000da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000992:	f000 fab1 	bl	8000ef8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000996:	f000 fb05 	bl	8000fa4 <MX_TIM4_Init>
  MX_UART4_Init();
 800099a:	f000 fc25 	bl	80011e8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // Chip Select pin High to indicate no communication
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	4822      	ldr	r0, [pc, #136]	@ (8000a2c <main+0xbc>)
 80009a4:	f001 f872 	bl	8001a8c <HAL_GPIO_WritePin>
  ADXL343 adxl343;
  ADXL343_initialization(&hspi1, &adxl343);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4820      	ldr	r0, [pc, #128]	@ (8000a30 <main+0xc0>)
 80009b0:	f7ff fdfe 	bl	80005b0 <ADXL343_initialization>
  // Receive la donnée
  // NSS à 1

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, Status_Red_Pin|Status_Blue_Pin);
 80009b4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009b8:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <main+0xc4>)
 80009ba:	f001 f87f 	bl	8001abc <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80009be:	20c8      	movs	r0, #200	@ 0xc8
 80009c0:	f000 fddc 	bl	800157c <HAL_Delay>


	  uint8_t txData = 0x80;
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	71fb      	strb	r3, [r7, #7]
	    	 uint8_t rxData;
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <main+0xbc>)
 80009ce:	f001 f85d 	bl	8001a8c <HAL_GPIO_WritePin>
	    	  HAL_Delay(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fdd2 	bl	800157c <HAL_Delay>
	    	  HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 80009d8:	1df9      	adds	r1, r7, #7
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	2201      	movs	r2, #1
 80009e0:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <main+0xc0>)
 80009e2:	f002 fa30 	bl	8002e46 <HAL_SPI_Transmit>
	    	  HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 80009e6:	1db9      	adds	r1, r7, #6
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	2201      	movs	r2, #1
 80009ee:	4810      	ldr	r0, [pc, #64]	@ (8000a30 <main+0xc0>)
 80009f0:	f002 fb9f 	bl	8003132 <HAL_SPI_Receive>
	    	  HAL_Delay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f000 fdc1 	bl	800157c <HAL_Delay>
	    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2110      	movs	r1, #16
 80009fe:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <main+0xbc>)
 8000a00:	f001 f844 	bl	8001a8c <HAL_GPIO_WritePin>


	  	  HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f000 fdb8 	bl	800157c <HAL_Delay>


	  	if (rxData == 0xE5) { // 0xE5 est l'ID attendu pour l'ADXL343
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2be5      	cmp	r3, #229	@ 0xe5
 8000a10:	d105      	bne.n	8000a1e <main+0xae>
	  	    printf("SPI fonctionne : Device ID = 0x%02X\r\n", rxData);
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <main+0xc8>)
 8000a18:	f004 fede 	bl	80057d8 <iprintf>
 8000a1c:	e7ca      	b.n	80009b4 <main+0x44>
	  	} else {
	  	    printf("Erreur SPI : Device ID = 0x%02X\r\n", rxData);}
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <main+0xcc>)
 8000a24:	f004 fed8 	bl	80057d8 <iprintf>
  {
 8000a28:	e7c4      	b.n	80009b4 <main+0x44>
 8000a2a:	bf00      	nop
 8000a2c:	48000800 	.word	0x48000800
 8000a30:	200000d8 	.word	0x200000d8
 8000a34:	48000400 	.word	0x48000400
 8000a38:	080065ac 	.word	0x080065ac
 8000a3c:	080065d4 	.word	0x080065d4

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	@ 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	2238      	movs	r2, #56	@ 0x38
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 f80a 	bl	8005a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a66:	f001 f975 	bl	8001d54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fa1d 	bl	8001ebc <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8000a88:	f000 f818 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a90:	2302      	movs	r3, #2
 8000a92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fd1b 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ab0:	f000 f804 	bl	8000abc <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	@ 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <Error_Handler+0x8>

08000ac8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	@ (8000b40 <MX_SPI1_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000ae2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ae6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000afe:	2220      	movs	r2, #32
 8000b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_SPI1_Init+0x74>)
 8000b28:	f002 f8e2 	bl	8002cf0 <HAL_SPI_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f7ff ffc3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000d8 	.word	0x200000d8
 8000b40:	40013000 	.word	0x40013000

08000b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_SPI_MspInit+0x7c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d128      	bne.n	8000bb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6a:	4a16      	ldr	r2, [pc, #88]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b96:	23e0      	movs	r3, #224	@ 0xe0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f000 fde8 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <HAL_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bfe:	f001 f94d 	bl	8001e9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 fc6b 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e00a      	b.n	8000c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c80:	f3af 8000 	nop.w
 8000c84:	4601      	mov	r1, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbf0      	blt.n	8000c80 <_read+0x12>
  }

  return len;
 8000c9e:	687b      	ldr	r3, [r7, #4]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_isatty>:

int _isatty(int file)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f004 fee0 	bl	8005b04 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20008000 	.word	0x20008000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	2000013c 	.word	0x2000013c
 8000d78:	200004a0 	.word	0x200004a0

08000d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b098      	sub	sp, #96	@ 0x60
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2234      	movs	r2, #52	@ 0x34
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fe4b 	bl	8005a68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd2:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000dd4:	4a47      	ldr	r2, [pc, #284]	@ (8000ef4 <MX_TIM1_Init+0x154>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dd8:	4b45      	ldr	r3, [pc, #276]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b44      	ldr	r3, [pc, #272]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000de4:	4b42      	ldr	r3, [pc, #264]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b40      	ldr	r3, [pc, #256]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dfe:	483c      	ldr	r0, [pc, #240]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000e00:	f002 feaa 	bl	8003b58 <HAL_TIM_PWM_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f7ff fe57 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4833      	ldr	r0, [pc, #204]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000e22:	f003 fc3d 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f7ff fe46 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	2360      	movs	r3, #96	@ 0x60
 8000e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	4826      	ldr	r0, [pc, #152]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000e56:	f002 ff7d 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e60:	f7ff fe2c 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4820      	ldr	r0, [pc, #128]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000e6e:	f002 ff71 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e78:	f7ff fe20 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e80:	2208      	movs	r2, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	481a      	ldr	r0, [pc, #104]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000e86:	f002 ff65 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000e90:	f7ff fe14 	bl	8000abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000ed2:	f003 fc67 	bl	80047a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000edc:	f7ff fdee 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM1_Init+0x150>)
 8000ee2:	f000 f949 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3760      	adds	r7, #96	@ 0x60
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000140 	.word	0x20000140
 8000ef4:	40012c00 	.word	0x40012c00

08000ef8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2224      	movs	r2, #36	@ 0x24
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 fdae 	bl	8005a68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <MX_TIM3_Init+0xa8>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f68:	f002 fe4d 	bl	8003c06 <HAL_TIM_Encoder_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f72:	f7ff fda3 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <MX_TIM3_Init+0xa4>)
 8000f84:	f003 fb8c 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f8e:	f7ff fd95 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000018c 	.word	0x2000018c
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2224      	movs	r2, #36	@ 0x24
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fd58 	bl	8005a68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <MX_TIM4_Init+0xa8>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8001014:	f002 fdf7 	bl	8003c06 <HAL_TIM_Encoder_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800101e:	f7ff fd4d 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <MX_TIM4_Init+0xa4>)
 8001030:	f003 fb36 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800103a:	f7ff fd3f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	@ 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d8 	.word	0x200001d8
 800104c:	40000800 	.word	0x40000800

08001050 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_TIM_PWM_MspInit+0x38>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10b      	bne.n	800107a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001068:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800106c:	6613      	str	r3, [r2, #96]	@ 0x60
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40012c00 	.word	0x40012c00
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001168 <HAL_TIM_Encoder_MspInit+0xd8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d128      	bne.n	8001104 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b2:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	4a2d      	ldr	r2, [pc, #180]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010be:	4b2b      	ldr	r3, [pc, #172]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b28      	ldr	r3, [pc, #160]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b25      	ldr	r3, [pc, #148]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Codeur1_PH1_Pin|Codeur1_PH2_Pin;
 80010e2:	2330      	movs	r3, #48	@ 0x30
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481c      	ldr	r0, [pc, #112]	@ (8001170 <HAL_TIM_Encoder_MspInit+0xe0>)
 80010fe:	f000 fb43 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001102:	e02c      	b.n	800115e <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <HAL_TIM_Encoder_MspInit+0xe4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d127      	bne.n	800115e <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a16      	ldr	r2, [pc, #88]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Codeur2_PH1_Pin|Codeur2_PH2_Pin;
 800113e:	23c0      	movs	r3, #192	@ 0xc0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800114e:	2302      	movs	r3, #2
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <HAL_TIM_Encoder_MspInit+0xe0>)
 800115a:	f000 fb15 	bl	8001788 <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40000400 	.word	0x40000400
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400
 8001174:	40000800 	.word	0x40000800

08001178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <HAL_TIM_MspPostInit+0x68>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d11d      	bne.n	80011d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_MOT1_CH1_Pin|PWM_MOT2_CH1_Pin|LIDAR_M_SCTR_Pin|PWM_MOT1_CH2_Pin
 80011b2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80011b6:	60fb      	str	r3, [r7, #12]
                          |PWM_MOT2_CH2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011c4:	2306      	movs	r3, #6
 80011c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f000 fad9 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40021000 	.word	0x40021000

080011e8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_UART4_Init+0x90>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_UART4_Init+0x94>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_UART4_Init+0x90>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_UART4_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_UART4_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_UART4_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_UART4_Init+0x90>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_UART4_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_UART4_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_UART4_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_UART4_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_UART4_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_UART4_Init+0x90>)
 8001232:	f003 fb43 	bl	80048bc <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800123c:	f7ff fc3e 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_UART4_Init+0x90>)
 8001244:	f004 f93c 	bl	80054c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800124e:	f7ff fc35 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <MX_UART4_Init+0x90>)
 8001256:	f004 f971 	bl	800553c <HAL_UARTEx_SetRxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001260:	f7ff fc2c 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_UART4_Init+0x90>)
 8001266:	f004 f8f2 	bl	800544e <HAL_UARTEx_DisableFifoMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001270:	f7ff fc24 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000224 	.word	0x20000224
 800127c:	40004c00 	.word	0x40004c00

08001280 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <MX_USART2_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012ca:	f003 faf7 	bl	80048bc <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f7ff fbf2 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012dc:	f004 f8f0 	bl	80054c0 <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f7ff fbe9 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012ee:	f004 f925 	bl	800553c <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f7ff fbe0 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_USART2_UART_Init+0x90>)
 80012fe:	f004 f8a6 	bl	800544e <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f7ff fbd8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002b8 	.word	0x200002b8
 8001314:	40004400 	.word	0x40004400

08001318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09c      	sub	sp, #112	@ 0x70
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	2244      	movs	r2, #68	@ 0x44
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fb95 	bl	8005a68 <memset>
  if(uartHandle->Instance==UART4)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a3d      	ldr	r2, [pc, #244]	@ (8001438 <HAL_UART_MspInit+0x120>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d137      	bne.n	80013b8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001348:	2308      	movs	r3, #8
 800134a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fadb 	bl	8002910 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001360:	f7ff fbac 	bl	8000abc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <HAL_UART_MspInit+0x124>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	4a34      	ldr	r2, [pc, #208]	@ (800143c <HAL_UART_MspInit+0x124>)
 800136a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800136e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001370:	4b32      	ldr	r3, [pc, #200]	@ (800143c <HAL_UART_MspInit+0x124>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <HAL_UART_MspInit+0x124>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <HAL_UART_MspInit+0x124>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001388:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <HAL_UART_MspInit+0x124>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_LIDAR_Pin|RX_LIDAR_Pin;
 8001394:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001398:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80013a6:	2305      	movs	r3, #5
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4823      	ldr	r0, [pc, #140]	@ (8001440 <HAL_UART_MspInit+0x128>)
 80013b2:	f000 f9e9 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013b6:	e03b      	b.n	8001430 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d136      	bne.n	8001430 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fa9e 	bl	8002910 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80013da:	f7ff fb6f 	bl	8000abc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x124>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	4a16      	ldr	r2, [pc, #88]	@ (800143c <HAL_UART_MspInit+0x124>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_UART_MspInit+0x124>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x124>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_UART_MspInit+0x124>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_MspInit+0x124>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_link_Pin|RX_link_Pin;
 800140e:	230c      	movs	r3, #12
 8001410:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f000 f9ac 	bl	8001788 <HAL_GPIO_Init>
}
 8001430:	bf00      	nop
 8001432:	3770      	adds	r7, #112	@ 0x70
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004c00 	.word	0x40004c00
 800143c:	40021000 	.word	0x40021000
 8001440:	48000800 	.word	0x48000800
 8001444:	40004400 	.word	0x40004400

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff fc96 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f004 fb4b 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fa79 	bl	8000970 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800148c:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8001490:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001494:	2000049c 	.word	0x2000049c

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f93d 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fb84 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_InitTick+0x6c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f93a 	bl	800176e <HAL_SYSTICK_Config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d809      	bhi.n	800151a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f000 f914 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_InitTick+0x70>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e007      	b.n	800152a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e004      	b.n	800152a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000008 	.word	0x20000008
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x1c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x20>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	@ (800155c <HAL_IncTick+0x1c>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000034c 	.word	0x2000034c
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000034c 	.word	0x2000034c

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d004      	beq.n	80015a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_Delay+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a0:	bf00      	nop
 80015a2:	f7ff ffdf 	bl	8001564 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8f7      	bhi.n	80015a2 <HAL_Delay+0x26>
  {
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff5e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb2 	bl	80016e0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001796:	e15a      	b.n	8001a4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 814c 	beq.w	8001a48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d005      	beq.n	80017c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a6 	beq.w	8001a48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <HAL_GPIO_Init+0x2e4>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001900:	4a5a      	ldr	r2, [pc, #360]	@ (8001a6c <HAL_GPIO_Init+0x2e4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6613      	str	r3, [r2, #96]	@ 0x60
 8001908:	4b58      	ldr	r3, [pc, #352]	@ (8001a6c <HAL_GPIO_Init+0x2e4>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001914:	4a56      	ldr	r2, [pc, #344]	@ (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800193e:	d01f      	beq.n	8001980 <HAL_GPIO_Init+0x1f8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <HAL_GPIO_Init+0x2ec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d019      	beq.n	800197c <HAL_GPIO_Init+0x1f4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a78 <HAL_GPIO_Init+0x2f0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x1f0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <HAL_GPIO_Init+0x2f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a49      	ldr	r2, [pc, #292]	@ (8001a80 <HAL_GPIO_Init+0x2f8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a48      	ldr	r2, [pc, #288]	@ (8001a84 <HAL_GPIO_Init+0x2fc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1e4>
 8001968:	2305      	movs	r3, #5
 800196a:	e00a      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 800196c:	2306      	movs	r3, #6
 800196e:	e008      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001970:	2304      	movs	r3, #4
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001974:	2303      	movs	r3, #3
 8001976:	e004      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001978:	2302      	movs	r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001980:	2300      	movs	r3, #0
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	4093      	lsls	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001992:	4937      	ldr	r1, [pc, #220]	@ (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a0:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ee:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a18:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a42:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f ae9d 	bne.w	8001798 <HAL_GPIO_Init+0x10>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000c00 	.word	0x48000c00
 8001a80:	48001000 	.word	0x48001000
 8001a84:	48001400 	.word	0x48001400
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43d9      	mvns	r1, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08d      	b.n	8001c1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe feba 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	@ 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d108      	bne.n	8001b92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	e007      	b.n	8001ba2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69d9      	ldr	r1, [r3, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1a      	ldr	r2, [r3, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d138      	bne.n	8001cae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e032      	b.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	@ 0x24
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d139      	bne.n	8001d46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e033      	b.n	8001d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	@ 0x24
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d141      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d62:	4b4b      	ldr	r3, [pc, #300]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6e:	d131      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d70:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d76:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d80:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d88:	4a41      	ldr	r2, [pc, #260]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d90:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2232      	movs	r2, #50	@ 0x32
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da6:	e002      	b.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dba:	d102      	bne.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f2      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc2:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dce:	d158      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e057      	b.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dda:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001de4:	e04d      	b.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dec:	d141      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfa:	d131      	bne.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dfc:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e02:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e14:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2232      	movs	r2, #50	@ 0x32
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0c9b      	lsrs	r3, r3, #18
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e32:	e002      	b.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e46:	d102      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f2      	bne.n	8001e34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5a:	d112      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e011      	b.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e70:	e007      	b.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40007000 	.word	0x40007000
 8001e94:	20000000 	.word	0x20000000
 8001e98:	431bde83 	.word	0x431bde83

08001e9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eaa:	6093      	str	r3, [r2, #8]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e2fe      	b.n	80024cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b97      	ldr	r3, [pc, #604]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b94      	ldr	r3, [pc, #592]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x3e>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_OscConfig+0x44>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b8d      	ldr	r3, [pc, #564]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x108>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e2d9      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x74>
 8001f22:	4b85      	ldr	r3, [pc, #532]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a84      	ldr	r2, [pc, #528]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b7c      	ldr	r3, [pc, #496]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f54:	4b78      	ldr	r3, [pc, #480]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a77      	ldr	r2, [pc, #476]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b75      	ldr	r3, [pc, #468]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a74      	ldr	r2, [pc, #464]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff faf6 	bl	8001564 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff faf2 	bl	8001564 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e29e      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xc0>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fae2 	bl	8001564 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fade 	bl	8001564 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e28a      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	4b60      	ldr	r3, [pc, #384]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xe8>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d075      	beq.n	80020be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd2:	4b59      	ldr	r3, [pc, #356]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fdc:	4b56      	ldr	r3, [pc, #344]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x136>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x13c>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11f      	bne.n	8002038 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x154>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e25d      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	4946      	ldr	r1, [pc, #280]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002024:	4b45      	ldr	r3, [pc, #276]	@ (800213c <HAL_RCC_OscConfig+0x280>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fa4f 	bl	80014cc <HAL_InitTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d043      	beq.n	80020bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e249      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3c      	ldr	r2, [pc, #240]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff fa8a 	bl	8001564 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff fa86 	bl	8001564 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e232      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	061b      	lsls	r3, r3, #24
 8002080:	492d      	ldr	r1, [pc, #180]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e01a      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fa66 	bl	8001564 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fa62 	bl	8001564 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e20e      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e0>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d041      	beq.n	800214e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01c      	beq.n	800210c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7ff fa3f 	bl	8001564 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ea:	f7ff fa3b 	bl	8001564 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1e7      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ef      	beq.n	80020ea <HAL_RCC_OscConfig+0x22e>
 800210a:	e020      	b.n	800214e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_RCC_OscConfig+0x27c>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff fa22 	bl	8001564 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002122:	e00d      	b.n	8002140 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff fa1e 	bl	8001564 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d906      	bls.n	8002140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1ca      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002140:	4b8c      	ldr	r3, [pc, #560]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ea      	bne.n	8002124 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80a6 	beq.w	80022a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002160:	4b84      	ldr	r3, [pc, #528]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x2b4>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x2b6>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b7f      	ldr	r3, [pc, #508]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	4a7e      	ldr	r2, [pc, #504]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002180:	6593      	str	r3, [r2, #88]	@ 0x58
 8002182:	4b7c      	ldr	r3, [pc, #496]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002192:	4b79      	ldr	r3, [pc, #484]	@ (8002378 <HAL_RCC_OscConfig+0x4bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219e:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x4bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a75      	ldr	r2, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x4bc>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff f9db 	bl	8001564 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff f9d7 	bl	8001564 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e183      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002378 <HAL_RCC_OscConfig+0x4bc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d108      	bne.n	80021ea <HAL_RCC_OscConfig+0x32e>
 80021d8:	4b66      	ldr	r3, [pc, #408]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a65      	ldr	r2, [pc, #404]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e8:	e024      	b.n	8002234 <HAL_RCC_OscConfig+0x378>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d110      	bne.n	8002214 <HAL_RCC_OscConfig+0x358>
 80021f2:	4b60      	ldr	r3, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002202:	4b5c      	ldr	r3, [pc, #368]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002212:	e00f      	b.n	8002234 <HAL_RCC_OscConfig+0x378>
 8002214:	4b57      	ldr	r3, [pc, #348]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	4a56      	ldr	r2, [pc, #344]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d016      	beq.n	800226a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff f992 	bl	8001564 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff f98e 	bl	8001564 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e138      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225a:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ed      	beq.n	8002244 <HAL_RCC_OscConfig+0x388>
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff f97b 	bl	8001564 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff f977 	bl	8001564 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e121      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002288:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ed      	bne.n	8002272 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002296:	7ffb      	ldrb	r3, [r7, #31]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b35      	ldr	r3, [pc, #212]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	4a34      	ldr	r2, [pc, #208]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03c      	beq.n	800232e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7ff f94a 	bl	8001564 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d4:	f7ff f946 	bl	8001564 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0f2      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022e6:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCC_OscConfig+0x418>
 80022f4:	e01b      	b.n	800232e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7ff f92d 	bl	8001564 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230e:	f7ff f929 	bl	8001564 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0d5      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ef      	bne.n	800230e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80c9 	beq.w	80024ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002338:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b0c      	cmp	r3, #12
 8002342:	f000 8083 	beq.w	800244c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d15e      	bne.n	800240c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7ff f903 	bl	8001564 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002360:	e00c      	b.n	800237c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff f8ff 	bl	8001564 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d905      	bls.n	800237c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0ab      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ec      	bne.n	8002362 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002388:	4b52      	ldr	r3, [pc, #328]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <HAL_RCC_OscConfig+0x61c>)
 800238e:	4013      	ands	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6a11      	ldr	r1, [r2, #32]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002398:	3a01      	subs	r2, #1
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023a2:	0212      	lsls	r2, r2, #8
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023aa:	0852      	lsrs	r2, r2, #1
 80023ac:	3a01      	subs	r2, #1
 80023ae:	0552      	lsls	r2, r2, #21
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023b6:	0852      	lsrs	r2, r2, #1
 80023b8:	3a01      	subs	r2, #1
 80023ba:	0652      	lsls	r2, r2, #25
 80023bc:	4311      	orrs	r1, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023c2:	06d2      	lsls	r2, r2, #27
 80023c4:	430a      	orrs	r2, r1
 80023c6:	4943      	ldr	r1, [pc, #268]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b41      	ldr	r3, [pc, #260]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a40      	ldr	r2, [pc, #256]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d8:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a3d      	ldr	r2, [pc, #244]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 80023de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff f8be 	bl	8001564 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7ff f8ba 	bl	8001564 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e066      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x530>
 800240a:	e05e      	b.n	80024ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b31      	ldr	r3, [pc, #196]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 8002412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f8a4 	bl	8001564 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff f8a0 	bl	8001564 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e04c      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4924      	ldr	r1, [pc, #144]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <HAL_RCC_OscConfig+0x620>)
 8002446:	4013      	ands	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
 800244a:	e03e      	b.n	80024ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e039      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_RCC_OscConfig+0x618>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d12c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	3b01      	subs	r3, #1
 8002478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d123      	bne.n	80024c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d113      	bne.n	80024c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	019f800c 	.word	0x019f800c
 80024dc:	feeefffc 	.word	0xfeeefffc

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e11e      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b91      	ldr	r3, [pc, #580]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d910      	bls.n	8002528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b8e      	ldr	r3, [pc, #568]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 020f 	bic.w	r2, r3, #15
 800250e:	498c      	ldr	r1, [pc, #560]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b8a      	ldr	r3, [pc, #552]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e106      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d073      	beq.n	800261c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d129      	bne.n	8002590 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253c:	4b81      	ldr	r3, [pc, #516]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0f4      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800254c:	f000 f99c 	bl	8002888 <RCC_GetSysClockFreqFromPLLSource>
 8002550:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4a7c      	ldr	r2, [pc, #496]	@ (8002748 <HAL_RCC_ClockConfig+0x268>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d93f      	bls.n	80025da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800255a:	4b7a      	ldr	r3, [pc, #488]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d033      	beq.n	80025da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d12f      	bne.n	80025da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800257a:	4b72      	ldr	r3, [pc, #456]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002582:	4a70      	ldr	r2, [pc, #448]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002588:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e024      	b.n	80025da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002598:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0c6      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	4b66      	ldr	r3, [pc, #408]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0be      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025b8:	f000 f8ce 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4a61      	ldr	r2, [pc, #388]	@ (8002748 <HAL_RCC_ClockConfig+0x268>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d909      	bls.n	80025da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80025d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b5a      	ldr	r3, [pc, #360]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4957      	ldr	r1, [pc, #348]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe ffba 	bl	8001564 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe ffb6 	bl	8001564 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e095      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b4e      	ldr	r3, [pc, #312]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002634:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a42      	ldr	r2, [pc, #264]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800263a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800264c:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002654:	4a3b      	ldr	r2, [pc, #236]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002656:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800265a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4936      	ldr	r1, [pc, #216]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
 800266e:	e008      	b.n	8002682 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	d105      	bne.n	8002682 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002676:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4a32      	ldr	r2, [pc, #200]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 800267c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002680:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d21d      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002690:	4b2b      	ldr	r3, [pc, #172]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 020f 	bic.w	r2, r3, #15
 8002698:	4929      	ldr	r1, [pc, #164]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026a0:	f7fe ff60 	bl	8001564 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe ff5c 	bl	8001564 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e03b      	b.n	8002736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1ed      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4917      	ldr	r1, [pc, #92]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f6:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	490f      	ldr	r1, [pc, #60]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270a:	f000 f825 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 800270e:	4602      	mov	r2, r0
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCC_ClockConfig+0x264>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	490c      	ldr	r1, [pc, #48]	@ (800274c <HAL_RCC_ClockConfig+0x26c>)
 800271c:	5ccb      	ldrb	r3, [r1, r3]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x270>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_ClockConfig+0x274>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fecc 	bl	80014cc <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	04c4b400 	.word	0x04c4b400
 800274c:	080065f8 	.word	0x080065f8
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800275e:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d102      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e047      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d102      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800277c:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e03e      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d136      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3301      	adds	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ac:	4a19      	ldr	r2, [pc, #100]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	4a16      	ldr	r2, [pc, #88]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	0a12      	lsrs	r2, r2, #8
 80027ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
      break;
 80027c4:	e00c      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c6:	4a13      	ldr	r2, [pc, #76]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	0a12      	lsrs	r2, r2, #8
 80027d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
      break;
 80027de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0e5b      	lsrs	r3, r3, #25
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e001      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002800:	693b      	ldr	r3, [r7, #16]
}
 8002802:	4618      	mov	r0, r3
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	00f42400 	.word	0x00f42400

08002818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4904      	ldr	r1, [pc, #16]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08006608 	.word	0x08006608

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002860:	f7ff ffda 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4904      	ldr	r1, [pc, #16]	@ (8002884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08006608 	.word	0x08006608

08002888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10c      	bne.n	80028c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ac:	4a17      	ldr	r2, [pc, #92]	@ (800290c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	4a14      	ldr	r2, [pc, #80]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	0a12      	lsrs	r2, r2, #8
 80028ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
    break;
 80028c4:	e00c      	b.n	80028e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028c6:	4a11      	ldr	r2, [pc, #68]	@ (800290c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	0a12      	lsrs	r2, r2, #8
 80028d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
    break;
 80028de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0e5b      	lsrs	r3, r3, #25
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028fa:	687b      	ldr	r3, [r7, #4]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	00f42400 	.word	0x00f42400

08002910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002918:	2300      	movs	r3, #0
 800291a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800291c:	2300      	movs	r3, #0
 800291e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8098 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b43      	ldr	r3, [pc, #268]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	4a3f      	ldr	r2, [pc, #252]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	@ 0x58
 800294a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a39      	ldr	r2, [pc, #228]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002966:	f7fe fdfd 	bl	8001564 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296c:	e009      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe fdf9 	bl	8001564 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d902      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	74fb      	strb	r3, [r7, #19]
        break;
 8002980:	e005      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002982:	4b30      	ldr	r3, [pc, #192]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ef      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d159      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002994:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01e      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d019      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b0:	4b23      	ldr	r3, [pc, #140]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029dc:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fdb9 	bl	8001564 <HAL_GetTick>
 80029f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	e00b      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fdb5 	bl	8001564 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ec      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	4903      	ldr	r1, [pc, #12]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	74bb      	strb	r3, [r7, #18]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4c:	7c7b      	ldrb	r3, [r7, #17]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4ba6      	ldr	r3, [pc, #664]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	4aa5      	ldr	r2, [pc, #660]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f023 0203 	bic.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	499c      	ldr	r1, [pc, #624]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a8c:	4b97      	ldr	r3, [pc, #604]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 020c 	bic.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4994      	ldr	r1, [pc, #592]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aae:	4b8f      	ldr	r3, [pc, #572]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	498b      	ldr	r1, [pc, #556]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad0:	4b86      	ldr	r3, [pc, #536]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	4983      	ldr	r1, [pc, #524]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002af2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	497a      	ldr	r1, [pc, #488]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b14:	4b75      	ldr	r3, [pc, #468]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4972      	ldr	r1, [pc, #456]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4969      	ldr	r1, [pc, #420]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b58:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4961      	ldr	r1, [pc, #388]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	4958      	ldr	r1, [pc, #352]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b9c:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	4950      	ldr	r1, [pc, #320]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bc6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd4:	4b45      	ldr	r3, [pc, #276]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	4942      	ldr	r1, [pc, #264]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bfe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c0c:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4934      	ldr	r1, [pc, #208]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a2e      	ldr	r2, [pc, #184]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c44:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	4926      	ldr	r1, [pc, #152]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c62:	d105      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a20      	ldr	r2, [pc, #128]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	4918      	ldr	r1, [pc, #96]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	490a      	ldr	r1, [pc, #40]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e09d      	b.n	8002e3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d108      	bne.n	8002d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d12:	d009      	beq.n	8002d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	e005      	b.n	8002d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd fefe 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d68:	d902      	bls.n	8002d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e002      	b.n	8002d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Init+0xa0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	f003 0204 	and.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e56:	f7fe fb85 	bl	8001564 <HAL_GetTick>
 8002e5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d001      	beq.n	8002e70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e15c      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Transmit+0x36>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e154      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Transmit+0x48>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e14d      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee0:	d10f      	bne.n	8002f02 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d007      	beq.n	8002f20 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f28:	d952      	bls.n	8002fd0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0xf2>
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d145      	bne.n	8002fc4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f5c:	e032      	b.n	8002fc4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d112      	bne.n	8002f92 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f90:	e018      	b.n	8002fc4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f92:	f7fe fae7 	bl	8001564 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d803      	bhi.n	8002faa <HAL_SPI_Transmit+0x164>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d102      	bne.n	8002fb0 <HAL_SPI_Transmit+0x16a>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0b2      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1c7      	bne.n	8002f5e <HAL_SPI_Transmit+0x118>
 8002fce:	e083      	b.n	80030d8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_Transmit+0x198>
 8002fd8:	8b7b      	ldrh	r3, [r7, #26]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d177      	bne.n	80030ce <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d912      	bls.n	800300e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	1c9a      	adds	r2, r3, #2
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b02      	subs	r3, #2
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800300c:	e05f      	b.n	80030ce <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003034:	e04b      	b.n	80030ce <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d12b      	bne.n	800309c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d912      	bls.n	8003074 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b02      	subs	r3, #2
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003072:	e02c      	b.n	80030ce <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	7812      	ldrb	r2, [r2, #0]
 8003080:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309a:	e018      	b.n	80030ce <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309c:	f7fe fa62 	bl	8001564 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d803      	bhi.n	80030b4 <HAL_SPI_Transmit+0x26e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Transmit+0x274>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e02d      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ae      	bne.n	8003036 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fcf5 	bl	8003acc <SPI_EndRxTxTransaction>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003128:	2300      	movs	r3, #0
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	e123      	b.n	800339a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_Receive+0x2c>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e11b      	b.n	800339a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316a:	d112      	bne.n	8003192 <HAL_SPI_Receive+0x60>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10e      	bne.n	8003192 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2204      	movs	r2, #4
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f90a 	bl	80033a2 <HAL_SPI_TransmitReceive>
 800318e:	4603      	mov	r3, r0
 8003190:	e103      	b.n	800339a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003192:	f7fe f9e7 	bl	8001564 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Receive+0x74>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e0f9      	b.n	800339a <HAL_SPI_Receive+0x268>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2204      	movs	r2, #4
 80031b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031f8:	d908      	bls.n	800320c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e007      	b.n	800321c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003224:	d10f      	bne.n	8003246 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b40      	cmp	r3, #64	@ 0x40
 8003252:	d007      	beq.n	8003264 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800326c:	d875      	bhi.n	800335a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800326e:	e037      	b.n	80032e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d117      	bne.n	80032ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f103 020c 	add.w	r2, r3, #12
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032ac:	e018      	b.n	80032e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ae:	f7fe f959 	bl	8001564 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d803      	bhi.n	80032c6 <HAL_SPI_Receive+0x194>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d102      	bne.n	80032cc <HAL_SPI_Receive+0x19a>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e05c      	b.n	800339a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1c1      	bne.n	8003270 <HAL_SPI_Receive+0x13e>
 80032ec:	e03b      	b.n	8003366 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d115      	bne.n	8003328 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	b292      	uxth	r2, r2
 8003308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003326:	e018      	b.n	800335a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003328:	f7fe f91c 	bl	8001564 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d803      	bhi.n	8003340 <HAL_SPI_Receive+0x20e>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d102      	bne.n	8003346 <HAL_SPI_Receive+0x214>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e01f      	b.n	800339a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1c3      	bne.n	80032ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fb56 	bl	8003a1c <SPI_EndRxTransaction>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003398:	2300      	movs	r3, #0
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	@ 0x28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033b0:	2301      	movs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033b4:	f7fe f8d6 	bl	8001564 <HAL_GetTick>
 80033b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d00c      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x4e>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033dc:	d106      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x4a>
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d001      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	e1f3      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x60>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x60>
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1e8      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x72>
 8003410:	2302      	movs	r3, #2
 8003412:	e1e1      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b04      	cmp	r3, #4
 8003426:	d003      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2205      	movs	r2, #5
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	887a      	ldrh	r2, [r7, #2]
 8003456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003472:	d802      	bhi.n	800347a <HAL_SPI_TransmitReceive+0xd8>
 8003474:	8abb      	ldrh	r3, [r7, #20]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d908      	bls.n	800348c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e007      	b.n	800349c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b40      	cmp	r3, #64	@ 0x40
 80034a8:	d007      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034c2:	f240 8083 	bls.w	80035cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x132>
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d16f      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f8:	e05c      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d11b      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x19e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x19e>
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	d113      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11c      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x1e6>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	b292      	uxth	r2, r2
 8003566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003588:	f7fd ffec 	bl	8001564 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003594:	429a      	cmp	r2, r3
 8003596:	d80d      	bhi.n	80035b4 <HAL_SPI_TransmitReceive+0x212>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d009      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e111      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d19d      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x158>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d197      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x158>
 80035ca:	e0e5      	b.n	8003798 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x23a>
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 80d1 	bne.w	800377e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d912      	bls.n	800360c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b02      	subs	r3, #2
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800360a:	e0b8      	b.n	800377e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003632:	e0a4      	b.n	800377e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d134      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x30a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d02f      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x30a>
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2b01      	cmp	r3, #1
 8003650:	d12c      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d912      	bls.n	8003682 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b02      	subs	r3, #2
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003680:	e012      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d148      	bne.n	800374c <HAL_SPI_TransmitReceive+0x3aa>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d042      	beq.n	800374c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d923      	bls.n	800371a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	b292      	uxth	r2, r2
 80036de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	1c9a      	adds	r2, r3, #2
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b02      	subs	r3, #2
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d81f      	bhi.n	8003748 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	e016      	b.n	8003748 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f103 020c 	add.w	r2, r3, #12
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003748:	2301      	movs	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800374c:	f7fd ff0a 	bl	8001564 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003758:	429a      	cmp	r2, r3
 800375a:	d803      	bhi.n	8003764 <HAL_SPI_TransmitReceive+0x3c2>
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d102      	bne.n	800376a <HAL_SPI_TransmitReceive+0x3c8>
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e02c      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f af55 	bne.w	8003634 <HAL_SPI_TransmitReceive+0x292>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f af4e 	bne.w	8003634 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f995 	bl	8003acc <SPI_EndRxTxTransaction>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00e      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f0:	f7fd feb8 	bl	8001564 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003800:	f7fd feb0 	bl	8001564 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	e054      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d050      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003820:	f7fd fea0 	bl	8001564 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d902      	bls.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d13d      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384e:	d111      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003858:	d004      	beq.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	d107      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387c:	d10f      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800389c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e017      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d19b      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000

080038f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003902:	f7fd fe2f 	bl	8001564 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4413      	add	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003912:	f7fd fe27 	bl	8001564 <HAL_GetTick>
 8003916:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003920:	4b3d      	ldr	r3, [pc, #244]	@ (8003a18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00da      	lsls	r2, r3, #3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	0d1b      	lsrs	r3, r3, #20
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003938:	e060      	b.n	80039fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003940:	d107      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d050      	beq.n	80039fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800395a:	f7fd fe03 	bl	8001564 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	429a      	cmp	r2, r3
 8003968:	d902      	bls.n	8003970 <SPI_WaitFifoStateUntilTimeout+0x80>
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13d      	bne.n	80039ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800397e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003988:	d111      	bne.n	80039ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003992:	d004      	beq.n	800399e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399c:	d107      	bne.n	80039ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	d10f      	bne.n	80039d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e010      	b.n	8003a0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d196      	bne.n	800393a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	@ 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000

08003a1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a30:	d111      	bne.n	8003a56 <SPI_EndRxTransaction+0x3a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3a:	d004      	beq.n	8003a46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	d107      	bne.n	8003a56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff febd 	bl	80037e0 <SPI_WaitFlagStateUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e023      	b.n	8003ac4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a84:	d11d      	bne.n	8003ac2 <SPI_EndRxTransaction+0xa6>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a8e:	d004      	beq.n	8003a9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a98:	d113      	bne.n	8003ac2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff ff22 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e000      	b.n	8003ac4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff ff03 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e027      	b.n	8003b50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	@ 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fe68 	bl	80037e0 <SPI_WaitFlagStateUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1a:	f043 0220 	orr.w	r2, r3, #32
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e014      	b.n	8003b50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fedc 	bl	80038f0 <SPI_WaitFifoStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e000      	b.n	8003b50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e049      	b.n	8003bfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fa66 	bl	8001050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f000 f9f0 	bl	8003f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e097      	b.n	8003d4a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fa2e 	bl	8001090 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 f98e 	bl	8003f7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ca6:	f023 030c 	bic.w	r3, r3, #12
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	011a      	lsls	r2, r3, #4
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ce4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003cec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0ff      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b14      	cmp	r3, #20
 8003d7e:	f200 80f0 	bhi.w	8003f62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d82:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003f63 	.word	0x08003f63
 8003d90:	08003f63 	.word	0x08003f63
 8003d94:	08003f63 	.word	0x08003f63
 8003d98:	08003e1d 	.word	0x08003e1d
 8003d9c:	08003f63 	.word	0x08003f63
 8003da0:	08003f63 	.word	0x08003f63
 8003da4:	08003f63 	.word	0x08003f63
 8003da8:	08003e5f 	.word	0x08003e5f
 8003dac:	08003f63 	.word	0x08003f63
 8003db0:	08003f63 	.word	0x08003f63
 8003db4:	08003f63 	.word	0x08003f63
 8003db8:	08003e9f 	.word	0x08003e9f
 8003dbc:	08003f63 	.word	0x08003f63
 8003dc0:	08003f63 	.word	0x08003f63
 8003dc4:	08003f63 	.word	0x08003f63
 8003dc8:	08003ee1 	.word	0x08003ee1
 8003dcc:	08003f63 	.word	0x08003f63
 8003dd0:	08003f63 	.word	0x08003f63
 8003dd4:	08003f63 	.word	0x08003f63
 8003dd8:	08003f21 	.word	0x08003f21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f966 	bl	80040b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0204 	bic.w	r2, r2, #4
 8003e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
      break;
 8003e1a:	e0a5      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f9d6 	bl	80041d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6999      	ldr	r1, [r3, #24]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]
      break;
 8003e5c:	e084      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa3f 	bl	80042e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0204 	bic.w	r2, r2, #4
 8003e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69d9      	ldr	r1, [r3, #28]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
      break;
 8003e9c:	e064      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 faa7 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]
      break;
 8003ede:	e043      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fb10 	bl	800450c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0204 	bic.w	r2, r2, #4
 8003f0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f1e:	e023      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fb54 	bl	80045d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f60:	e002      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	75fb      	strb	r3, [r7, #23]
      break;
 8003f66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop

08003f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a42      	ldr	r2, [pc, #264]	@ (8004098 <TIM_Base_SetConfig+0x11c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0x38>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x38>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800409c <TIM_Base_SetConfig+0x120>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x38>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80040a0 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x38>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3d      	ldr	r2, [pc, #244]	@ (80040a4 <TIM_Base_SetConfig+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	@ (8004098 <TIM_Base_SetConfig+0x11c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01b      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd4:	d017      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	@ (800409c <TIM_Base_SetConfig+0x120>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80040a0 <TIM_Base_SetConfig+0x124>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00f      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80040a4 <TIM_Base_SetConfig+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <TIM_Base_SetConfig+0x12c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <TIM_Base_SetConfig+0x130>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <TIM_Base_SetConfig+0x134>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a16      	ldr	r2, [pc, #88]	@ (8004098 <TIM_Base_SetConfig+0x11c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00f      	beq.n	8004064 <TIM_Base_SetConfig+0xe8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a17      	ldr	r2, [pc, #92]	@ (80040a4 <TIM_Base_SetConfig+0x128>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00b      	beq.n	8004064 <TIM_Base_SetConfig+0xe8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <TIM_Base_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d007      	beq.n	8004064 <TIM_Base_SetConfig+0xe8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a15      	ldr	r2, [pc, #84]	@ (80040ac <TIM_Base_SetConfig+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0xe8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <TIM_Base_SetConfig+0x134>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	611a      	str	r2, [r3, #16]
  }
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40013400 	.word	0x40013400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 0201 	bic.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <TIM_OC1_SetConfig+0x10c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00f      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2b      	ldr	r2, [pc, #172]	@ (80041c4 <TIM_OC1_SetConfig+0x110>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00b      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a2a      	ldr	r2, [pc, #168]	@ (80041c8 <TIM_OC1_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a29      	ldr	r2, [pc, #164]	@ (80041cc <TIM_OC1_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <TIM_OC1_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10c      	bne.n	800414e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0308 	bic.w	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <TIM_OC1_SetConfig+0x10c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <TIM_OC1_SetConfig+0x110>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	@ (80041c8 <TIM_OC1_SetConfig+0x114>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	@ (80041cc <TIM_OC1_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <TIM_OC1_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d111      	bne.n	800419a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f023 0210 	bic.w	r2, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a28      	ldr	r2, [pc, #160]	@ (80042d4 <TIM_OC2_SetConfig+0x100>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC2_SetConfig+0x6c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a27      	ldr	r2, [pc, #156]	@ (80042d8 <TIM_OC2_SetConfig+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1d      	ldr	r2, [pc, #116]	@ (80042d4 <TIM_OC2_SetConfig+0x100>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a1c      	ldr	r2, [pc, #112]	@ (80042d8 <TIM_OC2_SetConfig+0x104>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <TIM_OC2_SetConfig+0x108>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1a      	ldr	r2, [pc, #104]	@ (80042e0 <TIM_OC2_SetConfig+0x10c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <TIM_OC2_SetConfig+0x110>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d113      	bne.n	80042ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800428a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <TIM_OC3_SetConfig+0xfc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC3_SetConfig+0x6a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a26      	ldr	r2, [pc, #152]	@ (80043e8 <TIM_OC3_SetConfig+0x100>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d10d      	bne.n	800436e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800436c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <TIM_OC3_SetConfig+0xfc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <TIM_OC3_SetConfig+0x100>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <TIM_OC3_SetConfig+0x104>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a19      	ldr	r2, [pc, #100]	@ (80043f0 <TIM_OC3_SetConfig+0x108>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <TIM_OC3_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <TIM_OC4_SetConfig+0x100>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC4_SetConfig+0x6c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <TIM_OC4_SetConfig+0x104>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10d      	bne.n	8004480 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800446a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800447e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <TIM_OC4_SetConfig+0x100>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00f      	beq.n	80044a8 <TIM_OC4_SetConfig+0xb0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <TIM_OC4_SetConfig+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_OC4_SetConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1b      	ldr	r2, [pc, #108]	@ (8004500 <TIM_OC4_SetConfig+0x108>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_OC4_SetConfig+0xb0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <TIM_OC4_SetConfig+0x10c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC4_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <TIM_OC4_SetConfig+0x110>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d113      	bne.n	80044d0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40013400 	.word	0x40013400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <TIM_OC5_SetConfig+0xb4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00f      	beq.n	8004586 <TIM_OC5_SetConfig+0x7a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a16      	ldr	r2, [pc, #88]	@ (80045c4 <TIM_OC5_SetConfig+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_OC5_SetConfig+0x7a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a15      	ldr	r2, [pc, #84]	@ (80045c8 <TIM_OC5_SetConfig+0xbc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_OC5_SetConfig+0x7a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a14      	ldr	r2, [pc, #80]	@ (80045cc <TIM_OC5_SetConfig+0xc0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC5_SetConfig+0x7a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a13      	ldr	r2, [pc, #76]	@ (80045d0 <TIM_OC5_SetConfig+0xc4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d109      	bne.n	800459a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800461a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	051b      	lsls	r3, r3, #20
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <TIM_OC6_SetConfig+0xb8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00f      	beq.n	8004650 <TIM_OC6_SetConfig+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	@ (8004690 <TIM_OC6_SetConfig+0xbc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_OC6_SetConfig+0x7c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <TIM_OC6_SetConfig+0xc0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_OC6_SetConfig+0x7c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <TIM_OC6_SetConfig+0xc4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC6_SetConfig+0x7c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a14      	ldr	r2, [pc, #80]	@ (800469c <TIM_OC6_SetConfig+0xc8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e065      	b.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004708:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472e:	d013      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10c      	bne.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40013400 	.word	0x40013400
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40014000 	.word	0x40014000

080047a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e073      	b.n	80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d11c      	bne.n	8004896 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	051b      	lsls	r3, r3, #20
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400

080048bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc fd19 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2224      	movs	r2, #36	@ 0x24
 80048ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fb82 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8b3 	bl	8004a78 <UART_SetConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e01b      	b.n	8004954 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800492a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800493a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fc01 	bl	8005154 <UART_CheckIdleState>
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	2b20      	cmp	r3, #32
 8004974:	d17b      	bne.n	8004a6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_UART_Transmit+0x26>
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e074      	b.n	8004a70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2221      	movs	r2, #33	@ 0x21
 8004992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004996:	f7fc fde5 	bl	8001564 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	d108      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e003      	b.n	80049d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d0:	e030      	b.n	8004a34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fc63 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e03d      	b.n	8004a70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e007      	b.n	8004a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1c8      	bne.n	80049d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2200      	movs	r2, #0
 8004a48:	2140      	movs	r1, #64	@ 0x40
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fc2c 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e006      	b.n	8004a70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a7c:	b08c      	sub	sp, #48	@ 0x30
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4bab      	ldr	r3, [pc, #684]	@ (8004d54 <UART_SetConfig+0x2dc>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4aa0      	ldr	r2, [pc, #640]	@ (8004d58 <UART_SetConfig+0x2e0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004aee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	f023 010f 	bic.w	r1, r3, #15
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a91      	ldr	r2, [pc, #580]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d125      	bne.n	8004b68 <UART_SetConfig+0xf0>
 8004b1c:	4b90      	ldr	r3, [pc, #576]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d81a      	bhi.n	8004b60 <UART_SetConfig+0xe8>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <UART_SetConfig+0xb8>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b59 	.word	0x08004b59
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e0d6      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e0d2      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e0ce      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e0ca      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e0c6      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d64 <UART_SetConfig+0x2ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d138      	bne.n	8004be4 <UART_SetConfig+0x16c>
 8004b72:	4b7b      	ldr	r3, [pc, #492]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d82d      	bhi.n	8004bdc <UART_SetConfig+0x164>
 8004b80:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0x110>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc2:	e098      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bca:	e094      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd2:	e090      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bda:	e08c      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e088      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5f      	ldr	r2, [pc, #380]	@ (8004d68 <UART_SetConfig+0x2f0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d125      	bne.n	8004c3a <UART_SetConfig+0x1c2>
 8004bee:	4b5c      	ldr	r3, [pc, #368]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bf8:	2b30      	cmp	r3, #48	@ 0x30
 8004bfa:	d016      	beq.n	8004c2a <UART_SetConfig+0x1b2>
 8004bfc:	2b30      	cmp	r3, #48	@ 0x30
 8004bfe:	d818      	bhi.n	8004c32 <UART_SetConfig+0x1ba>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d00a      	beq.n	8004c1a <UART_SetConfig+0x1a2>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d814      	bhi.n	8004c32 <UART_SetConfig+0x1ba>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <UART_SetConfig+0x19a>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d008      	beq.n	8004c22 <UART_SetConfig+0x1aa>
 8004c10:	e00f      	b.n	8004c32 <UART_SetConfig+0x1ba>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c18:	e06d      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c20:	e069      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c22:	2304      	movs	r3, #4
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c28:	e065      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c30:	e061      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c32:	2310      	movs	r3, #16
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c38:	e05d      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4b      	ldr	r2, [pc, #300]	@ (8004d6c <UART_SetConfig+0x2f4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d125      	bne.n	8004c90 <UART_SetConfig+0x218>
 8004c44:	4b46      	ldr	r3, [pc, #280]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c50:	d016      	beq.n	8004c80 <UART_SetConfig+0x208>
 8004c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c54:	d818      	bhi.n	8004c88 <UART_SetConfig+0x210>
 8004c56:	2b80      	cmp	r3, #128	@ 0x80
 8004c58:	d00a      	beq.n	8004c70 <UART_SetConfig+0x1f8>
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d814      	bhi.n	8004c88 <UART_SetConfig+0x210>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <UART_SetConfig+0x1f0>
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x200>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x210>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e042      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e03e      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e03a      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	e036      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8e:	e032      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a30      	ldr	r2, [pc, #192]	@ (8004d58 <UART_SetConfig+0x2e0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d12a      	bne.n	8004cf0 <UART_SetConfig+0x278>
 8004c9a:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca8:	d01a      	beq.n	8004ce0 <UART_SetConfig+0x268>
 8004caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cae:	d81b      	bhi.n	8004ce8 <UART_SetConfig+0x270>
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d00c      	beq.n	8004cd0 <UART_SetConfig+0x258>
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cba:	d815      	bhi.n	8004ce8 <UART_SetConfig+0x270>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <UART_SetConfig+0x250>
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x260>
 8004cc6:	e00f      	b.n	8004ce8 <UART_SetConfig+0x270>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e012      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd6:	e00e      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cde:	e00a      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce6:	e006      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cee:	e002      	b.n	8004cf6 <UART_SetConfig+0x27e>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	@ (8004d58 <UART_SetConfig+0x2e0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f040 80a8 	bne.w	8004e52 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d834      	bhi.n	8004d74 <UART_SetConfig+0x2fc>
 8004d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <UART_SetConfig+0x298>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d75 	.word	0x08004d75
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d75 	.word	0x08004d75
 8004d20:	08004d43 	.word	0x08004d43
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004d75 	.word	0x08004d75
 8004d2c:	08004d75 	.word	0x08004d75
 8004d30:	08004d4b 	.word	0x08004d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7fd fd7c 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d3a:	e021      	b.n	8004d80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <UART_SetConfig+0x2f8>)
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d40:	e01e      	b.n	8004d80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7fd fd09 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004d46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d48:	e01a      	b.n	8004d80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d50:	e016      	b.n	8004d80 <UART_SetConfig+0x308>
 8004d52:	bf00      	nop
 8004d54:	cfff69f3 	.word	0xcfff69f3
 8004d58:	40008000 	.word	0x40008000
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40004800 	.word	0x40004800
 8004d6c:	40004c00 	.word	0x40004c00
 8004d70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 812a 	beq.w	8004fdc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	4a9e      	ldr	r2, [pc, #632]	@ (8005008 <UART_SetConfig+0x590>)
 8004d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d305      	bcc.n	8004db8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d903      	bls.n	8004dc0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004dbe:	e10d      	b.n	8004fdc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	60fa      	str	r2, [r7, #12]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	4a8e      	ldr	r2, [pc, #568]	@ (8005008 <UART_SetConfig+0x590>)
 8004dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004de2:	f7fb fa6d 	bl	80002c0 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	020b      	lsls	r3, r1, #8
 8004df8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dfc:	0202      	lsls	r2, r0, #8
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	6849      	ldr	r1, [r1, #4]
 8004e02:	0849      	lsrs	r1, r1, #1
 8004e04:	2000      	movs	r0, #0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4605      	mov	r5, r0
 8004e0a:	eb12 0804 	adds.w	r8, r2, r4
 8004e0e:	eb43 0905 	adc.w	r9, r3, r5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	469a      	mov	sl, r3
 8004e1a:	4693      	mov	fp, r2
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	465b      	mov	r3, fp
 8004e20:	4640      	mov	r0, r8
 8004e22:	4649      	mov	r1, r9
 8004e24:	f7fb fa4c 	bl	80002c0 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e36:	d308      	bcc.n	8004e4a <UART_SetConfig+0x3d2>
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e3e:	d204      	bcs.n	8004e4a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e0c8      	b.n	8004fdc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e50:	e0c4      	b.n	8004fdc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5a:	d167      	bne.n	8004f2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d828      	bhi.n	8004eb6 <UART_SetConfig+0x43e>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x3f4>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fd fcce 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e96:	e014      	b.n	8004ec2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fd fce0 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800500c <UART_SetConfig+0x594>)
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ea4:	e00d      	b.n	8004ec2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fd fc57 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eac:	e009      	b.n	8004ec2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004eb4:	e005      	b.n	8004ec2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8089 	beq.w	8004fdc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	4a4e      	ldr	r2, [pc, #312]	@ (8005008 <UART_SetConfig+0x590>)
 8004ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004edc:	005a      	lsls	r2, r3, #1
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	441a      	add	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d916      	bls.n	8004f24 <UART_SetConfig+0x4ac>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d212      	bcs.n	8004f24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f023 030f 	bic.w	r3, r3, #15
 8004f06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	8bfb      	ldrh	r3, [r7, #30]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	8bfa      	ldrh	r2, [r7, #30]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	e05b      	b.n	8004fdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f2a:	e057      	b.n	8004fdc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d828      	bhi.n	8004f86 <UART_SetConfig+0x50e>
 8004f34:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <UART_SetConfig+0x4c4>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004f77 	.word	0x08004f77
 8004f50:	08004f87 	.word	0x08004f87
 8004f54:	08004f87 	.word	0x08004f87
 8004f58:	08004f87 	.word	0x08004f87
 8004f5c:	08004f7f 	.word	0x08004f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fd fc66 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f66:	e014      	b.n	8004f92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fd fc78 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8004f6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f6e:	e010      	b.n	8004f92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b26      	ldr	r3, [pc, #152]	@ (800500c <UART_SetConfig+0x594>)
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f74:	e00d      	b.n	8004f92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fd fbef 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f7c:	e009      	b.n	8004f92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f84:	e005      	b.n	8004f92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f90:	bf00      	nop
    }

    if (pclk != 0U)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d021      	beq.n	8004fdc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005008 <UART_SetConfig+0x590>)
 8004f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	441a      	add	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d909      	bls.n	8004fd6 <UART_SetConfig+0x55e>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc8:	d205      	bcs.n	8004fd6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e002      	b.n	8004fdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ff8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	@ 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005006:	bf00      	nop
 8005008:	08006610 	.word	0x08006610
 800500c:	00f42400 	.word	0x00f42400

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510e:	d10a      	bne.n	8005126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b098      	sub	sp, #96	@ 0x60
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fc f9fe 	bl	8001564 <HAL_GetTick>
 8005168:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d12f      	bne.n	80051d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f88e 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d022      	beq.n	80051d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e063      	b.n	80052a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d149      	bne.n	800527a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ee:	2200      	movs	r2, #0
 80051f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f857 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d03c      	beq.n	800527a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	623b      	str	r3, [r7, #32]
   return(result);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005220:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	60fb      	str	r3, [r7, #12]
   return(result);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005252:	61fa      	str	r2, [r7, #28]
 8005254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	617b      	str	r3, [r7, #20]
   return(result);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e012      	b.n	80052a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3758      	adds	r7, #88	@ 0x58
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b8:	e04f      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c0:	d04b      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c2:	f7fc f94f 	bl	8001564 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e04e      	b.n	800537a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d037      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b80      	cmp	r3, #128	@ 0x80
 80052ee:	d034      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b40      	cmp	r3, #64	@ 0x40
 80052f4:	d031      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d110      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2208      	movs	r2, #8
 800530a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f838 	bl	8005382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2208      	movs	r2, #8
 8005316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e029      	b.n	800537a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005334:	d111      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800533e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f81e 	bl	8005382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e00f      	b.n	800537a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4013      	ands	r3, r2
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	429a      	cmp	r2, r3
 8005376:	d0a0      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005382:	b480      	push	{r7}
 8005384:	b095      	sub	sp, #84	@ 0x54
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e3      	bne.n	80053bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d118      	bne.n	800542e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	60bb      	str	r3, [r7, #8]
   return(result);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0310 	bic.w	r3, r3, #16
 8005410:	647b      	str	r3, [r7, #68]	@ 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	613b      	str	r3, [r7, #16]
   return(result);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e6      	bne.n	80053fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005442:	bf00      	nop
 8005444:	3754      	adds	r7, #84	@ 0x54
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_UARTEx_DisableFifoMode+0x16>
 8005460:	2302      	movs	r3, #2
 8005462:	e027      	b.n	80054b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	@ 0x24
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005492:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e02d      	b.n	8005534 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	@ 0x24
 80054e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f84f 	bl	80055b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005550:	2302      	movs	r3, #2
 8005552:	e02d      	b.n	80055b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	@ 0x24
 8005560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f811 	bl	80055b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055d8:	e031      	b.n	800563e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055da:	2308      	movs	r3, #8
 80055dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055de:	2308      	movs	r3, #8
 80055e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	0e5b      	lsrs	r3, r3, #25
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	0f5b      	lsrs	r3, r3, #29
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	7b3a      	ldrb	r2, [r7, #12]
 8005606:	4911      	ldr	r1, [pc, #68]	@ (800564c <UARTEx_SetNbDataToProcess+0x94>)
 8005608:	5c8a      	ldrb	r2, [r1, r2]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800560e:	7b3a      	ldrb	r2, [r7, #12]
 8005610:	490f      	ldr	r1, [pc, #60]	@ (8005650 <UARTEx_SetNbDataToProcess+0x98>)
 8005612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005614:	fb93 f3f2 	sdiv	r3, r3, r2
 8005618:	b29a      	uxth	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	7b7a      	ldrb	r2, [r7, #13]
 8005624:	4909      	ldr	r1, [pc, #36]	@ (800564c <UARTEx_SetNbDataToProcess+0x94>)
 8005626:	5c8a      	ldrb	r2, [r1, r2]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800562c:	7b7a      	ldrb	r2, [r7, #13]
 800562e:	4908      	ldr	r1, [pc, #32]	@ (8005650 <UARTEx_SetNbDataToProcess+0x98>)
 8005630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005632:	fb93 f3f2 	sdiv	r3, r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	08006628 	.word	0x08006628
 8005650:	08006630 	.word	0x08006630

08005654 <std>:
 8005654:	2300      	movs	r3, #0
 8005656:	b510      	push	{r4, lr}
 8005658:	4604      	mov	r4, r0
 800565a:	e9c0 3300 	strd	r3, r3, [r0]
 800565e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005662:	6083      	str	r3, [r0, #8]
 8005664:	8181      	strh	r1, [r0, #12]
 8005666:	6643      	str	r3, [r0, #100]	@ 0x64
 8005668:	81c2      	strh	r2, [r0, #14]
 800566a:	6183      	str	r3, [r0, #24]
 800566c:	4619      	mov	r1, r3
 800566e:	2208      	movs	r2, #8
 8005670:	305c      	adds	r0, #92	@ 0x5c
 8005672:	f000 f9f9 	bl	8005a68 <memset>
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x58>)
 8005678:	6263      	str	r3, [r4, #36]	@ 0x24
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x5c>)
 800567c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x60>)
 8005680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x64>)
 8005684:	6323      	str	r3, [r4, #48]	@ 0x30
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x68>)
 8005688:	6224      	str	r4, [r4, #32]
 800568a:	429c      	cmp	r4, r3
 800568c:	d006      	beq.n	800569c <std+0x48>
 800568e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005692:	4294      	cmp	r4, r2
 8005694:	d002      	beq.n	800569c <std+0x48>
 8005696:	33d0      	adds	r3, #208	@ 0xd0
 8005698:	429c      	cmp	r4, r3
 800569a:	d105      	bne.n	80056a8 <std+0x54>
 800569c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a4:	f000 ba58 	b.w	8005b58 <__retarget_lock_init_recursive>
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	bf00      	nop
 80056ac:	080058b9 	.word	0x080058b9
 80056b0:	080058db 	.word	0x080058db
 80056b4:	08005913 	.word	0x08005913
 80056b8:	08005937 	.word	0x08005937
 80056bc:	20000350 	.word	0x20000350

080056c0 <stdio_exit_handler>:
 80056c0:	4a02      	ldr	r2, [pc, #8]	@ (80056cc <stdio_exit_handler+0xc>)
 80056c2:	4903      	ldr	r1, [pc, #12]	@ (80056d0 <stdio_exit_handler+0x10>)
 80056c4:	4803      	ldr	r0, [pc, #12]	@ (80056d4 <stdio_exit_handler+0x14>)
 80056c6:	f000 b869 	b.w	800579c <_fwalk_sglue>
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c
 80056d0:	080063f9 	.word	0x080063f9
 80056d4:	2000001c 	.word	0x2000001c

080056d8 <cleanup_stdio>:
 80056d8:	6841      	ldr	r1, [r0, #4]
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <cleanup_stdio+0x34>)
 80056dc:	4299      	cmp	r1, r3
 80056de:	b510      	push	{r4, lr}
 80056e0:	4604      	mov	r4, r0
 80056e2:	d001      	beq.n	80056e8 <cleanup_stdio+0x10>
 80056e4:	f000 fe88 	bl	80063f8 <_fflush_r>
 80056e8:	68a1      	ldr	r1, [r4, #8]
 80056ea:	4b09      	ldr	r3, [pc, #36]	@ (8005710 <cleanup_stdio+0x38>)
 80056ec:	4299      	cmp	r1, r3
 80056ee:	d002      	beq.n	80056f6 <cleanup_stdio+0x1e>
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fe81 	bl	80063f8 <_fflush_r>
 80056f6:	68e1      	ldr	r1, [r4, #12]
 80056f8:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <cleanup_stdio+0x3c>)
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d004      	beq.n	8005708 <cleanup_stdio+0x30>
 80056fe:	4620      	mov	r0, r4
 8005700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005704:	f000 be78 	b.w	80063f8 <_fflush_r>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	bf00      	nop
 800570c:	20000350 	.word	0x20000350
 8005710:	200003b8 	.word	0x200003b8
 8005714:	20000420 	.word	0x20000420

08005718 <global_stdio_init.part.0>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <global_stdio_init.part.0+0x30>)
 800571c:	4c0b      	ldr	r4, [pc, #44]	@ (800574c <global_stdio_init.part.0+0x34>)
 800571e:	4a0c      	ldr	r2, [pc, #48]	@ (8005750 <global_stdio_init.part.0+0x38>)
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	4620      	mov	r0, r4
 8005724:	2200      	movs	r2, #0
 8005726:	2104      	movs	r1, #4
 8005728:	f7ff ff94 	bl	8005654 <std>
 800572c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005730:	2201      	movs	r2, #1
 8005732:	2109      	movs	r1, #9
 8005734:	f7ff ff8e 	bl	8005654 <std>
 8005738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800573c:	2202      	movs	r2, #2
 800573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005742:	2112      	movs	r1, #18
 8005744:	f7ff bf86 	b.w	8005654 <std>
 8005748:	20000488 	.word	0x20000488
 800574c:	20000350 	.word	0x20000350
 8005750:	080056c1 	.word	0x080056c1

08005754 <__sfp_lock_acquire>:
 8005754:	4801      	ldr	r0, [pc, #4]	@ (800575c <__sfp_lock_acquire+0x8>)
 8005756:	f000 ba00 	b.w	8005b5a <__retarget_lock_acquire_recursive>
 800575a:	bf00      	nop
 800575c:	20000491 	.word	0x20000491

08005760 <__sfp_lock_release>:
 8005760:	4801      	ldr	r0, [pc, #4]	@ (8005768 <__sfp_lock_release+0x8>)
 8005762:	f000 b9fb 	b.w	8005b5c <__retarget_lock_release_recursive>
 8005766:	bf00      	nop
 8005768:	20000491 	.word	0x20000491

0800576c <__sinit>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	f7ff fff0 	bl	8005754 <__sfp_lock_acquire>
 8005774:	6a23      	ldr	r3, [r4, #32]
 8005776:	b11b      	cbz	r3, 8005780 <__sinit+0x14>
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577c:	f7ff bff0 	b.w	8005760 <__sfp_lock_release>
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <__sinit+0x28>)
 8005782:	6223      	str	r3, [r4, #32]
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__sinit+0x2c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f5      	bne.n	8005778 <__sinit+0xc>
 800578c:	f7ff ffc4 	bl	8005718 <global_stdio_init.part.0>
 8005790:	e7f2      	b.n	8005778 <__sinit+0xc>
 8005792:	bf00      	nop
 8005794:	080056d9 	.word	0x080056d9
 8005798:	20000488 	.word	0x20000488

0800579c <_fwalk_sglue>:
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a0:	4607      	mov	r7, r0
 80057a2:	4688      	mov	r8, r1
 80057a4:	4614      	mov	r4, r2
 80057a6:	2600      	movs	r6, #0
 80057a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ac:	f1b9 0901 	subs.w	r9, r9, #1
 80057b0:	d505      	bpl.n	80057be <_fwalk_sglue+0x22>
 80057b2:	6824      	ldr	r4, [r4, #0]
 80057b4:	2c00      	cmp	r4, #0
 80057b6:	d1f7      	bne.n	80057a8 <_fwalk_sglue+0xc>
 80057b8:	4630      	mov	r0, r6
 80057ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d907      	bls.n	80057d4 <_fwalk_sglue+0x38>
 80057c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c8:	3301      	adds	r3, #1
 80057ca:	d003      	beq.n	80057d4 <_fwalk_sglue+0x38>
 80057cc:	4629      	mov	r1, r5
 80057ce:	4638      	mov	r0, r7
 80057d0:	47c0      	blx	r8
 80057d2:	4306      	orrs	r6, r0
 80057d4:	3568      	adds	r5, #104	@ 0x68
 80057d6:	e7e9      	b.n	80057ac <_fwalk_sglue+0x10>

080057d8 <iprintf>:
 80057d8:	b40f      	push	{r0, r1, r2, r3}
 80057da:	b507      	push	{r0, r1, r2, lr}
 80057dc:	4906      	ldr	r1, [pc, #24]	@ (80057f8 <iprintf+0x20>)
 80057de:	ab04      	add	r3, sp, #16
 80057e0:	6808      	ldr	r0, [r1, #0]
 80057e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e6:	6881      	ldr	r1, [r0, #8]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	f000 fadb 	bl	8005da4 <_vfiprintf_r>
 80057ee:	b003      	add	sp, #12
 80057f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	20000018 	.word	0x20000018

080057fc <_puts_r>:
 80057fc:	6a03      	ldr	r3, [r0, #32]
 80057fe:	b570      	push	{r4, r5, r6, lr}
 8005800:	6884      	ldr	r4, [r0, #8]
 8005802:	4605      	mov	r5, r0
 8005804:	460e      	mov	r6, r1
 8005806:	b90b      	cbnz	r3, 800580c <_puts_r+0x10>
 8005808:	f7ff ffb0 	bl	800576c <__sinit>
 800580c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580e:	07db      	lsls	r3, r3, #31
 8005810:	d405      	bmi.n	800581e <_puts_r+0x22>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	0598      	lsls	r0, r3, #22
 8005816:	d402      	bmi.n	800581e <_puts_r+0x22>
 8005818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581a:	f000 f99e 	bl	8005b5a <__retarget_lock_acquire_recursive>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	0719      	lsls	r1, r3, #28
 8005822:	d502      	bpl.n	800582a <_puts_r+0x2e>
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d135      	bne.n	8005896 <_puts_r+0x9a>
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 f8c5 	bl	80059bc <__swsetup_r>
 8005832:	b380      	cbz	r0, 8005896 <_puts_r+0x9a>
 8005834:	f04f 35ff 	mov.w	r5, #4294967295
 8005838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800583a:	07da      	lsls	r2, r3, #31
 800583c:	d405      	bmi.n	800584a <_puts_r+0x4e>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	d402      	bmi.n	800584a <_puts_r+0x4e>
 8005844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005846:	f000 f989 	bl	8005b5c <__retarget_lock_release_recursive>
 800584a:	4628      	mov	r0, r5
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	2b00      	cmp	r3, #0
 8005850:	da04      	bge.n	800585c <_puts_r+0x60>
 8005852:	69a2      	ldr	r2, [r4, #24]
 8005854:	429a      	cmp	r2, r3
 8005856:	dc17      	bgt.n	8005888 <_puts_r+0x8c>
 8005858:	290a      	cmp	r1, #10
 800585a:	d015      	beq.n	8005888 <_puts_r+0x8c>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	6022      	str	r2, [r4, #0]
 8005862:	7019      	strb	r1, [r3, #0]
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800586a:	3b01      	subs	r3, #1
 800586c:	60a3      	str	r3, [r4, #8]
 800586e:	2900      	cmp	r1, #0
 8005870:	d1ed      	bne.n	800584e <_puts_r+0x52>
 8005872:	2b00      	cmp	r3, #0
 8005874:	da11      	bge.n	800589a <_puts_r+0x9e>
 8005876:	4622      	mov	r2, r4
 8005878:	210a      	movs	r1, #10
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f85f 	bl	800593e <__swbuf_r>
 8005880:	3001      	adds	r0, #1
 8005882:	d0d7      	beq.n	8005834 <_puts_r+0x38>
 8005884:	250a      	movs	r5, #10
 8005886:	e7d7      	b.n	8005838 <_puts_r+0x3c>
 8005888:	4622      	mov	r2, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f857 	bl	800593e <__swbuf_r>
 8005890:	3001      	adds	r0, #1
 8005892:	d1e7      	bne.n	8005864 <_puts_r+0x68>
 8005894:	e7ce      	b.n	8005834 <_puts_r+0x38>
 8005896:	3e01      	subs	r6, #1
 8005898:	e7e4      	b.n	8005864 <_puts_r+0x68>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	220a      	movs	r2, #10
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e7ee      	b.n	8005884 <_puts_r+0x88>
	...

080058a8 <puts>:
 80058a8:	4b02      	ldr	r3, [pc, #8]	@ (80058b4 <puts+0xc>)
 80058aa:	4601      	mov	r1, r0
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f7ff bfa5 	b.w	80057fc <_puts_r>
 80058b2:	bf00      	nop
 80058b4:	20000018 	.word	0x20000018

080058b8 <__sread>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	460c      	mov	r4, r1
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	f000 f8fc 	bl	8005abc <_read_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	bfab      	itete	ge
 80058c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058ca:	89a3      	ldrhlt	r3, [r4, #12]
 80058cc:	181b      	addge	r3, r3, r0
 80058ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058d2:	bfac      	ite	ge
 80058d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058d6:	81a3      	strhlt	r3, [r4, #12]
 80058d8:	bd10      	pop	{r4, pc}

080058da <__swrite>:
 80058da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	461f      	mov	r7, r3
 80058e0:	898b      	ldrh	r3, [r1, #12]
 80058e2:	05db      	lsls	r3, r3, #23
 80058e4:	4605      	mov	r5, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	4616      	mov	r6, r2
 80058ea:	d505      	bpl.n	80058f8 <__swrite+0x1e>
 80058ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f0:	2302      	movs	r3, #2
 80058f2:	2200      	movs	r2, #0
 80058f4:	f000 f8d0 	bl	8005a98 <_lseek_r>
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	4632      	mov	r2, r6
 8005906:	463b      	mov	r3, r7
 8005908:	4628      	mov	r0, r5
 800590a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800590e:	f000 b8e7 	b.w	8005ae0 <_write_r>

08005912 <__sseek>:
 8005912:	b510      	push	{r4, lr}
 8005914:	460c      	mov	r4, r1
 8005916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591a:	f000 f8bd 	bl	8005a98 <_lseek_r>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	bf15      	itete	ne
 8005924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800592a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800592e:	81a3      	strheq	r3, [r4, #12]
 8005930:	bf18      	it	ne
 8005932:	81a3      	strhne	r3, [r4, #12]
 8005934:	bd10      	pop	{r4, pc}

08005936 <__sclose>:
 8005936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593a:	f000 b89d 	b.w	8005a78 <_close_r>

0800593e <__swbuf_r>:
 800593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005940:	460e      	mov	r6, r1
 8005942:	4614      	mov	r4, r2
 8005944:	4605      	mov	r5, r0
 8005946:	b118      	cbz	r0, 8005950 <__swbuf_r+0x12>
 8005948:	6a03      	ldr	r3, [r0, #32]
 800594a:	b90b      	cbnz	r3, 8005950 <__swbuf_r+0x12>
 800594c:	f7ff ff0e 	bl	800576c <__sinit>
 8005950:	69a3      	ldr	r3, [r4, #24]
 8005952:	60a3      	str	r3, [r4, #8]
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	071a      	lsls	r2, r3, #28
 8005958:	d501      	bpl.n	800595e <__swbuf_r+0x20>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	b943      	cbnz	r3, 8005970 <__swbuf_r+0x32>
 800595e:	4621      	mov	r1, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f000 f82b 	bl	80059bc <__swsetup_r>
 8005966:	b118      	cbz	r0, 8005970 <__swbuf_r+0x32>
 8005968:	f04f 37ff 	mov.w	r7, #4294967295
 800596c:	4638      	mov	r0, r7
 800596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	6922      	ldr	r2, [r4, #16]
 8005974:	1a98      	subs	r0, r3, r2
 8005976:	6963      	ldr	r3, [r4, #20]
 8005978:	b2f6      	uxtb	r6, r6
 800597a:	4283      	cmp	r3, r0
 800597c:	4637      	mov	r7, r6
 800597e:	dc05      	bgt.n	800598c <__swbuf_r+0x4e>
 8005980:	4621      	mov	r1, r4
 8005982:	4628      	mov	r0, r5
 8005984:	f000 fd38 	bl	80063f8 <_fflush_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	d1ed      	bne.n	8005968 <__swbuf_r+0x2a>
 800598c:	68a3      	ldr	r3, [r4, #8]
 800598e:	3b01      	subs	r3, #1
 8005990:	60a3      	str	r3, [r4, #8]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	6022      	str	r2, [r4, #0]
 8005998:	701e      	strb	r6, [r3, #0]
 800599a:	6962      	ldr	r2, [r4, #20]
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	429a      	cmp	r2, r3
 80059a0:	d004      	beq.n	80059ac <__swbuf_r+0x6e>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d5e1      	bpl.n	800596c <__swbuf_r+0x2e>
 80059a8:	2e0a      	cmp	r6, #10
 80059aa:	d1df      	bne.n	800596c <__swbuf_r+0x2e>
 80059ac:	4621      	mov	r1, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fd22 	bl	80063f8 <_fflush_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d0d9      	beq.n	800596c <__swbuf_r+0x2e>
 80059b8:	e7d6      	b.n	8005968 <__swbuf_r+0x2a>
	...

080059bc <__swsetup_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4b29      	ldr	r3, [pc, #164]	@ (8005a64 <__swsetup_r+0xa8>)
 80059c0:	4605      	mov	r5, r0
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	460c      	mov	r4, r1
 80059c6:	b118      	cbz	r0, 80059d0 <__swsetup_r+0x14>
 80059c8:	6a03      	ldr	r3, [r0, #32]
 80059ca:	b90b      	cbnz	r3, 80059d0 <__swsetup_r+0x14>
 80059cc:	f7ff fece 	bl	800576c <__sinit>
 80059d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d4:	0719      	lsls	r1, r3, #28
 80059d6:	d422      	bmi.n	8005a1e <__swsetup_r+0x62>
 80059d8:	06da      	lsls	r2, r3, #27
 80059da:	d407      	bmi.n	80059ec <__swsetup_r+0x30>
 80059dc:	2209      	movs	r2, #9
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	e033      	b.n	8005a54 <__swsetup_r+0x98>
 80059ec:	0758      	lsls	r0, r3, #29
 80059ee:	d512      	bpl.n	8005a16 <__swsetup_r+0x5a>
 80059f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059f2:	b141      	cbz	r1, 8005a06 <__swsetup_r+0x4a>
 80059f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059f8:	4299      	cmp	r1, r3
 80059fa:	d002      	beq.n	8005a02 <__swsetup_r+0x46>
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 f8af 	bl	8005b60 <_free_r>
 8005a02:	2300      	movs	r3, #0
 8005a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f043 0308 	orr.w	r3, r3, #8
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	b94b      	cbnz	r3, 8005a36 <__swsetup_r+0x7a>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a2c:	d003      	beq.n	8005a36 <__swsetup_r+0x7a>
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fd2f 	bl	8006494 <__smakebuf_r>
 8005a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3a:	f013 0201 	ands.w	r2, r3, #1
 8005a3e:	d00a      	beq.n	8005a56 <__swsetup_r+0x9a>
 8005a40:	2200      	movs	r2, #0
 8005a42:	60a2      	str	r2, [r4, #8]
 8005a44:	6962      	ldr	r2, [r4, #20]
 8005a46:	4252      	negs	r2, r2
 8005a48:	61a2      	str	r2, [r4, #24]
 8005a4a:	6922      	ldr	r2, [r4, #16]
 8005a4c:	b942      	cbnz	r2, 8005a60 <__swsetup_r+0xa4>
 8005a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a52:	d1c5      	bne.n	80059e0 <__swsetup_r+0x24>
 8005a54:	bd38      	pop	{r3, r4, r5, pc}
 8005a56:	0799      	lsls	r1, r3, #30
 8005a58:	bf58      	it	pl
 8005a5a:	6962      	ldrpl	r2, [r4, #20]
 8005a5c:	60a2      	str	r2, [r4, #8]
 8005a5e:	e7f4      	b.n	8005a4a <__swsetup_r+0x8e>
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7f7      	b.n	8005a54 <__swsetup_r+0x98>
 8005a64:	20000018 	.word	0x20000018

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <_close_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d06      	ldr	r5, [pc, #24]	@ (8005a94 <_close_r+0x1c>)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fb f910 	bl	8000ca8 <_close>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_close_r+0x1a>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_close_r+0x1a>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	2000048c 	.word	0x2000048c

08005a98 <_lseek_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	@ (8005ab8 <_lseek_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fb f925 	bl	8000cf6 <_lseek>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_lseek_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_lseek_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	2000048c 	.word	0x2000048c

08005abc <_read_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	@ (8005adc <_read_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb f8cf 	bl	8000c6e <_read>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_read_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_read_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	2000048c 	.word	0x2000048c

08005ae0 <_write_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d07      	ldr	r5, [pc, #28]	@ (8005b00 <_write_r+0x20>)
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	4611      	mov	r1, r2
 8005aea:	2200      	movs	r2, #0
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7fa ff28 	bl	8000944 <_write>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_write_r+0x1e>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_write_r+0x1e>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	2000048c 	.word	0x2000048c

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	@ (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000018 	.word	0x20000018

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	@ (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	@ (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	@ (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	@ (8005b54 <__libc_init_array+0x44>)
 8005b24:	f000 fd24 	bl	8006570 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08006674 	.word	0x08006674
 8005b4c:	08006674 	.word	0x08006674
 8005b50:	08006674 	.word	0x08006674
 8005b54:	08006678 	.word	0x08006678

08005b58 <__retarget_lock_init_recursive>:
 8005b58:	4770      	bx	lr

08005b5a <__retarget_lock_acquire_recursive>:
 8005b5a:	4770      	bx	lr

08005b5c <__retarget_lock_release_recursive>:
 8005b5c:	4770      	bx	lr
	...

08005b60 <_free_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4605      	mov	r5, r0
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d041      	beq.n	8005bec <_free_r+0x8c>
 8005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6c:	1f0c      	subs	r4, r1, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfb8      	it	lt
 8005b72:	18e4      	addlt	r4, r4, r3
 8005b74:	f000 f8e0 	bl	8005d38 <__malloc_lock>
 8005b78:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf0 <_free_r+0x90>)
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	b933      	cbnz	r3, 8005b8c <_free_r+0x2c>
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	6014      	str	r4, [r2, #0]
 8005b82:	4628      	mov	r0, r5
 8005b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b88:	f000 b8dc 	b.w	8005d44 <__malloc_unlock>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d908      	bls.n	8005ba2 <_free_r+0x42>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	1821      	adds	r1, r4, r0
 8005b94:	428b      	cmp	r3, r1
 8005b96:	bf01      	itttt	eq
 8005b98:	6819      	ldreq	r1, [r3, #0]
 8005b9a:	685b      	ldreq	r3, [r3, #4]
 8005b9c:	1809      	addeq	r1, r1, r0
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	e7ed      	b.n	8005b7e <_free_r+0x1e>
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b10b      	cbz	r3, 8005bac <_free_r+0x4c>
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d9fa      	bls.n	8005ba2 <_free_r+0x42>
 8005bac:	6811      	ldr	r1, [r2, #0]
 8005bae:	1850      	adds	r0, r2, r1
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d10b      	bne.n	8005bcc <_free_r+0x6c>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	4401      	add	r1, r0
 8005bb8:	1850      	adds	r0, r2, r1
 8005bba:	4283      	cmp	r3, r0
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	d1e0      	bne.n	8005b82 <_free_r+0x22>
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	6053      	str	r3, [r2, #4]
 8005bc6:	4408      	add	r0, r1
 8005bc8:	6010      	str	r0, [r2, #0]
 8005bca:	e7da      	b.n	8005b82 <_free_r+0x22>
 8005bcc:	d902      	bls.n	8005bd4 <_free_r+0x74>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	e7d6      	b.n	8005b82 <_free_r+0x22>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	1821      	adds	r1, r4, r0
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	bf04      	itt	eq
 8005bdc:	6819      	ldreq	r1, [r3, #0]
 8005bde:	685b      	ldreq	r3, [r3, #4]
 8005be0:	6063      	str	r3, [r4, #4]
 8005be2:	bf04      	itt	eq
 8005be4:	1809      	addeq	r1, r1, r0
 8005be6:	6021      	streq	r1, [r4, #0]
 8005be8:	6054      	str	r4, [r2, #4]
 8005bea:	e7ca      	b.n	8005b82 <_free_r+0x22>
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000498 	.word	0x20000498

08005bf4 <sbrk_aligned>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8005c34 <sbrk_aligned+0x40>)
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	6831      	ldr	r1, [r6, #0]
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	b911      	cbnz	r1, 8005c06 <sbrk_aligned+0x12>
 8005c00:	f000 fca6 	bl	8006550 <_sbrk_r>
 8005c04:	6030      	str	r0, [r6, #0]
 8005c06:	4621      	mov	r1, r4
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 fca1 	bl	8006550 <_sbrk_r>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	d103      	bne.n	8005c1a <sbrk_aligned+0x26>
 8005c12:	f04f 34ff 	mov.w	r4, #4294967295
 8005c16:	4620      	mov	r0, r4
 8005c18:	bd70      	pop	{r4, r5, r6, pc}
 8005c1a:	1cc4      	adds	r4, r0, #3
 8005c1c:	f024 0403 	bic.w	r4, r4, #3
 8005c20:	42a0      	cmp	r0, r4
 8005c22:	d0f8      	beq.n	8005c16 <sbrk_aligned+0x22>
 8005c24:	1a21      	subs	r1, r4, r0
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fc92 	bl	8006550 <_sbrk_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d1f2      	bne.n	8005c16 <sbrk_aligned+0x22>
 8005c30:	e7ef      	b.n	8005c12 <sbrk_aligned+0x1e>
 8005c32:	bf00      	nop
 8005c34:	20000494 	.word	0x20000494

08005c38 <_malloc_r>:
 8005c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c3c:	1ccd      	adds	r5, r1, #3
 8005c3e:	f025 0503 	bic.w	r5, r5, #3
 8005c42:	3508      	adds	r5, #8
 8005c44:	2d0c      	cmp	r5, #12
 8005c46:	bf38      	it	cc
 8005c48:	250c      	movcc	r5, #12
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	db01      	blt.n	8005c54 <_malloc_r+0x1c>
 8005c50:	42a9      	cmp	r1, r5
 8005c52:	d904      	bls.n	8005c5e <_malloc_r+0x26>
 8005c54:	230c      	movs	r3, #12
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d34 <_malloc_r+0xfc>
 8005c62:	f000 f869 	bl	8005d38 <__malloc_lock>
 8005c66:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6a:	461c      	mov	r4, r3
 8005c6c:	bb44      	cbnz	r4, 8005cc0 <_malloc_r+0x88>
 8005c6e:	4629      	mov	r1, r5
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff ffbf 	bl	8005bf4 <sbrk_aligned>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	4604      	mov	r4, r0
 8005c7a:	d158      	bne.n	8005d2e <_malloc_r+0xf6>
 8005c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c80:	4627      	mov	r7, r4
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d143      	bne.n	8005d0e <_malloc_r+0xd6>
 8005c86:	2c00      	cmp	r4, #0
 8005c88:	d04b      	beq.n	8005d22 <_malloc_r+0xea>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	4639      	mov	r1, r7
 8005c8e:	4630      	mov	r0, r6
 8005c90:	eb04 0903 	add.w	r9, r4, r3
 8005c94:	f000 fc5c 	bl	8006550 <_sbrk_r>
 8005c98:	4581      	cmp	r9, r0
 8005c9a:	d142      	bne.n	8005d22 <_malloc_r+0xea>
 8005c9c:	6821      	ldr	r1, [r4, #0]
 8005c9e:	1a6d      	subs	r5, r5, r1
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffa6 	bl	8005bf4 <sbrk_aligned>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d03a      	beq.n	8005d22 <_malloc_r+0xea>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	442b      	add	r3, r5
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	bb62      	cbnz	r2, 8005d14 <_malloc_r+0xdc>
 8005cba:	f8c8 7000 	str.w	r7, [r8]
 8005cbe:	e00f      	b.n	8005ce0 <_malloc_r+0xa8>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	1b52      	subs	r2, r2, r5
 8005cc4:	d420      	bmi.n	8005d08 <_malloc_r+0xd0>
 8005cc6:	2a0b      	cmp	r2, #11
 8005cc8:	d917      	bls.n	8005cfa <_malloc_r+0xc2>
 8005cca:	1961      	adds	r1, r4, r5
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	6025      	str	r5, [r4, #0]
 8005cd0:	bf18      	it	ne
 8005cd2:	6059      	strne	r1, [r3, #4]
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	bf08      	it	eq
 8005cd8:	f8c8 1000 	streq.w	r1, [r8]
 8005cdc:	5162      	str	r2, [r4, r5]
 8005cde:	604b      	str	r3, [r1, #4]
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f000 f82f 	bl	8005d44 <__malloc_unlock>
 8005ce6:	f104 000b 	add.w	r0, r4, #11
 8005cea:	1d23      	adds	r3, r4, #4
 8005cec:	f020 0007 	bic.w	r0, r0, #7
 8005cf0:	1ac2      	subs	r2, r0, r3
 8005cf2:	bf1c      	itt	ne
 8005cf4:	1a1b      	subne	r3, r3, r0
 8005cf6:	50a3      	strne	r3, [r4, r2]
 8005cf8:	e7af      	b.n	8005c5a <_malloc_r+0x22>
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	bf0c      	ite	eq
 8005d00:	f8c8 2000 	streq.w	r2, [r8]
 8005d04:	605a      	strne	r2, [r3, #4]
 8005d06:	e7eb      	b.n	8005ce0 <_malloc_r+0xa8>
 8005d08:	4623      	mov	r3, r4
 8005d0a:	6864      	ldr	r4, [r4, #4]
 8005d0c:	e7ae      	b.n	8005c6c <_malloc_r+0x34>
 8005d0e:	463c      	mov	r4, r7
 8005d10:	687f      	ldr	r7, [r7, #4]
 8005d12:	e7b6      	b.n	8005c82 <_malloc_r+0x4a>
 8005d14:	461a      	mov	r2, r3
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d1fb      	bne.n	8005d14 <_malloc_r+0xdc>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6053      	str	r3, [r2, #4]
 8005d20:	e7de      	b.n	8005ce0 <_malloc_r+0xa8>
 8005d22:	230c      	movs	r3, #12
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f80c 	bl	8005d44 <__malloc_unlock>
 8005d2c:	e794      	b.n	8005c58 <_malloc_r+0x20>
 8005d2e:	6005      	str	r5, [r0, #0]
 8005d30:	e7d6      	b.n	8005ce0 <_malloc_r+0xa8>
 8005d32:	bf00      	nop
 8005d34:	20000498 	.word	0x20000498

08005d38 <__malloc_lock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	@ (8005d40 <__malloc_lock+0x8>)
 8005d3a:	f7ff bf0e 	b.w	8005b5a <__retarget_lock_acquire_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20000490 	.word	0x20000490

08005d44 <__malloc_unlock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	@ (8005d4c <__malloc_unlock+0x8>)
 8005d46:	f7ff bf09 	b.w	8005b5c <__retarget_lock_release_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20000490 	.word	0x20000490

08005d50 <__sfputc_r>:
 8005d50:	6893      	ldr	r3, [r2, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	b410      	push	{r4}
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	da08      	bge.n	8005d6e <__sfputc_r+0x1e>
 8005d5c:	6994      	ldr	r4, [r2, #24]
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	db01      	blt.n	8005d66 <__sfputc_r+0x16>
 8005d62:	290a      	cmp	r1, #10
 8005d64:	d103      	bne.n	8005d6e <__sfputc_r+0x1e>
 8005d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6a:	f7ff bde8 	b.w	800593e <__swbuf_r>
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	1c58      	adds	r0, r3, #1
 8005d72:	6010      	str	r0, [r2, #0]
 8005d74:	7019      	strb	r1, [r3, #0]
 8005d76:	4608      	mov	r0, r1
 8005d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <__sfputs_r>:
 8005d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d80:	4606      	mov	r6, r0
 8005d82:	460f      	mov	r7, r1
 8005d84:	4614      	mov	r4, r2
 8005d86:	18d5      	adds	r5, r2, r3
 8005d88:	42ac      	cmp	r4, r5
 8005d8a:	d101      	bne.n	8005d90 <__sfputs_r+0x12>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e007      	b.n	8005da0 <__sfputs_r+0x22>
 8005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d94:	463a      	mov	r2, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ffda 	bl	8005d50 <__sfputc_r>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d1f3      	bne.n	8005d88 <__sfputs_r+0xa>
 8005da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005da4 <_vfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460d      	mov	r5, r1
 8005daa:	b09d      	sub	sp, #116	@ 0x74
 8005dac:	4614      	mov	r4, r2
 8005dae:	4698      	mov	r8, r3
 8005db0:	4606      	mov	r6, r0
 8005db2:	b118      	cbz	r0, 8005dbc <_vfiprintf_r+0x18>
 8005db4:	6a03      	ldr	r3, [r0, #32]
 8005db6:	b90b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x18>
 8005db8:	f7ff fcd8 	bl	800576c <__sinit>
 8005dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dbe:	07d9      	lsls	r1, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_vfiprintf_r+0x2a>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	059a      	lsls	r2, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_vfiprintf_r+0x2a>
 8005dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dca:	f7ff fec6 	bl	8005b5a <__retarget_lock_acquire_recursive>
 8005dce:	89ab      	ldrh	r3, [r5, #12]
 8005dd0:	071b      	lsls	r3, r3, #28
 8005dd2:	d501      	bpl.n	8005dd8 <_vfiprintf_r+0x34>
 8005dd4:	692b      	ldr	r3, [r5, #16]
 8005dd6:	b99b      	cbnz	r3, 8005e00 <_vfiprintf_r+0x5c>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff fdee 	bl	80059bc <__swsetup_r>
 8005de0:	b170      	cbz	r0, 8005e00 <_vfiprintf_r+0x5c>
 8005de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de4:	07dc      	lsls	r4, r3, #31
 8005de6:	d504      	bpl.n	8005df2 <_vfiprintf_r+0x4e>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b01d      	add	sp, #116	@ 0x74
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	0598      	lsls	r0, r3, #22
 8005df6:	d4f7      	bmi.n	8005de8 <_vfiprintf_r+0x44>
 8005df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dfa:	f7ff feaf 	bl	8005b5c <__retarget_lock_release_recursive>
 8005dfe:	e7f3      	b.n	8005de8 <_vfiprintf_r+0x44>
 8005e00:	2300      	movs	r3, #0
 8005e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e04:	2320      	movs	r3, #32
 8005e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e0e:	2330      	movs	r3, #48	@ 0x30
 8005e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fc0 <_vfiprintf_r+0x21c>
 8005e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e18:	f04f 0901 	mov.w	r9, #1
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	469a      	mov	sl, r3
 8005e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e24:	b10a      	cbz	r2, 8005e2a <_vfiprintf_r+0x86>
 8005e26:	2a25      	cmp	r2, #37	@ 0x25
 8005e28:	d1f9      	bne.n	8005e1e <_vfiprintf_r+0x7a>
 8005e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e2e:	d00b      	beq.n	8005e48 <_vfiprintf_r+0xa4>
 8005e30:	465b      	mov	r3, fp
 8005e32:	4622      	mov	r2, r4
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff ffa1 	bl	8005d7e <__sfputs_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f000 80a7 	beq.w	8005f90 <_vfiprintf_r+0x1ec>
 8005e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e44:	445a      	add	r2, fp
 8005e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e48:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 809f 	beq.w	8005f90 <_vfiprintf_r+0x1ec>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295
 8005e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5c:	f10a 0a01 	add.w	sl, sl, #1
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e6a:	4654      	mov	r4, sl
 8005e6c:	2205      	movs	r2, #5
 8005e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e72:	4853      	ldr	r0, [pc, #332]	@ (8005fc0 <_vfiprintf_r+0x21c>)
 8005e74:	f7fa f9d4 	bl	8000220 <memchr>
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	b9d8      	cbnz	r0, 8005eb4 <_vfiprintf_r+0x110>
 8005e7c:	06d1      	lsls	r1, r2, #27
 8005e7e:	bf44      	itt	mi
 8005e80:	2320      	movmi	r3, #32
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e86:	0713      	lsls	r3, r2, #28
 8005e88:	bf44      	itt	mi
 8005e8a:	232b      	movmi	r3, #43	@ 0x2b
 8005e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e90:	f89a 3000 	ldrb.w	r3, [sl]
 8005e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e96:	d015      	beq.n	8005ec4 <_vfiprintf_r+0x120>
 8005e98:	9a07      	ldr	r2, [sp, #28]
 8005e9a:	4654      	mov	r4, sl
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f04f 0c0a 	mov.w	ip, #10
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea8:	3b30      	subs	r3, #48	@ 0x30
 8005eaa:	2b09      	cmp	r3, #9
 8005eac:	d94b      	bls.n	8005f46 <_vfiprintf_r+0x1a2>
 8005eae:	b1b0      	cbz	r0, 8005ede <_vfiprintf_r+0x13a>
 8005eb0:	9207      	str	r2, [sp, #28]
 8005eb2:	e014      	b.n	8005ede <_vfiprintf_r+0x13a>
 8005eb4:	eba0 0308 	sub.w	r3, r0, r8
 8005eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	46a2      	mov	sl, r4
 8005ec2:	e7d2      	b.n	8005e6a <_vfiprintf_r+0xc6>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	1d19      	adds	r1, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	9103      	str	r1, [sp, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfbb      	ittet	lt
 8005ed0:	425b      	neglt	r3, r3
 8005ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ed6:	9307      	strge	r3, [sp, #28]
 8005ed8:	9307      	strlt	r3, [sp, #28]
 8005eda:	bfb8      	it	lt
 8005edc:	9204      	strlt	r2, [sp, #16]
 8005ede:	7823      	ldrb	r3, [r4, #0]
 8005ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee2:	d10a      	bne.n	8005efa <_vfiprintf_r+0x156>
 8005ee4:	7863      	ldrb	r3, [r4, #1]
 8005ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee8:	d132      	bne.n	8005f50 <_vfiprintf_r+0x1ac>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	9203      	str	r2, [sp, #12]
 8005ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ef6:	3402      	adds	r4, #2
 8005ef8:	9305      	str	r3, [sp, #20]
 8005efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fd0 <_vfiprintf_r+0x22c>
 8005efe:	7821      	ldrb	r1, [r4, #0]
 8005f00:	2203      	movs	r2, #3
 8005f02:	4650      	mov	r0, sl
 8005f04:	f7fa f98c 	bl	8000220 <memchr>
 8005f08:	b138      	cbz	r0, 8005f1a <_vfiprintf_r+0x176>
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	eba0 000a 	sub.w	r0, r0, sl
 8005f10:	2240      	movs	r2, #64	@ 0x40
 8005f12:	4082      	lsls	r2, r0
 8005f14:	4313      	orrs	r3, r2
 8005f16:	3401      	adds	r4, #1
 8005f18:	9304      	str	r3, [sp, #16]
 8005f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1e:	4829      	ldr	r0, [pc, #164]	@ (8005fc4 <_vfiprintf_r+0x220>)
 8005f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f24:	2206      	movs	r2, #6
 8005f26:	f7fa f97b 	bl	8000220 <memchr>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d03f      	beq.n	8005fae <_vfiprintf_r+0x20a>
 8005f2e:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <_vfiprintf_r+0x224>)
 8005f30:	bb1b      	cbnz	r3, 8005f7a <_vfiprintf_r+0x1d6>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	3307      	adds	r3, #7
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	9303      	str	r3, [sp, #12]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	443b      	add	r3, r7
 8005f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f44:	e76a      	b.n	8005e1c <_vfiprintf_r+0x78>
 8005f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	e7a8      	b.n	8005ea2 <_vfiprintf_r+0xfe>
 8005f50:	2300      	movs	r3, #0
 8005f52:	3401      	adds	r4, #1
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 0c0a 	mov.w	ip, #10
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f62:	3a30      	subs	r2, #48	@ 0x30
 8005f64:	2a09      	cmp	r2, #9
 8005f66:	d903      	bls.n	8005f70 <_vfiprintf_r+0x1cc>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0c6      	beq.n	8005efa <_vfiprintf_r+0x156>
 8005f6c:	9105      	str	r1, [sp, #20]
 8005f6e:	e7c4      	b.n	8005efa <_vfiprintf_r+0x156>
 8005f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f74:	4604      	mov	r4, r0
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7f0      	b.n	8005f5c <_vfiprintf_r+0x1b8>
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <_vfiprintf_r+0x228>)
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	4630      	mov	r0, r6
 8005f86:	f3af 8000 	nop.w
 8005f8a:	4607      	mov	r7, r0
 8005f8c:	1c78      	adds	r0, r7, #1
 8005f8e:	d1d6      	bne.n	8005f3e <_vfiprintf_r+0x19a>
 8005f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f92:	07d9      	lsls	r1, r3, #31
 8005f94:	d405      	bmi.n	8005fa2 <_vfiprintf_r+0x1fe>
 8005f96:	89ab      	ldrh	r3, [r5, #12]
 8005f98:	059a      	lsls	r2, r3, #22
 8005f9a:	d402      	bmi.n	8005fa2 <_vfiprintf_r+0x1fe>
 8005f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f9e:	f7ff fddd 	bl	8005b5c <__retarget_lock_release_recursive>
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	065b      	lsls	r3, r3, #25
 8005fa6:	f53f af1f 	bmi.w	8005de8 <_vfiprintf_r+0x44>
 8005faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fac:	e71e      	b.n	8005dec <_vfiprintf_r+0x48>
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <_vfiprintf_r+0x228>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f879 	bl	80060b0 <_printf_i>
 8005fbe:	e7e4      	b.n	8005f8a <_vfiprintf_r+0x1e6>
 8005fc0:	08006638 	.word	0x08006638
 8005fc4:	08006642 	.word	0x08006642
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	08005d7f 	.word	0x08005d7f
 8005fd0:	0800663e 	.word	0x0800663e

08005fd4 <_printf_common>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	4616      	mov	r6, r2
 8005fda:	4698      	mov	r8, r3
 8005fdc:	688a      	ldr	r2, [r1, #8]
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bfb8      	it	lt
 8005fe8:	4613      	movlt	r3, r2
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	b10a      	cbz	r2, 8005ffa <_printf_common+0x26>
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	0699      	lsls	r1, r3, #26
 8005ffe:	bf42      	ittt	mi
 8006000:	6833      	ldrmi	r3, [r6, #0]
 8006002:	3302      	addmi	r3, #2
 8006004:	6033      	strmi	r3, [r6, #0]
 8006006:	6825      	ldr	r5, [r4, #0]
 8006008:	f015 0506 	ands.w	r5, r5, #6
 800600c:	d106      	bne.n	800601c <_printf_common+0x48>
 800600e:	f104 0a19 	add.w	sl, r4, #25
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	6832      	ldr	r2, [r6, #0]
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	42ab      	cmp	r3, r5
 800601a:	dc26      	bgt.n	800606a <_printf_common+0x96>
 800601c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	3b00      	subs	r3, #0
 8006024:	bf18      	it	ne
 8006026:	2301      	movne	r3, #1
 8006028:	0692      	lsls	r2, r2, #26
 800602a:	d42b      	bmi.n	8006084 <_printf_common+0xb0>
 800602c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006030:	4641      	mov	r1, r8
 8006032:	4638      	mov	r0, r7
 8006034:	47c8      	blx	r9
 8006036:	3001      	adds	r0, #1
 8006038:	d01e      	beq.n	8006078 <_printf_common+0xa4>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	6922      	ldr	r2, [r4, #16]
 800603e:	f003 0306 	and.w	r3, r3, #6
 8006042:	2b04      	cmp	r3, #4
 8006044:	bf02      	ittt	eq
 8006046:	68e5      	ldreq	r5, [r4, #12]
 8006048:	6833      	ldreq	r3, [r6, #0]
 800604a:	1aed      	subeq	r5, r5, r3
 800604c:	68a3      	ldr	r3, [r4, #8]
 800604e:	bf0c      	ite	eq
 8006050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006054:	2500      	movne	r5, #0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfc4      	itt	gt
 800605a:	1a9b      	subgt	r3, r3, r2
 800605c:	18ed      	addgt	r5, r5, r3
 800605e:	2600      	movs	r6, #0
 8006060:	341a      	adds	r4, #26
 8006062:	42b5      	cmp	r5, r6
 8006064:	d11a      	bne.n	800609c <_printf_common+0xc8>
 8006066:	2000      	movs	r0, #0
 8006068:	e008      	b.n	800607c <_printf_common+0xa8>
 800606a:	2301      	movs	r3, #1
 800606c:	4652      	mov	r2, sl
 800606e:	4641      	mov	r1, r8
 8006070:	4638      	mov	r0, r7
 8006072:	47c8      	blx	r9
 8006074:	3001      	adds	r0, #1
 8006076:	d103      	bne.n	8006080 <_printf_common+0xac>
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006080:	3501      	adds	r5, #1
 8006082:	e7c6      	b.n	8006012 <_printf_common+0x3e>
 8006084:	18e1      	adds	r1, r4, r3
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	2030      	movs	r0, #48	@ 0x30
 800608a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608e:	4422      	add	r2, r4
 8006090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006098:	3302      	adds	r3, #2
 800609a:	e7c7      	b.n	800602c <_printf_common+0x58>
 800609c:	2301      	movs	r3, #1
 800609e:	4622      	mov	r2, r4
 80060a0:	4641      	mov	r1, r8
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c8      	blx	r9
 80060a6:	3001      	adds	r0, #1
 80060a8:	d0e6      	beq.n	8006078 <_printf_common+0xa4>
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7d9      	b.n	8006062 <_printf_common+0x8e>
	...

080060b0 <_printf_i>:
 80060b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	7e0f      	ldrb	r7, [r1, #24]
 80060b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b8:	2f78      	cmp	r7, #120	@ 0x78
 80060ba:	4691      	mov	r9, r2
 80060bc:	4680      	mov	r8, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	469a      	mov	sl, r3
 80060c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c6:	d807      	bhi.n	80060d8 <_printf_i+0x28>
 80060c8:	2f62      	cmp	r7, #98	@ 0x62
 80060ca:	d80a      	bhi.n	80060e2 <_printf_i+0x32>
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	f000 80d2 	beq.w	8006276 <_printf_i+0x1c6>
 80060d2:	2f58      	cmp	r7, #88	@ 0x58
 80060d4:	f000 80b9 	beq.w	800624a <_printf_i+0x19a>
 80060d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060e0:	e03a      	b.n	8006158 <_printf_i+0xa8>
 80060e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e6:	2b15      	cmp	r3, #21
 80060e8:	d8f6      	bhi.n	80060d8 <_printf_i+0x28>
 80060ea:	a101      	add	r1, pc, #4	@ (adr r1, 80060f0 <_printf_i+0x40>)
 80060ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f0:	08006149 	.word	0x08006149
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	080060d9 	.word	0x080060d9
 80060fc:	080060d9 	.word	0x080060d9
 8006100:	080060d9 	.word	0x080060d9
 8006104:	080060d9 	.word	0x080060d9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060d9 	.word	0x080060d9
 8006110:	080060d9 	.word	0x080060d9
 8006114:	080060d9 	.word	0x080060d9
 8006118:	080060d9 	.word	0x080060d9
 800611c:	0800625d 	.word	0x0800625d
 8006120:	08006187 	.word	0x08006187
 8006124:	08006217 	.word	0x08006217
 8006128:	080060d9 	.word	0x080060d9
 800612c:	080060d9 	.word	0x080060d9
 8006130:	0800627f 	.word	0x0800627f
 8006134:	080060d9 	.word	0x080060d9
 8006138:	08006187 	.word	0x08006187
 800613c:	080060d9 	.word	0x080060d9
 8006140:	080060d9 	.word	0x080060d9
 8006144:	0800621f 	.word	0x0800621f
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6032      	str	r2, [r6, #0]
 8006150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006158:	2301      	movs	r3, #1
 800615a:	e09d      	b.n	8006298 <_printf_i+0x1e8>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	6820      	ldr	r0, [r4, #0]
 8006160:	1d19      	adds	r1, r3, #4
 8006162:	6031      	str	r1, [r6, #0]
 8006164:	0606      	lsls	r6, r0, #24
 8006166:	d501      	bpl.n	800616c <_printf_i+0xbc>
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	e003      	b.n	8006174 <_printf_i+0xc4>
 800616c:	0645      	lsls	r5, r0, #25
 800616e:	d5fb      	bpl.n	8006168 <_printf_i+0xb8>
 8006170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006174:	2d00      	cmp	r5, #0
 8006176:	da03      	bge.n	8006180 <_printf_i+0xd0>
 8006178:	232d      	movs	r3, #45	@ 0x2d
 800617a:	426d      	negs	r5, r5
 800617c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006180:	4859      	ldr	r0, [pc, #356]	@ (80062e8 <_printf_i+0x238>)
 8006182:	230a      	movs	r3, #10
 8006184:	e011      	b.n	80061aa <_printf_i+0xfa>
 8006186:	6821      	ldr	r1, [r4, #0]
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	0608      	lsls	r0, r1, #24
 800618c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006190:	d402      	bmi.n	8006198 <_printf_i+0xe8>
 8006192:	0649      	lsls	r1, r1, #25
 8006194:	bf48      	it	mi
 8006196:	b2ad      	uxthmi	r5, r5
 8006198:	2f6f      	cmp	r7, #111	@ 0x6f
 800619a:	4853      	ldr	r0, [pc, #332]	@ (80062e8 <_printf_i+0x238>)
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	bf14      	ite	ne
 80061a0:	230a      	movne	r3, #10
 80061a2:	2308      	moveq	r3, #8
 80061a4:	2100      	movs	r1, #0
 80061a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061aa:	6866      	ldr	r6, [r4, #4]
 80061ac:	60a6      	str	r6, [r4, #8]
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	bfa2      	ittt	ge
 80061b2:	6821      	ldrge	r1, [r4, #0]
 80061b4:	f021 0104 	bicge.w	r1, r1, #4
 80061b8:	6021      	strge	r1, [r4, #0]
 80061ba:	b90d      	cbnz	r5, 80061c0 <_printf_i+0x110>
 80061bc:	2e00      	cmp	r6, #0
 80061be:	d04b      	beq.n	8006258 <_printf_i+0x1a8>
 80061c0:	4616      	mov	r6, r2
 80061c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ca:	5dc7      	ldrb	r7, [r0, r7]
 80061cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d0:	462f      	mov	r7, r5
 80061d2:	42bb      	cmp	r3, r7
 80061d4:	460d      	mov	r5, r1
 80061d6:	d9f4      	bls.n	80061c2 <_printf_i+0x112>
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d10b      	bne.n	80061f4 <_printf_i+0x144>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	07df      	lsls	r7, r3, #31
 80061e0:	d508      	bpl.n	80061f4 <_printf_i+0x144>
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	6861      	ldr	r1, [r4, #4]
 80061e6:	4299      	cmp	r1, r3
 80061e8:	bfde      	ittt	le
 80061ea:	2330      	movle	r3, #48	@ 0x30
 80061ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061f4:	1b92      	subs	r2, r2, r6
 80061f6:	6122      	str	r2, [r4, #16]
 80061f8:	f8cd a000 	str.w	sl, [sp]
 80061fc:	464b      	mov	r3, r9
 80061fe:	aa03      	add	r2, sp, #12
 8006200:	4621      	mov	r1, r4
 8006202:	4640      	mov	r0, r8
 8006204:	f7ff fee6 	bl	8005fd4 <_printf_common>
 8006208:	3001      	adds	r0, #1
 800620a:	d14a      	bne.n	80062a2 <_printf_i+0x1f2>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	b004      	add	sp, #16
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f043 0320 	orr.w	r3, r3, #32
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	4833      	ldr	r0, [pc, #204]	@ (80062ec <_printf_i+0x23c>)
 8006220:	2778      	movs	r7, #120	@ 0x78
 8006222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6831      	ldr	r1, [r6, #0]
 800622a:	061f      	lsls	r7, r3, #24
 800622c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006230:	d402      	bmi.n	8006238 <_printf_i+0x188>
 8006232:	065f      	lsls	r7, r3, #25
 8006234:	bf48      	it	mi
 8006236:	b2ad      	uxthmi	r5, r5
 8006238:	6031      	str	r1, [r6, #0]
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	bf44      	itt	mi
 800623e:	f043 0320 	orrmi.w	r3, r3, #32
 8006242:	6023      	strmi	r3, [r4, #0]
 8006244:	b11d      	cbz	r5, 800624e <_printf_i+0x19e>
 8006246:	2310      	movs	r3, #16
 8006248:	e7ac      	b.n	80061a4 <_printf_i+0xf4>
 800624a:	4827      	ldr	r0, [pc, #156]	@ (80062e8 <_printf_i+0x238>)
 800624c:	e7e9      	b.n	8006222 <_printf_i+0x172>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	f023 0320 	bic.w	r3, r3, #32
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	e7f6      	b.n	8006246 <_printf_i+0x196>
 8006258:	4616      	mov	r6, r2
 800625a:	e7bd      	b.n	80061d8 <_printf_i+0x128>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	6961      	ldr	r1, [r4, #20]
 8006262:	1d18      	adds	r0, r3, #4
 8006264:	6030      	str	r0, [r6, #0]
 8006266:	062e      	lsls	r6, r5, #24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	d501      	bpl.n	8006270 <_printf_i+0x1c0>
 800626c:	6019      	str	r1, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0x1c6>
 8006270:	0668      	lsls	r0, r5, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0x1bc>
 8006274:	8019      	strh	r1, [r3, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	4616      	mov	r6, r2
 800627c:	e7bc      	b.n	80061f8 <_printf_i+0x148>
 800627e:	6833      	ldr	r3, [r6, #0]
 8006280:	1d1a      	adds	r2, r3, #4
 8006282:	6032      	str	r2, [r6, #0]
 8006284:	681e      	ldr	r6, [r3, #0]
 8006286:	6862      	ldr	r2, [r4, #4]
 8006288:	2100      	movs	r1, #0
 800628a:	4630      	mov	r0, r6
 800628c:	f7f9 ffc8 	bl	8000220 <memchr>
 8006290:	b108      	cbz	r0, 8006296 <_printf_i+0x1e6>
 8006292:	1b80      	subs	r0, r0, r6
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	2300      	movs	r3, #0
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a0:	e7aa      	b.n	80061f8 <_printf_i+0x148>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d0ad      	beq.n	800620c <_printf_i+0x15c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	079b      	lsls	r3, r3, #30
 80062b4:	d413      	bmi.n	80062de <_printf_i+0x22e>
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	4298      	cmp	r0, r3
 80062bc:	bfb8      	it	lt
 80062be:	4618      	movlt	r0, r3
 80062c0:	e7a6      	b.n	8006210 <_printf_i+0x160>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d09d      	beq.n	800620c <_printf_i+0x15c>
 80062d0:	3501      	adds	r5, #1
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	9903      	ldr	r1, [sp, #12]
 80062d6:	1a5b      	subs	r3, r3, r1
 80062d8:	42ab      	cmp	r3, r5
 80062da:	dcf2      	bgt.n	80062c2 <_printf_i+0x212>
 80062dc:	e7eb      	b.n	80062b6 <_printf_i+0x206>
 80062de:	2500      	movs	r5, #0
 80062e0:	f104 0619 	add.w	r6, r4, #25
 80062e4:	e7f5      	b.n	80062d2 <_printf_i+0x222>
 80062e6:	bf00      	nop
 80062e8:	08006649 	.word	0x08006649
 80062ec:	0800665a 	.word	0x0800665a

080062f0 <__sflush_r>:
 80062f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	0716      	lsls	r6, r2, #28
 80062fa:	4605      	mov	r5, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	d454      	bmi.n	80063aa <__sflush_r+0xba>
 8006300:	684b      	ldr	r3, [r1, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dc02      	bgt.n	800630c <__sflush_r+0x1c>
 8006306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	dd48      	ble.n	800639e <__sflush_r+0xae>
 800630c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800630e:	2e00      	cmp	r6, #0
 8006310:	d045      	beq.n	800639e <__sflush_r+0xae>
 8006312:	2300      	movs	r3, #0
 8006314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006318:	682f      	ldr	r7, [r5, #0]
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	d030      	beq.n	8006382 <__sflush_r+0x92>
 8006320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	0759      	lsls	r1, r3, #29
 8006326:	d505      	bpl.n	8006334 <__sflush_r+0x44>
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800632e:	b10b      	cbz	r3, 8006334 <__sflush_r+0x44>
 8006330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006338:	6a21      	ldr	r1, [r4, #32]
 800633a:	4628      	mov	r0, r5
 800633c:	47b0      	blx	r6
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	d106      	bne.n	8006352 <__sflush_r+0x62>
 8006344:	6829      	ldr	r1, [r5, #0]
 8006346:	291d      	cmp	r1, #29
 8006348:	d82b      	bhi.n	80063a2 <__sflush_r+0xb2>
 800634a:	4a2a      	ldr	r2, [pc, #168]	@ (80063f4 <__sflush_r+0x104>)
 800634c:	410a      	asrs	r2, r1
 800634e:	07d6      	lsls	r6, r2, #31
 8006350:	d427      	bmi.n	80063a2 <__sflush_r+0xb2>
 8006352:	2200      	movs	r2, #0
 8006354:	6062      	str	r2, [r4, #4]
 8006356:	04d9      	lsls	r1, r3, #19
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	d504      	bpl.n	8006368 <__sflush_r+0x78>
 800635e:	1c42      	adds	r2, r0, #1
 8006360:	d101      	bne.n	8006366 <__sflush_r+0x76>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	b903      	cbnz	r3, 8006368 <__sflush_r+0x78>
 8006366:	6560      	str	r0, [r4, #84]	@ 0x54
 8006368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800636a:	602f      	str	r7, [r5, #0]
 800636c:	b1b9      	cbz	r1, 800639e <__sflush_r+0xae>
 800636e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006372:	4299      	cmp	r1, r3
 8006374:	d002      	beq.n	800637c <__sflush_r+0x8c>
 8006376:	4628      	mov	r0, r5
 8006378:	f7ff fbf2 	bl	8005b60 <_free_r>
 800637c:	2300      	movs	r3, #0
 800637e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006380:	e00d      	b.n	800639e <__sflush_r+0xae>
 8006382:	2301      	movs	r3, #1
 8006384:	4628      	mov	r0, r5
 8006386:	47b0      	blx	r6
 8006388:	4602      	mov	r2, r0
 800638a:	1c50      	adds	r0, r2, #1
 800638c:	d1c9      	bne.n	8006322 <__sflush_r+0x32>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0c6      	beq.n	8006322 <__sflush_r+0x32>
 8006394:	2b1d      	cmp	r3, #29
 8006396:	d001      	beq.n	800639c <__sflush_r+0xac>
 8006398:	2b16      	cmp	r3, #22
 800639a:	d11e      	bne.n	80063da <__sflush_r+0xea>
 800639c:	602f      	str	r7, [r5, #0]
 800639e:	2000      	movs	r0, #0
 80063a0:	e022      	b.n	80063e8 <__sflush_r+0xf8>
 80063a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	e01b      	b.n	80063e2 <__sflush_r+0xf2>
 80063aa:	690f      	ldr	r7, [r1, #16]
 80063ac:	2f00      	cmp	r7, #0
 80063ae:	d0f6      	beq.n	800639e <__sflush_r+0xae>
 80063b0:	0793      	lsls	r3, r2, #30
 80063b2:	680e      	ldr	r6, [r1, #0]
 80063b4:	bf08      	it	eq
 80063b6:	694b      	ldreq	r3, [r1, #20]
 80063b8:	600f      	str	r7, [r1, #0]
 80063ba:	bf18      	it	ne
 80063bc:	2300      	movne	r3, #0
 80063be:	eba6 0807 	sub.w	r8, r6, r7
 80063c2:	608b      	str	r3, [r1, #8]
 80063c4:	f1b8 0f00 	cmp.w	r8, #0
 80063c8:	dde9      	ble.n	800639e <__sflush_r+0xae>
 80063ca:	6a21      	ldr	r1, [r4, #32]
 80063cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063ce:	4643      	mov	r3, r8
 80063d0:	463a      	mov	r2, r7
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b0      	blx	r6
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dc08      	bgt.n	80063ec <__sflush_r+0xfc>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ec:	4407      	add	r7, r0
 80063ee:	eba8 0800 	sub.w	r8, r8, r0
 80063f2:	e7e7      	b.n	80063c4 <__sflush_r+0xd4>
 80063f4:	dfbffffe 	.word	0xdfbffffe

080063f8 <_fflush_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	4605      	mov	r5, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b913      	cbnz	r3, 8006408 <_fflush_r+0x10>
 8006402:	2500      	movs	r5, #0
 8006404:	4628      	mov	r0, r5
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	b118      	cbz	r0, 8006412 <_fflush_r+0x1a>
 800640a:	6a03      	ldr	r3, [r0, #32]
 800640c:	b90b      	cbnz	r3, 8006412 <_fflush_r+0x1a>
 800640e:	f7ff f9ad 	bl	800576c <__sinit>
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f3      	beq.n	8006402 <_fflush_r+0xa>
 800641a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800641c:	07d0      	lsls	r0, r2, #31
 800641e:	d404      	bmi.n	800642a <_fflush_r+0x32>
 8006420:	0599      	lsls	r1, r3, #22
 8006422:	d402      	bmi.n	800642a <_fflush_r+0x32>
 8006424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006426:	f7ff fb98 	bl	8005b5a <__retarget_lock_acquire_recursive>
 800642a:	4628      	mov	r0, r5
 800642c:	4621      	mov	r1, r4
 800642e:	f7ff ff5f 	bl	80062f0 <__sflush_r>
 8006432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006434:	07da      	lsls	r2, r3, #31
 8006436:	4605      	mov	r5, r0
 8006438:	d4e4      	bmi.n	8006404 <_fflush_r+0xc>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	059b      	lsls	r3, r3, #22
 800643e:	d4e1      	bmi.n	8006404 <_fflush_r+0xc>
 8006440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006442:	f7ff fb8b 	bl	8005b5c <__retarget_lock_release_recursive>
 8006446:	e7dd      	b.n	8006404 <_fflush_r+0xc>

08006448 <__swhatbuf_r>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	2900      	cmp	r1, #0
 8006452:	b096      	sub	sp, #88	@ 0x58
 8006454:	4615      	mov	r5, r2
 8006456:	461e      	mov	r6, r3
 8006458:	da0d      	bge.n	8006476 <__swhatbuf_r+0x2e>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	bf14      	ite	ne
 8006466:	2340      	movne	r3, #64	@ 0x40
 8006468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800646c:	2000      	movs	r0, #0
 800646e:	6031      	str	r1, [r6, #0]
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	b016      	add	sp, #88	@ 0x58
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	466a      	mov	r2, sp
 8006478:	f000 f848 	bl	800650c <_fstat_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	dbec      	blt.n	800645a <__swhatbuf_r+0x12>
 8006480:	9901      	ldr	r1, [sp, #4]
 8006482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800648a:	4259      	negs	r1, r3
 800648c:	4159      	adcs	r1, r3
 800648e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006492:	e7eb      	b.n	800646c <__swhatbuf_r+0x24>

08006494 <__smakebuf_r>:
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006498:	079d      	lsls	r5, r3, #30
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	d507      	bpl.n	80064b0 <__smakebuf_r+0x1c>
 80064a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	2301      	movs	r3, #1
 80064aa:	6163      	str	r3, [r4, #20]
 80064ac:	b003      	add	sp, #12
 80064ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b0:	ab01      	add	r3, sp, #4
 80064b2:	466a      	mov	r2, sp
 80064b4:	f7ff ffc8 	bl	8006448 <__swhatbuf_r>
 80064b8:	9f00      	ldr	r7, [sp, #0]
 80064ba:	4605      	mov	r5, r0
 80064bc:	4639      	mov	r1, r7
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff fbba 	bl	8005c38 <_malloc_r>
 80064c4:	b948      	cbnz	r0, 80064da <__smakebuf_r+0x46>
 80064c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ca:	059a      	lsls	r2, r3, #22
 80064cc:	d4ee      	bmi.n	80064ac <__smakebuf_r+0x18>
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	f043 0302 	orr.w	r3, r3, #2
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	e7e2      	b.n	80064a0 <__smakebuf_r+0xc>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	6020      	str	r0, [r4, #0]
 80064de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064ea:	b15b      	cbz	r3, 8006504 <__smakebuf_r+0x70>
 80064ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f81d 	bl	8006530 <_isatty_r>
 80064f6:	b128      	cbz	r0, 8006504 <__smakebuf_r+0x70>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	431d      	orrs	r5, r3
 8006508:	81a5      	strh	r5, [r4, #12]
 800650a:	e7cf      	b.n	80064ac <__smakebuf_r+0x18>

0800650c <_fstat_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	@ (800652c <_fstat_r+0x20>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	f7fa fbd1 	bl	8000cc0 <_fstat>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d102      	bne.n	8006528 <_fstat_r+0x1c>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b103      	cbz	r3, 8006528 <_fstat_r+0x1c>
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	2000048c 	.word	0x2000048c

08006530 <_isatty_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	@ (800654c <_isatty_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fa fbd0 	bl	8000ce0 <_isatty>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_isatty_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_isatty_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	2000048c 	.word	0x2000048c

08006550 <_sbrk_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d06      	ldr	r5, [pc, #24]	@ (800656c <_sbrk_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fa fbd8 	bl	8000d10 <_sbrk>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_sbrk_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_sbrk_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	2000048c 	.word	0x2000048c

08006570 <_init>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr

0800657c <_fini>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr
