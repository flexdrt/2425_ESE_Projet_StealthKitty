
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00005590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800459c  0800459c  0000559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  080045ac  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080045ac  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d72  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e76  00000000  00000000  0001cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0001fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a0  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f03b  00000000  00000000  000221f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1db  00000000  00000000  00041233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76e3  00000000  00000000  0005c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123af1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a10  00000000  00000000  00123b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00129544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004538 	.word	0x08004538

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004538 	.word	0x08004538

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a43      	ldr	r2, [pc, #268]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b41      	ldr	r3, [pc, #260]	@ (8000630 <MX_GPIO_Init+0x128>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b3e      	ldr	r3, [pc, #248]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a3d      	ldr	r2, [pc, #244]	@ (8000630 <MX_GPIO_Init+0x128>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b3b      	ldr	r3, [pc, #236]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b38      	ldr	r3, [pc, #224]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a37      	ldr	r2, [pc, #220]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <MX_GPIO_Init+0x128>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <MX_GPIO_Init+0x128>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f242 0110 	movw	r1, #8208	@ 0x2010
 8000584:	482b      	ldr	r0, [pc, #172]	@ (8000634 <MX_GPIO_Init+0x12c>)
 8000586:	f001 f8f5 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nCS_Pin|Status_purple_Pin|Status_orange_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000590:	4829      	ldr	r0, [pc, #164]	@ (8000638 <MX_GPIO_Init+0x130>)
 8000592:	f001 f8ef 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 8000596:	f242 0310 	movw	r3, #8208	@ 0x2010
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4821      	ldr	r0, [pc, #132]	@ (8000634 <MX_GPIO_Init+0x12c>)
 80005b0:	f000 ff5e 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Bouton_1_Pin|INT_TOF2_Pin;
 80005b4:	f241 0301 	movw	r3, #4097	@ 0x1001
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f000 ff4f 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = nCS_Pin|Status_purple_Pin|Status_orange_Pin;
 80005d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4813      	ldr	r0, [pc, #76]	@ (8000638 <MX_GPIO_Init+0x130>)
 80005ec:	f000 ff40 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_ADX_Pin;
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT2_ADX_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <MX_GPIO_Init+0x12c>)
 8000606:	f000 ff33 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_ADX_Pin|INT_TOF1_Pin;
 800060a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000610:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_GPIO_Init+0x130>)
 8000622:	f000 ff25 	bl	8001470 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f001 f894 	bl	80017a4 <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f8eb 	bl	800085c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f001 f926 	bl	80018da <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f8e2 	bl	800085c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f001 f968 	bl	8001970 <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8d9 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00503d58 	.word	0x00503d58

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	@ 0x70
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	2244      	movs	r2, #68	@ 0x44
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 feff 	bl	80044e0 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a2e      	ldr	r2, [pc, #184]	@ (80007a0 <HAL_I2C_MspInit+0xe4>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d154      	bne.n	8000796 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 ff67 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000704:	f000 f8aa 	bl	800085c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 8000716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 8000722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000724:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800073c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073e:	2312      	movs	r3, #18
 8000740:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074a:	2304      	movs	r3, #4
 800074c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f000 fe8a 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800075c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000760:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076e:	2304      	movs	r3, #4
 8000770:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_I2C_MspInit+0xec>)
 800077a:	f000 fe79 	bl	8001470 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000788:	6593      	str	r3, [r2, #88]	@ 0x58
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_I2C_MspInit+0xe8>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	@ 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fd09 	bl	80011c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f812 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f7ff fea6 	bl	8000508 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007bc:	f000 f93a 	bl	8000a34 <MX_TIM1_Init>
  MX_I2C1_Init();
 80007c0:	f7ff ff3c 	bl	800063c <MX_I2C1_Init>
  MX_SPI1_Init();
 80007c4:	f000 f850 	bl	8000868 <MX_SPI1_Init>
  MX_UART4_Init();
 80007c8:	f000 fba4 	bl	8000f14 <MX_UART4_Init>
  MX_TIM4_Init();
 80007cc:	f000 fa34 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM3_Init();
 80007d0:	f000 f9dc 	bl	8000b8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007d4:	f000 fbea 	bl	8000fac <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <main+0x2c>

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2238      	movs	r2, #56	@ 0x38
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fe78 	bl	80044e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000802:	f001 f901 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	@ 0x40
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f9a7 	bl	8001b70 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000828:	f000 f818 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2301      	movs	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fca5 	bl	8002194 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000850:	f000 f804 	bl	800085c <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	@ 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_SPI1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	@ (80008e0 <MX_SPI1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_SPI1_Init+0x74>)
 8000874:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SPI1_Init+0x74>)
 8000882:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000886:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_SPI1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_SPI1_Init+0x74>)
 8000896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_SPI1_Init+0x74>)
 80008c8:	f002 f870 	bl	80029ac <HAL_SPI_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f7ff ffc3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000007c 	.word	0x2000007c
 80008e0:	40013000 	.word	0x40013000

080008e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_SPI_MspInit+0x7c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d128      	bne.n	8000958 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	4a16      	ldr	r2, [pc, #88]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 800090c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000910:	6613      	str	r3, [r2, #96]	@ 0x60
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_SPI_MspInit+0x80>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23e0      	movs	r3, #224	@ 0xe0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000946:	2305      	movs	r3, #5
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f000 fd8c 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40013000 	.word	0x40013000
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	@ 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	@ 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800099e:	f001 f8d7 	bl	8001b50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 fc31 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	@ 0x60
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2234      	movs	r2, #52	@ 0x34
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fd3d 	bl	80044e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a66:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a68:	4a47      	ldr	r2, [pc, #284]	@ (8000b88 <MX_TIM1_Init+0x154>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6c:	4b45      	ldr	r3, [pc, #276]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a78:	4b42      	ldr	r3, [pc, #264]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a86:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a92:	483c      	ldr	r0, [pc, #240]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000a94:	f002 f835 	bl	8002b02 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f7ff fedd 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4833      	ldr	r0, [pc, #204]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000ab6:	f002 fdc7 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ac0:	f7ff fecc 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	@ 0x60
 8000ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000aea:	f002 f907 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000af4:	f7ff feb2 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afc:	2208      	movs	r2, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b02:	f002 f8fb 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b0c:	f7ff fea6 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b14:	220c      	movs	r2, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b1a:	f002 f8ef 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b24:	f7ff fe9a 	bl	800085c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b66:	f002 fdf1 	bl	800374c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b70:	f7ff fe74 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <MX_TIM1_Init+0x150>)
 8000b76:	f000 f965 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 8000b7a:	bf00      	nop
 8000b7c:	3760      	adds	r7, #96	@ 0x60
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000e0 	.word	0x200000e0
 8000b88:	40012c00 	.word	0x40012c00

08000b8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	@ 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	@ 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 fca0 	bl	80044e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f001 ffd8 	bl	8002bb0 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f7ff fe29 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f002 fd16 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f7ff fe1b 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	@ 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000012c 	.word	0x2000012c
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	@ 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fc4a 	bl	80044e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f001 ff82 	bl	8002bb0 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f7ff fdd3 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f002 fcc0 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f7ff fdc5 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000178 	.word	0x20000178
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x38>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10b      	bne.n	8000d0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40012c00 	.word	0x40012c00
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a3c      	ldr	r2, [pc, #240]	@ (8000e34 <HAL_TIM_Encoder_MspInit+0x110>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d145      	bne.n	8000dd2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d46:	4b3c      	ldr	r3, [pc, #240]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d52:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a35      	ldr	r2, [pc, #212]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b30      	ldr	r3, [pc, #192]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Codeur1_PH2_Pin;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Codeur1_PH2_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f000 fb60 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Codeur1_PH1_Pin;
 8000db0:	2310      	movs	r3, #16
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Codeur1_PH1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <HAL_TIM_Encoder_MspInit+0x118>)
 8000dcc:	f000 fb50 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dd0:	e02c      	b.n	8000e2c <HAL_TIM_Encoder_MspInit+0x108>
  else if(tim_encoderHandle->Instance==TIM4)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e40 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d127      	bne.n	8000e2c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <HAL_TIM_Encoder_MspInit+0x114>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Codeur2_PH1_Pin|Codeur2_PH2_Pin;
 8000e0c:	23c0      	movs	r3, #192	@ 0xc0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <HAL_TIM_Encoder_MspInit+0x118>)
 8000e28:	f000 fb22 	bl	8001470 <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	@ 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40000400 	.word	0x40000400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	40000800 	.word	0x40000800

08000e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a29      	ldr	r2, [pc, #164]	@ (8000f08 <HAL_TIM_MspPostInit+0xc4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d14b      	bne.n	8000efe <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a28      	ldr	r2, [pc, #160]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <HAL_TIM_MspPostInit+0xc8>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOT1_CH2_Pin|PWM_MOT2_CH2_Pin;
 8000e96:	2303      	movs	r3, #3
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4817      	ldr	r0, [pc, #92]	@ (8000f10 <HAL_TIM_MspPostInit+0xcc>)
 8000eb2:	f000 fadd 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_MOT1_CH1_Pin|PWM_MOT2_CH1_Pin;
 8000eb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed6:	f000 facb 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000eec:	230b      	movs	r3, #11
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f000 fab9 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <MX_UART4_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f5e:	f002 fc81 	bl	8003864 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f68:	f7ff fc78 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f70:	f003 f9ec 	bl	800434c <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f7ff fc6f 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f82:	f003 fa21 	bl	80043c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f7ff fc66 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_UART4_Init+0x90>)
 8000f92:	f003 f9a2 	bl	80042da <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fc5e 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001c4 	.word	0x200001c4
 8000fa8:	40004c00 	.word	0x40004c00

08000fac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <MX_USART2_UART_Init+0x94>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8000ff6:	f002 fc35 	bl	8003864 <HAL_UART_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001000:	f7ff fc2c 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_USART2_UART_Init+0x90>)
 8001008:	f003 f9a0 	bl	800434c <HAL_UARTEx_SetTxFifoThreshold>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001012:	f7ff fc23 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <MX_USART2_UART_Init+0x90>)
 800101a:	f003 f9d5 	bl	80043c8 <HAL_UARTEx_SetRxFifoThreshold>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001024:	f7ff fc1a 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_USART2_UART_Init+0x90>)
 800102a:	f003 f956 	bl	80042da <HAL_UARTEx_DisableFifoMode>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001034:	f7ff fc12 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000258 	.word	0x20000258
 8001040:	40004400 	.word	0x40004400

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09c      	sub	sp, #112	@ 0x70
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	2244      	movs	r2, #68	@ 0x44
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fa3b 	bl	80044e0 <memset>
  if(uartHandle->Instance==UART4)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a3d      	ldr	r2, [pc, #244]	@ (8001164 <HAL_UART_MspInit+0x120>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d137      	bne.n	80010e4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001074:	2308      	movs	r3, #8
 8001076:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4618      	mov	r0, r3
 8001082:	f001 faa3 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800108c:	f7ff fbe6 	bl	800085c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001090:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001096:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800109a:	6593      	str	r3, [r2, #88]	@ 0x58
 800109c:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <HAL_UART_MspInit+0x124>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <HAL_UART_MspInit+0x124>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001168 <HAL_UART_MspInit+0x124>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <HAL_UART_MspInit+0x124>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80010d2:	2305      	movs	r3, #5
 80010d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010da:	4619      	mov	r1, r3
 80010dc:	4823      	ldr	r0, [pc, #140]	@ (800116c <HAL_UART_MspInit+0x128>)
 80010de:	f000 f9c7 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010e2:	e03b      	b.n	800115c <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <HAL_UART_MspInit+0x12c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d136      	bne.n	800115c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fa66 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001106:	f7ff fba9 	bl	800085c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_UART_MspInit+0x124>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	6593      	str	r3, [r2, #88]	@ 0x58
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_UART_MspInit+0x124>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_link_Pin|RX_link_Pin;
 800113a:	230c      	movs	r3, #12
 800113c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114a:	2307      	movs	r3, #7
 800114c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f000 f98a 	bl	8001470 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3770      	adds	r7, #112	@ 0x70
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40004c00 	.word	0x40004c00
 8001168:	40021000 	.word	0x40021000
 800116c:	48000800 	.word	0x48000800
 8001170:	40004400 	.word	0x40004400

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001176:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff fc4a 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	@ (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f003 f9a5 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff fb01 	bl	80007ac <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   r0, =_estack
 80011ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	200002f0 	.word	0x200002f0

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>

080011c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f91b 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f80e 	bl	80011f8 <HAL_InitTick>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	e001      	b.n	80011ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e8:	f7ff fbbe 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ec:	79fb      	ldrb	r3, [r7, #7]

}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_InitTick+0x68>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d022      	beq.n	8001252 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_InitTick+0x6c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_InitTick+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001218:	fbb1 f3f3 	udiv	r3, r1, r3
 800121c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f918 	bl	8001456 <HAL_SYSTICK_Config>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d809      	bhi.n	8001246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001232:	2200      	movs	r2, #0
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	f04f 30ff 	mov.w	r0, #4294967295
 800123a:	f000 f8f2 	bl	8001422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_InitTick+0x70>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e007      	b.n	8001256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e004      	b.n	8001256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000008 	.word	0x20000008
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_IncTick+0x1c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_IncTick+0x20>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a03      	ldr	r2, [pc, #12]	@ (8001288 <HAL_IncTick+0x1c>)
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200002ec 	.word	0x200002ec
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200002ec 	.word	0x200002ec

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff47 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff5e 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff90 	bl	8001360 <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5f 	bl	800130c <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffb2 	bl	80013c8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800147e:	e15a      	b.n	8001736 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 814c 	beq.w	8001730 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 0201 	and.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d017      	beq.n	800154e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a6 	beq.w	8001730 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001754 <HAL_GPIO_Init+0x2e4>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001754 <HAL_GPIO_Init+0x2e4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f0:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <HAL_GPIO_Init+0x2e4>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fc:	4a56      	ldr	r2, [pc, #344]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001626:	d01f      	beq.n	8001668 <HAL_GPIO_Init+0x1f8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4c      	ldr	r2, [pc, #304]	@ (800175c <HAL_GPIO_Init+0x2ec>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d019      	beq.n	8001664 <HAL_GPIO_Init+0x1f4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4b      	ldr	r2, [pc, #300]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_GPIO_Init+0x1f0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4a      	ldr	r2, [pc, #296]	@ (8001764 <HAL_GPIO_Init+0x2f4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a49      	ldr	r2, [pc, #292]	@ (8001768 <HAL_GPIO_Init+0x2f8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a48      	ldr	r2, [pc, #288]	@ (800176c <HAL_GPIO_Init+0x2fc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001650:	2305      	movs	r3, #5
 8001652:	e00a      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 8001654:	2306      	movs	r3, #6
 8001656:	e008      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 8001658:	2304      	movs	r3, #4
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 800165c:	2303      	movs	r3, #3
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x1fa>
 8001668:	2300      	movs	r3, #0
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167a:	4937      	ldr	r1, [pc, #220]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001688:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <HAL_GPIO_Init+0x300>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ac:	4a30      	ldr	r2, [pc, #192]	@ (8001770 <HAL_GPIO_Init+0x300>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_GPIO_Init+0x300>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d6:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_GPIO_Init+0x300>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_GPIO_Init+0x300>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <HAL_GPIO_Init+0x300>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_GPIO_Init+0x300>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <HAL_GPIO_Init+0x300>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f ae9d 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000
 800176c:	48001400 	.word	0x48001400
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e08d      	b.n	80018d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe ff76 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2224      	movs	r2, #36	@ 0x24
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	e006      	b.n	800182c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800182a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d108      	bne.n	8001846 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	e007      	b.n	8001856 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001868:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001878:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69d9      	ldr	r1, [r3, #28]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d138      	bne.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e032      	b.n	8001964 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2224      	movs	r2, #36	@ 0x24
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800192c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	d139      	bne.n	80019fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001990:	2302      	movs	r3, #2
 8001992:	e033      	b.n	80019fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d141      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a16:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a22:	d131      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a24:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	4b43      	ldr	r3, [pc, #268]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a3c:	4a41      	ldr	r2, [pc, #260]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a44:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2232      	movs	r2, #50	@ 0x32
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5a:	e002      	b.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d102      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f2      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	4b33      	ldr	r3, [pc, #204]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a82:	d158      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e057      	b.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a98:	e04d      	b.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aa0:	d141      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aae:	d131      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ab6:	4a23      	ldr	r2, [pc, #140]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2232      	movs	r2, #50	@ 0x32
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a1c      	ldr	r2, [pc, #112]	@ (8001b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae6:	e002      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	d102      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f2      	bne.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0e:	d112      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e011      	b.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b24:	e007      	b.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40007000 	.word	0x40007000
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5e:	6093      	str	r3, [r2, #8]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40007000 	.word	0x40007000

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e2fe      	b.n	8002180 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8e:	4b97      	ldr	r3, [pc, #604]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b98:	4b94      	ldr	r3, [pc, #592]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d102      	bne.n	8001bae <HAL_RCC_OscConfig+0x3e>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e2d9      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b85      	ldr	r3, [pc, #532]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a84      	ldr	r2, [pc, #528]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b7f      	ldr	r3, [pc, #508]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7b      	ldr	r2, [pc, #492]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b78      	ldr	r3, [pc, #480]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a77      	ldr	r2, [pc, #476]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b75      	ldr	r3, [pc, #468]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a74      	ldr	r2, [pc, #464]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fb32 	bl	8001290 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fb2e 	bl	8001290 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e29e      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb1e 	bl	8001290 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fb1a 	bl	8001290 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e28a      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6a:	4b60      	ldr	r3, [pc, #384]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d075      	beq.n	8001d72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c86:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c90:	4b56      	ldr	r3, [pc, #344]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x136>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_OscConfig+0x13c>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d11f      	bne.n	8001cec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	4b4f      	ldr	r3, [pc, #316]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x154>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e25d      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b49      	ldr	r3, [pc, #292]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4946      	ldr	r1, [pc, #280]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cd8:	4b45      	ldr	r3, [pc, #276]	@ (8001df0 <HAL_RCC_OscConfig+0x280>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa8b 	bl	80011f8 <HAL_InitTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d043      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e249      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fac6 	bl	8001290 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fac2 	bl	8001290 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e232      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1a:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	061b      	lsls	r3, r3, #24
 8001d34:	492d      	ldr	r1, [pc, #180]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e01a      	b.n	8001d72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2a      	ldr	r2, [pc, #168]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff faa2 	bl	8001290 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa9e 	bl	8001290 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e20e      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d62:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1e0>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d041      	beq.n	8001e02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff fa7b 	bl	8001290 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fa77 	bl	8001290 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1e7      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ef      	beq.n	8001d9e <HAL_RCC_OscConfig+0x22e>
 8001dbe:	e020      	b.n	8001e02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fa5e 	bl	8001290 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd6:	e00d      	b.n	8001df4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fa5a 	bl	8001290 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d906      	bls.n	8001df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1ca      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df4:	4b8c      	ldr	r3, [pc, #560]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ea      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80a6 	beq.w	8001f5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e14:	4b84      	ldr	r3, [pc, #528]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2b4>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x2b6>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e36:	4b7c      	ldr	r3, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	4b79      	ldr	r3, [pc, #484]	@ (800202c <HAL_RCC_OscConfig+0x4bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e52:	4b76      	ldr	r3, [pc, #472]	@ (800202c <HAL_RCC_OscConfig+0x4bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a75      	ldr	r2, [pc, #468]	@ (800202c <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa17 	bl	8001290 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7ff fa13 	bl	8001290 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e183      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e78:	4b6c      	ldr	r3, [pc, #432]	@ (800202c <HAL_RCC_OscConfig+0x4bc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_RCC_OscConfig+0x32e>
 8001e8c:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9c:	e024      	b.n	8001ee8 <HAL_RCC_OscConfig+0x378>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d110      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x358>
 8001ea6:	4b60      	ldr	r3, [pc, #384]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eac:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x378>
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a56      	ldr	r2, [pc, #344]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d016      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f9ce 	bl	8001290 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f9ca 	bl	8001290 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e138      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ed      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x388>
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f9b7 	bl	8001290 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff f9b3 	bl	8001290 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e121      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ed      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	4a34      	ldr	r2, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01c      	beq.n	8001faa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f76:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f986 	bl	8001290 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f88:	f7ff f982 	bl	8001290 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0f2      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f9a:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ef      	beq.n	8001f88 <HAL_RCC_OscConfig+0x418>
 8001fa8:	e01b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff f969 	bl	8001290 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc2:	f7ff f965 	bl	8001290 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0d5      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ef      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80c9 	beq.w	800217e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fec:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	f000 8083 	beq.w	8002100 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d15e      	bne.n	80020c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <HAL_RCC_OscConfig+0x4b8>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f93f 	bl	8001290 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e00c      	b.n	8002030 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f93b 	bl	8001290 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d905      	bls.n	8002030 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0ab      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ec      	bne.n	8002016 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203c:	4b52      	ldr	r3, [pc, #328]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b52      	ldr	r3, [pc, #328]	@ (800218c <HAL_RCC_OscConfig+0x61c>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6a11      	ldr	r1, [r2, #32]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800204c:	3a01      	subs	r2, #1
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002056:	0212      	lsls	r2, r2, #8
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800205e:	0852      	lsrs	r2, r2, #1
 8002060:	3a01      	subs	r2, #1
 8002062:	0552      	lsls	r2, r2, #21
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	3a01      	subs	r2, #1
 800206e:	0652      	lsls	r2, r2, #25
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002076:	06d2      	lsls	r2, r2, #27
 8002078:	430a      	orrs	r2, r1
 800207a:	4943      	ldr	r1, [pc, #268]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a40      	ldr	r2, [pc, #256]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800208c:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a3d      	ldr	r2, [pc, #244]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002096:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff f8fa 	bl	8001290 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f8f6 	bl	8001290 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e066      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x530>
 80020be:	e05e      	b.n	800217e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a30      	ldr	r2, [pc, #192]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f8e0 	bl	8001290 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f8dc 	bl	8001290 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e04c      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020f2:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4924      	ldr	r1, [pc, #144]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
 80020fe:	e03e      	b.n	800217e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e039      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800210c:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <HAL_RCC_OscConfig+0x618>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d12c      	bne.n	800217a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	3b01      	subs	r3, #1
 800212c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d123      	bne.n	800217a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11b      	bne.n	800217a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d113      	bne.n	800217a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d109      	bne.n	800217a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	3b01      	subs	r3, #1
 8002174:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	019f800c 	.word	0x019f800c
 8002190:	feeefffc 	.word	0xfeeefffc

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e11e      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b91      	ldr	r3, [pc, #580]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b8e      	ldr	r3, [pc, #568]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 020f 	bic.w	r2, r3, #15
 80021c2:	498c      	ldr	r1, [pc, #560]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b8a      	ldr	r3, [pc, #552]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e106      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d073      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d129      	bne.n	8002244 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	4b81      	ldr	r3, [pc, #516]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0f4      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002200:	f000 f99e 	bl	8002540 <RCC_GetSysClockFreqFromPLLSource>
 8002204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a7c      	ldr	r2, [pc, #496]	@ (80023fc <HAL_RCC_ClockConfig+0x268>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d93f      	bls.n	800228e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800220e:	4b7a      	ldr	r3, [pc, #488]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002222:	2b00      	cmp	r3, #0
 8002224:	d033      	beq.n	800228e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12f      	bne.n	800228e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800222e:	4b72      	ldr	r3, [pc, #456]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002236:	4a70      	ldr	r2, [pc, #448]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800223c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e024      	b.n	800228e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224c:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0c6      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225c:	4b66      	ldr	r3, [pc, #408]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0be      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800226c:	f000 f8ce 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8002270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4a61      	ldr	r2, [pc, #388]	@ (80023fc <HAL_RCC_ClockConfig+0x268>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d909      	bls.n	800228e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227a:	4b5f      	ldr	r3, [pc, #380]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002282:	4a5d      	ldr	r2, [pc, #372]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002288:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b5a      	ldr	r3, [pc, #360]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4957      	ldr	r1, [pc, #348]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a0:	f7fe fff6 	bl	8001290 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fff2 	bl	8001290 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e095      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a42      	ldr	r2, [pc, #264]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002300:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002308:	4a3b      	ldr	r2, [pc, #236]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800230a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800230e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4936      	ldr	r1, [pc, #216]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
 8002322:	e008      	b.n	8002336 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b80      	cmp	r3, #128	@ 0x80
 8002328:	d105      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4a32      	ldr	r2, [pc, #200]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 8002330:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002334:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002336:	4b2f      	ldr	r3, [pc, #188]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d21d      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002344:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 020f 	bic.w	r2, r3, #15
 800234c:	4929      	ldr	r1, [pc, #164]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002354:	f7fe ff9c 	bl	8001290 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe ff98 	bl	8001290 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e03b      	b.n	80023ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_RCC_ClockConfig+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d1ed      	bne.n	800235c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4917      	ldr	r1, [pc, #92]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023aa:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490f      	ldr	r1, [pc, #60]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023be:	f000 f825 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_RCC_ClockConfig+0x264>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490c      	ldr	r1, [pc, #48]	@ (8002400 <HAL_RCC_ClockConfig+0x26c>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <HAL_RCC_ClockConfig+0x270>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_RCC_ClockConfig+0x274>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ff08 	bl	80011f8 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	04c4b400 	.word	0x04c4b400
 8002400:	08004550 	.word	0x08004550
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d102      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800241e:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e047      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002424:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d102      	bne.n	8002436 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002430:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	e03e      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d136      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d10c      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002460:	4a1a      	ldr	r2, [pc, #104]	@ (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246a:	68d2      	ldr	r2, [r2, #12]
 800246c:	0a12      	lsrs	r2, r2, #8
 800246e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
      break;
 8002478:	e00c      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247a:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	0a12      	lsrs	r2, r2, #8
 8002488:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
      break;
 8002492:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0e5b      	lsrs	r3, r3, #25
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e001      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024b4:	693b      	ldr	r3, [r7, #16]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200

080024d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08004560 	.word	0x08004560

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002518:	f7ff ffda 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x28>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	08004560 	.word	0x08004560

08002540 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d10c      	bne.n	800257e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002564:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256e:	68d2      	ldr	r2, [r2, #12]
 8002570:	0a12      	lsrs	r2, r2, #8
 8002572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
    break;
 800257c:	e00c      	b.n	8002598 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800257e:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002588:	68d2      	ldr	r2, [r2, #12]
 800258a:	0a12      	lsrs	r2, r2, #8
 800258c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    break;
 8002596:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0e5b      	lsrs	r3, r3, #25
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	3301      	adds	r3, #1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025b2:	687b      	ldr	r3, [r7, #4]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	007a1200 	.word	0x007a1200
 80025c8:	00f42400 	.word	0x00f42400

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2300      	movs	r3, #0
 80025d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8098 	beq.w	800271a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	4a3f      	ldr	r2, [pc, #252]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	@ 0x58
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a39      	ldr	r2, [pc, #228]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002620:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002622:	f7fe fe35 	bl	8001290 <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002628:	e009      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7fe fe31 	bl	8001290 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	74fb      	strb	r3, [r7, #19]
        break;
 800263c:	e005      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800263e:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ef      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d159      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002650:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01e      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d019      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002688:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002698:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fdf1 	bl	8001290 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	e00b      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fded 	bl	8001290 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d902      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	74fb      	strb	r3, [r7, #19]
            break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ec      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4903      	ldr	r1, [pc, #12]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026f4:	e008      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
 80026fa:	e005      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002708:	7c7b      	ldrb	r3, [r7, #17]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4ba6      	ldr	r3, [pc, #664]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4aa5      	ldr	r2, [pc, #660]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002726:	4ba0      	ldr	r3, [pc, #640]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	f023 0203 	bic.w	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	499c      	ldr	r1, [pc, #624]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002748:	4b97      	ldr	r3, [pc, #604]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 020c 	bic.w	r2, r3, #12
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4994      	ldr	r1, [pc, #592]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800276a:	4b8f      	ldr	r3, [pc, #572]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	498b      	ldr	r1, [pc, #556]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800278c:	4b86      	ldr	r3, [pc, #536]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4983      	ldr	r1, [pc, #524]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ae:	4b7e      	ldr	r3, [pc, #504]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	497a      	ldr	r1, [pc, #488]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d0:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4972      	ldr	r1, [pc, #456]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f2:	4b6d      	ldr	r3, [pc, #436]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4969      	ldr	r1, [pc, #420]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002814:	4b64      	ldr	r3, [pc, #400]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4961      	ldr	r1, [pc, #388]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002836:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	4958      	ldr	r1, [pc, #352]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	4950      	ldr	r1, [pc, #320]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a4a      	ldr	r2, [pc, #296]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002882:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002890:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	4942      	ldr	r1, [pc, #264]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b3d      	ldr	r3, [pc, #244]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a3c      	ldr	r2, [pc, #240]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4934      	ldr	r1, [pc, #208]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a2e      	ldr	r2, [pc, #184]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	4926      	ldr	r1, [pc, #152]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a20      	ldr	r2, [pc, #128]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	4918      	ldr	r1, [pc, #96]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002956:	d105      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002962:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	490a      	ldr	r1, [pc, #40]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800299c:	7cbb      	ldrb	r3, [r7, #18]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e09d      	b.n	8002afa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ce:	d009      	beq.n	80029e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
 80029d6:	e005      	b.n	80029e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd ff70 	bl	80008e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a24:	d902      	bls.n	8002a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e002      	b.n	8002a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Init+0xa0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	ea42 0103 	orr.w	r1, r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f003 0204 	and.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e049      	b.n	8002ba8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7fe f8db 	bl	8000ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 f9ef 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e097      	b.n	8002cf4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe f8a3 	bl	8000d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f000 f98d 	bl	8002f24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c32:	f023 0303 	bic.w	r3, r3, #3
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	4313      	orrs	r3, r2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c50:	f023 030c 	bic.w	r3, r3, #12
 8002c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	011a      	lsls	r2, r3, #4
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	4313      	orrs	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0ff      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b14      	cmp	r3, #20
 8002d26:	f200 80f0 	bhi.w	8002f0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d85 	.word	0x08002d85
 8002d34:	08002f0b 	.word	0x08002f0b
 8002d38:	08002f0b 	.word	0x08002f0b
 8002d3c:	08002f0b 	.word	0x08002f0b
 8002d40:	08002dc5 	.word	0x08002dc5
 8002d44:	08002f0b 	.word	0x08002f0b
 8002d48:	08002f0b 	.word	0x08002f0b
 8002d4c:	08002f0b 	.word	0x08002f0b
 8002d50:	08002e07 	.word	0x08002e07
 8002d54:	08002f0b 	.word	0x08002f0b
 8002d58:	08002f0b 	.word	0x08002f0b
 8002d5c:	08002f0b 	.word	0x08002f0b
 8002d60:	08002e47 	.word	0x08002e47
 8002d64:	08002f0b 	.word	0x08002f0b
 8002d68:	08002f0b 	.word	0x08002f0b
 8002d6c:	08002f0b 	.word	0x08002f0b
 8002d70:	08002e89 	.word	0x08002e89
 8002d74:	08002f0b 	.word	0x08002f0b
 8002d78:	08002f0b 	.word	0x08002f0b
 8002d7c:	08002f0b 	.word	0x08002f0b
 8002d80:	08002ec9 	.word	0x08002ec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f966 	bl	800305c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0208 	orr.w	r2, r2, #8
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	619a      	str	r2, [r3, #24]
      break;
 8002dc2:	e0a5      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f9d6 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
      break;
 8002e04:	e084      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fa3f 	bl	8003290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0208 	orr.w	r2, r2, #8
 8002e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0204 	bic.w	r2, r2, #4
 8002e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
      break;
 8002e44:	e064      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 faa7 	bl	80033a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	61da      	str	r2, [r3, #28]
      break;
 8002e86:	e043      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fb10 	bl	80034b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002ec6:	e023      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fb54 	bl	800357c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	021a      	lsls	r2, r3, #8
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <TIM_Base_SetConfig+0x11c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00f      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f42:	d00b      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <TIM_Base_SetConfig+0x120>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003048 <TIM_Base_SetConfig+0x124>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3d      	ldr	r2, [pc, #244]	@ (800304c <TIM_Base_SetConfig+0x128>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a33      	ldr	r2, [pc, #204]	@ (8003040 <TIM_Base_SetConfig+0x11c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01b      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7c:	d017      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a30      	ldr	r2, [pc, #192]	@ (8003044 <TIM_Base_SetConfig+0x120>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <TIM_Base_SetConfig+0x124>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00f      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2e      	ldr	r2, [pc, #184]	@ (800304c <TIM_Base_SetConfig+0x128>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00b      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2d      	ldr	r2, [pc, #180]	@ (8003050 <TIM_Base_SetConfig+0x12c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003054 <TIM_Base_SetConfig+0x130>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d003      	beq.n	8002fae <TIM_Base_SetConfig+0x8a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8003058 <TIM_Base_SetConfig+0x134>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	@ (8003040 <TIM_Base_SetConfig+0x11c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00f      	beq.n	800300c <TIM_Base_SetConfig+0xe8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a17      	ldr	r2, [pc, #92]	@ (800304c <TIM_Base_SetConfig+0x128>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0xe8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	@ (8003050 <TIM_Base_SetConfig+0x12c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0xe8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <TIM_Base_SetConfig+0x130>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0xe8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <TIM_Base_SetConfig+0x134>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d103      	bne.n	8003014 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
  }
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40013400 	.word	0x40013400
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800

0800305c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 0201 	bic.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <TIM_OC1_SetConfig+0x10c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00f      	beq.n	80030dc <TIM_OC1_SetConfig+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a2b      	ldr	r2, [pc, #172]	@ (800316c <TIM_OC1_SetConfig+0x110>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_OC1_SetConfig+0x80>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003170 <TIM_OC1_SetConfig+0x114>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_OC1_SetConfig+0x80>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a29      	ldr	r2, [pc, #164]	@ (8003174 <TIM_OC1_SetConfig+0x118>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_OC1_SetConfig+0x80>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a28      	ldr	r2, [pc, #160]	@ (8003178 <TIM_OC1_SetConfig+0x11c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10c      	bne.n	80030f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0308 	bic.w	r3, r3, #8
 80030e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <TIM_OC1_SetConfig+0x10c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_OC1_SetConfig+0xc2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1a      	ldr	r2, [pc, #104]	@ (800316c <TIM_OC1_SetConfig+0x110>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_OC1_SetConfig+0xc2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <TIM_OC1_SetConfig+0x114>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_OC1_SetConfig+0xc2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <TIM_OC1_SetConfig+0x118>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_OC1_SetConfig+0xc2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a17      	ldr	r2, [pc, #92]	@ (8003178 <TIM_OC1_SetConfig+0x11c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800312c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40013400 	.word	0x40013400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 0210 	bic.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0320 	bic.w	r3, r3, #32
 80031ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a28      	ldr	r2, [pc, #160]	@ (800327c <TIM_OC2_SetConfig+0x100>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_OC2_SetConfig+0x6c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <TIM_OC2_SetConfig+0x104>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10d      	bne.n	8003204 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <TIM_OC2_SetConfig+0x100>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <TIM_OC2_SetConfig+0xb0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <TIM_OC2_SetConfig+0x104>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_OC2_SetConfig+0xb0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <TIM_OC2_SetConfig+0x108>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_OC2_SetConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1a      	ldr	r2, [pc, #104]	@ (8003288 <TIM_OC2_SetConfig+0x10c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_OC2_SetConfig+0xb0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a19      	ldr	r2, [pc, #100]	@ (800328c <TIM_OC2_SetConfig+0x110>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d113      	bne.n	8003254 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40013400 	.word	0x40013400
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800

08003290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a27      	ldr	r2, [pc, #156]	@ (800338c <TIM_OC3_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0x6a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a26      	ldr	r2, [pc, #152]	@ (8003390 <TIM_OC3_SetConfig+0x100>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10d      	bne.n	8003316 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <TIM_OC3_SetConfig+0xfc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00f      	beq.n	800333e <TIM_OC3_SetConfig+0xae>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <TIM_OC3_SetConfig+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00b      	beq.n	800333e <TIM_OC3_SetConfig+0xae>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1a      	ldr	r2, [pc, #104]	@ (8003394 <TIM_OC3_SetConfig+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <TIM_OC3_SetConfig+0xae>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <TIM_OC3_SetConfig+0x108>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_OC3_SetConfig+0xae>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a18      	ldr	r2, [pc, #96]	@ (800339c <TIM_OC3_SetConfig+0x10c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d113      	bne.n	8003366 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40013400 	.word	0x40013400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <TIM_OC4_SetConfig+0x100>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC4_SetConfig+0x6c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <TIM_OC4_SetConfig+0x104>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10d      	bne.n	8003428 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <TIM_OC4_SetConfig+0x100>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_OC4_SetConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <TIM_OC4_SetConfig+0x104>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_OC4_SetConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <TIM_OC4_SetConfig+0x108>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_OC4_SetConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <TIM_OC4_SetConfig+0x10c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_OC4_SetConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <TIM_OC4_SetConfig+0x110>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d113      	bne.n	8003478 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003456:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800345e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a17      	ldr	r2, [pc, #92]	@ (8003568 <TIM_OC5_SetConfig+0xb4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a16      	ldr	r2, [pc, #88]	@ (800356c <TIM_OC5_SetConfig+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <TIM_OC5_SetConfig+0xbc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <TIM_OC5_SetConfig+0xc0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <TIM_OC5_SetConfig+0xc4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d109      	bne.n	8003542 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003534:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40013400 	.word	0x40013400
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a18      	ldr	r2, [pc, #96]	@ (8003634 <TIM_OC6_SetConfig+0xb8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <TIM_OC6_SetConfig+0xbc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a16      	ldr	r2, [pc, #88]	@ (800363c <TIM_OC6_SetConfig+0xc0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <TIM_OC6_SetConfig+0xc4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <TIM_OC6_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d109      	bne.n	800360c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	029b      	lsls	r3, r3, #10
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e065      	b.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2b      	ldr	r2, [pc, #172]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800369a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d018      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d6:	d013      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	@ (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a12      	ldr	r2, [pc, #72]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a13      	ldr	r2, [pc, #76]	@ (8003748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10c      	bne.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40013400 	.word	0x40013400
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40014000 	.word	0x40014000

0800374c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e073      	b.n	8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d11c      	bne.n	800383e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	051b      	lsls	r3, r3, #20
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40013400 	.word	0x40013400

08003864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e042      	b.n	80038fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd fbdb 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2224      	movs	r2, #36	@ 0x24
 8003892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 faf4 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f825 	bl	8003904 <UART_SetConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e01b      	b.n	80038fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb73 	bl	8003fe0 <UART_CheckIdleState>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b08c      	sub	sp, #48	@ 0x30
 800390a:	af00      	add	r7, sp, #0
 800390c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4bab      	ldr	r3, [pc, #684]	@ (8003be0 <UART_SetConfig+0x2dc>)
 8003934:	4013      	ands	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4aa0      	ldr	r2, [pc, #640]	@ (8003be4 <UART_SetConfig+0x2e0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	4313      	orrs	r3, r2
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800397a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	f023 010f 	bic.w	r1, r3, #15
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a91      	ldr	r2, [pc, #580]	@ (8003be8 <UART_SetConfig+0x2e4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d125      	bne.n	80039f4 <UART_SetConfig+0xf0>
 80039a8:	4b90      	ldr	r3, [pc, #576]	@ (8003bec <UART_SetConfig+0x2e8>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d81a      	bhi.n	80039ec <UART_SetConfig+0xe8>
 80039b6:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0xb8>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e0d6      	b.n	8003b82 <UART_SetConfig+0x27e>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e0d2      	b.n	8003b82 <UART_SetConfig+0x27e>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e2:	e0ce      	b.n	8003b82 <UART_SetConfig+0x27e>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e0ca      	b.n	8003b82 <UART_SetConfig+0x27e>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e0c6      	b.n	8003b82 <UART_SetConfig+0x27e>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7d      	ldr	r2, [pc, #500]	@ (8003bf0 <UART_SetConfig+0x2ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d138      	bne.n	8003a70 <UART_SetConfig+0x16c>
 80039fe:	4b7b      	ldr	r3, [pc, #492]	@ (8003bec <UART_SetConfig+0x2e8>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d82d      	bhi.n	8003a68 <UART_SetConfig+0x164>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0x110>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a69 	.word	0x08003a69
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e098      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e094      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e090      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e08c      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e088      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf4 <UART_SetConfig+0x2f0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d125      	bne.n	8003ac6 <UART_SetConfig+0x1c2>
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bec <UART_SetConfig+0x2e8>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a84:	2b30      	cmp	r3, #48	@ 0x30
 8003a86:	d016      	beq.n	8003ab6 <UART_SetConfig+0x1b2>
 8003a88:	2b30      	cmp	r3, #48	@ 0x30
 8003a8a:	d818      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d00a      	beq.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d814      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <UART_SetConfig+0x19a>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d008      	beq.n	8003aae <UART_SetConfig+0x1aa>
 8003a9c:	e00f      	b.n	8003abe <UART_SetConfig+0x1ba>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa4:	e06d      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aac:	e069      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab4:	e065      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abc:	e061      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003abe:	2310      	movs	r3, #16
 8003ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac4:	e05d      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf8 <UART_SetConfig+0x2f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <UART_SetConfig+0x218>
 8003ad0:	4b46      	ldr	r3, [pc, #280]	@ (8003bec <UART_SetConfig+0x2e8>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8003adc:	d016      	beq.n	8003b0c <UART_SetConfig+0x208>
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d818      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d00a      	beq.n	8003afc <UART_SetConfig+0x1f8>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0x1f0>
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x200>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x210>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e042      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e03e      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e03a      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b12:	e036      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e032      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a30      	ldr	r2, [pc, #192]	@ (8003be4 <UART_SetConfig+0x2e0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12a      	bne.n	8003b7c <UART_SetConfig+0x278>
 8003b26:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <UART_SetConfig+0x2e8>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b34:	d01a      	beq.n	8003b6c <UART_SetConfig+0x268>
 8003b36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b3a:	d81b      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b40:	d00c      	beq.n	8003b5c <UART_SetConfig+0x258>
 8003b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b46:	d815      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <UART_SetConfig+0x250>
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x260>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x270>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5a:	e012      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e00e      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e00a      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e006      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e002      	b.n	8003b82 <UART_SetConfig+0x27e>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a17      	ldr	r2, [pc, #92]	@ (8003be4 <UART_SetConfig+0x2e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f040 80a8 	bne.w	8003cde <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d834      	bhi.n	8003c00 <UART_SetConfig+0x2fc>
 8003b96:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <UART_SetConfig+0x298>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003c01 	.word	0x08003c01
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003c01 	.word	0x08003c01
 8003bac:	08003bcf 	.word	0x08003bcf
 8003bb0:	08003c01 	.word	0x08003c01
 8003bb4:	08003c01 	.word	0x08003c01
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003bd7 	.word	0x08003bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fc92 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc6:	e021      	b.n	8003c0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <UART_SetConfig+0x2f8>)
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bcc:	e01e      	b.n	8003c0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bce:	f7fe fc1d 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8003bd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bd4:	e01a      	b.n	8003c0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bdc:	e016      	b.n	8003c0c <UART_SetConfig+0x308>
 8003bde:	bf00      	nop
 8003be0:	cfff69f3 	.word	0xcfff69f3
 8003be4:	40008000 	.word	0x40008000
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	40004c00 	.word	0x40004c00
 8003bfc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 812a 	beq.w	8003e68 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	4a9e      	ldr	r2, [pc, #632]	@ (8003e94 <UART_SetConfig+0x590>)
 8003c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d305      	bcc.n	8003c44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d903      	bls.n	8003c4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c4a:	e10d      	b.n	8003e68 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	2200      	movs	r2, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	60fa      	str	r2, [r7, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	4a8e      	ldr	r2, [pc, #568]	@ (8003e94 <UART_SetConfig+0x590>)
 8003c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c6e:	f7fc fad3 	bl	8000218 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	020b      	lsls	r3, r1, #8
 8003c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c88:	0202      	lsls	r2, r0, #8
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	6849      	ldr	r1, [r1, #4]
 8003c8e:	0849      	lsrs	r1, r1, #1
 8003c90:	2000      	movs	r0, #0
 8003c92:	460c      	mov	r4, r1
 8003c94:	4605      	mov	r5, r0
 8003c96:	eb12 0804 	adds.w	r8, r2, r4
 8003c9a:	eb43 0905 	adc.w	r9, r3, r5
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	4693      	mov	fp, r2
 8003ca8:	4652      	mov	r2, sl
 8003caa:	465b      	mov	r3, fp
 8003cac:	4640      	mov	r0, r8
 8003cae:	4649      	mov	r1, r9
 8003cb0:	f7fc fab2 	bl	8000218 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc2:	d308      	bcc.n	8003cd6 <UART_SetConfig+0x3d2>
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cca:	d204      	bcs.n	8003cd6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	60da      	str	r2, [r3, #12]
 8003cd4:	e0c8      	b.n	8003e68 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cdc:	e0c4      	b.n	8003e68 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce6:	d167      	bne.n	8003db8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d828      	bhi.n	8003d42 <UART_SetConfig+0x43e>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <UART_SetConfig+0x3f4>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fbe4 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003d20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d22:	e014      	b.n	8003d4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fbf6 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8003d28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d2a:	e010      	b.n	8003d4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003e98 <UART_SetConfig+0x594>)
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fb6b 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8003d36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d38:	e009      	b.n	8003d4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d40:	e005      	b.n	8003d4e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8089 	beq.w	8003e68 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e94 <UART_SetConfig+0x590>)
 8003d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d60:	461a      	mov	r2, r3
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d68:	005a      	lsls	r2, r3, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	441a      	add	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d916      	bls.n	8003db0 <UART_SetConfig+0x4ac>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d212      	bcs.n	8003db0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f023 030f 	bic.w	r3, r3, #15
 8003d92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	8bfb      	ldrh	r3, [r7, #30]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	8bfa      	ldrh	r2, [r7, #30]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e05b      	b.n	8003e68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003db6:	e057      	b.n	8003e68 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d828      	bhi.n	8003e12 <UART_SetConfig+0x50e>
 8003dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <UART_SetConfig+0x4c4>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	08003e13 	.word	0x08003e13
 8003dd8:	08003e03 	.word	0x08003e03
 8003ddc:	08003e13 	.word	0x08003e13
 8003de0:	08003e13 	.word	0x08003e13
 8003de4:	08003e13 	.word	0x08003e13
 8003de8:	08003e0b 	.word	0x08003e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fb7c 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003df2:	e014      	b.n	8003e1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe fb8e 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dfa:	e010      	b.n	8003e1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <UART_SetConfig+0x594>)
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e00:	e00d      	b.n	8003e1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e02:	f7fe fb03 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8003e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e08:	e009      	b.n	8003e1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e10:	e005      	b.n	8003e1e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d021      	beq.n	8003e68 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <UART_SetConfig+0x590>)
 8003e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	441a      	add	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d909      	bls.n	8003e62 <UART_SetConfig+0x55e>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e54:	d205      	bcs.n	8003e62 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e002      	b.n	8003e68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3730      	adds	r7, #48	@ 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	08004568 	.word	0x08004568
 8003e98:	00f42400 	.word	0x00f42400

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d10a      	bne.n	8003fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b098      	sub	sp, #96	@ 0x60
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fd f94e 	bl	8001290 <HAL_GetTick>
 8003ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d12f      	bne.n	8004064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f88e 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d022      	beq.n	8004064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004032:	653b      	str	r3, [r7, #80]	@ 0x50
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
 800403e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e063      	b.n	800412c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d149      	bne.n	8004106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407a:	2200      	movs	r2, #0
 800407c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f857 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03c      	beq.n	8004106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	623b      	str	r3, [r7, #32]
   return(result);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040de:	61fa      	str	r2, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	617b      	str	r3, [r7, #20]
   return(result);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e012      	b.n	800412c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3758      	adds	r7, #88	@ 0x58
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	e04f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d04b      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fd f89f 	bl	8001290 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <UART_WaitOnFlagUntilTimeout+0x30>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e04e      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d037      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	d034      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d031      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d110      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2208      	movs	r2, #8
 8004196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f838 	bl	800420e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2208      	movs	r2, #8
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e029      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c0:	d111      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f81e 	bl	800420e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e00f      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d0a0      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420e:	b480      	push	{r7}
 8004210:	b095      	sub	sp, #84	@ 0x54
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004234:	643b      	str	r3, [r7, #64]	@ 0x40
 8004236:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800423a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	61fb      	str	r3, [r7, #28]
   return(result);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800426c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d118      	bne.n	80042ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	60bb      	str	r3, [r7, #8]
   return(result);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f023 0310 	bic.w	r3, r3, #16
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	613b      	str	r3, [r7, #16]
   return(result);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e6      	bne.n	8004288 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ce:	bf00      	nop
 80042d0:	3754      	adds	r7, #84	@ 0x54
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e027      	b.n	8004340 <HAL_UARTEx_DisableFifoMode+0x66>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800431e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e02d      	b.n	80043c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	@ 0x24
 8004370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f84f 	bl	8004444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043dc:	2302      	movs	r3, #2
 80043de:	e02d      	b.n	800443c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	@ 0x24
 80043ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f811 	bl	8004444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004464:	e031      	b.n	80044ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004466:	2308      	movs	r3, #8
 8004468:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800446a:	2308      	movs	r3, #8
 800446c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	0e5b      	lsrs	r3, r3, #25
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	0f5b      	lsrs	r3, r3, #29
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800448e:	7bbb      	ldrb	r3, [r7, #14]
 8004490:	7b3a      	ldrb	r2, [r7, #12]
 8004492:	4911      	ldr	r1, [pc, #68]	@ (80044d8 <UARTEx_SetNbDataToProcess+0x94>)
 8004494:	5c8a      	ldrb	r2, [r1, r2]
 8004496:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800449a:	7b3a      	ldrb	r2, [r7, #12]
 800449c:	490f      	ldr	r1, [pc, #60]	@ (80044dc <UARTEx_SetNbDataToProcess+0x98>)
 800449e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	7b7a      	ldrb	r2, [r7, #13]
 80044b0:	4909      	ldr	r1, [pc, #36]	@ (80044d8 <UARTEx_SetNbDataToProcess+0x94>)
 80044b2:	5c8a      	ldrb	r2, [r1, r2]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044b8:	7b7a      	ldrb	r2, [r7, #13]
 80044ba:	4908      	ldr	r1, [pc, #32]	@ (80044dc <UARTEx_SetNbDataToProcess+0x98>)
 80044bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044be:	fb93 f3f2 	sdiv	r3, r3, r2
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	08004580 	.word	0x08004580
 80044dc:	08004588 	.word	0x08004588

080044e0 <memset>:
 80044e0:	4402      	add	r2, r0
 80044e2:	4603      	mov	r3, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d100      	bne.n	80044ea <memset+0xa>
 80044e8:	4770      	bx	lr
 80044ea:	f803 1b01 	strb.w	r1, [r3], #1
 80044ee:	e7f9      	b.n	80044e4 <memset+0x4>

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	@ (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	@ (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	@ (8004534 <__libc_init_array+0x44>)
 8004504:	f000 f818 	bl	8004538 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08004598 	.word	0x08004598
 800452c:	08004598 	.word	0x08004598
 8004530:	08004598 	.word	0x08004598
 8004534:	0800459c 	.word	0x0800459c

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
