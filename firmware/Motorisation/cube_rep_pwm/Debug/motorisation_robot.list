
motorisation_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f2c  08005f2c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f34  08005f34  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f38  08005f38  00006f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  20000010  08005f4c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e68  08005f4c  00007e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b2d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003356  00000000  00000000  0001cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0001fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103d  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201d6  00000000  00000000  000223fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d15  00000000  00000000  000425d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd9bd  00000000  00000000  0005a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127ca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000583c  00000000  00000000  00127ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012d524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005eac 	.word	0x08005eac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005eac 	.word	0x08005eac

08000220 <__aeabi_dmul>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000226:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800022a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800022e:	bf1d      	ittte	ne
 8000230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000234:	ea94 0f0c 	teqne	r4, ip
 8000238:	ea95 0f0c 	teqne	r5, ip
 800023c:	f000 f8de 	bleq	80003fc <__aeabi_dmul+0x1dc>
 8000240:	442c      	add	r4, r5
 8000242:	ea81 0603 	eor.w	r6, r1, r3
 8000246:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800024e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000252:	bf18      	it	ne
 8000254:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000258:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000260:	d038      	beq.n	80002d4 <__aeabi_dmul+0xb4>
 8000262:	fba0 ce02 	umull	ip, lr, r0, r2
 8000266:	f04f 0500 	mov.w	r5, #0
 800026a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800026e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000272:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000276:	f04f 0600 	mov.w	r6, #0
 800027a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800027e:	f09c 0f00 	teq	ip, #0
 8000282:	bf18      	it	ne
 8000284:	f04e 0e01 	orrne.w	lr, lr, #1
 8000288:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800028c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000290:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000294:	d204      	bcs.n	80002a0 <__aeabi_dmul+0x80>
 8000296:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029a:	416d      	adcs	r5, r5
 800029c:	eb46 0606 	adc.w	r6, r6, r6
 80002a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b8:	bf88      	it	hi
 80002ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002be:	d81e      	bhi.n	80002fe <__aeabi_dmul+0xde>
 80002c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002c4:	bf08      	it	eq
 80002c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ca:	f150 0000 	adcs.w	r0, r0, #0
 80002ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d8:	ea46 0101 	orr.w	r1, r6, r1
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	ea81 0103 	eor.w	r1, r1, r3
 80002e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e8:	bfc2      	ittt	gt
 80002ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	popgt	{r4, r5, r6, pc}
 80002f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f8:	f04f 0e00 	mov.w	lr, #0
 80002fc:	3c01      	subs	r4, #1
 80002fe:	f300 80ab 	bgt.w	8000458 <__aeabi_dmul+0x238>
 8000302:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000306:	bfde      	ittt	le
 8000308:	2000      	movle	r0, #0
 800030a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800030e:	bd70      	pople	{r4, r5, r6, pc}
 8000310:	f1c4 0400 	rsb	r4, r4, #0
 8000314:	3c20      	subs	r4, #32
 8000316:	da35      	bge.n	8000384 <__aeabi_dmul+0x164>
 8000318:	340c      	adds	r4, #12
 800031a:	dc1b      	bgt.n	8000354 <__aeabi_dmul+0x134>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f305 	lsl.w	r3, r0, r5
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f205 	lsl.w	r2, r1, r5
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000338:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	fa21 f604 	lsr.w	r6, r1, r4
 8000344:	eb42 0106 	adc.w	r1, r2, r6
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 040c 	rsb	r4, r4, #12
 8000358:	f1c4 0520 	rsb	r5, r4, #32
 800035c:	fa00 f304 	lsl.w	r3, r0, r4
 8000360:	fa20 f005 	lsr.w	r0, r0, r5
 8000364:	fa01 f204 	lsl.w	r2, r1, r4
 8000368:	ea40 0002 	orr.w	r0, r0, r2
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f205 	lsl.w	r2, r0, r5
 800038c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000390:	fa20 f304 	lsr.w	r3, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea43 0302 	orr.w	r3, r3, r2
 800039c:	fa21 f004 	lsr.w	r0, r1, r4
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	fa21 f204 	lsr.w	r2, r1, r4
 80003a8:	ea20 0002 	bic.w	r0, r0, r2
 80003ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f094 0f00 	teq	r4, #0
 80003c0:	d10f      	bne.n	80003e2 <__aeabi_dmul+0x1c2>
 80003c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003c6:	0040      	lsls	r0, r0, #1
 80003c8:	eb41 0101 	adc.w	r1, r1, r1
 80003cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3c01      	subeq	r4, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1a6>
 80003d6:	ea41 0106 	orr.w	r1, r1, r6
 80003da:	f095 0f00 	teq	r5, #0
 80003de:	bf18      	it	ne
 80003e0:	4770      	bxne	lr
 80003e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003e6:	0052      	lsls	r2, r2, #1
 80003e8:	eb43 0303 	adc.w	r3, r3, r3
 80003ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3d01      	subeq	r5, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1c6>
 80003f6:	ea43 0306 	orr.w	r3, r3, r6
 80003fa:	4770      	bx	lr
 80003fc:	ea94 0f0c 	teq	r4, ip
 8000400:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000404:	bf18      	it	ne
 8000406:	ea95 0f0c 	teqne	r5, ip
 800040a:	d00c      	beq.n	8000426 <__aeabi_dmul+0x206>
 800040c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000410:	bf18      	it	ne
 8000412:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000416:	d1d1      	bne.n	80003bc <__aeabi_dmul+0x19c>
 8000418:	ea81 0103 	eor.w	r1, r1, r3
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd70      	pop	{r4, r5, r6, pc}
 8000426:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042a:	bf06      	itte	eq
 800042c:	4610      	moveq	r0, r2
 800042e:	4619      	moveq	r1, r3
 8000430:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000434:	d019      	beq.n	800046a <__aeabi_dmul+0x24a>
 8000436:	ea94 0f0c 	teq	r4, ip
 800043a:	d102      	bne.n	8000442 <__aeabi_dmul+0x222>
 800043c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000440:	d113      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000442:	ea95 0f0c 	teq	r5, ip
 8000446:	d105      	bne.n	8000454 <__aeabi_dmul+0x234>
 8000448:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800044c:	bf1c      	itt	ne
 800044e:	4610      	movne	r0, r2
 8000450:	4619      	movne	r1, r3
 8000452:	d10a      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000454:	ea81 0103 	eor.w	r1, r1, r3
 8000458:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800046e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000472:	bd70      	pop	{r4, r5, r6, pc}

08000474 <__aeabi_drsub>:
 8000474:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e002      	b.n	8000480 <__adddf3>
 800047a:	bf00      	nop

0800047c <__aeabi_dsub>:
 800047c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000480 <__adddf3>:
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000486:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	bf1f      	itttt	ne
 8000496:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a6:	f000 80e2 	beq.w	800066e <__adddf3+0x1ee>
 80004aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b2:	bfb8      	it	lt
 80004b4:	426d      	neglt	r5, r5
 80004b6:	dd0c      	ble.n	80004d2 <__adddf3+0x52>
 80004b8:	442c      	add	r4, r5
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	ea82 0000 	eor.w	r0, r2, r0
 80004c6:	ea83 0101 	eor.w	r1, r3, r1
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	2d36      	cmp	r5, #54	@ 0x36
 80004d4:	bf88      	it	hi
 80004d6:	bd30      	pophi	{r4, r5, pc}
 80004d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e8:	d002      	beq.n	80004f0 <__adddf3+0x70>
 80004ea:	4240      	negs	r0, r0
 80004ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x84>
 80004fe:	4252      	negs	r2, r2
 8000500:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000504:	ea94 0f05 	teq	r4, r5
 8000508:	f000 80a7 	beq.w	800065a <__adddf3+0x1da>
 800050c:	f1a4 0401 	sub.w	r4, r4, #1
 8000510:	f1d5 0e20 	rsbs	lr, r5, #32
 8000514:	db0d      	blt.n	8000532 <__adddf3+0xb2>
 8000516:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051a:	fa22 f205 	lsr.w	r2, r2, r5
 800051e:	1880      	adds	r0, r0, r2
 8000520:	f141 0100 	adc.w	r1, r1, #0
 8000524:	fa03 f20e 	lsl.w	r2, r3, lr
 8000528:	1880      	adds	r0, r0, r2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	4159      	adcs	r1, r3
 8000530:	e00e      	b.n	8000550 <__adddf3+0xd0>
 8000532:	f1a5 0520 	sub.w	r5, r5, #32
 8000536:	f10e 0e20 	add.w	lr, lr, #32
 800053a:	2a01      	cmp	r2, #1
 800053c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000540:	bf28      	it	cs
 8000542:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000546:	fa43 f305 	asr.w	r3, r3, r5
 800054a:	18c0      	adds	r0, r0, r3
 800054c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	d507      	bpl.n	8000566 <__adddf3+0xe6>
 8000556:	f04f 0e00 	mov.w	lr, #0
 800055a:	f1dc 0c00 	rsbs	ip, ip, #0
 800055e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000562:	eb6e 0101 	sbc.w	r1, lr, r1
 8000566:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800056a:	d31b      	bcc.n	80005a4 <__adddf3+0x124>
 800056c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000570:	d30c      	bcc.n	800058c <__adddf3+0x10c>
 8000572:	0849      	lsrs	r1, r1, #1
 8000574:	ea5f 0030 	movs.w	r0, r0, rrx
 8000578:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800057c:	f104 0401 	add.w	r4, r4, #1
 8000580:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000584:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000588:	f080 809a 	bcs.w	80006c0 <__adddf3+0x240>
 800058c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	ea41 0105 	orr.w	r1, r1, r5
 80005a2:	bd30      	pop	{r4, r5, pc}
 80005a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a8:	4140      	adcs	r0, r0
 80005aa:	eb41 0101 	adc.w	r1, r1, r1
 80005ae:	3c01      	subs	r4, #1
 80005b0:	bf28      	it	cs
 80005b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005b6:	d2e9      	bcs.n	800058c <__adddf3+0x10c>
 80005b8:	f091 0f00 	teq	r1, #0
 80005bc:	bf04      	itt	eq
 80005be:	4601      	moveq	r1, r0
 80005c0:	2000      	moveq	r0, #0
 80005c2:	fab1 f381 	clz	r3, r1
 80005c6:	bf08      	it	eq
 80005c8:	3320      	addeq	r3, #32
 80005ca:	f1a3 030b 	sub.w	r3, r3, #11
 80005ce:	f1b3 0220 	subs.w	r2, r3, #32
 80005d2:	da0c      	bge.n	80005ee <__adddf3+0x16e>
 80005d4:	320c      	adds	r2, #12
 80005d6:	dd08      	ble.n	80005ea <__adddf3+0x16a>
 80005d8:	f102 0c14 	add.w	ip, r2, #20
 80005dc:	f1c2 020c 	rsb	r2, r2, #12
 80005e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e4:	fa21 f102 	lsr.w	r1, r1, r2
 80005e8:	e00c      	b.n	8000604 <__adddf3+0x184>
 80005ea:	f102 0214 	add.w	r2, r2, #20
 80005ee:	bfd8      	it	le
 80005f0:	f1c2 0c20 	rsble	ip, r2, #32
 80005f4:	fa01 f102 	lsl.w	r1, r1, r2
 80005f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005fc:	bfdc      	itt	le
 80005fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000602:	4090      	lslle	r0, r2
 8000604:	1ae4      	subs	r4, r4, r3
 8000606:	bfa2      	ittt	ge
 8000608:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800060c:	4329      	orrge	r1, r5
 800060e:	bd30      	popge	{r4, r5, pc}
 8000610:	ea6f 0404 	mvn.w	r4, r4
 8000614:	3c1f      	subs	r4, #31
 8000616:	da1c      	bge.n	8000652 <__adddf3+0x1d2>
 8000618:	340c      	adds	r4, #12
 800061a:	dc0e      	bgt.n	800063a <__adddf3+0x1ba>
 800061c:	f104 0414 	add.w	r4, r4, #20
 8000620:	f1c4 0220 	rsb	r2, r4, #32
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f302 	lsl.w	r3, r1, r2
 800062c:	ea40 0003 	orr.w	r0, r0, r3
 8000630:	fa21 f304 	lsr.w	r3, r1, r4
 8000634:	ea45 0103 	orr.w	r1, r5, r3
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f1c4 040c 	rsb	r4, r4, #12
 800063e:	f1c4 0220 	rsb	r2, r4, #32
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 f304 	lsl.w	r3, r1, r4
 800064a:	ea40 0003 	orr.w	r0, r0, r3
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	fa21 f004 	lsr.w	r0, r1, r4
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f094 0f00 	teq	r4, #0
 800065e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000662:	bf06      	itte	eq
 8000664:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000668:	3401      	addeq	r4, #1
 800066a:	3d01      	subne	r5, #1
 800066c:	e74e      	b.n	800050c <__adddf3+0x8c>
 800066e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000672:	bf18      	it	ne
 8000674:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000678:	d029      	beq.n	80006ce <__adddf3+0x24e>
 800067a:	ea94 0f05 	teq	r4, r5
 800067e:	bf08      	it	eq
 8000680:	ea90 0f02 	teqeq	r0, r2
 8000684:	d005      	beq.n	8000692 <__adddf3+0x212>
 8000686:	ea54 0c00 	orrs.w	ip, r4, r0
 800068a:	bf04      	itt	eq
 800068c:	4619      	moveq	r1, r3
 800068e:	4610      	moveq	r0, r2
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	ea91 0f03 	teq	r1, r3
 8000696:	bf1e      	ittt	ne
 8000698:	2100      	movne	r1, #0
 800069a:	2000      	movne	r0, #0
 800069c:	bd30      	popne	{r4, r5, pc}
 800069e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a2:	d105      	bne.n	80006b0 <__adddf3+0x230>
 80006a4:	0040      	lsls	r0, r0, #1
 80006a6:	4149      	adcs	r1, r1
 80006a8:	bf28      	it	cs
 80006aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006b4:	bf3c      	itt	cc
 80006b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ba:	bd30      	popcc	{r4, r5, pc}
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf1a      	itte	ne
 80006d4:	4619      	movne	r1, r3
 80006d6:	4610      	movne	r0, r2
 80006d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006dc:	bf1c      	itt	ne
 80006de:	460b      	movne	r3, r1
 80006e0:	4602      	movne	r2, r0
 80006e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e6:	bf06      	itte	eq
 80006e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ec:	ea91 0f03 	teqeq	r1, r3
 80006f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	bf00      	nop

080006f8 <__aeabi_ui2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070c:	f04f 0500 	mov.w	r5, #0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e750      	b.n	80005b8 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_i2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800072c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000730:	bf48      	it	mi
 8000732:	4240      	negmi	r0, r0
 8000734:	f04f 0100 	mov.w	r1, #0
 8000738:	e73e      	b.n	80005b8 <__adddf3+0x138>
 800073a:	bf00      	nop

0800073c <__aeabi_f2d>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000742:	ea4f 0131 	mov.w	r1, r1, rrx
 8000746:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074a:	bf1f      	itttt	ne
 800074c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000750:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000754:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000758:	4770      	bxne	lr
 800075a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800075e:	bf08      	it	eq
 8000760:	4770      	bxeq	lr
 8000762:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000766:	bf04      	itt	eq
 8000768:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	e71c      	b.n	80005b8 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_ul2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f04f 0500 	mov.w	r5, #0
 800078e:	e00a      	b.n	80007a6 <__aeabi_l2d+0x16>

08000790 <__aeabi_l2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800079e:	d502      	bpl.n	80007a6 <__aeabi_l2d+0x16>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b2:	f43f aed8 	beq.w	8000566 <__adddf3+0xe6>
 80007b6:	f04f 0203 	mov.w	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ce:	f1c2 0320 	rsb	r3, r2, #32
 80007d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d6:	fa20 f002 	lsr.w	r0, r0, r2
 80007da:	fa01 fe03 	lsl.w	lr, r1, r3
 80007de:	ea40 000e 	orr.w	r0, r0, lr
 80007e2:	fa21 f102 	lsr.w	r1, r1, r2
 80007e6:	4414      	add	r4, r2
 80007e8:	e6bd      	b.n	8000566 <__adddf3+0xe6>
 80007ea:	bf00      	nop

080007ec <__aeabi_d2uiz>:
 80007ec:	004a      	lsls	r2, r1, #1
 80007ee:	d211      	bcs.n	8000814 <__aeabi_d2uiz+0x28>
 80007f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007f4:	d211      	bcs.n	800081a <__aeabi_d2uiz+0x2e>
 80007f6:	d50d      	bpl.n	8000814 <__aeabi_d2uiz+0x28>
 80007f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000800:	d40e      	bmi.n	8000820 <__aeabi_d2uiz+0x34>
 8000802:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000806:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800080a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800080e:	fa23 f002 	lsr.w	r0, r3, r2
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d102      	bne.n	8000826 <__aeabi_d2uiz+0x3a>
 8000820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000824:	4770      	bx	lr
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	4770      	bx	lr

0800082c <__aeabi_uldivmod>:
 800082c:	b953      	cbnz	r3, 8000844 <__aeabi_uldivmod+0x18>
 800082e:	b94a      	cbnz	r2, 8000844 <__aeabi_uldivmod+0x18>
 8000830:	2900      	cmp	r1, #0
 8000832:	bf08      	it	eq
 8000834:	2800      	cmpeq	r0, #0
 8000836:	bf1c      	itt	ne
 8000838:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800083c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000840:	f000 b96a 	b.w	8000b18 <__aeabi_idiv0>
 8000844:	f1ad 0c08 	sub.w	ip, sp, #8
 8000848:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800084c:	f000 f806 	bl	800085c <__udivmoddi4>
 8000850:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr

0800085c <__udivmoddi4>:
 800085c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000860:	9d08      	ldr	r5, [sp, #32]
 8000862:	460c      	mov	r4, r1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d14e      	bne.n	8000906 <__udivmoddi4+0xaa>
 8000868:	4694      	mov	ip, r2
 800086a:	458c      	cmp	ip, r1
 800086c:	4686      	mov	lr, r0
 800086e:	fab2 f282 	clz	r2, r2
 8000872:	d962      	bls.n	800093a <__udivmoddi4+0xde>
 8000874:	b14a      	cbz	r2, 800088a <__udivmoddi4+0x2e>
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	4091      	lsls	r1, r2
 800087c:	fa20 f303 	lsr.w	r3, r0, r3
 8000880:	fa0c fc02 	lsl.w	ip, ip, r2
 8000884:	4319      	orrs	r1, r3
 8000886:	fa00 fe02 	lsl.w	lr, r0, r2
 800088a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800088e:	fa1f f68c 	uxth.w	r6, ip
 8000892:	fbb1 f4f7 	udiv	r4, r1, r7
 8000896:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800089a:	fb07 1114 	mls	r1, r7, r4, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb04 f106 	mul.w	r1, r4, r6
 80008a6:	4299      	cmp	r1, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x64>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008b2:	f080 8112 	bcs.w	8000ada <__udivmoddi4+0x27e>
 80008b6:	4299      	cmp	r1, r3
 80008b8:	f240 810f 	bls.w	8000ada <__udivmoddi4+0x27e>
 80008bc:	3c02      	subs	r4, #2
 80008be:	4463      	add	r3, ip
 80008c0:	1a59      	subs	r1, r3, r1
 80008c2:	fa1f f38e 	uxth.w	r3, lr
 80008c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ca:	fb07 1110 	mls	r1, r7, r0, r1
 80008ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d2:	fb00 f606 	mul.w	r6, r0, r6
 80008d6:	429e      	cmp	r6, r3
 80008d8:	d90a      	bls.n	80008f0 <__udivmoddi4+0x94>
 80008da:	eb1c 0303 	adds.w	r3, ip, r3
 80008de:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008e2:	f080 80fc 	bcs.w	8000ade <__udivmoddi4+0x282>
 80008e6:	429e      	cmp	r6, r3
 80008e8:	f240 80f9 	bls.w	8000ade <__udivmoddi4+0x282>
 80008ec:	4463      	add	r3, ip
 80008ee:	3802      	subs	r0, #2
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008f6:	2100      	movs	r1, #0
 80008f8:	b11d      	cbz	r5, 8000902 <__udivmoddi4+0xa6>
 80008fa:	40d3      	lsrs	r3, r2
 80008fc:	2200      	movs	r2, #0
 80008fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000906:	428b      	cmp	r3, r1
 8000908:	d905      	bls.n	8000916 <__udivmoddi4+0xba>
 800090a:	b10d      	cbz	r5, 8000910 <__udivmoddi4+0xb4>
 800090c:	e9c5 0100 	strd	r0, r1, [r5]
 8000910:	2100      	movs	r1, #0
 8000912:	4608      	mov	r0, r1
 8000914:	e7f5      	b.n	8000902 <__udivmoddi4+0xa6>
 8000916:	fab3 f183 	clz	r1, r3
 800091a:	2900      	cmp	r1, #0
 800091c:	d146      	bne.n	80009ac <__udivmoddi4+0x150>
 800091e:	42a3      	cmp	r3, r4
 8000920:	d302      	bcc.n	8000928 <__udivmoddi4+0xcc>
 8000922:	4290      	cmp	r0, r2
 8000924:	f0c0 80f0 	bcc.w	8000b08 <__udivmoddi4+0x2ac>
 8000928:	1a86      	subs	r6, r0, r2
 800092a:	eb64 0303 	sbc.w	r3, r4, r3
 800092e:	2001      	movs	r0, #1
 8000930:	2d00      	cmp	r5, #0
 8000932:	d0e6      	beq.n	8000902 <__udivmoddi4+0xa6>
 8000934:	e9c5 6300 	strd	r6, r3, [r5]
 8000938:	e7e3      	b.n	8000902 <__udivmoddi4+0xa6>
 800093a:	2a00      	cmp	r2, #0
 800093c:	f040 8090 	bne.w	8000a60 <__udivmoddi4+0x204>
 8000940:	eba1 040c 	sub.w	r4, r1, ip
 8000944:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	2101      	movs	r1, #1
 800094e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000952:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000956:	fb08 4416 	mls	r4, r8, r6, r4
 800095a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095e:	fb07 f006 	mul.w	r0, r7, r6
 8000962:	4298      	cmp	r0, r3
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0x11c>
 8000966:	eb1c 0303 	adds.w	r3, ip, r3
 800096a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800096e:	d202      	bcs.n	8000976 <__udivmoddi4+0x11a>
 8000970:	4298      	cmp	r0, r3
 8000972:	f200 80cd 	bhi.w	8000b10 <__udivmoddi4+0x2b4>
 8000976:	4626      	mov	r6, r4
 8000978:	1a1c      	subs	r4, r3, r0
 800097a:	fa1f f38e 	uxth.w	r3, lr
 800097e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000982:	fb08 4410 	mls	r4, r8, r0, r4
 8000986:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800098a:	fb00 f707 	mul.w	r7, r0, r7
 800098e:	429f      	cmp	r7, r3
 8000990:	d908      	bls.n	80009a4 <__udivmoddi4+0x148>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800099a:	d202      	bcs.n	80009a2 <__udivmoddi4+0x146>
 800099c:	429f      	cmp	r7, r3
 800099e:	f200 80b0 	bhi.w	8000b02 <__udivmoddi4+0x2a6>
 80009a2:	4620      	mov	r0, r4
 80009a4:	1bdb      	subs	r3, r3, r7
 80009a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009aa:	e7a5      	b.n	80008f8 <__udivmoddi4+0x9c>
 80009ac:	f1c1 0620 	rsb	r6, r1, #32
 80009b0:	408b      	lsls	r3, r1
 80009b2:	fa22 f706 	lsr.w	r7, r2, r6
 80009b6:	431f      	orrs	r7, r3
 80009b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009bc:	fa04 f301 	lsl.w	r3, r4, r1
 80009c0:	ea43 030c 	orr.w	r3, r3, ip
 80009c4:	40f4      	lsrs	r4, r6
 80009c6:	fa00 f801 	lsl.w	r8, r0, r1
 80009ca:	0c38      	lsrs	r0, r7, #16
 80009cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d0:	fbb4 fef0 	udiv	lr, r4, r0
 80009d4:	fa1f fc87 	uxth.w	ip, r7
 80009d8:	fb00 441e 	mls	r4, r0, lr, r4
 80009dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e0:	fb0e f90c 	mul.w	r9, lr, ip
 80009e4:	45a1      	cmp	r9, r4
 80009e6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ea:	d90a      	bls.n	8000a02 <__udivmoddi4+0x1a6>
 80009ec:	193c      	adds	r4, r7, r4
 80009ee:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009f2:	f080 8084 	bcs.w	8000afe <__udivmoddi4+0x2a2>
 80009f6:	45a1      	cmp	r9, r4
 80009f8:	f240 8081 	bls.w	8000afe <__udivmoddi4+0x2a2>
 80009fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a00:	443c      	add	r4, r7
 8000a02:	eba4 0409 	sub.w	r4, r4, r9
 8000a06:	fa1f f983 	uxth.w	r9, r3
 8000a0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a1a:	45a4      	cmp	ip, r4
 8000a1c:	d907      	bls.n	8000a2e <__udivmoddi4+0x1d2>
 8000a1e:	193c      	adds	r4, r7, r4
 8000a20:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a24:	d267      	bcs.n	8000af6 <__udivmoddi4+0x29a>
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d965      	bls.n	8000af6 <__udivmoddi4+0x29a>
 8000a2a:	3b02      	subs	r3, #2
 8000a2c:	443c      	add	r4, r7
 8000a2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a32:	fba0 9302 	umull	r9, r3, r0, r2
 8000a36:	eba4 040c 	sub.w	r4, r4, ip
 8000a3a:	429c      	cmp	r4, r3
 8000a3c:	46ce      	mov	lr, r9
 8000a3e:	469c      	mov	ip, r3
 8000a40:	d351      	bcc.n	8000ae6 <__udivmoddi4+0x28a>
 8000a42:	d04e      	beq.n	8000ae2 <__udivmoddi4+0x286>
 8000a44:	b155      	cbz	r5, 8000a5c <__udivmoddi4+0x200>
 8000a46:	ebb8 030e 	subs.w	r3, r8, lr
 8000a4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a52:	40cb      	lsrs	r3, r1
 8000a54:	431e      	orrs	r6, r3
 8000a56:	40cc      	lsrs	r4, r1
 8000a58:	e9c5 6400 	strd	r6, r4, [r5]
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	e750      	b.n	8000902 <__udivmoddi4+0xa6>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f103 	lsr.w	r1, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a70:	4094      	lsls	r4, r2
 8000a72:	430c      	orrs	r4, r1
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7c:	fa1f f78c 	uxth.w	r7, ip
 8000a80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a84:	fb08 3110 	mls	r1, r8, r0, r3
 8000a88:	0c23      	lsrs	r3, r4, #16
 8000a8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8e:	fb00 f107 	mul.w	r1, r0, r7
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x24c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a9e:	d22c      	bcs.n	8000afa <__udivmoddi4+0x29e>
 8000aa0:	4299      	cmp	r1, r3
 8000aa2:	d92a      	bls.n	8000afa <__udivmoddi4+0x29e>
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb01 f307 	mul.w	r3, r1, r7
 8000abc:	42a3      	cmp	r3, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x276>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ac8:	d213      	bcs.n	8000af2 <__udivmoddi4+0x296>
 8000aca:	42a3      	cmp	r3, r4
 8000acc:	d911      	bls.n	8000af2 <__udivmoddi4+0x296>
 8000ace:	3902      	subs	r1, #2
 8000ad0:	4464      	add	r4, ip
 8000ad2:	1ae4      	subs	r4, r4, r3
 8000ad4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ad8:	e739      	b.n	800094e <__udivmoddi4+0xf2>
 8000ada:	4604      	mov	r4, r0
 8000adc:	e6f0      	b.n	80008c0 <__udivmoddi4+0x64>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e706      	b.n	80008f0 <__udivmoddi4+0x94>
 8000ae2:	45c8      	cmp	r8, r9
 8000ae4:	d2ae      	bcs.n	8000a44 <__udivmoddi4+0x1e8>
 8000ae6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aee:	3801      	subs	r0, #1
 8000af0:	e7a8      	b.n	8000a44 <__udivmoddi4+0x1e8>
 8000af2:	4631      	mov	r1, r6
 8000af4:	e7ed      	b.n	8000ad2 <__udivmoddi4+0x276>
 8000af6:	4603      	mov	r3, r0
 8000af8:	e799      	b.n	8000a2e <__udivmoddi4+0x1d2>
 8000afa:	4630      	mov	r0, r6
 8000afc:	e7d4      	b.n	8000aa8 <__udivmoddi4+0x24c>
 8000afe:	46d6      	mov	lr, sl
 8000b00:	e77f      	b.n	8000a02 <__udivmoddi4+0x1a6>
 8000b02:	4463      	add	r3, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	e74d      	b.n	80009a4 <__udivmoddi4+0x148>
 8000b08:	4606      	mov	r6, r0
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	e70f      	b.n	8000930 <__udivmoddi4+0xd4>
 8000b10:	3e02      	subs	r6, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	e730      	b.n	8000978 <__udivmoddi4+0x11c>
 8000b16:	bf00      	nop

08000b18 <__aeabi_idiv0>:
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_FREERTOS_Init+0x2c>)
 8000b24:	1d3c      	adds	r4, r7, #4
 8000b26:	461d      	mov	r5, r3
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	682b      	ldr	r3, [r5, #0]
 8000b2e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fff4 	bl	8004b22 <osThreadCreate>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <MX_FREERTOS_Init+0x30>)
 8000b3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	08005ed0 	.word	0x08005ed0
 8000b4c:	2000002c 	.word	0x2000002c

08000b50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f004 f809 	bl	8004b70 <osDelay>
 8000b5e:	e7fb      	b.n	8000b58 <StartDefaultTask+0x8>

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_GPIO_Init+0x44>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fbc1 	bl	8001332 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f810 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff ffd4 	bl	8000b60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bb8:	f000 f8c0 	bl	8000d3c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000bbc:	f000 f9d4 	bl	8000f68 <MX_USART2_UART_Init>
	//	MOTION_FWD
	//	MOTION_BACKWD

	//Bot_init(MOTION_FWD);
	//Bot_init(MOTION_FWD,50);
	Bot_init(MOTION_BACKWD,50);
 8000bc0:	2132      	movs	r1, #50	@ 0x32
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fb0c 	bl	80011e0 <Bot_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bc8:	f7ff ffa8 	bl	8000b1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bcc:	f003 ffa2 	bl	8004b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <main+0x28>

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	@ 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2238      	movs	r2, #56	@ 0x38
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 f936 	bl	8005e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fe72 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c04:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c12:	2355      	movs	r3, #85	@ 0x55
 8000c14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 ff0e 	bl	8001a48 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c32:	f000 f818 	bl	8000c66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fa0c 	bl	800206c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 f804 	bl	8000c66 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	@ 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6a:	b672      	cpsid	i
}
 8000c6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c6e:	bf00      	nop
 8000c70:	e7fd      	b.n	8000c6e <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x50>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fc6c 	bl	800158e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cb6:	f000 feb7 	bl	8001a28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 fb69 	bl	80013d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d06:	f004 fc25 	bl	8005554 <xTaskGetSchedulerState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d001      	beq.n	8000d14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d10:	f004 fe62 	bl	80059d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09c      	sub	sp, #112	@ 0x70
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2234      	movs	r2, #52	@ 0x34
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 f86c 	bl	8005e54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb4 <MX_TIM1_Init+0x178>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d82:	4b4b      	ldr	r3, [pc, #300]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d88:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000d8e:	4b48      	ldr	r3, [pc, #288]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d90:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000d94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9c:	4b44      	ldr	r3, [pc, #272]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b43      	ldr	r3, [pc, #268]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da8:	4841      	ldr	r0, [pc, #260]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000daa:	f001 fd67 	bl	800287c <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000db4:	f7ff ff57 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	483a      	ldr	r0, [pc, #232]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000dc6:	f002 f8bb 	bl	8002f40 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dd0:	f7ff ff49 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd4:	4836      	ldr	r0, [pc, #216]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000dd6:	f001 fda8 	bl	800292a <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000de0:	f7ff ff41 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df4:	4619      	mov	r1, r3
 8000df6:	482e      	ldr	r0, [pc, #184]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000df8:	f002 ff02 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e02:	f7ff ff30 	bl	8000c66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	@ 0x60
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2450;
 8000e0a:	f640 1392 	movw	r3, #2450	@ 0x992
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4820      	ldr	r0, [pc, #128]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000e2e:	f001 ff73 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000e38:	f7ff ff15 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000e46:	f001 ff67 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000e50:	f7ff ff09 	bl	8000c66 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000e92:	f002 ff37 	bl	8003d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000e9c:	f7ff fee3 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <MX_TIM1_Init+0x174>)
 8000ea2:	f000 f829 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3770      	adds	r7, #112	@ 0x70
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000030 	.word	0x20000030
 8000eb4:	40012c00 	.word	0x40012c00

08000eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x38>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40012c00 	.word	0x40012c00
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11d      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_MOT1_CH1_Pin|PWM_MOT2_CH2_Pin|PWM_MOT1_CH1n_Pin|PWM_MOT2_CH2n_Pin;
 8000f32:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8000f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f44:	2306      	movs	r3, #6
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f52:	f000 fb43 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012c00 	.word	0x40012c00
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb0:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fb2:	f002 ff58 	bl	8003e66 <HAL_UART_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f7ff fe53 	bl	8000c66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fc4:	f003 fcc4 	bl	8004950 <HAL_UARTEx_SetTxFifoThreshold>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f7ff fe4a 	bl	8000c66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fd6:	f003 fcf9 	bl	80049cc <HAL_UARTEx_SetRxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f7ff fe41 	bl	8000c66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_USART2_UART_Init+0x90>)
 8000fe6:	f003 fc7a 	bl	80048de <HAL_UARTEx_DisableFifoMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f7ff fe39 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000007c 	.word	0x2000007c
 8000ffc:	40004400 	.word	0x40004400

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09a      	sub	sp, #104	@ 0x68
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2244      	movs	r2, #68	@ 0x44
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 ff17 	bl	8005e54 <memset>
  if(uartHandle->Instance==USART2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_UART_MspInit+0xa8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d136      	bne.n	800109e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fa2d 	bl	800249c <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f7ff fe0d 	bl	8000c66 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <HAL_UART_MspInit+0xac>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <HAL_UART_MspInit+0xac>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001056:	6593      	str	r3, [r2, #88]	@ 0x58
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_UART_MspInit+0xac>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0xac>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_UART_MspInit+0xac>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_UART_MspInit+0xac>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107c:	230c      	movs	r3, #12
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108c:	2307      	movs	r3, #7
 800108e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f000 fa9f 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3768      	adds	r7, #104	@ 0x68
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <DRV_MOT_startMot_fwd>:
/**
 * @brief Initialisation des moteurs en PWM.
 * @param htim : Handle du timer utilisé pour les moteurs.
 */
//start motor in Forward
void DRV_MOT_startMot_fwd(Motor_drv_struct *motor){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	/*CH1*/	HAL_TIM_PWM_Start(&htim1, motor->motor_chan_id); //PWM -->pin FWD PWM
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <DRV_MOT_startMot_fwd+0x28>)
 80010c0:	f001 fc94 	bl	80029ec <HAL_TIM_PWM_Start>
	/*CH1n*/	HAL_TIMEx_PWMN_Stop(&htim1, motor->motor_chan_id); //L --> PIN REV
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <DRV_MOT_startMot_fwd+0x28>)
 80010cc:	f002 fd3a 	bl	8003b44 <HAL_TIMEx_PWMN_Stop>

}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000030 	.word	0x20000030

080010dc <DRV_MOT_startMot_rev>:

//start motor in Reverse
void DRV_MOT_startMot_rev(Motor_drv_struct *motor){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	HAL_TIMEx_PWMN_Start(&htim1, motor->motor_chan_id); // PWM --> PIN REV L
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <DRV_MOT_startMot_rev+0x28>)
 80010ec:	f002 fc76 	bl	80039dc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Stop(&htim1, motor->motor_chan_id); // L-->pin FWD
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <DRV_MOT_startMot_rev+0x28>)
 80010f8:	f001 fd78 	bl	8002bec <HAL_TIM_PWM_Stop>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000030 	.word	0x20000030

08001108 <DRV_MOT_bot_dualFwd>:
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, &mtr->alpha_stop);
}

//Two wheels robot same rotation sign
//
void DRV_MOT_bot_dualFwd(Motor_drv_struct *mtr1, Motor_drv_struct *mtr2){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]

	//Un moteur dans un sens FWD
	DRV_MOT_startMot_fwd(mtr1);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffcc 	bl	80010b0 <DRV_MOT_startMot_fwd>

	//un moteur dans le sens ReV
	DRV_MOT_startMot_rev(mtr2);
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f7ff ffdf 	bl	80010dc <DRV_MOT_startMot_rev>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <DRV_MOT_bot_dualRev>:

void DRV_MOT_bot_dualRev(Motor_drv_struct *mtr1, Motor_drv_struct *mtr2){
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	//the motors goes in direction opposite defined in fonction	DRV_MOT_bot_dualFwd

	//Un moteur dans un sens Rev
	DRV_MOT_startMot_rev(mtr1);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffd3 	bl	80010dc <DRV_MOT_startMot_rev>

	//un moteur dans le sens ReV
	DRV_MOT_startMot_fwd(mtr2);
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f7ff ffba 	bl	80010b0 <DRV_MOT_startMot_fwd>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <DRV_MOT_Init>:



//2 motors passed as arguments
//Constructor
void DRV_MOT_Init(Motor_drv_struct *mtrinit, uint32_t mtr_chan) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]

	mtrinit->motor_chan_id=mtr_chan;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	609a      	str	r2, [r3, #8]

}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DRV_MOT_SetSpeed>:

void DRV_MOT_SetSpeed(Motor_drv_struct *motr, uint16_t speed) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <DRV_MOT_SetSpeed+0x1e>
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	887a      	ldrh	r2, [r7, #2]
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800117c:	e027      	b.n	80011ce <DRV_MOT_SetSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d104      	bne.n	8001190 <DRV_MOT_SetSpeed+0x30>
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800118e:	e01e      	b.n	80011ce <DRV_MOT_SetSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d104      	bne.n	80011a2 <DRV_MOT_SetSpeed+0x42>
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80011a0:	e015      	b.n	80011ce <DRV_MOT_SetSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	d104      	bne.n	80011b4 <DRV_MOT_SetSpeed+0x54>
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011b2:	e00c      	b.n	80011ce <DRV_MOT_SetSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b10      	cmp	r3, #16
 80011ba:	d104      	bne.n	80011c6 <DRV_MOT_SetSpeed+0x66>
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80011c4:	e003      	b.n	80011ce <DRV_MOT_SetSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, motr->motor_chan_id, speed);
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <DRV_MOT_SetSpeed+0x7c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000030 	.word	0x20000030

080011e0 <Bot_init>:

void Bot_init (uint8_t direction,uint16_t pulsePercent)
//bot component
{//we create one motor
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
	Motor_drv_struct mtr_right;//motor considered as the right for the bot


	// init les deux motors (affecter un channel a chaque)

	DRV_MOT_Init(&mtr_left,MTR1_CHANNEL);//channel1
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffa4 	bl	8001144 <DRV_MOT_Init>
	DRV_MOT_Init(&mtr_right,MTR2_CHANNEL);//channel 2
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2104      	movs	r1, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff9e 	bl	8001144 <DRV_MOT_Init>
	// si oui

	//Convertir le rapport cyclique from  percent to ARR

	// Récupération de la valeur maximale (ARR) du timer
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <Bot_init+0xf8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Conversion du pourcentage en valeur ARR utilisable
	uint32_t pulse;

	pulse = (pulsePercent * ARR) / 100;
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a30      	ldr	r2, [pc, #192]	@ (80012dc <Bot_init+0xfc>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	623b      	str	r3, [r7, #32]


	//rapport cyclique fixe
	//pulse=2125;

	if(direction==1){
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d126      	bne.n	8001276 <Bot_init+0x96>
		DRV_MOT_bot_dualFwd(&mtr_left,&mtr_right);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff68 	bl	8001108 <DRV_MOT_bot_dualFwd>

		//		DRV_MOT_SetSpeed(&mtr_left, 2125);
		//		DRV_MOT_SetSpeed(&mtr_right,2125);

//correct
			DRV_MOT_SetSpeed(&mtr_left,pulse);
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff8c 	bl	8001160 <DRV_MOT_SetSpeed>
			DRV_MOT_SetSpeed(&mtr_right, adapt_RATIO * pulse);//adaptation sur moteur + rapide motor right
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f7ff fa55 	bl	80006f8 <__aeabi_ui2d>
 800124e:	a320      	add	r3, pc, #128	@ (adr r3, 80012d0 <Bot_init+0xf0>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7fe ffe4 	bl	8000220 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fac4 	bl	80007ec <__aeabi_d2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff76 	bl	8001160 <DRV_MOT_SetSpeed>
		DRV_MOT_SetSpeed(&mtr_left, adapt_RATIO * pulse);
		DRV_MOT_SetSpeed(&mtr_right,pulse);

	}

}
 8001274:	e025      	b.n	80012c2 <Bot_init+0xe2>
		DRV_MOT_bot_dualRev(&mtr_left,&mtr_right);
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff50 	bl	8001126 <DRV_MOT_bot_dualRev>
		DRV_MOT_SetSpeed(&mtr_left, adapt_RATIO * pulse);
 8001286:	6a38      	ldr	r0, [r7, #32]
 8001288:	f7ff fa36 	bl	80006f8 <__aeabi_ui2d>
 800128c:	a310      	add	r3, pc, #64	@ (adr r3, 80012d0 <Bot_init+0xf0>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7fe ffc5 	bl	8000220 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff faa5 	bl	80007ec <__aeabi_d2uiz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff57 	bl	8001160 <DRV_MOT_SetSpeed>
		DRV_MOT_SetSpeed(&mtr_right,pulse);
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff4f 	bl	8001160 <DRV_MOT_SetSpeed>
}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	@ 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	eb851eb8 	.word	0xeb851eb8
 80012d4:	3f9eb851 	.word	0x3f9eb851
 80012d8:	20000030 	.word	0x20000030
 80012dc:	51eb851f 	.word	0x51eb851f

080012e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e4:	f7ff fd18 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopForever+0x6>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopForever+0xe>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopForever+0x16>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f004 fda9 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001312:	f7ff fc49 	bl	8000ba8 <main>

08001316 <LoopForever>:

LoopForever:
    b LoopForever
 8001316:	e7fe      	b.n	8001316 <LoopForever>
  ldr   r0, =_estack
 8001318:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001324:	08005f3c 	.word	0x08005f3c
  ldr r2, =_sbss
 8001328:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800132c:	20000e68 	.word	0x20000e68

08001330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_2_IRQHandler>

08001332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f91b 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f80e 	bl	8001364 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	e001      	b.n	8001358 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001354:	f7ff fc8e 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001358:	79fb      	ldrb	r3, [r7, #7]

}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_InitTick+0x68>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d022      	beq.n	80013be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_InitTick+0x6c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_InitTick+0x68>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001384:	fbb1 f3f3 	udiv	r3, r1, r3
 8001388:	fbb2 f3f3 	udiv	r3, r2, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f918 	bl	80015c2 <HAL_SYSTICK_Config>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10f      	bne.n	80013b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	d809      	bhi.n	80013b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139e:	2200      	movs	r2, #0
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013a6:	f000 f8f2 	bl	800158e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_InitTick+0x70>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e004      	b.n	80013c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_IncTick+0x1c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_IncTick+0x20>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a03      	ldr	r2, [pc, #12]	@ (80013f4 <HAL_IncTick+0x1c>)
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	20000110 	.word	0x20000110
 80013f8:	20000008 	.word	0x20000008

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000110 	.word	0x20000110

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	@ (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	@ (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	@ 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff47 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff90 	bl	80014cc <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5f 	bl	8001478 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb2 	bl	8001534 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015ea:	e15a      	b.n	80018a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 814c 	beq.w	800189c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a6 	beq.w	800189c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_GPIO_Init+0x2e4>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001754:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_GPIO_Init+0x2e4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6613      	str	r3, [r2, #96]	@ 0x60
 800175c:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_GPIO_Init+0x2e4>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001768:	4a56      	ldr	r2, [pc, #344]	@ (80018c4 <HAL_GPIO_Init+0x2e8>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001792:	d01f      	beq.n	80017d4 <HAL_GPIO_Init+0x1f8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4c      	ldr	r2, [pc, #304]	@ (80018c8 <HAL_GPIO_Init+0x2ec>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d019      	beq.n	80017d0 <HAL_GPIO_Init+0x1f4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4b      	ldr	r2, [pc, #300]	@ (80018cc <HAL_GPIO_Init+0x2f0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d013      	beq.n	80017cc <HAL_GPIO_Init+0x1f0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <HAL_GPIO_Init+0x2f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00d      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <HAL_GPIO_Init+0x2f8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a48      	ldr	r2, [pc, #288]	@ (80018d8 <HAL_GPIO_Init+0x2fc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017bc:	2305      	movs	r3, #5
 80017be:	e00a      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017c0:	2306      	movs	r3, #6
 80017c2:	e008      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e004      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017d4:	2300      	movs	r3, #0
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4093      	lsls	r3, r2
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e6:	4937      	ldr	r1, [pc, #220]	@ (80018c4 <HAL_GPIO_Init+0x2e8>)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_GPIO_Init+0x300>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001818:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <HAL_GPIO_Init+0x300>)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_GPIO_Init+0x300>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001842:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <HAL_GPIO_Init+0x300>)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001848:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_GPIO_Init+0x300>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800186c:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <HAL_GPIO_Init+0x300>)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_GPIO_Init+0x300>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001896:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_GPIO_Init+0x300>)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f47f ae9d 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000c00 	.word	0x48000c00
 80018d4:	48001000 	.word	0x48001000
 80018d8:	48001400 	.word	0x48001400
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d141      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ee:	4b4b      	ldr	r3, [pc, #300]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fa:	d131      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018fc:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001902:	4a46      	ldr	r2, [pc, #280]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001908:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001914:	4a41      	ldr	r2, [pc, #260]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800191c:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2232      	movs	r2, #50	@ 0x32
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	4a3f      	ldr	r2, [pc, #252]	@ (8001a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001932:	e002      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3b01      	subs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193a:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001946:	d102      	bne.n	800194e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194e:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800195a:	d158      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e057      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001966:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800196c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001970:	e04d      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001978:	d141      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800197a:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001986:	d131      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800198e:	4a23      	ldr	r2, [pc, #140]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2232      	movs	r2, #50	@ 0x32
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	e002      	b.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d2:	d102      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e6:	d112      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e011      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019fc:	e007      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a36:	6093      	str	r3, [r2, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e2fe      	b.n	8002058 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d075      	beq.n	8001b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4b97      	ldr	r3, [pc, #604]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	4b94      	ldr	r3, [pc, #592]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3e>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_OscConfig+0x44>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05b      	beq.n	8001b50 <HAL_RCC_OscConfig+0x108>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d157      	bne.n	8001b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e2d9      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x74>
 8001aae:	4b85      	ldr	r3, [pc, #532]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a84      	ldr	r2, [pc, #528]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7b      	ldr	r2, [pc, #492]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001ae0:	4b78      	ldr	r3, [pc, #480]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a77      	ldr	r2, [pc, #476]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b75      	ldr	r3, [pc, #468]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a74      	ldr	r2, [pc, #464]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc7c 	bl	80013fc <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc78 	bl	80013fc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	@ 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e29e      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xc0>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fc68 	bl	80013fc <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fc64 	bl	80013fc <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e28a      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	4b60      	ldr	r3, [pc, #384]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0xe8>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d075      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0x136>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_OscConfig+0x13c>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11f      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x154>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e25d      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	4946      	ldr	r1, [pc, #280]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb0:	4b45      	ldr	r3, [pc, #276]	@ (8001cc8 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fbd5 	bl	8001364 <HAL_InitTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d043      	beq.n	8001c48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e249      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc10 	bl	80013fc <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc0c 	bl	80013fc <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e232      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	492d      	ldr	r1, [pc, #180]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e01a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fbec 	bl	80013fc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbe8 	bl	80013fc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e20e      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d041      	beq.n	8001cda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c64:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fbc5 	bl	80013fc <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff fbc1 	bl	80013fc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1e7      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCC_OscConfig+0x22e>
 8001c96:	e020      	b.n	8001cda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fba8 	bl	80013fc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cae:	e00d      	b.n	8001ccc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fba4 	bl	80013fc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d906      	bls.n	8001ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1ca      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ea      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80a6 	beq.w	8001e34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cec:	4b84      	ldr	r3, [pc, #528]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2b4>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x2b6>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b7f      	ldr	r3, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	4a7e      	ldr	r2, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1e:	4b79      	ldr	r3, [pc, #484]	@ (8001f04 <HAL_RCC_OscConfig+0x4bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2a:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCC_OscConfig+0x4bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a75      	ldr	r2, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x4bc>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb61 	bl	80013fc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fb5d 	bl	80013fc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e183      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0x4bc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_RCC_OscConfig+0x32e>
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	4a65      	ldr	r2, [pc, #404]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d74:	e024      	b.n	8001dc0 <HAL_RCC_OscConfig+0x378>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d110      	bne.n	8001da0 <HAL_RCC_OscConfig+0x358>
 8001d7e:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	4a5e      	ldr	r2, [pc, #376]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d94:	4a5a      	ldr	r2, [pc, #360]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x378>
 8001da0:	4b57      	ldr	r3, [pc, #348]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db0:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db6:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fb18 	bl	80013fc <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb14 	bl	80013fc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e138      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de6:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x388>
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fb01 	bl	80013fc <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fafd 	bl	80013fc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e121      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e14:	4b3a      	ldr	r3, [pc, #232]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ed      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b35      	ldr	r3, [pc, #212]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	4a34      	ldr	r2, [pc, #208]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e48:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fad0 	bl	80013fc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e60:	f7ff facc 	bl	80013fc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0f2      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x418>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fab3 	bl	80013fc <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7ff faaf 	bl	80013fc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0d5      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80c9 	beq.w	8002056 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	f000 8083 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d15e      	bne.n	8001f98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a08      	ldr	r2, [pc, #32]	@ (8001f00 <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fa89 	bl	80013fc <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	e00c      	b.n	8001f08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff fa85 	bl	80013fc <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d905      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0ab      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ec      	bne.n	8001eee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	4b52      	ldr	r3, [pc, #328]	@ (8002064 <HAL_RCC_OscConfig+0x61c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6a11      	ldr	r1, [r2, #32]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f24:	3a01      	subs	r2, #1
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f2e:	0212      	lsls	r2, r2, #8
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f36:	0852      	lsrs	r2, r2, #1
 8001f38:	3a01      	subs	r2, #1
 8001f3a:	0552      	lsls	r2, r2, #21
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	3a01      	subs	r2, #1
 8001f46:	0652      	lsls	r2, r2, #25
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f4e:	06d2      	lsls	r2, r2, #27
 8001f50:	430a      	orrs	r2, r1
 8001f52:	4943      	ldr	r1, [pc, #268]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f64:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a3d      	ldr	r2, [pc, #244]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fa44 	bl	80013fc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff fa40 	bl	80013fc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e066      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x530>
 8001f96:	e05e      	b.n	8002056 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a30      	ldr	r2, [pc, #192]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa2a 	bl	80013fc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff fa26 	bl	80013fc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04c      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbe:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fca:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4924      	ldr	r1, [pc, #144]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
 8001fd6:	e03e      	b.n	8002056 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e039      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <HAL_RCC_OscConfig+0x618>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d12c      	bne.n	8002052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	3b01      	subs	r3, #1
 8002004:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d123      	bne.n	8002052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11b      	bne.n	8002052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d113      	bne.n	8002052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d109      	bne.n	8002052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	019f800c 	.word	0x019f800c
 8002068:	feeefffc 	.word	0xfeeefffc

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e11e      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b91      	ldr	r3, [pc, #580]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b8e      	ldr	r3, [pc, #568]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	498c      	ldr	r1, [pc, #560]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b8a      	ldr	r3, [pc, #552]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e106      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d073      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d129      	bne.n	800211c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c8:	4b81      	ldr	r3, [pc, #516]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0f4      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020d8:	f000 f99c 	bl	8002414 <RCC_GetSysClockFreqFromPLLSource>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4a7c      	ldr	r2, [pc, #496]	@ (80022d4 <HAL_RCC_ClockConfig+0x268>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d93f      	bls.n	8002166 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020e6:	4b7a      	ldr	r3, [pc, #488]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d033      	beq.n	8002166 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12f      	bne.n	8002166 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002106:	4b72      	ldr	r3, [pc, #456]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800210e:	4a70      	ldr	r2, [pc, #448]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002114:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e024      	b.n	8002166 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002124:	4b6a      	ldr	r3, [pc, #424]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0c6      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	4b66      	ldr	r3, [pc, #408]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0be      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002144:	f000 f8ce 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8002148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4a61      	ldr	r2, [pc, #388]	@ (80022d4 <HAL_RCC_ClockConfig+0x268>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d909      	bls.n	8002166 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002152:	4b5f      	ldr	r3, [pc, #380]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800215a:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002160:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002162:	2380      	movs	r3, #128	@ 0x80
 8002164:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b5a      	ldr	r3, [pc, #360]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4957      	ldr	r1, [pc, #348]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002178:	f7ff f940 	bl	80013fc <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f93c 	bl	80013fc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e095      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b4e      	ldr	r3, [pc, #312]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c0:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a42      	ldr	r2, [pc, #264]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021d8:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80021e0:	4a3b      	ldr	r2, [pc, #236]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4936      	ldr	r1, [pc, #216]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
 80021fa:	e008      	b.n	800220e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b80      	cmp	r3, #128	@ 0x80
 8002200:	d105      	bne.n	800220e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4a32      	ldr	r2, [pc, #200]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002208:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800220c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d21d      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221c:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 020f 	bic.w	r2, r3, #15
 8002224:	4929      	ldr	r1, [pc, #164]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800222c:	f7ff f8e6 	bl	80013fc <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f8e2 	bl	80013fc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e03b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x260>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d1ed      	bne.n	8002234 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4917      	ldr	r1, [pc, #92]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490f      	ldr	r1, [pc, #60]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002296:	f000 f825 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <HAL_RCC_ClockConfig+0x26c>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <HAL_RCC_ClockConfig+0x270>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_RCC_ClockConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f852 	bl	8001364 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	04c4b400 	.word	0x04c4b400
 80022d8:	08005eec 	.word	0x08005eec
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022ea:	4b2c      	ldr	r3, [pc, #176]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e047      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022fc:	4b27      	ldr	r3, [pc, #156]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d102      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e03e      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800230e:	4b23      	ldr	r3, [pc, #140]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d136      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4a16      	ldr	r2, [pc, #88]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002342:	68d2      	ldr	r2, [r2, #12]
 8002344:	0a12      	lsrs	r2, r2, #8
 8002346:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
      break;
 8002350:	e00c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002352:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4a10      	ldr	r2, [pc, #64]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	0a12      	lsrs	r2, r2, #8
 8002360:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
      break;
 800236a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0e5b      	lsrs	r3, r3, #25
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e001      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800238c:	693b      	ldr	r3, [r7, #16]
}
 800238e:	4618      	mov	r0, r3
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	00f42400 	.word	0x00f42400

080023a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08005efc 	.word	0x08005efc

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023ec:	f7ff ffda 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	08005efc 	.word	0x08005efc

08002414 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d10c      	bne.n	8002452 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002438:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	4a14      	ldr	r2, [pc, #80]	@ (8002494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002442:	68d2      	ldr	r2, [r2, #12]
 8002444:	0a12      	lsrs	r2, r2, #8
 8002446:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
    break;
 8002450:	e00c      	b.n	800246c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002452:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4a0e      	ldr	r2, [pc, #56]	@ (8002494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	0a12      	lsrs	r2, r2, #8
 8002460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    break;
 800246a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0e5b      	lsrs	r3, r3, #25
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002486:	687b      	ldr	r3, [r7, #4]
}
 8002488:	4618      	mov	r0, r3
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	00f42400 	.word	0x00f42400

0800249c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a4:	2300      	movs	r3, #0
 80024a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8098 	beq.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b40      	ldr	r3, [pc, #256]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a3f      	ldr	r2, [pc, #252]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d6:	4b3d      	ldr	r3, [pc, #244]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e6:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a39      	ldr	r2, [pc, #228]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024f2:	f7fe ff83 	bl	80013fc <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f8:	e009      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7fe ff7f 	bl	80013fc <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d902      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	74fb      	strb	r3, [r7, #19]
        break;
 800250c:	e005      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250e:	4b30      	ldr	r3, [pc, #192]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ef      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d159      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002520:	4b2a      	ldr	r3, [pc, #168]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01e      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	d019      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800253c:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002546:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002548:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002568:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe ff3f 	bl	80013fc <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002580:	e00b      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe ff3b 	bl	80013fc <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d902      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	74fb      	strb	r3, [r7, #19]
            break;
 8002598:	e006      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ec      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025c4:	e008      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
 80025ca:	e005      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4ba6      	ldr	r3, [pc, #664]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	4aa5      	ldr	r2, [pc, #660]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f6:	4ba0      	ldr	r3, [pc, #640]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fc:	f023 0203 	bic.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	499c      	ldr	r1, [pc, #624]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002618:	4b97      	ldr	r3, [pc, #604]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f023 020c 	bic.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4994      	ldr	r1, [pc, #592]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263a:	4b8f      	ldr	r3, [pc, #572]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	498b      	ldr	r1, [pc, #556]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265c:	4b86      	ldr	r3, [pc, #536]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4983      	ldr	r1, [pc, #524]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800267e:	4b7e      	ldr	r3, [pc, #504]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	497a      	ldr	r1, [pc, #488]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a0:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	4972      	ldr	r1, [pc, #456]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4969      	ldr	r1, [pc, #420]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e4:	4b64      	ldr	r3, [pc, #400]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4961      	ldr	r1, [pc, #388]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002706:	4b5c      	ldr	r3, [pc, #368]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	4958      	ldr	r1, [pc, #352]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	4950      	ldr	r1, [pc, #320]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a4a      	ldr	r2, [pc, #296]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002752:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	4942      	ldr	r1, [pc, #264]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a3c      	ldr	r2, [pc, #240]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002798:	4b37      	ldr	r3, [pc, #220]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4934      	ldr	r1, [pc, #208]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d0:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	4926      	ldr	r1, [pc, #152]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ee:	d105      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	4918      	ldr	r1, [pc, #96]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002826:	d105      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002846:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284e:	490a      	ldr	r1, [pc, #40]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800285e:	d105      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a04      	ldr	r2, [pc, #16]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800286c:	7cbb      	ldrb	r3, [r7, #18]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e049      	b.n	8002922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fb08 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fc3a 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e049      	b.n	80029d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f841 	bl	80029d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 fbe3 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_TIM_PWM_Start+0x24>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e03c      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d109      	bne.n	8002a2a <HAL_TIM_PWM_Start+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	e02f      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x58>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x72>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x8c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e097      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xb6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa0:	e023      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0xc6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	e01b      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xd6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac0:	e013      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xe6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad0:	e00b      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0xf6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	e003      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff4c 	bl	8003990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a33      	ldr	r2, [pc, #204]	@ (8002bcc <HAL_TIM_PWM_Start+0x1e0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a32      	ldr	r2, [pc, #200]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1ec>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <HAL_TIM_PWM_Start+0x1f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x142>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_PWM_Start+0x144>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a20      	ldr	r2, [pc, #128]	@ (8002bcc <HAL_TIM_PWM_Start+0x1e0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b56:	d013      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <HAL_TIM_PWM_Start+0x1f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d115      	bne.n	8002bac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_TIM_PWM_Start+0x1fc>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d015      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d011      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40013400 	.word	0x40013400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	00010007 	.word	0x00010007

08002bec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fec6 	bl	8003990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3e      	ldr	r2, [pc, #248]	@ (8002d04 <HAL_TIM_PWM_Stop+0x118>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIM_PWM_Stop+0x4a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	@ (8002d08 <HAL_TIM_PWM_Stop+0x11c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIM_PWM_Stop+0x4a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d0c <HAL_TIM_PWM_Stop+0x120>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_PWM_Stop+0x4a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	@ (8002d10 <HAL_TIM_PWM_Stop+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_PWM_Stop+0x4a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a38      	ldr	r2, [pc, #224]	@ (8002d14 <HAL_TIM_PWM_Stop+0x128>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PWM_Stop+0x4e>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_TIM_PWM_Stop+0x50>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <HAL_TIM_PWM_Stop+0x84>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_PWM_Stop+0x84>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_TIM_PWM_Stop+0xb4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_PWM_Stop+0xb4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_PWM_Stop+0xc4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cae:	e023      	b.n	8002cf8 <HAL_TIM_PWM_Stop+0x10c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d104      	bne.n	8002cc0 <HAL_TIM_PWM_Stop+0xd4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbe:	e01b      	b.n	8002cf8 <HAL_TIM_PWM_Stop+0x10c>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_PWM_Stop+0xe4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cce:	e013      	b.n	8002cf8 <HAL_TIM_PWM_Stop+0x10c>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d104      	bne.n	8002ce0 <HAL_TIM_PWM_Stop+0xf4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cde:	e00b      	b.n	8002cf8 <HAL_TIM_PWM_Stop+0x10c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d104      	bne.n	8002cf0 <HAL_TIM_PWM_Stop+0x104>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cee:	e003      	b.n	8002cf8 <HAL_TIM_PWM_Stop+0x10c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800

08002d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e0ff      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b14      	cmp	r3, #20
 8002d42:	f200 80f0 	bhi.w	8002f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002da1 	.word	0x08002da1
 8002d50:	08002f27 	.word	0x08002f27
 8002d54:	08002f27 	.word	0x08002f27
 8002d58:	08002f27 	.word	0x08002f27
 8002d5c:	08002de1 	.word	0x08002de1
 8002d60:	08002f27 	.word	0x08002f27
 8002d64:	08002f27 	.word	0x08002f27
 8002d68:	08002f27 	.word	0x08002f27
 8002d6c:	08002e23 	.word	0x08002e23
 8002d70:	08002f27 	.word	0x08002f27
 8002d74:	08002f27 	.word	0x08002f27
 8002d78:	08002f27 	.word	0x08002f27
 8002d7c:	08002e63 	.word	0x08002e63
 8002d80:	08002f27 	.word	0x08002f27
 8002d84:	08002f27 	.word	0x08002f27
 8002d88:	08002f27 	.word	0x08002f27
 8002d8c:	08002ea5 	.word	0x08002ea5
 8002d90:	08002f27 	.word	0x08002f27
 8002d94:	08002f27 	.word	0x08002f27
 8002d98:	08002f27 	.word	0x08002f27
 8002d9c:	08002ee5 	.word	0x08002ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fa60 	bl	800326c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0208 	orr.w	r2, r2, #8
 8002dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0204 	bic.w	r2, r2, #4
 8002dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6999      	ldr	r1, [r3, #24]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	619a      	str	r2, [r3, #24]
      break;
 8002dde:	e0a5      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fad0 	bl	800338c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	619a      	str	r2, [r3, #24]
      break;
 8002e20:	e084      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fb39 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0208 	orr.w	r2, r2, #8
 8002e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0204 	bic.w	r2, r2, #4
 8002e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69d9      	ldr	r1, [r3, #28]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
      break;
 8002e60:	e064      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fba1 	bl	80035b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	021a      	lsls	r2, r3, #8
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	61da      	str	r2, [r3, #28]
      break;
 8002ea2:	e043      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fc0a 	bl	80036c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0204 	bic.w	r2, r2, #4
 8002ece:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002ee2:	e023      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc4e 	bl	800378c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	021a      	lsls	r2, r3, #8
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002f24:	e002      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_ConfigClockSource+0x1c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0de      	b.n	800311a <HAL_TIM_ConfigClockSource+0x1da>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a63      	ldr	r2, [pc, #396]	@ (8003124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f000 80a9 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002f9c:	4a61      	ldr	r2, [pc, #388]	@ (8003124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	f200 80ae 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002fa4:	4a60      	ldr	r2, [pc, #384]	@ (8003128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f000 80a1 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002fac:	4a5e      	ldr	r2, [pc, #376]	@ (8003128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f200 80a6 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800312c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f000 8099 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800312c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	f200 809e 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003130 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	f000 8091 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002fcc:	4a58      	ldr	r2, [pc, #352]	@ (8003130 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f200 8096 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002fd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002fd8:	f000 8089 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8002fdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002fe0:	f200 808e 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0x128>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x1c6>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003000:	2b70      	cmp	r3, #112	@ 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xfa>
 8003004:	2b70      	cmp	r3, #112	@ 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003008:	2b60      	cmp	r3, #96	@ 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
 800300c:	2b60      	cmp	r3, #96	@ 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003010:	2b50      	cmp	r3, #80	@ 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x14e>
 8003014:	2b50      	cmp	r3, #80	@ 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003018:	2b40      	cmp	r3, #64	@ 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x18e>
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003020:	2b30      	cmp	r3, #48	@ 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	f000 fc81 	bl	8003950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	f000 fc6a 	bl	8003950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fbdc 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	@ 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fc35 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 fbfb 	bl	80038b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	@ 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fc25 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fbbc 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	@ 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fc15 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 fc0c 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	00100070 	.word	0x00100070
 8003128:	00100040 	.word	0x00100040
 800312c:	00100030 	.word	0x00100030
 8003130:	00100020 	.word	0x00100020

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a42      	ldr	r2, [pc, #264]	@ (8003250 <TIM_Base_SetConfig+0x11c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3f      	ldr	r2, [pc, #252]	@ (8003254 <TIM_Base_SetConfig+0x120>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3d      	ldr	r2, [pc, #244]	@ (800325c <TIM_Base_SetConfig+0x128>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a33      	ldr	r2, [pc, #204]	@ (8003250 <TIM_Base_SetConfig+0x11c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01b      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <TIM_Base_SetConfig+0x120>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2f      	ldr	r2, [pc, #188]	@ (8003258 <TIM_Base_SetConfig+0x124>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2e      	ldr	r2, [pc, #184]	@ (800325c <TIM_Base_SetConfig+0x128>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a16      	ldr	r2, [pc, #88]	@ (8003250 <TIM_Base_SetConfig+0x11c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0xe8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	@ (800325c <TIM_Base_SetConfig+0x128>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0xe8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0xe8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xe8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a14      	ldr	r2, [pc, #80]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
  }
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 0201 	bic.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <TIM_OC1_SetConfig+0x10c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00f      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	@ (800337c <TIM_OC1_SetConfig+0x110>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003380 <TIM_OC1_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a29      	ldr	r2, [pc, #164]	@ (8003384 <TIM_OC1_SetConfig+0x118>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a28      	ldr	r2, [pc, #160]	@ (8003388 <TIM_OC1_SetConfig+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1b      	ldr	r2, [pc, #108]	@ (8003378 <TIM_OC1_SetConfig+0x10c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <TIM_OC1_SetConfig+0x110>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a19      	ldr	r2, [pc, #100]	@ (8003380 <TIM_OC1_SetConfig+0x114>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <TIM_OC1_SetConfig+0x118>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <TIM_OC1_SetConfig+0x11c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0210 	bic.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a28      	ldr	r2, [pc, #160]	@ (800348c <TIM_OC2_SetConfig+0x100>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x6c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <TIM_OC2_SetConfig+0x104>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <TIM_OC2_SetConfig+0x100>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1c      	ldr	r2, [pc, #112]	@ (8003490 <TIM_OC2_SetConfig+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1b      	ldr	r2, [pc, #108]	@ (8003494 <TIM_OC2_SetConfig+0x108>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <TIM_OC2_SetConfig+0x10c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <TIM_OC2_SetConfig+0x110>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d113      	bne.n	8003464 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	621a      	str	r2, [r3, #32]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a27      	ldr	r2, [pc, #156]	@ (800359c <TIM_OC3_SetConfig+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x6a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <TIM_OC3_SetConfig+0xfc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <TIM_OC3_SetConfig+0x104>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	@ (80035a8 <TIM_OC3_SetConfig+0x108>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a18      	ldr	r2, [pc, #96]	@ (80035ac <TIM_OC3_SetConfig+0x10c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d113      	bne.n	8003576 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a28      	ldr	r2, [pc, #160]	@ (80036b0 <TIM_OC4_SetConfig+0x100>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_OC4_SetConfig+0x6c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <TIM_OC4_SetConfig+0x104>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10d      	bne.n	8003638 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	031b      	lsls	r3, r3, #12
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <TIM_OC4_SetConfig+0x100>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00f      	beq.n	8003660 <TIM_OC4_SetConfig+0xb0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1c      	ldr	r2, [pc, #112]	@ (80036b4 <TIM_OC4_SetConfig+0x104>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_OC4_SetConfig+0xb0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <TIM_OC4_SetConfig+0x108>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC4_SetConfig+0xb0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a1a      	ldr	r2, [pc, #104]	@ (80036bc <TIM_OC4_SetConfig+0x10c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC4_SetConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a19      	ldr	r2, [pc, #100]	@ (80036c0 <TIM_OC4_SetConfig+0x110>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d113      	bne.n	8003688 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003666:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800366e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40013400 	.word	0x40013400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003708:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a17      	ldr	r2, [pc, #92]	@ (8003778 <TIM_OC5_SetConfig+0xb4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00f      	beq.n	800373e <TIM_OC5_SetConfig+0x7a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a16      	ldr	r2, [pc, #88]	@ (800377c <TIM_OC5_SetConfig+0xb8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_OC5_SetConfig+0x7a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <TIM_OC5_SetConfig+0xbc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_OC5_SetConfig+0x7a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <TIM_OC5_SetConfig+0xc0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC5_SetConfig+0x7a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <TIM_OC5_SetConfig+0xc4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	051b      	lsls	r3, r3, #20
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <TIM_OC6_SetConfig+0xb8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00f      	beq.n	8003808 <TIM_OC6_SetConfig+0x7c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <TIM_OC6_SetConfig+0xbc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_OC6_SetConfig+0x7c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <TIM_OC6_SetConfig+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_OC6_SetConfig+0x7c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <TIM_OC6_SetConfig+0xc4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_OC6_SetConfig+0x7c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <TIM_OC6_SetConfig+0xc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d109      	bne.n	800381c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	029b      	lsls	r3, r3, #10
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800

08003858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 030a 	bic.w	r3, r3, #10
 8003894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f023 0210 	bic.w	r2, r3, #16
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800392c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	f043 0307 	orr.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800396a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	431a      	orrs	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_TIMEx_PWMN_Start+0x24>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e022      	b.n	8003a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d109      	bne.n	8003a1a <HAL_TIMEx_PWMN_Start+0x3e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e015      	b.n	8003a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIMEx_PWMN_Start+0x58>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e008      	b.n	8003a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e069      	b.n	8003b22 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_TIMEx_PWMN_Start+0x82>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a5c:	e013      	b.n	8003a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIMEx_PWMN_Start+0x92>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6c:	e00b      	b.n	8003a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d104      	bne.n	8003a7e <HAL_TIMEx_PWMN_Start+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a7c:	e003      	b.n	8003a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f9c4 	bl	8003e1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <HAL_TIMEx_PWMN_Start+0x150>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab6:	d013      	beq.n	8003ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <HAL_TIMEx_PWMN_Start+0x154>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <HAL_TIMEx_PWMN_Start+0x158>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	@ (8003b38 <HAL_TIMEx_PWMN_Start+0x15c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_TIMEx_PWMN_Start+0x160>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d115      	bne.n	8003b0c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <HAL_TIMEx_PWMN_Start+0x164>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d015      	beq.n	8003b1e <HAL_TIMEx_PWMN_Start+0x142>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d011      	beq.n	8003b1e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	e008      	b.n	8003b1e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e000      	b.n	8003b20 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	00010007 	.word	0x00010007

08003b44 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f960 	bl	8003e1c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <HAL_TIMEx_PWMN_Stop+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIMEx_PWMN_Stop+0x48>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a1a      	ldr	r2, [r3, #32]
 8003b92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10f      	bne.n	8003bbc <HAL_TIMEx_PWMN_Stop+0x78>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_TIMEx_PWMN_Stop+0x78>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <HAL_TIMEx_PWMN_Stop+0x88>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bca:	e013      	b.n	8003bf4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d104      	bne.n	8003bdc <HAL_TIMEx_PWMN_Stop+0x98>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bda:	e00b      	b.n	8003bf4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d104      	bne.n	8003bec <HAL_TIMEx_PWMN_Stop+0xa8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bea:	e003      	b.n	8003bf4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e065      	b.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8e:	d013      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a18      	ldr	r2, [pc, #96]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40014000 	.word	0x40014000

08003d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e073      	b.n	8003e08 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d11c      	bne.n	8003df6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40013400 	.word	0x40013400

08003e1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	2204      	movs	r2, #4
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	401a      	ands	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e042      	b.n	8003efe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd f8b8 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	@ 0x24
 8003e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 faf5 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f826 	bl	8003f08 <UART_SetConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e01b      	b.n	8003efe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fb74 	bl	80045e4 <UART_CheckIdleState>
 8003efc:	4603      	mov	r3, r0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f0c:	b08c      	sub	sp, #48	@ 0x30
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4bab      	ldr	r3, [pc, #684]	@ (80041e4 <UART_SetConfig+0x2dc>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4aa0      	ldr	r2, [pc, #640]	@ (80041e8 <UART_SetConfig+0x2e0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003f7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	f023 010f 	bic.w	r1, r3, #15
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a91      	ldr	r2, [pc, #580]	@ (80041ec <UART_SetConfig+0x2e4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d125      	bne.n	8003ff8 <UART_SetConfig+0xf0>
 8003fac:	4b90      	ldr	r3, [pc, #576]	@ (80041f0 <UART_SetConfig+0x2e8>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81a      	bhi.n	8003ff0 <UART_SetConfig+0xe8>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <UART_SetConfig+0xb8>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fe1 	.word	0x08003fe1
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e0d6      	b.n	8004186 <UART_SetConfig+0x27e>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e0d2      	b.n	8004186 <UART_SetConfig+0x27e>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe6:	e0ce      	b.n	8004186 <UART_SetConfig+0x27e>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fee:	e0ca      	b.n	8004186 <UART_SetConfig+0x27e>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff6:	e0c6      	b.n	8004186 <UART_SetConfig+0x27e>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80041f4 <UART_SetConfig+0x2ec>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d138      	bne.n	8004074 <UART_SetConfig+0x16c>
 8004002:	4b7b      	ldr	r3, [pc, #492]	@ (80041f0 <UART_SetConfig+0x2e8>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d82d      	bhi.n	800406c <UART_SetConfig+0x164>
 8004010:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <UART_SetConfig+0x110>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800404d 	.word	0x0800404d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800406d 	.word	0x0800406d
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800406d 	.word	0x0800406d
 8004034:	0800406d 	.word	0x0800406d
 8004038:	08004055 	.word	0x08004055
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800406d 	.word	0x0800406d
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004065 	.word	0x08004065
 800404c:	2300      	movs	r3, #0
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004052:	e098      	b.n	8004186 <UART_SetConfig+0x27e>
 8004054:	2302      	movs	r3, #2
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e094      	b.n	8004186 <UART_SetConfig+0x27e>
 800405c:	2304      	movs	r3, #4
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004062:	e090      	b.n	8004186 <UART_SetConfig+0x27e>
 8004064:	2308      	movs	r3, #8
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406a:	e08c      	b.n	8004186 <UART_SetConfig+0x27e>
 800406c:	2310      	movs	r3, #16
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004072:	e088      	b.n	8004186 <UART_SetConfig+0x27e>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5f      	ldr	r2, [pc, #380]	@ (80041f8 <UART_SetConfig+0x2f0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d125      	bne.n	80040ca <UART_SetConfig+0x1c2>
 800407e:	4b5c      	ldr	r3, [pc, #368]	@ (80041f0 <UART_SetConfig+0x2e8>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004088:	2b30      	cmp	r3, #48	@ 0x30
 800408a:	d016      	beq.n	80040ba <UART_SetConfig+0x1b2>
 800408c:	2b30      	cmp	r3, #48	@ 0x30
 800408e:	d818      	bhi.n	80040c2 <UART_SetConfig+0x1ba>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d00a      	beq.n	80040aa <UART_SetConfig+0x1a2>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d814      	bhi.n	80040c2 <UART_SetConfig+0x1ba>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x19a>
 800409c:	2b10      	cmp	r3, #16
 800409e:	d008      	beq.n	80040b2 <UART_SetConfig+0x1aa>
 80040a0:	e00f      	b.n	80040c2 <UART_SetConfig+0x1ba>
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a8:	e06d      	b.n	8004186 <UART_SetConfig+0x27e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b0:	e069      	b.n	8004186 <UART_SetConfig+0x27e>
 80040b2:	2304      	movs	r3, #4
 80040b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b8:	e065      	b.n	8004186 <UART_SetConfig+0x27e>
 80040ba:	2308      	movs	r3, #8
 80040bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c0:	e061      	b.n	8004186 <UART_SetConfig+0x27e>
 80040c2:	2310      	movs	r3, #16
 80040c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c8:	e05d      	b.n	8004186 <UART_SetConfig+0x27e>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a4b      	ldr	r2, [pc, #300]	@ (80041fc <UART_SetConfig+0x2f4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d125      	bne.n	8004120 <UART_SetConfig+0x218>
 80040d4:	4b46      	ldr	r3, [pc, #280]	@ (80041f0 <UART_SetConfig+0x2e8>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040de:	2bc0      	cmp	r3, #192	@ 0xc0
 80040e0:	d016      	beq.n	8004110 <UART_SetConfig+0x208>
 80040e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040e4:	d818      	bhi.n	8004118 <UART_SetConfig+0x210>
 80040e6:	2b80      	cmp	r3, #128	@ 0x80
 80040e8:	d00a      	beq.n	8004100 <UART_SetConfig+0x1f8>
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d814      	bhi.n	8004118 <UART_SetConfig+0x210>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <UART_SetConfig+0x1f0>
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	d008      	beq.n	8004108 <UART_SetConfig+0x200>
 80040f6:	e00f      	b.n	8004118 <UART_SetConfig+0x210>
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e042      	b.n	8004186 <UART_SetConfig+0x27e>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e03e      	b.n	8004186 <UART_SetConfig+0x27e>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410e:	e03a      	b.n	8004186 <UART_SetConfig+0x27e>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004116:	e036      	b.n	8004186 <UART_SetConfig+0x27e>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411e:	e032      	b.n	8004186 <UART_SetConfig+0x27e>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a30      	ldr	r2, [pc, #192]	@ (80041e8 <UART_SetConfig+0x2e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d12a      	bne.n	8004180 <UART_SetConfig+0x278>
 800412a:	4b31      	ldr	r3, [pc, #196]	@ (80041f0 <UART_SetConfig+0x2e8>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004138:	d01a      	beq.n	8004170 <UART_SetConfig+0x268>
 800413a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800413e:	d81b      	bhi.n	8004178 <UART_SetConfig+0x270>
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004144:	d00c      	beq.n	8004160 <UART_SetConfig+0x258>
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800414a:	d815      	bhi.n	8004178 <UART_SetConfig+0x270>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <UART_SetConfig+0x250>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004154:	d008      	beq.n	8004168 <UART_SetConfig+0x260>
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x270>
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0x27e>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e00e      	b.n	8004186 <UART_SetConfig+0x27e>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416e:	e00a      	b.n	8004186 <UART_SetConfig+0x27e>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004176:	e006      	b.n	8004186 <UART_SetConfig+0x27e>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417e:	e002      	b.n	8004186 <UART_SetConfig+0x27e>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <UART_SetConfig+0x2e0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	f040 80a8 	bne.w	80042e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004192:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004196:	2b08      	cmp	r3, #8
 8004198:	d834      	bhi.n	8004204 <UART_SetConfig+0x2fc>
 800419a:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <UART_SetConfig+0x298>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	08004205 	.word	0x08004205
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	08004205 	.word	0x08004205
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	08004205 	.word	0x08004205
 80041b8:	08004205 	.word	0x08004205
 80041bc:	08004205 	.word	0x08004205
 80041c0:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe f8fa 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80041c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ca:	e021      	b.n	8004210 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <UART_SetConfig+0x2f8>)
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041d0:	e01e      	b.n	8004210 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fe f887 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80041d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041d8:	e01a      	b.n	8004210 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041e0:	e016      	b.n	8004210 <UART_SetConfig+0x308>
 80041e2:	bf00      	nop
 80041e4:	cfff69f3 	.word	0xcfff69f3
 80041e8:	40008000 	.word	0x40008000
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	40004c00 	.word	0x40004c00
 8004200:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800420e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 812a 	beq.w	800446c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	4a9e      	ldr	r2, [pc, #632]	@ (8004498 <UART_SetConfig+0x590>)
 800421e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004222:	461a      	mov	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	fbb3 f3f2 	udiv	r3, r3, r2
 800422a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	429a      	cmp	r2, r3
 800423a:	d305      	bcc.n	8004248 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	d903      	bls.n	8004250 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800424e:	e10d      	b.n	800446c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	2200      	movs	r2, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	60fa      	str	r2, [r7, #12]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	4a8e      	ldr	r2, [pc, #568]	@ (8004498 <UART_SetConfig+0x590>)
 800425e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004262:	b29b      	uxth	r3, r3
 8004264:	2200      	movs	r2, #0
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004272:	f7fc fadb 	bl	800082c <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	020b      	lsls	r3, r1, #8
 8004288:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800428c:	0202      	lsls	r2, r0, #8
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	6849      	ldr	r1, [r1, #4]
 8004292:	0849      	lsrs	r1, r1, #1
 8004294:	2000      	movs	r0, #0
 8004296:	460c      	mov	r4, r1
 8004298:	4605      	mov	r5, r0
 800429a:	eb12 0804 	adds.w	r8, r2, r4
 800429e:	eb43 0905 	adc.w	r9, r3, r5
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	469a      	mov	sl, r3
 80042aa:	4693      	mov	fp, r2
 80042ac:	4652      	mov	r2, sl
 80042ae:	465b      	mov	r3, fp
 80042b0:	4640      	mov	r0, r8
 80042b2:	4649      	mov	r1, r9
 80042b4:	f7fc faba 	bl	800082c <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c6:	d308      	bcc.n	80042da <UART_SetConfig+0x3d2>
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ce:	d204      	bcs.n	80042da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	e0c8      	b.n	800446c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042e0:	e0c4      	b.n	800446c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d167      	bne.n	80043bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80042ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d828      	bhi.n	8004346 <UART_SetConfig+0x43e>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <UART_SetConfig+0x3f4>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	08004347 	.word	0x08004347
 800430c:	08004337 	.word	0x08004337
 8004310:	08004347 	.word	0x08004347
 8004314:	08004347 	.word	0x08004347
 8004318:	08004347 	.word	0x08004347
 800431c:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe f84c 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8004324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004326:	e014      	b.n	8004352 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004328:	f7fe f85e 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 800432c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800432e:	e010      	b.n	8004352 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <UART_SetConfig+0x594>)
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004334:	e00d      	b.n	8004352 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fd ffd5 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800433a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800433c:	e009      	b.n	8004352 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004344:	e005      	b.n	8004352 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8089 	beq.w	800446c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	4a4e      	ldr	r2, [pc, #312]	@ (8004498 <UART_SetConfig+0x590>)
 8004360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004364:	461a      	mov	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	fbb3 f3f2 	udiv	r3, r3, r2
 800436c:	005a      	lsls	r2, r3, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	441a      	add	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d916      	bls.n	80043b4 <UART_SetConfig+0x4ac>
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d212      	bcs.n	80043b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f023 030f 	bic.w	r3, r3, #15
 8004396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	8bfb      	ldrh	r3, [r7, #30]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	8bfa      	ldrh	r2, [r7, #30]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e05b      	b.n	800446c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043ba:	e057      	b.n	800446c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d828      	bhi.n	8004416 <UART_SetConfig+0x50e>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <UART_SetConfig+0x4c4>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fd ffe4 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80043f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043f6:	e014      	b.n	8004422 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fd fff6 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80043fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <UART_SetConfig+0x594>)
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fd ff6d 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800440a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004420:	bf00      	nop
    }

    if (pclk != 0U)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d021      	beq.n	800446c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	4a1a      	ldr	r2, [pc, #104]	@ (8004498 <UART_SetConfig+0x590>)
 800442e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004432:	461a      	mov	r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	fbb3 f2f2 	udiv	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	441a      	add	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b0f      	cmp	r3, #15
 8004450:	d909      	bls.n	8004466 <UART_SetConfig+0x55e>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004458:	d205      	bcs.n	8004466 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	b29a      	uxth	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e002      	b.n	800446c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2201      	movs	r2, #1
 8004470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2201      	movs	r2, #1
 8004478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004488:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	08005f04 	.word	0x08005f04
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b098      	sub	sp, #96	@ 0x60
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fc ff02 	bl	80013fc <HAL_GetTick>
 80045f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d12f      	bne.n	8004668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f88e 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004636:	653b      	str	r3, [r7, #80]	@ 0x50
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44
 8004642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e063      	b.n	8004730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d149      	bne.n	800470a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	2200      	movs	r2, #0
 8004680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f857 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	623b      	str	r3, [r7, #32]
   return(result);
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e2:	61fa      	str	r2, [r7, #28]
 80046e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	617b      	str	r3, [r7, #20]
   return(result);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e012      	b.n	8004730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3758      	adds	r7, #88	@ 0x58
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e04f      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004750:	d04b      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fc fe53 	bl	80013fc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e04e      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d037      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b80      	cmp	r3, #128	@ 0x80
 800477e:	d034      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d031      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d110      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f838 	bl	8004812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2208      	movs	r2, #8
 80047a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e029      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c4:	d111      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f81e 	bl	8004812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	429a      	cmp	r2, r3
 8004806:	d0a0      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b095      	sub	sp, #84	@ 0x54
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	61fb      	str	r3, [r7, #28]
   return(result);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e3      	bne.n	800484c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d118      	bne.n	80048be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	60bb      	str	r3, [r7, #8]
   return(result);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 0310 	bic.w	r3, r3, #16
 80048a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6979      	ldr	r1, [r7, #20]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e6      	bne.n	800488c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048d2:	bf00      	nop
 80048d4:	3754      	adds	r7, #84	@ 0x54
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e027      	b.n	8004944 <HAL_UARTEx_DisableFifoMode+0x66>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	@ 0x24
 8004900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004922:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e02d      	b.n	80049c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	@ 0x24
 8004974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f84f 	bl	8004a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e02d      	b.n	8004a40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	@ 0x24
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f811 	bl	8004a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a68:	e031      	b.n	8004ace <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	0e5b      	lsrs	r3, r3, #25
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	0f5b      	lsrs	r3, r3, #29
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a92:	7bbb      	ldrb	r3, [r7, #14]
 8004a94:	7b3a      	ldrb	r2, [r7, #12]
 8004a96:	4911      	ldr	r1, [pc, #68]	@ (8004adc <UARTEx_SetNbDataToProcess+0x94>)
 8004a98:	5c8a      	ldrb	r2, [r1, r2]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a9e:	7b3a      	ldrb	r2, [r7, #12]
 8004aa0:	490f      	ldr	r1, [pc, #60]	@ (8004ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8004aa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	7b7a      	ldrb	r2, [r7, #13]
 8004ab4:	4909      	ldr	r1, [pc, #36]	@ (8004adc <UARTEx_SetNbDataToProcess+0x94>)
 8004ab6:	5c8a      	ldrb	r2, [r1, r2]
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004abc:	7b7a      	ldrb	r2, [r7, #13]
 8004abe:	4908      	ldr	r1, [pc, #32]	@ (8004ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ac0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	08005f1c 	.word	0x08005f1c
 8004ae0:	08005f24 	.word	0x08005f24

08004ae4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af6:	2b84      	cmp	r3, #132	@ 0x84
 8004af8:	d005      	beq.n	8004b06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004afa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	3303      	adds	r3, #3
 8004b04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b18:	f000 fa5c 	bl	8004fd4 <vTaskStartScheduler>
  
  return osOK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685c      	ldr	r4, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b38:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ffcf 	bl	8004ae4 <makeFreeRtosPriority>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	9200      	str	r2, [sp, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4632      	mov	r2, r6
 8004b54:	4629      	mov	r1, r5
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 f8d2 	bl	8004d00 <xTaskCreate>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <osDelay+0x16>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e000      	b.n	8004b88 <osDelay+0x18>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f9ed 	bl	8004f68 <vTaskDelay>
  
  return osOK;
 8004b8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f103 0208 	add.w	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c50:	d103      	bne.n	8004c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e00c      	b.n	8004c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e002      	b.n	8004c68 <vListInsert+0x2e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d2f6      	bcs.n	8004c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d103      	bne.n	8004ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	@ 0x30
 8004d04:	af04      	add	r7, sp, #16
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 feaf 	bl	8005a78 <pvPortMalloc>
 8004d1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d22:	2054      	movs	r0, #84	@ 0x54
 8004d24:	f000 fea8 	bl	8005a78 <pvPortMalloc>
 8004d28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d36:	e005      	b.n	8004d44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d38:	6978      	ldr	r0, [r7, #20]
 8004d3a:	f000 ff6b 	bl	8005c14 <vPortFree>
 8004d3e:	e001      	b.n	8004d44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d013      	beq.n	8004d72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f80e 	bl	8004d82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d66:	69f8      	ldr	r0, [r7, #28]
 8004d68:	f000 f894 	bl	8004e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e002      	b.n	8004d78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d78:	69bb      	ldr	r3, [r7, #24]
	}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01f      	beq.n	8004e12 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	e012      	b.n	8004dfe <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	7819      	ldrb	r1, [r3, #0]
 8004de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	3334      	adds	r3, #52	@ 0x34
 8004de8:	460a      	mov	r2, r1
 8004dea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d9e9      	bls.n	8004dd8 <prvInitialiseNewTask+0x56>
 8004e04:	e000      	b.n	8004e08 <prvInitialiseNewTask+0x86>
			{
				break;
 8004e06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e10:	e003      	b.n	8004e1a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2b06      	cmp	r3, #6
 8004e1e:	d901      	bls.n	8004e24 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e20:	2306      	movs	r3, #6
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e2e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	2200      	movs	r2, #0
 8004e34:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fecc 	bl	8004bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	3318      	adds	r3, #24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fec7 	bl	8004bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	f1c3 0207 	rsb	r2, r3, #7
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	2200      	movs	r2, #0
 8004e64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	69b8      	ldr	r0, [r7, #24]
 8004e74:	f000 fbf2 	bl	800565c <pxPortInitialiseStack>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e9c:	f000 fd0c 	bl	80058b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <prvAddNewTaskToReadyList+0xb8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4a29      	ldr	r2, [pc, #164]	@ (8004f4c <prvAddNewTaskToReadyList+0xb8>)
 8004ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eaa:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <prvAddNewTaskToReadyList+0xbc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eb2:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <prvAddNewTaskToReadyList+0xbc>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004eb8:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <prvAddNewTaskToReadyList+0xb8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d110      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ec0:	f000 faaa 	bl	8005418 <prvInitialiseTaskLists>
 8004ec4:	e00d      	b.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ec6:	4b23      	ldr	r3, [pc, #140]	@ (8004f54 <prvAddNewTaskToReadyList+0xc0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <prvAddNewTaskToReadyList+0xbc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d802      	bhi.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004edc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <prvAddNewTaskToReadyList+0xbc>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004eea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	4a18      	ldr	r2, [pc, #96]	@ (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4a15      	ldr	r2, [pc, #84]	@ (8004f60 <prvAddNewTaskToReadyList+0xcc>)
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7ff fe6c 	bl	8004bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f1a:	f000 fcff 	bl	800591c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <prvAddNewTaskToReadyList+0xc0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f26:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <prvAddNewTaskToReadyList+0xbc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d207      	bcs.n	8004f44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000214 	.word	0x20000214
 8004f50:	20000114 	.word	0x20000114
 8004f54:	20000220 	.word	0x20000220
 8004f58:	20000230 	.word	0x20000230
 8004f5c:	2000021c 	.word	0x2000021c
 8004f60:	20000118 	.word	0x20000118
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f7a:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <vTaskDelay+0x64>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <vTaskDelay+0x32>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60bb      	str	r3, [r7, #8]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f9a:	f000 f863 	bl	8005064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 faf5 	bl	8005590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fa6:	f000 f86b 	bl	8005080 <xTaskResumeAll>
 8004faa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d107      	bne.n	8004fc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <vTaskDelay+0x68>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000023c 	.word	0x2000023c
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004fda:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <vTaskStartScheduler+0x78>)
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	491a      	ldr	r1, [pc, #104]	@ (8005050 <vTaskStartScheduler+0x7c>)
 8004fe8:	481a      	ldr	r0, [pc, #104]	@ (8005054 <vTaskStartScheduler+0x80>)
 8004fea:	f7ff fe89 	bl	8004d00 <xTaskCreate>
 8004fee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d116      	bne.n	8005024 <vTaskStartScheduler+0x50>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800500a:	4b13      	ldr	r3, [pc, #76]	@ (8005058 <vTaskStartScheduler+0x84>)
 800500c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005012:	4b12      	ldr	r3, [pc, #72]	@ (800505c <vTaskStartScheduler+0x88>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005018:	4b11      	ldr	r3, [pc, #68]	@ (8005060 <vTaskStartScheduler+0x8c>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800501e:	f000 fba7 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005022:	e00f      	b.n	8005044 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800502a:	d10b      	bne.n	8005044 <vTaskStartScheduler+0x70>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	607b      	str	r3, [r7, #4]
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <vTaskStartScheduler+0x6c>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000238 	.word	0x20000238
 8005050:	08005ee4 	.word	0x08005ee4
 8005054:	080053e9 	.word	0x080053e9
 8005058:	20000234 	.word	0x20000234
 800505c:	20000220 	.word	0x20000220
 8005060:	20000218 	.word	0x20000218

08005064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005068:	4b04      	ldr	r3, [pc, #16]	@ (800507c <vTaskSuspendAll+0x18>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4a03      	ldr	r2, [pc, #12]	@ (800507c <vTaskSuspendAll+0x18>)
 8005070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	2000023c 	.word	0x2000023c

08005080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800508e:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <xTaskResumeAll+0x118>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <xTaskResumeAll+0x2e>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ae:	f000 fc03 	bl	80058b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050b2:	4b39      	ldr	r3, [pc, #228]	@ (8005198 <xTaskResumeAll+0x118>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4a37      	ldr	r2, [pc, #220]	@ (8005198 <xTaskResumeAll+0x118>)
 80050ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050bc:	4b36      	ldr	r3, [pc, #216]	@ (8005198 <xTaskResumeAll+0x118>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d161      	bne.n	8005188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050c4:	4b35      	ldr	r3, [pc, #212]	@ (800519c <xTaskResumeAll+0x11c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05d      	beq.n	8005188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050cc:	e02e      	b.n	800512c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ce:	4b34      	ldr	r3, [pc, #208]	@ (80051a0 <xTaskResumeAll+0x120>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3318      	adds	r3, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fde6 	bl	8004cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fde1 	bl	8004cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	2201      	movs	r2, #1
 80050f0:	409a      	lsls	r2, r3
 80050f2:	4b2c      	ldr	r3, [pc, #176]	@ (80051a4 <xTaskResumeAll+0x124>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <xTaskResumeAll+0x124>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a27      	ldr	r2, [pc, #156]	@ (80051a8 <xTaskResumeAll+0x128>)
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7ff fd6d 	bl	8004bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511c:	4b23      	ldr	r3, [pc, #140]	@ (80051ac <xTaskResumeAll+0x12c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005126:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <xTaskResumeAll+0x130>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800512c:	4b1c      	ldr	r3, [pc, #112]	@ (80051a0 <xTaskResumeAll+0x120>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1cc      	bne.n	80050ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800513a:	f000 f9eb 	bl	8005514 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800513e:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <xTaskResumeAll+0x134>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800514a:	f000 f837 	bl	80051bc <xTaskIncrementTick>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005154:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <xTaskResumeAll+0x130>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3b01      	subs	r3, #1
 800515e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f1      	bne.n	800514a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005166:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <xTaskResumeAll+0x134>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800516c:	4b10      	ldr	r3, [pc, #64]	@ (80051b0 <xTaskResumeAll+0x130>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005174:	2301      	movs	r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005178:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <xTaskResumeAll+0x138>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005188:	f000 fbc8 	bl	800591c <vPortExitCritical>

	return xAlreadyYielded;
 800518c:	68bb      	ldr	r3, [r7, #8]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2000023c 	.word	0x2000023c
 800519c:	20000214 	.word	0x20000214
 80051a0:	200001d4 	.word	0x200001d4
 80051a4:	2000021c 	.word	0x2000021c
 80051a8:	20000118 	.word	0x20000118
 80051ac:	20000114 	.word	0x20000114
 80051b0:	20000228 	.word	0x20000228
 80051b4:	20000224 	.word	0x20000224
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005304 <xTaskIncrementTick+0x148>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 808f 	bne.w	80052ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005308 <xTaskIncrementTick+0x14c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005308 <xTaskIncrementTick+0x14c>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d121      	bne.n	8005228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051e4:	4b49      	ldr	r3, [pc, #292]	@ (800530c <xTaskIncrementTick+0x150>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <xTaskIncrementTick+0x4a>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xTaskIncrementTick+0x46>
 8005206:	4b41      	ldr	r3, [pc, #260]	@ (800530c <xTaskIncrementTick+0x150>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <xTaskIncrementTick+0x154>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3e      	ldr	r2, [pc, #248]	@ (800530c <xTaskIncrementTick+0x150>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4a3e      	ldr	r2, [pc, #248]	@ (8005310 <xTaskIncrementTick+0x154>)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <xTaskIncrementTick+0x158>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3301      	adds	r3, #1
 8005220:	4a3c      	ldr	r2, [pc, #240]	@ (8005314 <xTaskIncrementTick+0x158>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	f000 f976 	bl	8005514 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005228:	4b3b      	ldr	r3, [pc, #236]	@ (8005318 <xTaskIncrementTick+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d348      	bcc.n	80052c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005232:	4b36      	ldr	r3, [pc, #216]	@ (800530c <xTaskIncrementTick+0x150>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <xTaskIncrementTick+0x15c>)
 800523e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005242:	601a      	str	r2, [r3, #0]
					break;
 8005244:	e03e      	b.n	80052c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005246:	4b31      	ldr	r3, [pc, #196]	@ (800530c <xTaskIncrementTick+0x150>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d203      	bcs.n	8005266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800525e:	4a2e      	ldr	r2, [pc, #184]	@ (8005318 <xTaskIncrementTick+0x15c>)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005264:	e02e      	b.n	80052c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fd1e 	bl	8004cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3318      	adds	r3, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fd15 	bl	8004cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	2201      	movs	r2, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <xTaskIncrementTick+0x160>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	4a22      	ldr	r2, [pc, #136]	@ (800531c <xTaskIncrementTick+0x160>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <xTaskIncrementTick+0x164>)
 80052a2:	441a      	add	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7ff fca1 	bl	8004bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <xTaskIncrementTick+0x168>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d3b9      	bcc.n	8005232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c2:	e7b6      	b.n	8005232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052c4:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <xTaskIncrementTick+0x168>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ca:	4915      	ldr	r1, [pc, #84]	@ (8005320 <xTaskIncrementTick+0x164>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d901      	bls.n	80052e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052e0:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <xTaskIncrementTick+0x16c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e004      	b.n	80052f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052ee:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <xTaskIncrementTick+0x170>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a0d      	ldr	r2, [pc, #52]	@ (800532c <xTaskIncrementTick+0x170>)
 80052f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052f8:	697b      	ldr	r3, [r7, #20]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2000023c 	.word	0x2000023c
 8005308:	20000218 	.word	0x20000218
 800530c:	200001cc 	.word	0x200001cc
 8005310:	200001d0 	.word	0x200001d0
 8005314:	2000022c 	.word	0x2000022c
 8005318:	20000234 	.word	0x20000234
 800531c:	2000021c 	.word	0x2000021c
 8005320:	20000118 	.word	0x20000118
 8005324:	20000114 	.word	0x20000114
 8005328:	20000228 	.word	0x20000228
 800532c:	20000224 	.word	0x20000224

08005330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005336:	4b27      	ldr	r3, [pc, #156]	@ (80053d4 <vTaskSwitchContext+0xa4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800533e:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <vTaskSwitchContext+0xa8>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005344:	e040      	b.n	80053c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005346:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <vTaskSwitchContext+0xa8>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534c:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <vTaskSwitchContext+0xac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800535a:	7afb      	ldrb	r3, [r7, #11]
 800535c:	f1c3 031f 	rsb	r3, r3, #31
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	491f      	ldr	r1, [pc, #124]	@ (80053e0 <vTaskSwitchContext+0xb0>)
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	607b      	str	r3, [r7, #4]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <vTaskSwitchContext+0x5a>
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <vTaskSwitchContext+0xb0>)
 800539a:	4413      	add	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3308      	adds	r3, #8
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d104      	bne.n	80053be <vTaskSwitchContext+0x8e>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a07      	ldr	r2, [pc, #28]	@ (80053e4 <vTaskSwitchContext+0xb4>)
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	2000023c 	.word	0x2000023c
 80053d8:	20000228 	.word	0x20000228
 80053dc:	2000021c 	.word	0x2000021c
 80053e0:	20000118 	.word	0x20000118
 80053e4:	20000114 	.word	0x20000114

080053e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053f0:	f000 f852 	bl	8005498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <prvIdleTask+0x28>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d9f9      	bls.n	80053f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053fc:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <prvIdleTask+0x2c>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800540c:	e7f0      	b.n	80053f0 <prvIdleTask+0x8>
 800540e:	bf00      	nop
 8005410:	20000118 	.word	0x20000118
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e00c      	b.n	800543e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a12      	ldr	r2, [pc, #72]	@ (8005478 <prvInitialiseTaskLists+0x60>)
 8005430:	4413      	add	r3, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fbb0 	bl	8004b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3301      	adds	r3, #1
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b06      	cmp	r3, #6
 8005442:	d9ef      	bls.n	8005424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <prvInitialiseTaskLists+0x64>)
 8005446:	f7ff fba7 	bl	8004b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800544a:	480d      	ldr	r0, [pc, #52]	@ (8005480 <prvInitialiseTaskLists+0x68>)
 800544c:	f7ff fba4 	bl	8004b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005450:	480c      	ldr	r0, [pc, #48]	@ (8005484 <prvInitialiseTaskLists+0x6c>)
 8005452:	f7ff fba1 	bl	8004b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005456:	480c      	ldr	r0, [pc, #48]	@ (8005488 <prvInitialiseTaskLists+0x70>)
 8005458:	f7ff fb9e 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800545c:	480b      	ldr	r0, [pc, #44]	@ (800548c <prvInitialiseTaskLists+0x74>)
 800545e:	f7ff fb9b 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <prvInitialiseTaskLists+0x78>)
 8005464:	4a05      	ldr	r2, [pc, #20]	@ (800547c <prvInitialiseTaskLists+0x64>)
 8005466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005468:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <prvInitialiseTaskLists+0x7c>)
 800546a:	4a05      	ldr	r2, [pc, #20]	@ (8005480 <prvInitialiseTaskLists+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000118 	.word	0x20000118
 800547c:	200001a4 	.word	0x200001a4
 8005480:	200001b8 	.word	0x200001b8
 8005484:	200001d4 	.word	0x200001d4
 8005488:	200001e8 	.word	0x200001e8
 800548c:	20000200 	.word	0x20000200
 8005490:	200001cc 	.word	0x200001cc
 8005494:	200001d0 	.word	0x200001d0

08005498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800549e:	e019      	b.n	80054d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054a0:	f000 fa0a 	bl	80058b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a4:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <prvCheckTasksWaitingTermination+0x50>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fbfb 	bl	8004cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <prvCheckTasksWaitingTermination+0x54>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	4a0b      	ldr	r2, [pc, #44]	@ (80054ec <prvCheckTasksWaitingTermination+0x54>)
 80054be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <prvCheckTasksWaitingTermination+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <prvCheckTasksWaitingTermination+0x58>)
 80054c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ca:	f000 fa27 	bl	800591c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f810 	bl	80054f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054d4:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <prvCheckTasksWaitingTermination+0x58>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e1      	bne.n	80054a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200001e8 	.word	0x200001e8
 80054ec:	20000214 	.word	0x20000214
 80054f0:	200001fc 	.word	0x200001fc

080054f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb87 	bl	8005c14 <vPortFree>
			vPortFree( pxTCB );
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb84 	bl	8005c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <prvResetNextTaskUnblockTime+0x38>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <prvResetNextTaskUnblockTime+0x3c>)
 8005526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800552a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800552c:	e008      	b.n	8005540 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <prvResetNextTaskUnblockTime+0x38>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4a04      	ldr	r2, [pc, #16]	@ (8005550 <prvResetNextTaskUnblockTime+0x3c>)
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	200001cc 	.word	0x200001cc
 8005550:	20000234 	.word	0x20000234

08005554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800555a:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <xTaskGetSchedulerState+0x34>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005562:	2301      	movs	r3, #1
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	e008      	b.n	800557a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005568:	4b08      	ldr	r3, [pc, #32]	@ (800558c <xTaskGetSchedulerState+0x38>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005570:	2302      	movs	r3, #2
 8005572:	607b      	str	r3, [r7, #4]
 8005574:	e001      	b.n	800557a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800557a:	687b      	ldr	r3, [r7, #4]
	}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000220 	.word	0x20000220
 800558c:	2000023c 	.word	0x2000023c

08005590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800559a:	4b29      	ldr	r3, [pc, #164]	@ (8005640 <prvAddCurrentTaskToDelayedList+0xb0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055a0:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fb80 	bl	8004cac <uxListRemove>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055b2:	4b24      	ldr	r3, [pc, #144]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	2201      	movs	r2, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	4a20      	ldr	r2, [pc, #128]	@ (8005648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055d0:	d10a      	bne.n	80055e8 <prvAddCurrentTaskToDelayedList+0x58>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	481a      	ldr	r0, [pc, #104]	@ (800564c <prvAddCurrentTaskToDelayedList+0xbc>)
 80055e2:	f7ff fb06 	bl	8004bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055e6:	e026      	b.n	8005636 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055f0:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d209      	bcs.n	8005614 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005600:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b0f      	ldr	r3, [pc, #60]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7ff fb14 	bl	8004c3a <vListInsert>
}
 8005612:	e010      	b.n	8005636 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005614:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7ff fb0a 	bl	8004c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d202      	bcs.n	8005636 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005630:	4a09      	ldr	r2, [pc, #36]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6013      	str	r3, [r2, #0]
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000218 	.word	0x20000218
 8005644:	20000114 	.word	0x20000114
 8005648:	2000021c 	.word	0x2000021c
 800564c:	20000200 	.word	0x20000200
 8005650:	200001d0 	.word	0x200001d0
 8005654:	200001cc 	.word	0x200001cc
 8005658:	20000234 	.word	0x20000234

0800565c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3b04      	subs	r3, #4
 800566c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3b04      	subs	r3, #4
 800567a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b04      	subs	r3, #4
 800568a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800568c:	4a0c      	ldr	r2, [pc, #48]	@ (80056c0 <pxPortInitialiseStack+0x64>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b14      	subs	r3, #20
 8005696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b04      	subs	r3, #4
 80056a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f06f 0202 	mvn.w	r2, #2
 80056aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b20      	subs	r3, #32
 80056b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	080056c5 	.word	0x080056c5

080056c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <prvTaskExitError+0x58>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d6:	d00b      	beq.n	80056f0 <prvTaskExitError+0x2c>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <prvTaskExitError+0x28>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
}
 8005702:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005704:	bf00      	nop
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0fc      	beq.n	8005706 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20000114 	.word	0x20000114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	@ (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <xPortStartScheduler+0x124>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a47      	ldr	r2, [pc, #284]	@ (8005898 <xPortStartScheduler+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10b      	bne.n	8005798 <xPortStartScheduler+0x28>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <xPortStartScheduler+0x124>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3f      	ldr	r2, [pc, #252]	@ (800589c <xPortStartScheduler+0x12c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10b      	bne.n	80057ba <xPortStartScheduler+0x4a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60fb      	str	r3, [r7, #12]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ba:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <xPortStartScheduler+0x130>)
 80057bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	22ff      	movs	r2, #255	@ 0xff
 80057ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <xPortStartScheduler+0x134>)
 80057e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057e2:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057e4:	2207      	movs	r2, #7
 80057e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e8:	e009      	b.n	80057fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4a2d      	ldr	r2, [pc, #180]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005806:	2b80      	cmp	r3, #128	@ 0x80
 8005808:	d0ef      	beq.n	80057ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800580a:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <xPortStartScheduler+0x138>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1c3 0307 	rsb	r3, r3, #7
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00b      	beq.n	800582e <xPortStartScheduler+0xbe>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800582e:	4b1e      	ldr	r3, [pc, #120]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005838:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <xPortStartScheduler+0x138>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005840:	4a19      	ldr	r2, [pc, #100]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <xPortStartScheduler+0x13c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <xPortStartScheduler+0x13c>)
 8005852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005858:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005864:	f000 f8da 	bl	8005a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <xPortStartScheduler+0x140>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800586e:	f000 f8f9 	bl	8005a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0f      	ldr	r2, [pc, #60]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800587e:	f7ff ff63 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005882:	f7ff fd55 	bl	8005330 <vTaskSwitchContext>
	prvTaskExitError();
 8005886:	f7ff ff1d 	bl	80056c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000ed00 	.word	0xe000ed00
 8005898:	410fc271 	.word	0x410fc271
 800589c:	410fc270 	.word	0x410fc270
 80058a0:	e000e400 	.word	0xe000e400
 80058a4:	20000240 	.word	0x20000240
 80058a8:	20000244 	.word	0x20000244
 80058ac:	e000ed20 	.word	0xe000ed20
 80058b0:	2000000c 	.word	0x2000000c
 80058b4:	e000ef34 	.word	0xe000ef34

080058b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <vPortEnterCritical+0x60>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <vPortEnterCritical+0x4e>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vPortEnterCritical+0x4a>
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <vPortExitCritical+0x26>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a08      	ldr	r2, [pc, #32]	@ (800596c <vPortExitCritical+0x50>)
 800594a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800594c:	4b07      	ldr	r3, [pc, #28]	@ (800596c <vPortExitCritical+0x50>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <vPortExitCritical+0x44>
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800595e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000000c 	.word	0x2000000c

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005994:	f380 8811 	msr	BASEPRI, r0
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f7ff fcc6 	bl	8005330 <vTaskSwitchContext>
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	bc09      	pop	{r0, r3}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	f01e 0f10 	tst.w	lr, #16
 80059ba:	bf08      	it	eq
 80059bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c0:	f380 8809 	msr	PSP, r0
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst>:
 80059d0:	20000114 	.word	0x20000114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f7ff fbe3 	bl	80051bc <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <xPortSysTickHandler+0x40>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <vPortSetupTimerInterrupt+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <vPortSetupTimerInterrupt+0x3c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	@ (8005a5c <vPortSetupTimerInterrupt+0x40>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <vPortSetupTimerInterrupt+0x44>)
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010
 8005a54:	e000e018 	.word	0xe000e018
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3
 8005a60:	e000e014 	.word	0xe000e014

08005a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a74 <vPortEnableVFP+0x10>
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a6e:	6001      	str	r1, [r0, #0]
 8005a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e000ed88 	.word	0xe000ed88

08005a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	@ 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a84:	f7ff faee 	bl	8005064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a88:	4b5c      	ldr	r3, [pc, #368]	@ (8005bfc <pvPortMalloc+0x184>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a90:	f000 f924 	bl	8005cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a94:	4b5a      	ldr	r3, [pc, #360]	@ (8005c00 <pvPortMalloc+0x188>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 8095 	bne.w	8005bcc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01e      	beq.n	8005ae6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f023 0307 	bic.w	r3, r3, #7
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <pvPortMalloc+0x6e>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	617b      	str	r3, [r7, #20]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d06f      	beq.n	8005bcc <pvPortMalloc+0x154>
 8005aec:	4b45      	ldr	r3, [pc, #276]	@ (8005c04 <pvPortMalloc+0x18c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d86a      	bhi.n	8005bcc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005af6:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <pvPortMalloc+0x190>)
 8005af8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005afa:	4b43      	ldr	r3, [pc, #268]	@ (8005c08 <pvPortMalloc+0x190>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b00:	e004      	b.n	8005b0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d903      	bls.n	8005b1e <pvPortMalloc+0xa6>
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f1      	bne.n	8005b02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b1e:	4b37      	ldr	r3, [pc, #220]	@ (8005bfc <pvPortMalloc+0x184>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d051      	beq.n	8005bcc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	4413      	add	r3, r2
 8005b30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	1ad2      	subs	r2, r2, r3
 8005b42:	2308      	movs	r3, #8
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d920      	bls.n	8005b8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <pvPortMalloc+0xfc>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	613b      	str	r3, [r7, #16]
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b86:	69b8      	ldr	r0, [r7, #24]
 8005b88:	f000 f90a 	bl	8005da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <pvPortMalloc+0x18c>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	4a1b      	ldr	r2, [pc, #108]	@ (8005c04 <pvPortMalloc+0x18c>)
 8005b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <pvPortMalloc+0x18c>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <pvPortMalloc+0x194>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d203      	bcs.n	8005bae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ba6:	4b17      	ldr	r3, [pc, #92]	@ (8005c04 <pvPortMalloc+0x18c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a18      	ldr	r2, [pc, #96]	@ (8005c0c <pvPortMalloc+0x194>)
 8005bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <pvPortMalloc+0x188>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bc2:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <pvPortMalloc+0x198>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <pvPortMalloc+0x198>)
 8005bca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bcc:	f7ff fa58 	bl	8005080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <pvPortMalloc+0x17a>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <pvPortMalloc+0x176>
	return pvReturn;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3728      	adds	r7, #40	@ 0x28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000e50 	.word	0x20000e50
 8005c00:	20000e64 	.word	0x20000e64
 8005c04:	20000e54 	.word	0x20000e54
 8005c08:	20000e48 	.word	0x20000e48
 8005c0c:	20000e58 	.word	0x20000e58
 8005c10:	20000e5c 	.word	0x20000e5c

08005c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d04f      	beq.n	8005cc6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c26:	2308      	movs	r3, #8
 8005c28:	425b      	negs	r3, r3
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <vPortFree+0xbc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <vPortFree+0x46>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <vPortFree+0x66>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <vPortFree+0xbc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01e      	beq.n	8005cc6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11a      	bne.n	8005cc6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <vPortFree+0xbc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ca0:	f7ff f9e0 	bl	8005064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd4 <vPortFree+0xc0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <vPortFree+0xc0>)
 8005cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cb2:	6938      	ldr	r0, [r7, #16]
 8005cb4:	f000 f874 	bl	8005da0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cb8:	4b07      	ldr	r3, [pc, #28]	@ (8005cd8 <vPortFree+0xc4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	4a06      	ldr	r2, [pc, #24]	@ (8005cd8 <vPortFree+0xc4>)
 8005cc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cc2:	f7ff f9dd 	bl	8005080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000e64 	.word	0x20000e64
 8005cd4:	20000e54 	.word	0x20000e54
 8005cd8:	20000e60 	.word	0x20000e60

08005cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ce2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce8:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <prvHeapInit+0xac>)
 8005cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3307      	adds	r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d88 <prvHeapInit+0xac>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d14:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <prvHeapInit+0xb0>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d8c <prvHeapInit+0xb0>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d28:	2208      	movs	r2, #8
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0307 	bic.w	r3, r3, #7
 8005d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <prvHeapInit+0xb4>)
 8005d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <prvHeapInit+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d46:	4b12      	ldr	r3, [pc, #72]	@ (8005d90 <prvHeapInit+0xb4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <prvHeapInit+0xb4>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a0a      	ldr	r2, [pc, #40]	@ (8005d94 <prvHeapInit+0xb8>)
 8005d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a09      	ldr	r2, [pc, #36]	@ (8005d98 <prvHeapInit+0xbc>)
 8005d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <prvHeapInit+0xc0>)
 8005d76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d7a:	601a      	str	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000248 	.word	0x20000248
 8005d8c:	20000e48 	.word	0x20000e48
 8005d90:	20000e50 	.word	0x20000e50
 8005d94:	20000e58 	.word	0x20000e58
 8005d98:	20000e54 	.word	0x20000e54
 8005d9c:	20000e64 	.word	0x20000e64

08005da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da8:	4b28      	ldr	r3, [pc, #160]	@ (8005e4c <prvInsertBlockIntoFreeList+0xac>)
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e002      	b.n	8005db4 <prvInsertBlockIntoFreeList+0x14>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d8f7      	bhi.n	8005dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4413      	add	r3, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d108      	bne.n	8005de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	441a      	add	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d118      	bne.n	8005e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b15      	ldr	r3, [pc, #84]	@ (8005e50 <prvInsertBlockIntoFreeList+0xb0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d00d      	beq.n	8005e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e008      	b.n	8005e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <prvInsertBlockIntoFreeList+0xb0>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e003      	b.n	8005e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d002      	beq.n	8005e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000e48 	.word	0x20000e48
 8005e50:	20000e50 	.word	0x20000e50

08005e54 <memset>:
 8005e54:	4402      	add	r2, r0
 8005e56:	4603      	mov	r3, r0
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <memset+0xa>
 8005e5c:	4770      	bx	lr
 8005e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e62:	e7f9      	b.n	8005e58 <memset+0x4>

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	@ (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f000 f818 	bl	8005eac <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	08005f34 	.word	0x08005f34
 8005ea0:	08005f34 	.word	0x08005f34
 8005ea4:	08005f34 	.word	0x08005f34
 8005ea8:	08005f38 	.word	0x08005f38

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
